2023-08-28 11:56:44+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-08-28 11:56:44+0530 - sLogger - DEBUG - {'fileid': '2f3931a1-9ead-4a4f-bd4c-899c3365c954', 'filename': 'CPL FY23 Financial statements final signed  stamped.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/CPL FY23 Financial statements final signed  stamped.pdf', 'status': 'Processing'}
2023-08-28 11:56:44+0530 - sLogger - DEBUG - save file completed
2023-08-28 11:56:44+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-08-28 11:56:44+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-08-28 11:56:44+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-08-28 11:56:44+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-08-28 11:56:44+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-08-28 11:56:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:56:44+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:56:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:56:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:56:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:56:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:56:46+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:56:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:56:46+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:56:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:56:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:56:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:56:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:56:49+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:56:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:56:49+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:56:52+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:56:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:56:52+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:56:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:56:52+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:56:52+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:56:52+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:56:56+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:56:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:56:56+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:56:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:56:56+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:56:56+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:56:56+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:56:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:56:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:56:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:56:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:56:59+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:56:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:56:59+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:57:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:57:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:57:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:57:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:57:02+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:57:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:57:02+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:57:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:57:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:57:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:57:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:57:07+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:57:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:57:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:57:10+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:57:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:57:10+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:57:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:57:10+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:57:10+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:57:10+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:57:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:57:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:57:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:57:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:57:14+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:57:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:57:14+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:57:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:57:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:57:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:57:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:57:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:57:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:57:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:57:28+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:57:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:57:28+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:57:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:57:28+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:57:28+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:57:28+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:57:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:57:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:57:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:57:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:57:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:57:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:57:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:57:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:57:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:57:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:57:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:57:43+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:57:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:57:43+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:57:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:57:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:57:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:57:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:57:50+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:57:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:57:50+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:57:57+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:57:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:57:57+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:57:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:57:57+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:57:57+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:57:57+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:03+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:03+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:11+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:11+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:17+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:17+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:17+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:17+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:24+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:24+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:24+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:24+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:24+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:31+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:31+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:31+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:31+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:31+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:36+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:36+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:40+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:40+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:44+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:44+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:44+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:44+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:44+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:49+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:49+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:53+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:53+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:58:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:58:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:58:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:58:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:58:58+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:58:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:58:58+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:59:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:59:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:59:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:59:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:59:02+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:59:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:59:02+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:59:07+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:59:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:59:07+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:59:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:59:07+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:59:07+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:59:07+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:59:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:59:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:59:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:59:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:59:13+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:59:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:59:13+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:59:17+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:59:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:59:17+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:59:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:59:17+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:59:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:59:17+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:59:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:59:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:59:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:59:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:59:21+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:59:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:59:21+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:59:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:59:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:59:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:59:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:59:27+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:59:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:59:27+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:59:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:59:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:59:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:59:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:59:35+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:59:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-08-28 11:59:35+0530 - sLogger - DEBUG - filetype: pdf
2023-08-28 11:59:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-08-28 11:59:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-08-28 11:59:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-08-28 11:59:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-08-28 11:59:41+0530 - sLogger - DEBUG - function: predict completed.
2023-08-28 11:59:41+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-08-28 11:59:41+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [6, 10], 'predicted_cpl_pages': [5, 21, 22], 'predicted_ccf_pages': [8], 'filtered_cbs_pages': [6], 'filtered_cpl_pages': [5], 'filtered_ccf_pages': [8], 'month': 'march', 'status': 'Page Classification Completed'}
2023-08-28 11:59:41+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-08-28 11:59:41+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-08-28 11:59:41+0530 - sLogger - DEBUG - process file completed
2023-08-28 11:59:41+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-08-28 11:59:41+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-08-28 11:59:41+0530 - sLogger - DEBUG - TE process file started
2023-08-28 12:03:58+0530 - sLogger - DEBUG - TE Proces file completed
2023-08-28 12:03:58+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-28 12:03:58+0530 - sLogger - DEBUG - process_main_pages started
2023-08-28 12:03:58+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 12:03:58+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 12:03:58+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 12:03:58+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 12:03:58+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 12:03:58+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 12:03:58+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-28 12:03:58+0530 - sLogger - DEBUG - start_refactoring started
2023-08-28 12:03:58+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-28 12:03:58+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-28 12:03:58+0530 - sLogger - DEBUG - set_section_details started
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Intangible asset | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD current assets | score 53
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD currentassets | score 48
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD current liabilities | score 44
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD currentliabilities | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD noncurrent assets | score 55
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD noncurrentassets | score 50
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD noncurrent liabilities | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD non current assets | score 53
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD non current liabilities | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD noncurrentliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD noncurrentassets | score 50
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD noncurrentliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD equity and liabilities | score 47
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD equity | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Intangible asset | MATCH WORD equityandliabilities | score 50
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Deferred tax asset | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD current assets | score 62
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD currentassets | score 58
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD current liabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD currentliabilities | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD noncurrent assets | score 57
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD noncurrentassets | score 53
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD noncurrent liabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD non current assets | score 56
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD non current liabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD noncurrentliabilities | score 31
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD noncurrentassets | score 53
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD noncurrentliabilities | score 31
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD equity and liabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred tax asset | MATCH WORD equityandliabilities | score 26
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Goodwill | [('liabilities', 31), ('equityliabilities', 27), ('equity and liabilities', 25), ('equityandliabilities', 22), ('noncurrentliabilities', 21), ('equity liabilities', 20), ('current liabilities', 19), ('noncurrent liabilities', 19), ('equity', 15), ('currentliabilities', 12), ('noncurrent assets', 10), ('noncurrentassets', 9), ('assets', 0), ('current assets', 0), ('currentassets', 0)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD current assets | score 0
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD currentassets | score 0
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD current liabilities | score 22
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD currentliabilities | score 22
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrent assets | score 11
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrentassets | score 11
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrent liabilities | score 22
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD non current assets | score 11
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD non current liabilities | score 22
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrentliabilities | score 22
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrentassets | score 11
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrentliabilities | score 22
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD equity and liabilities | score 22
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD equity | score 14
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD equityandliabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Right of Use Assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD current assets | score 57
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD currentassets | score 50
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD current liabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD currentliabilities | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrent assets | score 56
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentassets | score 51
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrent liabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD non current assets | score 59
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD non current liabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentassets | score 51
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equity and liabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equityandliabilities | score 26
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Goods in transit | [('noncurrentassets', 37), ('assets', 35), ('equityandliabilities', 35), ('equity and liabilities', 34), ('currentassets', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('currentliabilities', 29), ('noncurrent assets', 24), ('equity liabilities', 24), ('current liabilities', 23), ('liabilities', 22), ('equity', 22), ('equityliabilities', 20), ('noncurrent liabilities', 15)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD current assets | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD currentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD current liabilities | score 29
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD currentliabilities | score 29
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD noncurrent assets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD noncurrentassets | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD noncurrent liabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD non current assets | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD non current liabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD noncurrentliabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD noncurrentassets | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD noncurrentliabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD equity and liabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Goods in transit | MATCH WORD equityandliabilities | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Trade receivables | [('equityandliabilities', 43), ('currentassets', 42), ('noncurrentassets', 37), ('equity', 33), ('current assets', 32), ('equity liabilities', 32), ('current liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('equity and liabilities', 28), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrent assets', 24), ('noncurrent liabilities', 23), ('liabilities', 22)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD current assets | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD currentassets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD current liabilities | score 50
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD currentliabilities | score 51
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD noncurrent assets | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD noncurrentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD noncurrent liabilities | score 46
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD non current assets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD non current liabilities | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD noncurrentliabilities | score 47
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD noncurrentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD noncurrentliabilities | score 47
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD equity and liabilities | score 51
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade receivables | MATCH WORD equityandliabilities | score 49
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Other receivables and prepayments | [('equity and liabilities', 40), ('noncurrentassets', 37), ('noncurrentliabilities', 34), ('current assets', 33), ('currentassets', 29), ('noncurrent assets', 28), ('current liabilities', 27), ('noncurrent liabilities', 27), ('currentliabilities', 25), ('equityandliabilities', 24), ('equity liabilities', 22), ('equityliabilities', 19), ('assets', 14), ('liabilities', 14), ('equity', 14)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD current assets | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD currentassets | score 46
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD current liabilities | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD currentliabilities | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD noncurrent assets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD noncurrentassets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD noncurrent liabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD non current assets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD non current liabilities | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD noncurrentliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD noncurrentassets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD noncurrentliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD equity and liabilities | score 86
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other receivables and prepayments | MATCH WORD equityandliabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Income tax receivable | [('noncurrentassets', 39), ('currentassets', 36), ('equity and liabilities', 36), ('noncurrentliabilities', 36), ('current liabilities', 33), ('currentliabilities', 32), ('equityandliabilities', 30), ('current assets', 28), ('equity liabilities', 28), ('equity', 27), ('noncurrent liabilities', 27), ('equityliabilities', 25), ('noncurrent assets', 21), ('assets', 19), ('liabilities', 18)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD current assets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD currentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD current liabilities | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD currentliabilities | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrent assets | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrent liabilities | score 47
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD non current assets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD non current liabilities | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrentliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD noncurrentliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD equity and liabilities | score 42
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax receivable | MATCH WORD equityandliabilities | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Derivative financial instruments | [('noncurrentliabilities', 39), ('current assets', 38), ('noncurrentassets', 36), ('equity and liabilities', 34), ('currentassets', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('equity liabilities', 32), ('currentliabilities', 30), ('equityandliabilities', 29), ('assets', 28), ('current liabilities', 26), ('liabilities', 20), ('equity', 20), ('equityliabilities', 19)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD current assets | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD currentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD current liabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD currentliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrent assets | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrent liabilities | score 46
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD non current assets | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD non current liabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equity and liabilities | score 48
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equity | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equityandliabilities | score 46
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Share capital | [('current assets', 42), ('assets', 38), ('equity and liabilities', 36), ('currentassets', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('current liabilities', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('equityandliabilities', 27), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('equityliabilities', 21)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current assets | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current liabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentliabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent assets | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent liabilities | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current assets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current liabilities | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity and liabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equityandliabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Interestbearing borrowings | [('noncurrentassets', 41), ('currentassets', 39), ('noncurrentliabilities', 32), ('current liabilities', 30), ('noncurrent liabilities', 30), ('currentliabilities', 29), ('current assets', 25), ('noncurrent assets', 25), ('equity and liabilities', 22), ('equityandliabilities', 20), ('equity liabilities', 19), ('assets', 17), ('liabilities', 16), ('equity', 16), ('equityliabilities', 15)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD current assets | score 31
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD currentassets | score 28
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD current liabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD currentliabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrent assets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrent liabilities | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD non current assets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD non current liabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrentliabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrentliabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD equity and liabilities | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD equityandliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Lease Liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD current assets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD currentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD current liabilities | score 59
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD currentliabilities | score 55
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrent assets | score 31
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrentassets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrent liabilities | score 54
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD non current assets | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD non current liabilities | score 60
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrentliabilities | score 50
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrentassets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD noncurrentliabilities | score 50
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD equity and liabilities | score 59
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD equity | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability | MATCH WORD equityandliabilities | score 57
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Trade payables | [('noncurrent liabilities', 38), ('liabilities', 33), ('current assets', 32), ('equity and liabilities', 28), ('equityandliabilities', 26), ('currentassets', 25), ('assets', 24), ('noncurrent assets', 24), ('equity liabilities', 24), ('current liabilities', 23), ('noncurrentassets', 22), ('equityliabilities', 20), ('currentliabilities', 19), ('noncurrentliabilities', 17), ('equity', 11)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD current assets | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD currentassets | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD current liabilities | score 48
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD currentliabilities | score 44
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD noncurrent assets | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD noncurrentassets | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD noncurrent liabilities | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD non current assets | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD non current liabilities | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD noncurrentliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD noncurrentassets | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD noncurrentliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD equity and liabilities | score 50
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Trade payables | MATCH WORD equityandliabilities | score 47
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Income tax payable | [('liabilities', 36), ('equity liabilities', 34), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equity and liabilities', 30), ('equityandliabilities', 30), ('noncurrentassets', 26), ('equityliabilities', 25), ('current assets', 21), ('currentassets', 21), ('noncurrentliabilities', 21), ('assets', 19), ('equity', 18), ('currentliabilities', 16), ('noncurrent assets', 14)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD current assets | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD currentassets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD current liabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD currentliabilities | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrent assets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrentassets | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrent liabilities | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD non current assets | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD non current liabilities | score 44
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrentliabilities | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrentassets | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD noncurrentliabilities | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD equity and liabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Income tax payable | MATCH WORD equityandliabilities | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Derivative financial instruments | [('noncurrentliabilities', 39), ('current assets', 38), ('noncurrentassets', 36), ('equity and liabilities', 34), ('currentassets', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('equity liabilities', 32), ('currentliabilities', 30), ('equityandliabilities', 29), ('assets', 28), ('current liabilities', 26), ('liabilities', 20), ('equity', 20), ('equityliabilities', 19)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD current assets | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD currentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD current liabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD currentliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrent assets | score 37
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrent liabilities | score 46
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD non current assets | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD non current liabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD noncurrentliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equity and liabilities | score 48
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equity | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Derivative financial instruments | MATCH WORD equityandliabilities | score 46
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Other payables | [('equity liabilities', 40), ('current liabilities', 38), ('equityandliabilities', 35), ('equity and liabilities', 34), ('liabilities', 33), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('noncurrent liabilities', 23), ('noncurrentassets', 22), ('currentliabilities', 19), ('currentassets', 17), ('current assets', 16), ('noncurrent assets', 16), ('assets', 12), ('equity', 11)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD current assets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD currentassets | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD current liabilities | score 42
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD currentliabilities | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD noncurrent assets | score 39
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD noncurrentassets | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD noncurrent liabilities | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD non current assets | score 38
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD non current liabilities | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD noncurrentassets | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD equity and liabilities | score 44
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Other payables | MATCH WORD equityandliabilities | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Interestbearing borrowings | [('noncurrentassets', 41), ('currentassets', 39), ('noncurrentliabilities', 32), ('current liabilities', 30), ('noncurrent liabilities', 30), ('currentliabilities', 29), ('current assets', 25), ('noncurrent assets', 25), ('equity and liabilities', 22), ('equityandliabilities', 20), ('equity liabilities', 19), ('assets', 17), ('liabilities', 16), ('equity', 16), ('equityliabilities', 15)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD current assets | score 31
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD currentassets | score 28
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD current liabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD currentliabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrent assets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrent liabilities | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD non current assets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD non current liabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrentliabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrentassets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD noncurrentliabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD equity and liabilities | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Interestbearing borrowings | MATCH WORD equityandliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Amounts due to related parties | [('current assets', 46), ('equity and liabilities', 46), ('noncurrentassets', 43), ('noncurrentliabilities', 41), ('current liabilities', 39), ('currentassets', 35), ('noncurrent assets', 34), ('equity liabilities', 34), ('noncurrent liabilities', 33), ('currentliabilities', 32), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equity', 21), ('equityliabilities', 20)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD current assets | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD currentassets | score 41
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD current liabilities | score 42
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD currentliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD noncurrent assets | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD noncurrentassets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD noncurrent liabilities | score 46
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD non current assets | score 46
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD non current liabilities | score 49
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD noncurrentliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD noncurrentassets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD noncurrentliabilities | score 43
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD equity and liabilities | score 42
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Amounts due to related parties | MATCH WORD equityandliabilities | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Deferred income | [('noncurrent assets', 33), ('equity and liabilities', 29), ('equityandliabilities', 27), ('current assets', 25), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('noncurrent liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('currentassets', 17), ('noncurrentliabilities', 17), ('noncurrentassets', 15), ('assets', 12), ('liabilities', 12)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD current assets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD currentassets | score 36
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD current liabilities | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD currentliabilities | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrent assets | score 31
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrentassets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrent liabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD non current assets | score 40
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD non current liabilities | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrentliabilities | score 28
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrentassets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD noncurrentliabilities | score 28
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD equity and liabilities | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Deferred income | MATCH WORD equityandliabilities | score 23
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Lease Liability Current | [('current liabilities', 85), ('currentliabilities', 64), ('currentassets', 58), ('noncurrentliabilities', 58), ('equity and liabilities', 56), ('equity liabilities', 56), ('noncurrentassets', 53), ('liabilities', 48), ('current assets', 44), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('noncurrent assets', 25), ('equity', 24), ('assets', 17)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD current assets | score 86
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD currentassets | score 66
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD current liabilities | score 72
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD currentliabilities | score 69
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD noncurrent assets | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD noncurrentassets | score 53
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD noncurrent liabilities | score 49
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD non current assets | score 56
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD non current liabilities | score 66
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD noncurrentliabilities | score 65
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD noncurrentassets | score 53
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD noncurrentliabilities | score 65
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD equity and liabilities | score 53
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD equity | score 45
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Lease Liability Current | MATCH WORD equityandliabilities | score 51
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-28 12:03:58+0530 - sLogger - DEBUG - Total equity and liabilities | [('equity and liabilities', 85), ('equity liabilities', 72), ('current liabilities', 49), ('equityliabilities', 45), ('noncurrent liabilities', 43), ('liabilities', 41), ('equity', 41), ('equityandliabilities', 41), ('noncurrentliabilities', 29), ('current assets', 28), ('noncurrent assets', 28), ('noncurrentassets', 26), ('currentliabilities', 25), ('currentassets', 23), ('assets', 21)]
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD current assets | score 32
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD currentassets | score 28
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD current liabilities | score 69
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD currentliabilities | score 62
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrent assets | score 31
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrentassets | score 28
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrent liabilities | score 64
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD non current assets | score 35
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD non current liabilities | score 63
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrentliabilities | score 57
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrentassets | score 28
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD noncurrentliabilities | score 57
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD equity and liabilities | score 95
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD equity | score 90
2023-08-28 12:03:58+0530 - sLogger - DEBUG - particular_text Total equity and liabilities | MATCH WORD equityandliabilities | score 83
2023-08-28 12:03:58+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-28 12:03:58+0530 - sLogger - DEBUG - set_section_details started
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from: | operating profit before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds utilised for: | operating profit before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid related to lease liabilities | adjustments for increase decrease in operating liabilities
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for short term and variable leases | operating profit before changes in assets and liabilities
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax paid | changes in working capital
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flow (used in)/from operating activities | operating cash flow before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from: | operating profit before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Sale of property, plant and equipment | changes in operating assets and liabilities
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds utilised for: | operating profit before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Business Acquisition | working capital adjustments
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase ofi intangible asset | changes in assets liabilities
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing activities | changes in working capital
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from: | operating profit before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Borrowings | operating profit before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Issue of Shares | changes in working capital
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds utilised for: | operating profit before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of borrowings | operating profit before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Principal payments for lease liabilites | operating profit before changes in assets and liabilities
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends to shareholder | movements in working capital
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from financing activities | operating cash flow before working capital changes
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (decrease/increase cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 1 April | changes in operating assets and liabilities
2023-08-28 12:03:58+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at 31 March | changes in operating assets and liabilities
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'value'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured inside inner try block: cannot unpack non-iterable NoneType object
2023-08-28 12:04:00+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-28 12:04:00+0530 - sLogger - ERROR - error occured: 'year'
2023-08-28 12:04:00+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset ', ' Term deposit']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), (' Cash', 44), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits ', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits ', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24), (' Cash', 7)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = intangible asset , res_fuzz_match = [('cash asset', 64), ('cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and bank balances', 31), ('cash and short term deposits', 31), ('Cash and short term deposits ', 31), ('other bank balances', 28), (' Cash', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits ', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), ('other bank balances', 25), ('cash and bank balances', 23), (' Cash', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('cash and cash equivalents', 21), ('cash and bank balances', 15), ('bank balances other than cash and cash equivalents', 12), ('bank balances other than above', 12), ('cash and short term deposits', 12), ('Cash and short term deposits ', 12), ('other bank balances', 8), ('cash asset', 0), (' Cash', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 43), ('Cash and short term deposits ', 43), ('cash and cash equivalents', 33), (' Cash', 32), ('other bank balances', 25), ('bank balances other than cash and cash equivalents', 24), ('cash and bank balances', 23), ('bank balances other than above', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits ', ' Cash'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), (' Cash', 44), ('cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits ', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('other bank balances', 44), ('cash and short term deposits', 43), ('Cash and short term deposits ', 43), ('bank balances other than cash and cash equivalents', 41), ('cash and cash equivalents', 40), ('bank balances other than above', 39), ('cash and bank balances', 36), ('cash asset', 24), (' Cash', 7)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = intangible asset , res_fuzz_match = [('cash asset', 64), ('cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and bank balances', 31), ('cash and short term deposits', 31), ('Cash and short term deposits ', 31), ('other bank balances', 28), (' Cash', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 38), ('Cash and short term deposits ', 38), ('bank balances other than cash and cash equivalents', 34), ('cash and cash equivalents', 33), ('bank balances other than above', 33), ('other bank balances', 25), ('cash and bank balances', 23), (' Cash', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('cash and cash equivalents', 21), ('cash and bank balances', 15), ('bank balances other than cash and cash equivalents', 12), ('bank balances other than above', 12), ('cash and short term deposits', 12), ('Cash and short term deposits ', 12), ('other bank balances', 8), ('cash asset', 0), (' Cash', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('cash asset', 56), ('cash and short term deposits', 43), ('Cash and short term deposits ', 43), ('cash and cash equivalents', 33), (' Cash', 32), ('other bank balances', 25), ('bank balances other than cash and cash equivalents', 24), ('cash and bank balances', 23), ('bank balances other than above', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['inventories ', ' Contract assets']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' spare parts at cost ', ' parts and accessories (at cost) ', ' stock in transit ', ' Stock in transit at cost ', ' allowance for obsolescence ', ' Finished goods in transit']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['inventories ', ' Contract assets'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' Contract assets', 100), ('inventories ', 40)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' Contract assets', 43), ('inventories ', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = intangible asset , res_fuzz_match = [(' Contract assets', 75), ('inventories ', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' Contract assets', 57), ('inventories ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('inventories ', 29), (' Contract assets', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' Contract assets', 50), ('inventories ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['Assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['inventories ', ' Contract assets'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' Contract assets', 100), ('inventories ', 40)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' Contract assets', 43), ('inventories ', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = intangible asset , res_fuzz_match = [(' Contract assets', 75), ('inventories ', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' Contract assets', 57), ('inventories ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('inventories ', 29), (' Contract assets', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' Contract assets', 50), ('inventories ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['Assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables ']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables '] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables ', 22), (' prepayments ', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade and other receivables ', 43), (' other current assets ', 42), (' other financial assets ', 42), ('other assets ', 40), (' other current financial assets ', 39), (' prepayments ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = intangible asset , res_fuzz_match = [(' other financial assets ', 65), ('other assets ', 61), (' other current assets ', 52), (' other current financial assets ', 51), (' trade and other receivables ', 35), (' prepayments ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('other assets ', 62), (' other current assets ', 53), (' other financial assets ', 53), (' other current financial assets ', 48), (' trade and other receivables ', 43), (' prepayments ', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' trade and other receivables ', 14), ('other assets ', 11), (' other current assets ', 8), (' other financial assets ', 8), (' other current financial assets ', 6), (' prepayments ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 59), (' other financial assets ', 53), (' other current financial assets ', 48), (' trade and other receivables ', 38), (' prepayments ', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables '] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 42), (' other financial assets ', 42), (' other current financial assets ', 31), (' trade and other receivables ', 22), (' prepayments ', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade and other receivables ', 43), (' other current assets ', 42), (' other financial assets ', 42), ('other assets ', 40), (' other current financial assets ', 39), (' prepayments ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = intangible asset , res_fuzz_match = [(' other financial assets ', 65), ('other assets ', 61), (' other current assets ', 52), (' other current financial assets ', 51), (' trade and other receivables ', 35), (' prepayments ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [('other assets ', 62), (' other current assets ', 53), (' other financial assets ', 53), (' other current financial assets ', 48), (' trade and other receivables ', 43), (' prepayments ', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' trade and other receivables ', 14), ('other assets ', 11), (' other current assets ', 8), (' other financial assets ', 8), (' other current financial assets ', 6), (' prepayments ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('other assets ', 62), (' other current assets ', 59), (' other financial assets ', 53), (' other current financial assets ', 48), (' trade and other receivables ', 38), (' prepayments ', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' Restricted deposits ', 29), (' Capitalised contract cost ', 29), (' trade and other receivables ', 22), (' Income tax receivable', 19), (' income tax receivable from related parties ', 16), (' Income tax refund due ', 16), (' deferred operating expenditure ', 15), (' Other investment including derivatives ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure ', 49), (' Restricted deposits ', 45), (' Other investment including derivatives ', 45), (' trade and other receivables ', 43), ('other current assets ', 42), (' other financial assets ', 42), (' other assets ', 40), (' income tax receivable from related parties ', 39), (' Income tax refund due ', 36), (' Capitalised contract cost ', 34), (' financial assets ', 32), (' Income tax receivable', 30), (' biological assets ', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = intangible asset , res_fuzz_match = [(' financial assets ', 80), (' biological assets ', 67), (' other financial assets ', 65), (' other assets ', 61), ('other current assets ', 52), (' Income tax refund due ', 38), (' Restricted deposits ', 36), (' trade and other receivables ', 35), (' Capitalised contract cost ', 34), (' Income tax receivable', 29), (' income tax receivable from related parties ', 27), (' Other investment including derivatives ', 27), (' deferred operating expenditure ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' other assets ', 62), (' financial assets ', 57), ('other current assets ', 53), (' other financial assets ', 53), (' Income tax refund due ', 46), (' Income tax receivable', 45), (' biological assets ', 44), (' trade and other receivables ', 43), (' income tax receivable from related parties ', 42), (' deferred operating expenditure ', 39), (' Restricted deposits ', 39), (' Capitalised contract cost ', 32), (' Other investment including derivatives ', 30)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' biological assets ', 21), (' income tax receivable from related parties ', 20), (' Other investment including derivatives ', 19), (' Restricted deposits ', 17), (' Income tax receivable', 17), (' Income tax refund due ', 15), (' deferred operating expenditure ', 14), (' trade and other receivables ', 14), (' Capitalised contract cost ', 13), (' other assets ', 11), (' financial assets ', 10), ('other current assets ', 8), (' other financial assets ', 8)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' other assets ', 62), ('other current assets ', 59), (' biological assets ', 59), (' other financial assets ', 53), (' financial assets ', 50), (' Restricted deposits ', 39), (' trade and other receivables ', 38), (' Capitalised contract cost ', 37), (' Other investment including derivatives ', 35), (' deferred operating expenditure ', 33), (' income tax receivable from related parties ', 29), (' Income tax refund due ', 29), (' Income tax receivable', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 80, 'value': 86.0, 'line_item_label': ['Intangible asset'], 'note_numbers': ['7a'], 'line_item_value': [86.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other current assets ', ' other assets ', ' financial assets ', ' income tax receivable from related parties ', ' biological assets ', ' deferred operating expenditure ', ' other financial assets ', ' trade and other receivables ', ' Restricted deposits ', ' Capitalised contract cost ', ' Income tax refund due ', ' Other investment including derivatives ', ' Income tax receivable'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' other assets ', 62), (' biological assets ', 59), (' financial assets ', 56), ('other current assets ', 42), (' other financial assets ', 42), (' Restricted deposits ', 29), (' Capitalised contract cost ', 29), (' trade and other receivables ', 22), (' Income tax receivable', 19), (' income tax receivable from related parties ', 16), (' Income tax refund due ', 16), (' deferred operating expenditure ', 15), (' Other investment including derivatives ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' deferred operating expenditure ', 49), (' Restricted deposits ', 45), (' Other investment including derivatives ', 45), (' trade and other receivables ', 43), ('other current assets ', 42), (' other financial assets ', 42), (' other assets ', 40), (' income tax receivable from related parties ', 39), (' Income tax refund due ', 36), (' Capitalised contract cost ', 34), (' financial assets ', 32), (' Income tax receivable', 30), (' biological assets ', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = intangible asset , res_fuzz_match = [(' financial assets ', 80), (' biological assets ', 67), (' other financial assets ', 65), (' other assets ', 61), ('other current assets ', 52), (' Income tax refund due ', 38), (' Restricted deposits ', 36), (' trade and other receivables ', 35), (' Capitalised contract cost ', 34), (' Income tax receivable', 29), (' income tax receivable from related parties ', 27), (' Other investment including derivatives ', 27), (' deferred operating expenditure ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' other assets ', 62), (' financial assets ', 57), ('other current assets ', 53), (' other financial assets ', 53), (' Income tax refund due ', 46), (' Income tax receivable', 45), (' biological assets ', 44), (' trade and other receivables ', 43), (' income tax receivable from related parties ', 42), (' deferred operating expenditure ', 39), (' Restricted deposits ', 39), (' Capitalised contract cost ', 32), (' Other investment including derivatives ', 30)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' biological assets ', 21), (' income tax receivable from related parties ', 20), (' Other investment including derivatives ', 19), (' Restricted deposits ', 17), (' Income tax receivable', 17), (' Income tax refund due ', 15), (' deferred operating expenditure ', 14), (' trade and other receivables ', 14), (' Capitalised contract cost ', 13), (' other assets ', 11), (' financial assets ', 10), ('other current assets ', 8), (' other financial assets ', 8)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' other assets ', 62), ('other current assets ', 59), (' biological assets ', 59), (' other financial assets ', 53), (' financial assets ', 50), (' Restricted deposits ', 39), (' trade and other receivables ', 38), (' Capitalised contract cost ', 37), (' Other investment including derivatives ', 35), (' deferred operating expenditure ', 33), (' income tax receivable from related parties ', 29), (' Income tax refund due ', 29), (' Income tax receivable', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 80, 'value': 31.0, 'line_item_label': ['Intangible asset'], 'note_numbers': ['7a'], 'line_item_value': [31.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = none at 1 april 2021 , res_fuzz_match = [(' related party disclosures', 50), (' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' related party receivable', 50), (' Income tax refund due ', 50), (' deposits', 43), (' condensate', 43), (' Deposits ', 43), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' interest receivable', 40), (' bank guarantee', 40), (' share of jv prepayments', 40), (' forward exchange contracts', 40), (' other debtors and prepayments ', 40), (' Fuel tax credits ', 40), (' Intercompany receivable ', 40), (' accrued interest receivable ', 40), (' other receivables ', 40), (' Forward exchange contracts used for hedging keyword', 40), (' lng', 33), (' accrued interest', 30), (' rental bond', 30), (' current investments', 30), (' foreign exchange forward contracts', 30), (' Capitalised contract cost ', 30), (' Debtors retention ', 30), (' Prepaid subscription ', 30), (' GST receivable ', 30), (' accrued rebates', 20), (' Accrued income ', 20), ('current', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2022 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), (' forward exchange contracts', 50), (' Income tax refund due ', 50), (' Intercompany receivable ', 50), (' other receivables ', 50), (' Forward exchange contracts used for hedging keyword', 50), (' condensate', 43), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' derivative contracts - fair value', 40), (' long service leave receivable', 40), (' other deposits receivable - related party', 40), (' interest receivable', 40), (' bank guarantee', 40), (' related party receivable', 40), (' foreign exchange forward contracts', 40), (' Capitalised contract cost ', 40), (' Fuel tax credits ', 40), (' accrued interest receivable ', 40), (' lng', 33), (' accrued interest', 30), (' rental bond', 30), (' share of jv prepayments', 30), (' current investments', 30), (' other debtors and prepayments ', 30), (' Debtors retention ', 30), (' GST receivable ', 30), (' Accrued income ', 30), (' accrued rebates', 20), (' Prepaid subscription ', 20), ('current', 14), (' deposits', 14), (' Deposits ', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = additions disposal , res_fuzz_match = [(' related party disclosures', 67), (' deposits', 57), (' Deposits ', 57), (' Capitalised contract cost ', 50), (' other deposits receivable - related party', 42), (' Prepaid subscription ', 42), (' Forward exchange contracts used for hedging keyword', 42), ('other assets', 36), (' Accrued income ', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' income tax receivable from related parties', 33), (' derivative contracts - fair value', 33), (' other receivables - related party', 33), (' amount receivable from controlling entity', 33), (' related party receivable', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' other debtors and prepayments ', 33), (' Fuel tax credits ', 33), (' Intercompany receivable ', 33), (' GST receivable ', 30), (' condensate', 29), (' rental bond', 27), (' accrued interest', 25), (' long service leave receivable', 25), (' interest receivable', 25), (' share of jv prepayments', 25), (' forward exchange contracts', 25), (' Debtors retention ', 25), (' Income tax refund due ', 25), (' accrued interest receivable ', 25), (' other receivables ', 25), (' other', 20), (' accrued rebates', 18), (' bank guarantee', 17), ('current', 0), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = additions at31 march 2023 , res_fuzz_match = [(' related party receivable', 57), (' related party disclosures', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' long service leave receivable', 43), (' deposits', 43), (' interest receivable', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' other debtors and prepayments ', 43), (' Capitalised contract cost ', 43), (' Deposits ', 43), (' accrued interest receivable ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), (' GST receivable ', 40), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' electricity derivatives at fair value', 36), (' amount receivable from controlling entity', 36), (' accrued rebates', 36), (' Income tax refund due ', 36), (' Intercompany receivable ', 36), (' other receivables ', 33), (' bank guarantee', 31), (' Debtors retention ', 31), (' accrued interest', 29), (' Prepaid subscription ', 29), (' Fuel tax credits ', 29), (' rental bond', 27), (' Accrued income ', 27), (' share of jv prepayments', 25), (' current investments', 22), ('current', 14), (' condensate', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation atl 1 april 2021 , res_fuzz_match = [(' related party disclosures', 47), (' income tax receivable from related parties', 47), (' derivative contracts - fair value', 47), (' other receivables - related party', 47), (' other deposits receivable - related party', 47), (' related party receivable', 47), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 41), (' electricity derivatives at fair value', 41), (' long service leave receivable', 41), (' amount receivable from controlling entity', 41), (' other debtors and prepayments ', 41), (' Capitalised contract cost ', 41), (' accrued interest receivable ', 41), (' other', 40), (' interest receivable', 40), (' GST receivable ', 40), (' accrued interest', 36), (' current investments', 36), (' foreign exchange forward contracts', 35), (' forward exchange contracts', 35), (' Forward exchange contracts used for hedging keyword', 35), (' lng', 33), (' Fuel tax credits ', 33), (' other receivables ', 33), (' bank guarantee', 31), (' Debtors retention ', 31), (' Prepaid subscription ', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' Income tax refund due ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), (' Accrued income ', 27)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation at31 march 2022 , res_fuzz_match = [(' related party receivable', 50), (' Capitalised contract cost ', 50), (' GST receivable ', 50), ('other assets', 45), (' accrued rebates', 45), (' related party disclosures', 44), (' income tax receivable from related parties', 44), (' derivative contracts - fair value', 44), (' long service leave receivable', 44), (' other receivables - related party', 44), (' other deposits receivable - related party', 44), (' amount receivable from controlling entity', 44), (' accrued interest receivable ', 44), (' interest receivable', 41), (' other', 40), (' electricity derivatives at fair value', 39), ('foreign exchange derivatives at fair value', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments ', 38), (' Forward exchange contracts used for hedging keyword', 38), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' share of jv prepayments', 33), (' other receivables ', 33), (' bank guarantee', 31), (' Debtors retention ', 31), (' Income tax refund due ', 31), (' Intercompany receivable ', 31), ('current', 29), (' deposits', 29), (' condensate', 29), (' Deposits ', 29), (' Fuel tax credits ', 27), (' Accrued income ', 27), (' Prepaid subscription ', 25), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation amortisation , res_fuzz_match = [(' related party disclosures', 53), (' income tax receivable from related parties', 53), (' related party receivable', 50), (' other receivables - related party', 48), (' other deposits receivable - related party', 48), (' amount receivable from controlling entity', 47), (' Capitalised contract cost ', 47), (' Forward exchange contracts used for hedging keyword', 47), ('other assets', 45), (' other receivables ', 42), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' foreign exchange forward contracts', 40), (' GST receivable ', 40), (' Debtors retention ', 38), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' Accrued income ', 36), (' electricity derivatives at fair value', 33), (' long service leave receivable', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' forward exchange contracts', 33), (' other debtors and prepayments ', 33), (' Prepaid subscription ', 33), (' Intercompany receivable ', 33), (' accrued interest receivable ', 33), (' bank guarantee', 31), ('current', 29), (' deposits', 29), (' condensate', 29), (' Deposits ', 29), (' Income tax refund due ', 27), (' Fuel tax credits ', 27), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation disposals , res_fuzz_match = [(' related party disclosures', 71), (' deposits', 57), (' Deposits ', 57), (' related party receivable', 44), (' amount receivable from controlling entity', 43), (' Capitalised contract cost ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), (' current investments', 37), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' derivative contracts - fair value', 36), (' rental bond', 36), (' foreign exchange forward contracts', 36), (' other debtors and prepayments ', 36), (' Prepaid subscription ', 36), (' Accrued income ', 36), (' accrued interest receivable ', 36), (' share of jv prepayments', 33), (' other receivables ', 33), (' GST receivable ', 30), ('current', 29), ('foreign exchange derivatives at fair value', 29), (' electricity derivatives at fair value', 29), (' other receivables - related party', 29), (' other deposits receivable - related party', 29), (' interest receivable', 29), (' condensate', 29), (' forward exchange contracts', 29), (' Income tax refund due ', 29), (' Fuel tax credits ', 29), (' Intercompany receivable ', 29), (' accrued rebates', 27), (' Debtors retention ', 23), (' long service leave receivable', 21), (' bank guarantee', 15), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation at31 march 2023 , res_fuzz_match = [(' related party receivable', 50), (' Capitalised contract cost ', 50), (' GST receivable ', 50), ('other assets', 45), (' accrued rebates', 45), (' related party disclosures', 44), (' income tax receivable from related parties', 44), (' derivative contracts - fair value', 44), (' long service leave receivable', 44), (' other receivables - related party', 44), (' other deposits receivable - related party', 44), (' amount receivable from controlling entity', 44), (' accrued interest receivable ', 44), (' interest receivable', 41), (' other', 40), (' electricity derivatives at fair value', 39), ('foreign exchange derivatives at fair value', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments ', 38), (' Forward exchange contracts used for hedging keyword', 38), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' share of jv prepayments', 33), (' other receivables ', 33), (' bank guarantee', 31), (' Debtors retention ', 31), (' Income tax refund due ', 31), (' Intercompany receivable ', 31), ('current', 29), (' deposits', 29), (' condensate', 29), (' Deposits ', 29), (' Fuel tax credits ', 27), (' Accrued income ', 27), (' Prepaid subscription ', 25), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2022 , res_fuzz_match = [(' bank guarantee', 46), (' rental bond', 45), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' other debtors and prepayments ', 42), (' related party receivable', 39), (' electricity derivatives at fair value', 38), (' long service leave receivable', 37), (' other deposits receivable - related party', 37), (' amount receivable from controlling entity', 37), (' foreign exchange forward contracts', 37), (' Intercompany receivable ', 37), (' Forward exchange contracts used for hedging keyword', 37), (' accrued rebates', 36), (' Accrued income ', 36), (' interest receivable', 33), (' lng', 33), (' related party disclosures', 32), (' other receivables - related party', 32), (' Capitalised contract cost ', 32), (' Income tax refund due ', 32), (' accrued interest receivable ', 32), (' Debtors retention ', 31), (' GST receivable ', 30), ('current', 29), (' accrued interest', 29), (' deposits', 29), (' current investments', 29), (' Deposits ', 29), ('other assets', 27), (' Fuel tax credits ', 27), (' forward exchange contracts', 26), (' share of jv prepayments', 25), (' other receivables ', 25), (' Prepaid subscription ', 24), (' other', 20), (' condensate', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [(' bank guarantee', 46), (' rental bond', 45), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' other debtors and prepayments ', 42), (' related party receivable', 39), (' electricity derivatives at fair value', 38), (' long service leave receivable', 37), (' other deposits receivable - related party', 37), (' amount receivable from controlling entity', 37), (' foreign exchange forward contracts', 37), (' Intercompany receivable ', 37), (' Forward exchange contracts used for hedging keyword', 37), (' accrued rebates', 36), (' Accrued income ', 36), (' interest receivable', 33), (' lng', 33), (' related party disclosures', 32), (' other receivables - related party', 32), (' Capitalised contract cost ', 32), (' Income tax refund due ', 32), (' accrued interest receivable ', 32), (' Debtors retention ', 31), (' GST receivable ', 30), ('current', 29), (' accrued interest', 29), (' deposits', 29), (' current investments', 29), (' Deposits ', 29), ('other assets', 27), (' Fuel tax credits ', 27), (' forward exchange contracts', 26), (' share of jv prepayments', 25), (' other receivables ', 25), (' Prepaid subscription ', 24), (' other', 20), (' condensate', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' foreign exchange forward contracts', 57), (' Capitalised contract cost ', 57), ('foreign exchange derivatives at fair value', 43), (' electricity derivatives at fair value', 43), (' related party disclosures', 43), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' other receivables - related party', 43), (' other deposits receivable - related party', 43), (' amount receivable from controlling entity', 43), (' interest receivable', 43), (' related party receivable', 43), (' share of jv prepayments', 43), (' forward exchange contracts', 43), (' Income tax refund due ', 43), (' Fuel tax credits ', 43), (' GST receivable ', 43), (' accrued interest receivable ', 43), (' other receivables ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), ('other assets', 29), (' accrued interest', 29), (' long service leave receivable', 29), (' deposits', 29), (' bank guarantee', 29), (' rental bond', 29), (' current investments', 29), (' other debtors and prepayments ', 29), (' Debtors retention ', 29), (' Prepaid subscription ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), ('current', 14), (' condensate', 14), (' accrued rebates', 14), (' Accrued income ', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = none at 1 april 2021 , res_fuzz_match = [(' related party disclosures', 50), (' income tax receivable from related parties', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' amount receivable from controlling entity', 50), (' related party receivable', 50), (' Income tax refund due ', 50), (' deposits', 43), (' condensate', 43), (' Deposits ', 43), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' interest receivable', 40), (' bank guarantee', 40), (' share of jv prepayments', 40), (' forward exchange contracts', 40), (' other debtors and prepayments ', 40), (' Fuel tax credits ', 40), (' Intercompany receivable ', 40), (' accrued interest receivable ', 40), (' other receivables ', 40), (' Forward exchange contracts used for hedging keyword', 40), (' lng', 33), (' accrued interest', 30), (' rental bond', 30), (' current investments', 30), (' foreign exchange forward contracts', 30), (' Capitalised contract cost ', 30), (' Debtors retention ', 30), (' Prepaid subscription ', 30), (' GST receivable ', 30), (' accrued rebates', 20), (' Accrued income ', 20), ('current', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2022 , res_fuzz_match = [(' income tax receivable from related parties', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), (' forward exchange contracts', 50), (' Income tax refund due ', 50), (' Intercompany receivable ', 50), (' other receivables ', 50), (' Forward exchange contracts used for hedging keyword', 50), (' condensate', 43), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' derivative contracts - fair value', 40), (' long service leave receivable', 40), (' other deposits receivable - related party', 40), (' interest receivable', 40), (' bank guarantee', 40), (' related party receivable', 40), (' foreign exchange forward contracts', 40), (' Capitalised contract cost ', 40), (' Fuel tax credits ', 40), (' accrued interest receivable ', 40), (' lng', 33), (' accrued interest', 30), (' rental bond', 30), (' share of jv prepayments', 30), (' current investments', 30), (' other debtors and prepayments ', 30), (' Debtors retention ', 30), (' GST receivable ', 30), (' Accrued income ', 30), (' accrued rebates', 20), (' Prepaid subscription ', 20), ('current', 14), (' deposits', 14), (' Deposits ', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = additions disposal , res_fuzz_match = [(' related party disclosures', 67), (' deposits', 57), (' Deposits ', 57), (' Capitalised contract cost ', 50), (' other deposits receivable - related party', 42), (' Prepaid subscription ', 42), (' Forward exchange contracts used for hedging keyword', 42), ('other assets', 36), (' Accrued income ', 36), ('foreign exchange derivatives at fair value', 33), (' electricity derivatives at fair value', 33), (' income tax receivable from related parties', 33), (' derivative contracts - fair value', 33), (' other receivables - related party', 33), (' amount receivable from controlling entity', 33), (' related party receivable', 33), (' current investments', 33), (' foreign exchange forward contracts', 33), (' other debtors and prepayments ', 33), (' Fuel tax credits ', 33), (' Intercompany receivable ', 33), (' GST receivable ', 30), (' condensate', 29), (' rental bond', 27), (' accrued interest', 25), (' long service leave receivable', 25), (' interest receivable', 25), (' share of jv prepayments', 25), (' forward exchange contracts', 25), (' Debtors retention ', 25), (' Income tax refund due ', 25), (' accrued interest receivable ', 25), (' other receivables ', 25), (' other', 20), (' accrued rebates', 18), (' bank guarantee', 17), ('current', 0), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = additions at31 march 2023 , res_fuzz_match = [(' related party receivable', 57), (' related party disclosures', 50), (' other receivables - related party', 50), (' other deposits receivable - related party', 50), (' income tax receivable from related parties', 43), (' derivative contracts - fair value', 43), (' long service leave receivable', 43), (' deposits', 43), (' interest receivable', 43), (' foreign exchange forward contracts', 43), (' forward exchange contracts', 43), (' other debtors and prepayments ', 43), (' Capitalised contract cost ', 43), (' Deposits ', 43), (' accrued interest receivable ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), (' GST receivable ', 40), ('other assets', 36), ('foreign exchange derivatives at fair value', 36), (' electricity derivatives at fair value', 36), (' amount receivable from controlling entity', 36), (' accrued rebates', 36), (' Income tax refund due ', 36), (' Intercompany receivable ', 36), (' other receivables ', 33), (' bank guarantee', 31), (' Debtors retention ', 31), (' accrued interest', 29), (' Prepaid subscription ', 29), (' Fuel tax credits ', 29), (' rental bond', 27), (' Accrued income ', 27), (' share of jv prepayments', 25), (' current investments', 22), ('current', 14), (' condensate', 14), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation atl 1 april 2021 , res_fuzz_match = [(' related party disclosures', 47), (' income tax receivable from related parties', 47), (' derivative contracts - fair value', 47), (' other receivables - related party', 47), (' other deposits receivable - related party', 47), (' related party receivable', 47), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 41), (' electricity derivatives at fair value', 41), (' long service leave receivable', 41), (' amount receivable from controlling entity', 41), (' other debtors and prepayments ', 41), (' Capitalised contract cost ', 41), (' accrued interest receivable ', 41), (' other', 40), (' interest receivable', 40), (' GST receivable ', 40), (' accrued interest', 36), (' current investments', 36), (' foreign exchange forward contracts', 35), (' forward exchange contracts', 35), (' Forward exchange contracts used for hedging keyword', 35), (' lng', 33), (' Fuel tax credits ', 33), (' other receivables ', 33), (' bank guarantee', 31), (' Debtors retention ', 31), (' Prepaid subscription ', 30), ('current', 29), (' deposits', 29), (' condensate', 29), (' Income tax refund due ', 29), (' Deposits ', 29), (' Intercompany receivable ', 29), (' Accrued income ', 27)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation at31 march 2022 , res_fuzz_match = [(' related party receivable', 50), (' Capitalised contract cost ', 50), (' GST receivable ', 50), ('other assets', 45), (' accrued rebates', 45), (' related party disclosures', 44), (' income tax receivable from related parties', 44), (' derivative contracts - fair value', 44), (' long service leave receivable', 44), (' other receivables - related party', 44), (' other deposits receivable - related party', 44), (' amount receivable from controlling entity', 44), (' accrued interest receivable ', 44), (' interest receivable', 41), (' other', 40), (' electricity derivatives at fair value', 39), ('foreign exchange derivatives at fair value', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments ', 38), (' Forward exchange contracts used for hedging keyword', 38), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' share of jv prepayments', 33), (' other receivables ', 33), (' bank guarantee', 31), (' Debtors retention ', 31), (' Income tax refund due ', 31), (' Intercompany receivable ', 31), ('current', 29), (' deposits', 29), (' condensate', 29), (' Deposits ', 29), (' Fuel tax credits ', 27), (' Accrued income ', 27), (' Prepaid subscription ', 25), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation amortisation , res_fuzz_match = [(' related party disclosures', 53), (' income tax receivable from related parties', 53), (' related party receivable', 50), (' other receivables - related party', 48), (' other deposits receivable - related party', 48), (' amount receivable from controlling entity', 47), (' Capitalised contract cost ', 47), (' Forward exchange contracts used for hedging keyword', 47), ('other assets', 45), (' other receivables ', 42), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' derivative contracts - fair value', 40), (' foreign exchange forward contracts', 40), (' GST receivable ', 40), (' Debtors retention ', 38), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' Accrued income ', 36), (' electricity derivatives at fair value', 33), (' long service leave receivable', 33), (' interest receivable', 33), (' share of jv prepayments', 33), (' forward exchange contracts', 33), (' other debtors and prepayments ', 33), (' Prepaid subscription ', 33), (' Intercompany receivable ', 33), (' accrued interest receivable ', 33), (' bank guarantee', 31), ('current', 29), (' deposits', 29), (' condensate', 29), (' Deposits ', 29), (' Income tax refund due ', 27), (' Fuel tax credits ', 27), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation disposals , res_fuzz_match = [(' related party disclosures', 71), (' deposits', 57), (' Deposits ', 57), (' related party receivable', 44), (' amount receivable from controlling entity', 43), (' Capitalised contract cost ', 43), (' Forward exchange contracts used for hedging keyword', 43), (' other', 40), (' current investments', 37), ('other assets', 36), (' accrued interest', 36), (' income tax receivable from related parties', 36), (' derivative contracts - fair value', 36), (' rental bond', 36), (' foreign exchange forward contracts', 36), (' other debtors and prepayments ', 36), (' Prepaid subscription ', 36), (' Accrued income ', 36), (' accrued interest receivable ', 36), (' share of jv prepayments', 33), (' other receivables ', 33), (' GST receivable ', 30), ('current', 29), ('foreign exchange derivatives at fair value', 29), (' electricity derivatives at fair value', 29), (' other receivables - related party', 29), (' other deposits receivable - related party', 29), (' interest receivable', 29), (' condensate', 29), (' forward exchange contracts', 29), (' Income tax refund due ', 29), (' Fuel tax credits ', 29), (' Intercompany receivable ', 29), (' accrued rebates', 27), (' Debtors retention ', 23), (' long service leave receivable', 21), (' bank guarantee', 15), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation at31 march 2023 , res_fuzz_match = [(' related party receivable', 50), (' Capitalised contract cost ', 50), (' GST receivable ', 50), ('other assets', 45), (' accrued rebates', 45), (' related party disclosures', 44), (' income tax receivable from related parties', 44), (' derivative contracts - fair value', 44), (' long service leave receivable', 44), (' other receivables - related party', 44), (' other deposits receivable - related party', 44), (' amount receivable from controlling entity', 44), (' accrued interest receivable ', 44), (' interest receivable', 41), (' other', 40), (' electricity derivatives at fair value', 39), ('foreign exchange derivatives at fair value', 38), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' other debtors and prepayments ', 38), (' Forward exchange contracts used for hedging keyword', 38), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' share of jv prepayments', 33), (' other receivables ', 33), (' bank guarantee', 31), (' Debtors retention ', 31), (' Income tax refund due ', 31), (' Intercompany receivable ', 31), ('current', 29), (' deposits', 29), (' condensate', 29), (' Deposits ', 29), (' Fuel tax credits ', 27), (' Accrued income ', 27), (' Prepaid subscription ', 25), (' lng', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2022 , res_fuzz_match = [(' bank guarantee', 46), (' rental bond', 45), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' other debtors and prepayments ', 42), (' related party receivable', 39), (' electricity derivatives at fair value', 38), (' long service leave receivable', 37), (' other deposits receivable - related party', 37), (' amount receivable from controlling entity', 37), (' foreign exchange forward contracts', 37), (' Intercompany receivable ', 37), (' Forward exchange contracts used for hedging keyword', 37), (' accrued rebates', 36), (' Accrued income ', 36), (' interest receivable', 33), (' lng', 33), (' related party disclosures', 32), (' other receivables - related party', 32), (' Capitalised contract cost ', 32), (' Income tax refund due ', 32), (' accrued interest receivable ', 32), (' Debtors retention ', 31), (' GST receivable ', 30), ('current', 29), (' accrued interest', 29), (' deposits', 29), (' current investments', 29), (' Deposits ', 29), ('other assets', 27), (' Fuel tax credits ', 27), (' forward exchange contracts', 26), (' share of jv prepayments', 25), (' other receivables ', 25), (' Prepaid subscription ', 24), (' other', 20), (' condensate', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [(' bank guarantee', 46), (' rental bond', 45), ('foreign exchange derivatives at fair value', 42), (' income tax receivable from related parties', 42), (' derivative contracts - fair value', 42), (' other debtors and prepayments ', 42), (' related party receivable', 39), (' electricity derivatives at fair value', 38), (' long service leave receivable', 37), (' other deposits receivable - related party', 37), (' amount receivable from controlling entity', 37), (' foreign exchange forward contracts', 37), (' Intercompany receivable ', 37), (' Forward exchange contracts used for hedging keyword', 37), (' accrued rebates', 36), (' Accrued income ', 36), (' interest receivable', 33), (' lng', 33), (' related party disclosures', 32), (' other receivables - related party', 32), (' Capitalised contract cost ', 32), (' Income tax refund due ', 32), (' accrued interest receivable ', 32), (' Debtors retention ', 31), (' GST receivable ', 30), ('current', 29), (' accrued interest', 29), (' deposits', 29), (' current investments', 29), (' Deposits ', 29), ('other assets', 27), (' Fuel tax credits ', 27), (' forward exchange contracts', 26), (' share of jv prepayments', 25), (' other receivables ', 25), (' Prepaid subscription ', 24), (' other', 20), (' condensate', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' derivative contracts - fair value', 60), (' amount receivable from controlling entity', 60), (' rental bond', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments ', 60), (' Capitalised contract cost ', 60), (' Forward exchange contracts used for hedging keyword', 60), (' other', 44), ('foreign exchange derivatives at fair value', 40), (' electricity derivatives at fair value', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' other receivables - related party', 40), (' other deposits receivable - related party', 40), (' deposits', 40), (' related party receivable', 40), (' Debtors retention ', 40), (' Income tax refund due ', 40), (' Fuel tax credits ', 40), (' Deposits ', 40), (' Intercompany receivable ', 40), (' lng', 33), ('current', 20), ('other assets', 20), (' accrued interest', 20), (' long service leave receivable', 20), (' interest receivable', 20), (' bank guarantee', 20), (' share of jv prepayments', 20), (' current investments', 20), (' condensate', 20), (' accrued rebates', 20), (' Prepaid subscription ', 20), (' GST receivable ', 20), (' Accrued income ', 20), (' accrued interest receivable ', 20), (' other receivables ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = none at 1 april 2021 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = additions disposal , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = additions at31 march 2023 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation atl 1 april 2021 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation at31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation amortisation , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation disposals , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation at31 march 2023 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = software , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = none at 1 april 2021 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = none at 31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = additions disposal , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = additions at31 march 2023 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation atl 1 april 2021 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation at31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation amortisation , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation disposals , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = amortisation at31 march 2023 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2022 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = net book value at 31 march 2023 , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [(' ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments ', ' Capitalised contract cost ', ' Debtors retention ', ' Prepaid subscription ', ' Income tax refund due ', ' Fuel tax credits ', ' GST receivable ', ' Deposits ', ' Intercompany receivable ', ' Accrued income ', ' accrued interest receivable ', ' other receivables ', ' Forward exchange contracts used for hedging keyword'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 12:04:01+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment ']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['depreciation', 'accumulated depreciation ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction in progress ', ' Other assets ', ' Capitalised pre stripping costs ', ' Assets under construction ', ' Mine infrastructure ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Subsea ', ' Marine ', ' Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment ', ' Property ', ' plant and equipment '] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' computer software ', ' consumer contracts ', ' mining rights ', ' water licenses']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year ', ' Interest swap']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method ', ' Other investment including derivatives'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation ']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft ', ' current ', ' obligations under finance lease ', ' bank loans']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation '] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' short-term debt ', 35), (' shortterm debt ', 35), (' bank overdraft ', 35), ('short term debt ', 33), (' interest bearing liabilites ', 32), (' Lease obligation ', 32), (' borrowings ', 27), (' loans and borrowings ', 25), (' lease liabilities ', 20), (' cash and cash equivalents ', 20), (' shortterm borrowings ', 16), ('  leases ', 15), (' cash ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [(' bank overdraft ', 38), (' loans and borrowings ', 37), (' shortterm borrowings ', 36), (' interest bearing liabilites ', 35), (' short-term debt ', 31), (' shortterm debt ', 31), ('short term debt ', 30), (' cash and cash equivalents ', 30), (' Lease obligation ', 27), (' lease liabilities ', 26), ('  leases ', 25), (' cash ', 25), (' borrowings ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [(' short-term debt ', 31), (' shortterm debt ', 31), ('short term debt ', 30), (' cash and cash equivalents ', 30), (' shortterm borrowings ', 29), (' interest bearing liabilites ', 29), (' lease liabilities ', 26), ('  leases ', 25), (' cash ', 25), (' bank overdraft ', 23), (' borrowings ', 22), (' loans and borrowings ', 22), (' Lease obligation ', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [(' cash and cash equivalents ', 50), (' bank overdraft ', 43), (' loans and borrowings ', 42), ('short term debt ', 37), (' interest bearing liabilites ', 36), (' short-term debt ', 32), (' shortterm debt ', 32), (' shortterm borrowings ', 31), (' lease liabilities ', 24), (' Lease obligation ', 24), (' borrowings ', 21), ('  leases ', 15), (' cash ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' cash and cash equivalents ', 43), (' loans and borrowings ', 32), (' interest bearing liabilites ', 32), (' bank overdraft ', 27), ('short term debt ', 26), (' shortterm borrowings ', 25), (' lease liabilities ', 22), (' short-term debt ', 20), (' shortterm debt ', 20), ('  leases ', 20), (' cash ', 20), (' borrowings ', 18), (' Lease obligation ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' interest bearing liabilites ', 39), (' short-term debt ', 37), (' shortterm debt ', 37), ('short term debt ', 36), (' shortterm borrowings ', 30), (' lease liabilities ', 29), (' cash and cash equivalents ', 27), (' loans and borrowings ', 26), (' bank overdraft ', 26), (' Lease obligation ', 24), ('  leases ', 21), (' cash ', 14), (' borrowings ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents ', 100), (' lease liabilities ', 38), ('short term debt ', 33), (' loans and borrowings ', 33), (' interest bearing liabilites ', 33), (' cash ', 32), (' short-term debt ', 29), (' shortterm debt ', 29), (' bank overdraft ', 29), (' Lease obligation ', 26), (' shortterm borrowings ', 22), ('  leases ', 16), (' borrowings ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' Lease obligation ', 50), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' cash ', 20), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' shortterm borrowings ', 63), (' interest bearing liabilites ', 59), (' borrowings ', 48), (' loans and borrowings ', 47), (' short-term debt ', 42), (' shortterm debt ', 42), ('short term debt ', 41), (' bank overdraft ', 30), (' Lease obligation ', 21), (' lease liabilities ', 20), (' cash and cash equivalents ', 20), ('  leases ', 17), (' cash ', 9)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation ', 67), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' loans and borrowings ', 31), (' cash ', 27), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 9], 'score': 100, 'value': 21846.0, 'line_item_label': ['Cash and cash equivalents', 'Lease Liability'], 'note_numbers': [nan, '18'], 'line_item_value': [5743.0, 16103.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash ', ' Lease obligation '] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' short-term debt ', 35), (' shortterm debt ', 35), (' bank overdraft ', 35), ('short term debt ', 33), (' interest bearing liabilites ', 32), (' Lease obligation ', 32), (' borrowings ', 27), (' loans and borrowings ', 25), (' lease liabilities ', 20), (' cash and cash equivalents ', 20), (' shortterm borrowings ', 16), ('  leases ', 15), (' cash ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [(' bank overdraft ', 38), (' loans and borrowings ', 37), (' shortterm borrowings ', 36), (' interest bearing liabilites ', 35), (' short-term debt ', 31), (' shortterm debt ', 31), ('short term debt ', 30), (' cash and cash equivalents ', 30), (' Lease obligation ', 27), (' lease liabilities ', 26), ('  leases ', 25), (' cash ', 25), (' borrowings ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [(' short-term debt ', 31), (' shortterm debt ', 31), ('short term debt ', 30), (' cash and cash equivalents ', 30), (' shortterm borrowings ', 29), (' interest bearing liabilites ', 29), (' lease liabilities ', 26), ('  leases ', 25), (' cash ', 25), (' bank overdraft ', 23), (' borrowings ', 22), (' loans and borrowings ', 22), (' Lease obligation ', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [(' cash and cash equivalents ', 50), (' bank overdraft ', 43), (' loans and borrowings ', 42), ('short term debt ', 37), (' interest bearing liabilites ', 36), (' short-term debt ', 32), (' shortterm debt ', 32), (' shortterm borrowings ', 31), (' lease liabilities ', 24), (' Lease obligation ', 24), (' borrowings ', 21), ('  leases ', 15), (' cash ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' cash and cash equivalents ', 43), (' loans and borrowings ', 32), (' interest bearing liabilites ', 32), (' bank overdraft ', 27), ('short term debt ', 26), (' shortterm borrowings ', 25), (' lease liabilities ', 22), (' short-term debt ', 20), (' shortterm debt ', 20), ('  leases ', 20), (' cash ', 20), (' borrowings ', 18), (' Lease obligation ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' interest bearing liabilites ', 39), (' short-term debt ', 37), (' shortterm debt ', 37), ('short term debt ', 36), (' shortterm borrowings ', 30), (' lease liabilities ', 29), (' cash and cash equivalents ', 27), (' loans and borrowings ', 26), (' bank overdraft ', 26), (' Lease obligation ', 24), ('  leases ', 21), (' cash ', 14), (' borrowings ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents ', 100), (' lease liabilities ', 38), ('short term debt ', 33), (' loans and borrowings ', 33), (' interest bearing liabilites ', 33), (' cash ', 32), (' short-term debt ', 29), (' shortterm debt ', 29), (' bank overdraft ', 29), (' Lease obligation ', 26), (' shortterm borrowings ', 22), ('  leases ', 16), (' borrowings ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' lease liabilities ', 71), (' Lease obligation ', 50), (' interest bearing liabilites ', 43), ('  leases ', 40), (' loans and borrowings ', 29), (' cash and cash equivalents ', 22), (' cash ', 20), (' borrowings ', 17), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' bank overdraft ', 10), (' shortterm borrowings ', 9)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' shortterm borrowings ', 63), (' interest bearing liabilites ', 59), (' borrowings ', 48), (' loans and borrowings ', 47), (' short-term debt ', 42), (' shortterm debt ', 42), ('short term debt ', 41), (' bank overdraft ', 30), (' Lease obligation ', 21), (' lease liabilities ', 20), (' cash and cash equivalents ', 20), ('  leases ', 17), (' cash ', 9)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities ', 100), (' Lease obligation ', 67), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' loans and borrowings ', 31), (' cash ', 27), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 9], 'score': 100, 'value': 15458.0, 'line_item_label': ['Cash and cash equivalents', 'Lease Liability'], 'note_numbers': [nan, '18'], 'line_item_value': [1386.0, 14072.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 12:04:01+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', ' payables ', ' accounts payable - trade ', ' ', ' Related party payables ', ' trade payables - related parties ', ' Trade payable due to related partiees']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('trade and other payables', 26), ('other trade payables', 22), ('trade payable', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [('trade and other payables', 35), ('trade payable', 33), ('other trade payables', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('trade payable', 50), ('other trade payables', 47), ('trade and other payables', 41)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [('trade and other payables', 71), ('other trade payables', 59), ('trade payable', 34)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 29), ('trade payable', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('trade and other payables', 39), ('other trade payables', 38), ('trade payable', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('trade and other payables', 42), ('trade payable', 30), ('other trade payables', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('trade payable', 32), ('other trade payables', 32), ('trade and other payables', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('trade and other payables', 26), ('other trade payables', 22), ('trade payable', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [('trade and other payables', 35), ('trade payable', 33), ('other trade payables', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('trade payable', 50), ('other trade payables', 47), ('trade and other payables', 41)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [('trade and other payables', 71), ('other trade payables', 59), ('trade payable', 34)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('trade and other payables', 32), ('other trade payables', 29), ('trade payable', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('trade and other payables', 39), ('other trade payables', 38), ('trade payable', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('trade and other payables', 42), ('trade payable', 30), ('other trade payables', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('trade payable', 32), ('other trade payables', 32), ('trade and other payables', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses ', ' interest accrued ', ' accruals']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('trade and other payables', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [('trade and other payables', 35)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('trade and other payables', 41)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [('trade and other payables', 71)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('trade and other payables', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('trade and other payables', 39)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('trade and other payables', 42)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('trade and other payables', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('trade and other payables', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [('trade and other payables', 35)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [('trade and other payables', 41)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [('trade and other payables', 71)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [('trade and other payables', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('trade and other payables', 39)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('trade and other payables', 42)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('trade and other payables', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('trade and other payables', 30)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' provision ', 36), ('current tax liabilities ', 33), (' income tax payable ', 33), (' tax ', 33), (' Current tax payables ', 33), (' Trade and other payables', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [(' tax ', 67), (' Trade and other payables', 42), ('current tax liabilities ', 33), (' income tax payable ', 33), (' provision ', 33), (' Current tax payables ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [(' tax ', 67), (' Trade and other payables', 50), ('current tax liabilities ', 33), (' provision ', 33), (' income tax payable ', 25), (' Current tax payables ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [(' Trade and other payables', 55), (' income tax payable ', 44), (' Current tax payables ', 44), ('current tax liabilities ', 33), (' tax ', 33), (' provision ', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' tax ', 100), (' income tax payable ', 62), ('current tax liabilities ', 44), (' Current tax payables ', 38), (' provision ', 33), (' Trade and other payables', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' tax ', 33), (' provision ', 33), (' Trade and other payables', 32), (' income tax payable ', 31), ('current tax liabilities ', 28), (' Current tax payables ', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' Trade and other payables', 48), ('current tax liabilities ', 39), (' income tax payable ', 38), (' tax ', 33), (' Current tax payables ', 33), (' provision ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' Current tax payables ', 50), (' Trade and other payables', 50), (' tax ', 33), (' provision ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' income tax payable ', 38), ('current tax liabilities ', 33), (' tax ', 33), (' provision ', 33), (' Current tax payables ', 33), (' Trade and other payables', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' Current tax payables ', 48), (' Trade and other payables', 45), (' tax ', 33), (' provision ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 100, 'value': 0.0, 'line_item_label': ['Income tax receivable', 'Liabilities'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 0.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision ', ' Current tax payables ', ' Trade and other payables'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' provision ', 36), ('current tax liabilities ', 33), (' income tax payable ', 33), (' tax ', 33), (' Current tax payables ', 33), (' Trade and other payables', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [(' tax ', 67), (' Trade and other payables', 42), ('current tax liabilities ', 33), (' income tax payable ', 33), (' provision ', 33), (' Current tax payables ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [(' tax ', 67), (' Trade and other payables', 50), ('current tax liabilities ', 33), (' provision ', 33), (' income tax payable ', 25), (' Current tax payables ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [(' Trade and other payables', 55), (' income tax payable ', 44), (' Current tax payables ', 44), ('current tax liabilities ', 33), (' tax ', 33), (' provision ', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' tax ', 100), (' income tax payable ', 62), ('current tax liabilities ', 44), (' Current tax payables ', 38), (' provision ', 33), (' Trade and other payables', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' tax ', 33), (' provision ', 33), (' Trade and other payables', 32), (' income tax payable ', 31), ('current tax liabilities ', 28), (' Current tax payables ', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' Trade and other payables', 48), ('current tax liabilities ', 39), (' income tax payable ', 38), (' tax ', 33), (' Current tax payables ', 33), (' provision ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities ', 100), (' income tax payable ', 50), (' Current tax payables ', 50), (' Trade and other payables', 50), (' tax ', 33), (' provision ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' income tax payable ', 38), ('current tax liabilities ', 33), (' tax ', 33), (' provision ', 33), (' Current tax payables ', 33), (' Trade and other payables', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' Current tax payables ', 48), (' Trade and other payables', 45), (' tax ', 33), (' provision ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 100, 'value': 589.0, 'line_item_label': ['Income tax receivable', 'Liabilities'], 'note_numbers': [nan, nan], 'line_item_value': [589.0, 0.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' financial liabilities', 35), ('other current liabilities', 34), (' other current liabilities', 34), (' other financial liabilities', 34), (' employee benefits', 33), (' Contract Liabilities ', 33), (' foreign exchange contract liability ', 30), (' Derivative financial instruments ', 30), (' Deferred income', 30), (' deferred revenue', 29), (' derivative liabilities ', 29), ('provisions', 27), (' Provision ', 27), (' trade and other payables', 26), (' customer deposits', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [(' customer deposits', 38), (' Contract Liabilities ', 37), (' trade and other payables', 35), (' deferred revenue', 33), (' derivative liabilities ', 33), (' Derivative financial instruments ', 33), (' foreign exchange contract liability ', 28), (' Deferred income', 26), ('other current liabilities', 25), (' other current liabilities', 25), (' other financial liabilities', 25), (' financial liabilities', 23), ('provisions', 22), (' employee benefits', 22), (' Provision ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [(' deferred revenue', 42), (' derivative liabilities ', 42), (' trade and other payables', 41), (' Derivative financial instruments ', 39), ('other current liabilities', 38), (' other current liabilities', 38), (' employee benefits', 37), (' foreign exchange contract liability ', 33), (' financial liabilities', 31), (' other financial liabilities', 31), (' customer deposits', 31), (' Contract Liabilities ', 30), (' Deferred income', 26), ('provisions', 22), (' Provision ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [(' trade and other payables', 71), (' deferred revenue', 40), (' employee benefits', 37), (' other financial liabilities', 37), (' foreign exchange contract liability ', 37), (' derivative liabilities ', 34), (' Derivative financial instruments ', 34), ('other current liabilities', 33), (' other current liabilities', 33), (' Contract Liabilities ', 32), (' Deferred income', 29), (' financial liabilities', 27), (' customer deposits', 27), ('provisions', 21), (' Provision ', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' customer deposits', 47), (' financial liabilities', 40), (' other financial liabilities', 39), (' Contract Liabilities ', 39), (' foreign exchange contract liability ', 38), (' Deferred income', 37), (' derivative liabilities ', 36), (' Derivative financial instruments ', 35), ('other current liabilities', 33), (' other current liabilities', 33), (' trade and other payables', 32), (' deferred revenue', 29), (' employee benefits', 26), ('provisions', 18), (' Provision ', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' Derivative financial instruments ', 100), (' other financial liabilities', 50), (' derivative liabilities ', 50), (' financial liabilities', 47), (' Deferred income', 46), (' trade and other payables', 39), (' deferred revenue', 39), ('other current liabilities', 36), (' other current liabilities', 36), (' customer deposits', 32), (' employee benefits', 31), (' foreign exchange contract liability ', 29), ('provisions', 27), (' Provision ', 27), (' Contract Liabilities ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other payables', 42), (' financial liabilities', 40), (' Contract Liabilities ', 39), (' foreign exchange contract liability ', 38), (' derivative liabilities ', 36), (' other financial liabilities', 34), ('other current liabilities', 29), (' other current liabilities', 29), (' customer deposits', 29), (' Derivative financial instruments ', 27), (' deferred revenue', 24), (' employee benefits', 22), (' Deferred income', 19), ('provisions', 7), (' Provision ', 7)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' derivative liabilities ', 67), (' financial liabilities', 60), (' Contract Liabilities ', 57), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability ', 32), (' employee benefits', 29), (' trade and other payables', 21), (' Derivative financial instruments ', 20), ('provisions', 17), (' Provision ', 17), (' Deferred income', 12), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' Derivative financial instruments ', 37), ('other current liabilities', 36), (' other current liabilities', 36), (' Contract Liabilities ', 35), ('provisions', 32), (' deferred revenue', 32), (' foreign exchange contract liability ', 32), (' Provision ', 32), (' customer deposits', 30), (' trade and other payables', 29), (' employee benefits', 29), (' Deferred income', 27), (' other financial liabilities', 26), (' derivative liabilities ', 26), (' financial liabilities', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' derivative liabilities ', 70), (' financial liabilities', 64), (' Contract Liabilities ', 62), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability ', 43), (' trade and other payables', 30), (' Derivative financial instruments ', 29), (' Deferred income', 27), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12), (' Provision ', 12)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 0.0, 'line_item_label': ['Derivative financial instruments'], 'note_numbers': ['11'], 'line_item_value': [0.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability ', ' derivative liabilities ', ' Provision ', ' Contract Liabilities ', ' Derivative financial instruments ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [(' financial liabilities', 35), ('other current liabilities', 34), (' other current liabilities', 34), (' other financial liabilities', 34), (' employee benefits', 33), (' Contract Liabilities ', 33), (' foreign exchange contract liability ', 30), (' Derivative financial instruments ', 30), (' Deferred income', 30), (' deferred revenue', 29), (' derivative liabilities ', 29), ('provisions', 27), (' Provision ', 27), (' trade and other payables', 26), (' customer deposits', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goods in transit , res_fuzz_match = [(' customer deposits', 38), (' Contract Liabilities ', 37), (' trade and other payables', 35), (' deferred revenue', 33), (' derivative liabilities ', 33), (' Derivative financial instruments ', 33), (' foreign exchange contract liability ', 28), (' Deferred income', 26), ('other current liabilities', 25), (' other current liabilities', 25), (' other financial liabilities', 25), (' financial liabilities', 23), ('provisions', 22), (' employee benefits', 22), (' Provision ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade receivables , res_fuzz_match = [(' deferred revenue', 42), (' derivative liabilities ', 42), (' trade and other payables', 41), (' Derivative financial instruments ', 39), ('other current liabilities', 38), (' other current liabilities', 38), (' employee benefits', 37), (' foreign exchange contract liability ', 33), (' financial liabilities', 31), (' other financial liabilities', 31), (' customer deposits', 31), (' Contract Liabilities ', 30), (' Deferred income', 26), ('provisions', 22), (' Provision ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other receivables and prepayments , res_fuzz_match = [(' trade and other payables', 71), (' deferred revenue', 40), (' employee benefits', 37), (' other financial liabilities', 37), (' foreign exchange contract liability ', 37), (' derivative liabilities ', 34), (' Derivative financial instruments ', 34), ('other current liabilities', 33), (' other current liabilities', 33), (' Contract Liabilities ', 32), (' Deferred income', 29), (' financial liabilities', 27), (' customer deposits', 27), ('provisions', 21), (' Provision ', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax receivable , res_fuzz_match = [(' customer deposits', 47), (' financial liabilities', 40), (' other financial liabilities', 39), (' Contract Liabilities ', 39), (' foreign exchange contract liability ', 38), (' Deferred income', 37), (' derivative liabilities ', 36), (' Derivative financial instruments ', 35), ('other current liabilities', 33), (' other current liabilities', 33), (' trade and other payables', 32), (' deferred revenue', 29), (' employee benefits', 26), ('provisions', 18), (' Provision ', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' Derivative financial instruments ', 100), (' other financial liabilities', 50), (' derivative liabilities ', 50), (' financial liabilities', 47), (' Deferred income', 46), (' trade and other payables', 39), (' deferred revenue', 39), ('other current liabilities', 36), (' other current liabilities', 36), (' customer deposits', 32), (' employee benefits', 31), (' foreign exchange contract liability ', 29), ('provisions', 27), (' Provision ', 27), (' Contract Liabilities ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other payables', 42), (' financial liabilities', 40), (' Contract Liabilities ', 39), (' foreign exchange contract liability ', 38), (' derivative liabilities ', 36), (' other financial liabilities', 34), ('other current liabilities', 29), (' other current liabilities', 29), (' customer deposits', 29), (' Derivative financial instruments ', 27), (' deferred revenue', 24), (' employee benefits', 22), (' Deferred income', 19), ('provisions', 7), (' Provision ', 7)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' derivative liabilities ', 67), (' financial liabilities', 60), (' Contract Liabilities ', 57), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability ', 32), (' employee benefits', 29), (' trade and other payables', 21), (' Derivative financial instruments ', 20), ('provisions', 17), (' Provision ', 17), (' Deferred income', 12), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' Derivative financial instruments ', 37), ('other current liabilities', 36), (' other current liabilities', 36), (' Contract Liabilities ', 35), ('provisions', 32), (' deferred revenue', 32), (' foreign exchange contract liability ', 32), (' Provision ', 32), (' customer deposits', 30), (' trade and other payables', 29), (' employee benefits', 29), (' Deferred income', 27), (' other financial liabilities', 26), (' derivative liabilities ', 26), (' financial liabilities', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' derivative liabilities ', 70), (' financial liabilities', 64), (' Contract Liabilities ', 62), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability ', 43), (' trade and other payables', 30), (' Derivative financial instruments ', 29), (' Deferred income', 27), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12), (' Provision ', 12)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 0.0, 'line_item_label': ['Derivative financial instruments'], 'note_numbers': ['11'], 'line_item_value': [0.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = current liabilities forward currency contracts , res_fuzz_match = [(' Forward currency contract ', 100), (' gst liabilities', 80), (' forward exchange contracts', 79), (' service contracts ', 73), (' Current- liability for annual leave ', 70), (' current - liability for annual and long service leave', 64), (' contract liabilites - current', 64), (' current- liability for long service leave ', 63), (' arising from service contracts', 60), (' rebates', 60), (' other', 60), (' others ', 60), (' provisions - current', 57), (' gst payable and accruals', 50), (' gst payables', 50), (' warranty', 50), (' GST Payable', 50), (' total current employee benefits ', 48), (' derivative contracts - at fair value', 46), (' abandonment and decommissioning costs', 46), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' Warranty and after sales service ', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' Trade payables ', 42), (' accrued expenses ', 42), (' other related parties', 41), (' provision for associate funding', 41), (' restructuring', 40), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' provision for annual and long service leave ', 37), (' share of joint venture payables', 36), (' Employee entitlements ', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' gst', 33), (' employee benefits - payroll', 32), (' Stock and feright payables ', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = current liabilities total , res_fuzz_match = [(' current - liability for annual and long service leave', 85), (' Current- liability for annual leave ', 85), (' current- liability for long service leave ', 85), (' gst liabilities', 80), (' warranty', 62), (' rebates', 60), (' contract liabilites - current', 55), (' gst payables', 50), (' total current employee benefits ', 50), (' Trade payables ', 50), (' Forward currency contract ', 50), (' GST Payable', 50), ('other creditors and accruals', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' Warranty and after sales service ', 45), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' gst payable and accruals', 40), (' forward exchange contracts', 40), (' other', 40), (' others ', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' Employee payables ', 36), (' loan payable to relayed party under tax funding agreement', 35), (' loans from related party', 35), (' employee benefits - current', 35), (' share of joint venture payables', 35), (' employee benefits - payroll', 35), (' abandonment and decommissioning costs', 35), (' arising from service contracts', 35), (' provision for annual and long service leave ', 35), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' provision for associate funding', 30), (' restructuring', 30), (' Stock and feright payables ', 30), (' Deferred income ', 27), (' make good provisions', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = current liabilities forward currency contracts , res_fuzz_match = [(' Forward currency contract ', 100), (' gst liabilities', 80), (' forward exchange contracts', 79), (' service contracts ', 73), (' Current- liability for annual leave ', 70), (' current - liability for annual and long service leave', 64), (' contract liabilites - current', 64), (' current- liability for long service leave ', 63), (' arising from service contracts', 60), (' rebates', 60), (' other', 60), (' others ', 60), (' provisions - current', 57), (' gst payable and accruals', 50), (' gst payables', 50), (' warranty', 50), (' GST Payable', 50), (' total current employee benefits ', 48), (' derivative contracts - at fair value', 46), (' abandonment and decommissioning costs', 46), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), (' Warranty and after sales service ', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' Trade payables ', 42), (' accrued expenses ', 42), (' other related parties', 41), (' provision for associate funding', 41), (' restructuring', 40), (' loan payable to relayed party under tax funding agreement', 38), (' make good provisions', 38), (' provision for annual and long service leave ', 37), (' share of joint venture payables', 36), (' Employee entitlements ', 36), (' Employee payables ', 36), (' Deferred income ', 36), (' gst', 33), (' employee benefits - payroll', 32), (' Stock and feright payables ', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows = current liabilities total , res_fuzz_match = [(' current - liability for annual and long service leave', 85), (' Current- liability for annual leave ', 85), (' current- liability for long service leave ', 85), (' gst liabilities', 80), (' warranty', 62), (' rebates', 60), (' contract liabilites - current', 55), (' gst payables', 50), (' total current employee benefits ', 50), (' Trade payables ', 50), (' Forward currency contract ', 50), (' GST Payable', 50), ('other creditors and accruals', 45), (' derivative contracts - at fair value', 45), (' secured long-term bank loans', 45), (' Warranty and after sales service ', 45), (' provisions - current', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' gst payable and accruals', 40), (' forward exchange contracts', 40), (' other', 40), (' others ', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' Employee entitlements ', 36), (' Employee payables ', 36), (' loan payable to relayed party under tax funding agreement', 35), (' loans from related party', 35), (' employee benefits - current', 35), (' share of joint venture payables', 35), (' employee benefits - payroll', 35), (' abandonment and decommissioning costs', 35), (' arising from service contracts', 35), (' provision for annual and long service leave ', 35), (' gst', 33), (' accrued expenses ', 33), (' service contracts ', 33), (' provision for associate funding', 30), (' restructuring', 30), (' Stock and feright payables ', 30), (' Deferred income ', 27), (' make good provisions', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits ', 0), (' Current- liability for annual leave ', 0), (' current- liability for long service leave ', 0), (' provision for annual and long service leave ', 0), (' Trade payables ', 0), (' accrued expenses ', 0), (' Warranty and after sales service ', 0), (' Employee entitlements ', 0), (' service contracts ', 0), (' others ', 0), (' Forward currency contract ', 0), (' Employee payables ', 0), (' Stock and feright payables ', 0), (' Deferred income ', 0), (' GST Payable', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3], 'score': [100, 85, 100, 85], 'value': [31.0, 31.0, 10.0, 10.0], 'label': ['Current liabilities Forward currency contracts', 'Current liabilities Total', 'Current liabilities Forward currency contracts', 'Current liabilities Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits ', ' Current- liability for annual leave ', ' current- liability for long service leave ', ' provision for annual and long service leave ', ' Trade payables ', ' accrued expenses ', ' Warranty and after sales service ', ' Employee entitlements ', ' service contracts ', ' others ', ' Forward currency contract ', ' Employee payables ', ' Stock and feright payables ', ' Deferred income ', ' GST Payable'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 12:04:01+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 12:04:01+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 12:04:01+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 12:04:01+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_liabilities
2023-08-28 12:04:01+0530 - sLogger - ERROR - error occured: 2022
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['leases ', ' secured finance debt ', ' bank loan ', ' lease liabilities ', ' lease liability ', ' lease liabilities - non-current ', ' non current ', ' later than 1 year ', ' not later than 5 years ', ' Borrowings ', ' Lease liabilities ', ' Hire purchase liabilities ', ' less : unexpired interest']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings ', ' borrowings ', ' lease liabilities ', ' loans and borrowings', ' Lease obligation'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes ', ' deferred tax liabilities']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities ', ' total deferred tax (assets) / liabilities']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['deferred taxes ', ' deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits ', ' non-current-liability for long service leave ', ' provision for long service leave ', ' Deferred income']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue ', ' Provisions ', ' Deferred income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' share capital ', 100), (' share capital ', 100), (' equity share capital ', 76), (' issued capital ', 67), (' contributed equity ', 37), (' contributed equity', 37), (' perpetual equity instrument ', 33), ('common stock ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [(' share capital ', 35), (' share capital ', 35), (' equity share capital ', 33), (' perpetual equity instrument ', 22), (' contributed equity ', 21), (' contributed equity', 21), (' issued capital ', 18), ('common stock ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('common stock ', 36), (' contributed equity ', 31), (' contributed equity', 31), (' share capital ', 30), (' share capital ', 30), (' equity share capital ', 29), (' perpetual equity instrument ', 29), (' issued capital ', 23)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' perpetual equity instrument ', 57), (' equity share capital ', 38), (' contributed equity ', 35), (' issued capital ', 35), (' contributed equity', 35), (' share capital ', 34), (' share capital ', 34), ('common stock ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [(' contributed equity ', 29), (' contributed equity', 29), (' equity share capital ', 27), (' share capital ', 26), (' share capital ', 26), (' perpetual equity instrument ', 22), (' issued capital ', 18), ('common stock ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' perpetual equity instrument ', 41), (' contributed equity ', 34), (' contributed equity', 34), (' share capital ', 33), (' share capital ', 33), ('common stock ', 32), (' equity share capital ', 32), (' issued capital ', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital ', 38), (' share capital ', 35), (' share capital ', 35), (' equity share capital ', 25), ('common stock ', 22), (' contributed equity ', 18), (' contributed equity', 18), (' perpetual equity instrument ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [(' equity share capital ', 45), (' perpetual equity instrument ', 43), (' contributed equity ', 42), (' contributed equity', 42), (' share capital ', 36), (' share capital ', 36), ('common stock ', 29), (' issued capital ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' perpetual equity instrument ', 40), (' contributed equity ', 32), (' contributed equity', 32), (' share capital ', 31), (' share capital ', 31), (' equity share capital ', 30), (' issued capital ', 24), ('common stock ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' perpetual equity instrument ', 28), ('common stock ', 26), (' contributed equity ', 22), (' contributed equity', 22), (' issued capital ', 19), (' equity share capital ', 14), (' share capital ', 9), (' share capital ', 9)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [(' contributed equity ', 40), (' contributed equity', 40), (' share capital ', 33), (' share capital ', 33), (' equity share capital ', 32), (' perpetual equity instrument ', 32), (' issued capital ', 28), ('common stock ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 35000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['10'], 'line_item_value': [35000.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' share capital ', 100), (' share capital ', 100), (' equity share capital ', 76), (' issued capital ', 67), (' contributed equity ', 37), (' contributed equity', 37), (' perpetual equity instrument ', 33), ('common stock ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [(' share capital ', 35), (' share capital ', 35), (' equity share capital ', 33), (' perpetual equity instrument ', 22), (' contributed equity ', 21), (' contributed equity', 21), (' issued capital ', 18), ('common stock ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('common stock ', 36), (' contributed equity ', 31), (' contributed equity', 31), (' share capital ', 30), (' share capital ', 30), (' equity share capital ', 29), (' perpetual equity instrument ', 29), (' issued capital ', 23)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' perpetual equity instrument ', 57), (' equity share capital ', 38), (' contributed equity ', 35), (' issued capital ', 35), (' contributed equity', 35), (' share capital ', 34), (' share capital ', 34), ('common stock ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [(' contributed equity ', 29), (' contributed equity', 29), (' equity share capital ', 27), (' share capital ', 26), (' share capital ', 26), (' perpetual equity instrument ', 22), (' issued capital ', 18), ('common stock ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' perpetual equity instrument ', 41), (' contributed equity ', 34), (' contributed equity', 34), (' share capital ', 33), (' share capital ', 33), ('common stock ', 32), (' equity share capital ', 32), (' issued capital ', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' issued capital ', 38), (' share capital ', 35), (' share capital ', 35), (' equity share capital ', 25), ('common stock ', 22), (' contributed equity ', 18), (' contributed equity', 18), (' perpetual equity instrument ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [(' equity share capital ', 45), (' perpetual equity instrument ', 43), (' contributed equity ', 42), (' contributed equity', 42), (' share capital ', 36), (' share capital ', 36), ('common stock ', 29), (' issued capital ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' perpetual equity instrument ', 40), (' contributed equity ', 32), (' contributed equity', 32), (' share capital ', 31), (' share capital ', 31), (' equity share capital ', 30), (' issued capital ', 24), ('common stock ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' perpetual equity instrument ', 28), ('common stock ', 26), (' contributed equity ', 22), (' contributed equity', 22), (' issued capital ', 19), (' equity share capital ', 14), (' share capital ', 9), (' share capital ', 9)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [(' contributed equity ', 40), (' contributed equity', 40), (' share capital ', 33), (' share capital ', 33), (' equity share capital ', 32), (' perpetual equity instrument ', 32), (' issued capital ', 28), ('common stock ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 35000.0, 'line_item_label': ['Share capital'], 'note_numbers': ['10'], 'line_item_value': [35000.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 12:04:01+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('Share premium', 67)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [('Share premium', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('Share premium', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('Share premium', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [('Share premium', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('Share premium', 31)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('Share premium', 42)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [('Share premium', 34)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('Share premium', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('Share premium', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [('Share premium', 31)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('Share premium', 67)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [('Share premium', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('Share premium', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('Share premium', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [('Share premium', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('Share premium', 31)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('Share premium', 42)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [('Share premium', 34)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('Share premium', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('Share premium', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [('Share premium', 31)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments ', ' movements in retained earnings']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' retained profits', 50), ('other equity ', 43), (' retained earnings ', 36), (' accumulated losses ', 26), (' reserves surplus ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [(' retained earnings ', 35), (' retained profits', 32), ('other equity ', 25), (' accumulated losses ', 25), (' reserves surplus ', 16)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' retained earnings ', 30), (' accumulated losses ', 29), (' retained profits', 28), ('other equity ', 21), (' reserves surplus ', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' retained earnings ', 40), (' reserves surplus ', 38), (' retained profits', 38), ('other equity ', 33), (' accumulated losses ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [('other equity ', 42), (' reserves surplus ', 40), (' retained earnings ', 35), (' retained profits', 32), (' accumulated losses ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' retained profits', 50), (' retained earnings ', 40), ('other equity ', 32), (' reserves surplus ', 31), (' accumulated losses ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' retained profits', 42), (' reserves surplus ', 32), (' retained earnings ', 24), (' accumulated losses ', 22), ('other equity ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [(' retained earnings ', 42), (' retained profits', 40), ('other equity ', 29), (' reserves surplus ', 29), (' accumulated losses ', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other equity ', 44), (' reserves surplus ', 36), (' retained profits', 36), (' retained earnings ', 31), (' accumulated losses ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' retained earnings ', 45), (' reserves surplus ', 33), (' retained profits', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [(' retained earnings ', 40), (' retained profits', 38), (' accumulated losses ', 32), (' reserves surplus ', 31), ('other equity ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 24929.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [24929.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [(' retained profits', 50), ('other equity ', 43), (' retained earnings ', 36), (' accumulated losses ', 26), (' reserves surplus ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [(' retained earnings ', 35), (' retained profits', 32), ('other equity ', 25), (' accumulated losses ', 25), (' reserves surplus ', 16)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' retained earnings ', 30), (' accumulated losses ', 29), (' retained profits', 28), ('other equity ', 21), (' reserves surplus ', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' retained earnings ', 40), (' reserves surplus ', 38), (' retained profits', 38), ('other equity ', 33), (' accumulated losses ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [('other equity ', 42), (' reserves surplus ', 40), (' retained earnings ', 35), (' retained profits', 32), (' accumulated losses ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' retained profits', 50), (' retained earnings ', 40), ('other equity ', 32), (' reserves surplus ', 31), (' accumulated losses ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' retained profits', 42), (' reserves surplus ', 32), (' retained earnings ', 24), (' accumulated losses ', 22), ('other equity ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [(' retained earnings ', 42), (' retained profits', 40), ('other equity ', 29), (' reserves surplus ', 29), (' accumulated losses ', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other equity ', 44), (' reserves surplus ', 36), (' retained profits', 36), (' retained earnings ', 31), (' accumulated losses ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' retained earnings ', 45), (' reserves surplus ', 33), (' retained profits', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [(' retained earnings ', 40), (' retained profits', 38), (' accumulated losses ', 32), (' reserves surplus ', 31), ('other equity ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 28204.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [28204.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest ', 32), (' non controlling interest ', 32), (' minority interest ', 32), (' noncontrolling interest ', 27), (' non-controlling interest', 27)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [(' non controlling interest ', 31), ('minority interest ', 23), (' minority interest ', 23), (' noncontrolling interest ', 19), (' non-controlling interest', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' noncontrolling interest ', 29), (' non-controlling interest', 29), (' non controlling interest ', 28), ('minority interest ', 20), (' minority interest ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' noncontrolling interest ', 42), (' non-controlling interest', 42), (' non controlling interest ', 36), ('minority interest ', 32), (' minority interest ', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [(' noncontrolling interest ', 32), (' non-controlling interest', 32), ('minority interest ', 31), (' non controlling interest ', 31), (' minority interest ', 31)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' non controlling interest ', 62), ('minority interest ', 55), (' minority interest ', 55), (' noncontrolling interest ', 47), (' non-controlling interest', 47)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' non controlling interest ', 31), ('minority interest ', 20), (' minority interest ', 20), (' noncontrolling interest ', 16), (' non-controlling interest', 16)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [('minority interest ', 39), (' noncontrolling interest ', 39), (' minority interest ', 39), (' non-controlling interest', 39), (' non controlling interest ', 38)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('minority interest ', 41), (' minority interest ', 41), (' non controlling interest ', 29), (' noncontrolling interest ', 29), (' non-controlling interest', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' noncontrolling interest ', 40), (' non-controlling interest', 40), (' non controlling interest ', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [('minority interest ', 36), (' non controlling interest ', 36), (' minority interest ', 36), (' noncontrolling interest ', 32), (' non-controlling interest', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['minority interest ', ' non controlling interest ', ' noncontrolling interest ', ' minority interest ', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest ', 30), (' minority interest ', 30), (' noncontrolling interest ', 16), (' non-controlling interest', 16), (' non controlling interest ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('minority interest ', 32), (' non controlling interest ', 32), (' minority interest ', 32), (' noncontrolling interest ', 27), (' non-controlling interest', 27)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' non controlling interest ', 39), (' noncontrolling interest ', 33), (' non-controlling interest', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [(' non controlling interest ', 31), ('minority interest ', 23), (' minority interest ', 23), (' noncontrolling interest ', 19), (' non-controlling interest', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' noncontrolling interest ', 29), (' non-controlling interest', 29), (' non controlling interest ', 28), ('minority interest ', 20), (' minority interest ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' noncontrolling interest ', 42), (' non-controlling interest', 42), (' non controlling interest ', 36), ('minority interest ', 32), (' minority interest ', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [(' noncontrolling interest ', 32), (' non-controlling interest', 32), ('minority interest ', 31), (' non controlling interest ', 31), (' minority interest ', 31)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [(' non controlling interest ', 62), ('minority interest ', 55), (' minority interest ', 55), (' noncontrolling interest ', 47), (' non-controlling interest', 47)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' non controlling interest ', 31), ('minority interest ', 20), (' minority interest ', 20), (' noncontrolling interest ', 16), (' non-controlling interest', 16)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [('minority interest ', 39), (' noncontrolling interest ', 39), (' minority interest ', 39), (' non-controlling interest', 39), (' non controlling interest ', 38)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('minority interest ', 41), (' minority interest ', 41), (' non controlling interest ', 29), (' noncontrolling interest ', 29), (' non-controlling interest', 29)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('minority interest ', 48), (' minority interest ', 48), (' noncontrolling interest ', 40), (' non-controlling interest', 40), (' non controlling interest ', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [('minority interest ', 36), (' non controlling interest ', 36), (' minority interest ', 36), (' noncontrolling interest ', 32), (' non-controlling interest', 32)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [('shareholders equity(a)', 34)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('shareholders equity(a)', 34)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [('shareholders equity(a)', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('shareholders equity(a)', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('shareholders equity(a)', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('shareholders equity(a)', 38)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('shareholders equity(a)', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('shareholders equity(a)', 57)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [('shareholders equity(a)', 34)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [('shareholders equity(a)', 34)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [('shareholders equity(a)', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('shareholders equity(a)', 28)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('shareholders equity(a)', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('shareholders equity(a)', 38)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [('shareholders equity(a)', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [('shareholders equity(a)', 33)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity ', ' hedge reserve']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve ', 16), (' Foreign currency translation reserves', 16), (' hedge reserve ', 12), ('other reserves ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' hedge reserve ', 27), (' reserves ', 24), (' foreign currency translation reserve ', 24), (' Foreign currency translation reserves', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve ', 43), (' Foreign currency translation reserves', 43), (' hedge reserve ', 36), (' reserves ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [(' hedge reserve ', 26), ('other reserves ', 25), (' reserves ', 22), (' foreign currency translation reserve ', 19), (' Foreign currency translation reserves', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' foreign currency translation reserve ', 30), (' Foreign currency translation reserves', 30), ('other reserves ', 14), (' hedge reserve ', 7), (' reserves ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' foreign currency translation reserve ', 40), (' Foreign currency translation reserves', 40), ('other reserves ', 28), (' hedge reserve ', 23), (' reserves ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [('other reserves ', 50), (' foreign currency translation reserve ', 28), (' Foreign currency translation reserves', 28), (' hedge reserve ', 26), (' reserves ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('other reserves ', 52), (' reserves ', 40), (' foreign currency translation reserve ', 40), (' hedge reserve ', 40), (' Foreign currency translation reserves', 40)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' reserves ', 33), (' hedge reserve ', 24), ('other reserves ', 22), (' foreign currency translation reserve ', 22), (' Foreign currency translation reserves', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [(' foreign currency translation reserve ', 42), (' Foreign currency translation reserves', 42), ('other reserves ', 41), (' hedge reserve ', 24), (' reserves ', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' hedge reserve ', 31), ('other reserves ', 30), (' foreign currency translation reserve ', 30), (' Foreign currency translation reserves', 30), (' reserves ', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' hedge reserve ', 36), (' reserves ', 35), (' foreign currency translation reserve ', 29), (' Foreign currency translation reserves', 29), ('other reserves ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [(' foreign currency translation reserve ', 48), (' Foreign currency translation reserves', 48), (' hedge reserve ', 27), ('other reserves ', 26), (' reserves ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve ', ' hedge reserve ', ' Foreign currency translation reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve ', 16), (' Foreign currency translation reserves', 16), (' hedge reserve ', 12), ('other reserves ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = share capital , res_fuzz_match = [('other reserves ', 35), (' hedge reserve ', 27), (' reserves ', 24), (' foreign currency translation reserve ', 24), (' Foreign currency translation reserves', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve ', 43), (' Foreign currency translation reserves', 43), (' hedge reserve ', 36), (' reserves ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = trade payables , res_fuzz_match = [(' hedge reserve ', 26), ('other reserves ', 25), (' reserves ', 22), (' foreign currency translation reserve ', 19), (' Foreign currency translation reserves', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax payable , res_fuzz_match = [(' foreign currency translation reserve ', 30), (' Foreign currency translation reserves', 30), ('other reserves ', 14), (' hedge reserve ', 7), (' reserves ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = derivative financial instruments , res_fuzz_match = [(' foreign currency translation reserve ', 40), (' Foreign currency translation reserves', 40), ('other reserves ', 28), (' hedge reserve ', 23), (' reserves ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other payables , res_fuzz_match = [('other reserves ', 50), (' foreign currency translation reserve ', 28), (' Foreign currency translation reserves', 28), (' hedge reserve ', 26), (' reserves ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = interest-bearing borrowings , res_fuzz_match = [('other reserves ', 52), (' reserves ', 40), (' foreign currency translation reserve ', 40), (' hedge reserve ', 40), (' Foreign currency translation reserves', 40)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' reserves ', 33), (' hedge reserve ', 24), ('other reserves ', 22), (' foreign currency translation reserve ', 22), (' Foreign currency translation reserves', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = amounts due to related parties , res_fuzz_match = [(' foreign currency translation reserve ', 42), (' Foreign currency translation reserves', 42), ('other reserves ', 41), (' hedge reserve ', 24), (' reserves ', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' hedge reserve ', 31), ('other reserves ', 30), (' foreign currency translation reserve ', 30), (' Foreign currency translation reserves', 30), (' reserves ', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred income , res_fuzz_match = [(' hedge reserve ', 36), (' reserves ', 35), (' foreign currency translation reserve ', 29), (' Foreign currency translation reserves', 29), ('other reserves ', 26)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = lease liability current , res_fuzz_match = [(' foreign currency translation reserve ', 48), (' Foreign currency translation reserves', 48), (' hedge reserve ', 27), ('other reserves ', 26), (' reserves ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 12:04:01+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: get_subfields_sum
2023-08-28 12:04:01+0530 - sLogger - ERROR - error occured: invalid literal for int() with base 10: 'Note'
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ', ' Freehold land and buildings ', ' Plant and equipment ', ' Asset Retirement Obligation ', ' Construction ', ' Mine infrastructure ', ' Assets under construction ', ' Capitalised pre stripping costs ', ' Other assets in progress ', ' land and improvement ', ' Stripping WIP ', ' Building & mine infrastructure ', ' Mining properties ', ' under construction ', ' Freehold land ', ' Buildings ', ' Subsea ', ' Marine  Development properties ', ' Pipeline Asset ', ' Facilities ', ' Workshop tooling ', ' Fishing vessels & equipment ', ' Leasehold buildings ', '']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ', ' property ', ' oil and gas properties ', ' Exploration and evaluation assets'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers ', ' Less allowance for impairment']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade receivables ', 50), (' trade and other receivables', 44), ('account receivables ', 43), (' government subsidies receivable ', 43), (' unbilled ', 40), (' receivable ', 33), (' billed ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = intangible asset , res_fuzz_match = [(' trade receivables ', 35), ('account receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' unbilled ', 20), (' receivable ', 17), (' billed ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' trade and other receivables', 40), (' trade receivables ', 35), (' government subsidies receivable ', 33), (' receivable ', 33), ('account receivables ', 22), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' billed ', 50), (' unbilled ', 40), (' government subsidies receivable ', 29), (' receivable ', 17), ('account receivables ', 14), (' trade receivables ', 14), (' trade and other receivables', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' government subsidies receivable ', 40), (' trade receivables ', 35), (' receivable ', 33), (' trade and other receivables', 33), ('account receivables ', 30), (' billed ', 25), (' unbilled ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [(' trade receivables ', 40), (' government subsidies receivable ', 40), (' trade and other receivables', 40), ('account receivables ', 20), (' receivable ', 20), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' trade receivables ', 50), (' trade and other receivables', 44), ('account receivables ', 43), (' government subsidies receivable ', 43), (' unbilled ', 40), (' receivable ', 33), (' billed ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = intangible asset , res_fuzz_match = [(' trade receivables ', 35), ('account receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' unbilled ', 20), (' receivable ', 17), (' billed ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = deferred tax asset , res_fuzz_match = [(' trade and other receivables', 40), (' trade receivables ', 35), (' government subsidies receivable ', 33), (' receivable ', 33), ('account receivables ', 22), (' billed ', 0), (' unbilled ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' billed ', 50), (' unbilled ', 40), (' government subsidies receivable ', 29), (' receivable ', 17), ('account receivables ', 14), (' trade receivables ', 14), (' trade and other receivables', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' government subsidies receivable ', 40), (' trade receivables ', 35), (' receivable ', 33), (' trade and other receivables', 33), ('account receivables ', 30), (' billed ', 25), (' unbilled ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' sale of products ', 67), (' Sale of coal ', 67), (' net sales ', 59), (' Sales revenue ', 50), (' Rendering of services ', 36), (' from trading business ', 33), ('revenue from operations ', 32), (' Revenue from rendering of services', 29), (' revenue from continuing activities ', 24), (' transmission and distribution business ', 22), (' revenue from contracts with customers ', 20), (' Revenue ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' Rendering of services ', 100), (' Revenue from rendering of services', 68), (' Sales revenue ', 50), (' net sales ', 48), ('revenue from operations ', 41), (' sale of products ', 40), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' transmission and distribution business ', 29), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' from trading business ', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' Revenue ', 63), ('revenue from operations ', 62), (' Revenue from rendering of services', 53), (' Sales revenue ', 50), (' net sales ', 48), (' revenue from continuing activities ', 47), (' Rendering of services ', 46), (' revenue from contracts with customers ', 44), (' sale of products ', 40), (' Sale of coal ', 36), (' from trading business ', 29), (' transmission and distribution business ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities ', 39), (' Revenue from rendering of services', 39), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Rendering of services ', 27), ('revenue from operations ', 24), (' Revenue from rendering of services', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' Revenue from rendering of services', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities ', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [('revenue from operations ', 56), (' revenue from contracts with customers ', 42), (' Rendering of services ', 41), (' from trading business ', 39), (' Revenue from rendering of services', 39), (' sale of products ', 36), (' revenue from continuing activities ', 34), (' net sales ', 33), (' Sale of coal ', 32), (' transmission and distribution business ', 27), (' Sales revenue ', 22), (' Revenue ', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' transmission and distribution business ', 55), (' revenue from continuing activities ', 39), (' Sales revenue ', 37), (' sale of products ', 36), (' Revenue ', 36), (' Revenue from rendering of services', 34), (' revenue from contracts with customers ', 33), ('revenue from operations ', 31), (' Rendering of services ', 28), (' from trading business ', 26), (' net sales ', 25), (' Sale of coal ', 16)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), (' from trading business ', 36), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' Revenue from rendering of services', 26), (' transmission and distribution business ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue ', 44), (' Sales revenue ', 35), (' Rendering of services ', 32), ('revenue from operations ', 29), (' Revenue from rendering of services', 27), (' sale of products ', 25), (' revenue from contracts with customers ', 23), (' from trading business ', 22), (' revenue from continuing activities ', 22), (' net sales ', 20), (' transmission and distribution business ', 20), (' Sale of coal ', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities ', 44), (' Revenue from rendering of services', 39), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' Rendering of services ', 28), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' Rendering of services ', 47), ('revenue from operations ', 42), (' from trading business ', 38), (' Sales revenue ', 36), (' sale of products ', 34), (' revenue from contracts with customers ', 33), (' Revenue from rendering of services', 33), (' net sales ', 32), (' transmission and distribution business ', 31), (' Revenue ', 26), (' revenue from continuing activities ', 24), (' Sale of coal ', 23)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' revenue from contracts with customers ', 42), ('revenue from operations ', 40), (' Revenue from rendering of services', 37), (' revenue from continuing activities ', 34), (' sale of products ', 30), (' Rendering of services ', 30), (' net sales ', 29), (' transmission and distribution business ', 29), (' from trading business ', 29), (' Sale of coal ', 28), (' Sales revenue ', 27), (' Revenue ', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' revenue from continuing activities ', 42), (' transmission and distribution business ', 34), (' Revenue from rendering of services', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' from trading business ', 29), ('revenue from operations ', 21), (' net sales ', 19), (' Sale of coal ', 18), (' Sales revenue ', 17), (' sale of products ', 16), (' Revenue ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Sales revenue ', 40), (' Rendering of services ', 37), (' transmission and distribution business ', 33), (' Revenue from rendering of services', 31), (' Revenue ', 30), (' from trading business ', 28), ('revenue from operations ', 27), (' net sales ', 27), (' revenue from contracts with customers ', 26), (' sale of products ', 23), (' revenue from continuing activities ', 21), (' Sale of coal ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Sale of coal ', 42), (' revenue from contracts with customers ', 38), (' sale of products ', 37), (' net sales ', 35), (' revenue from continuing activities ', 35), (' from trading business ', 33), (' Revenue from rendering of services', 30), ('revenue from operations ', 26), (' transmission and distribution business ', 23), (' Sales revenue ', 23), (' Rendering of services ', 21), (' Revenue ', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' from trading business ', 44), ('revenue from operations ', 38), (' transmission and distribution business ', 37), (' sale of products ', 36), (' Rendering of services ', 35), (' revenue from contracts with customers ', 34), (' Revenue from rendering of services', 30), (' net sales ', 28), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' Sales revenue ', 25), (' Revenue ', 7)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' Rendering of services ', 34), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Revenue from rendering of services', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('revenue from operations ', 48), (' revenue from contracts with customers ', 41), (' from trading business ', 39), (' Revenue from rendering of services', 39), (' sale of products ', 37), (' transmission and distribution business ', 33), (' revenue from continuing activities ', 31), (' Rendering of services ', 31), (' net sales ', 24), (' Sale of coal ', 23), (' Sales revenue ', 22), (' Revenue ', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' transmission and distribution business ', 36), (' revenue from contracts with customers ', 35), ('revenue from operations ', 34), (' revenue from continuing activities ', 33), (' Revenue from rendering of services', 33), (' from trading business ', 27), (' Rendering of services ', 27), (' Sales revenue ', 23), (' sale of products ', 22), (' net sales ', 18), (' Sale of coal ', 17), (' Revenue ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' transmission and distribution business ', 36), (' revenue from contracts with customers ', 35), ('revenue from operations ', 34), (' revenue from continuing activities ', 33), (' Revenue from rendering of services', 33), (' from trading business ', 27), (' Rendering of services ', 27), (' Sales revenue ', 23), (' sale of products ', 22), (' net sales ', 18), (' Sale of coal ', 17), (' Revenue ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' from trading business ', 40), (' revenue from contracts with customers ', 39), (' sale of products ', 38), (' revenue from continuing activities ', 37), (' Revenue from rendering of services', 37), (' Sales revenue ', 35), ('revenue from operations ', 31), (' transmission and distribution business ', 29), (' Rendering of services ', 29), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 244812.0, 'line_item_label': ['Rendering of services', 'Revenue'], 'note_numbers': [nan, nan], 'line_item_value': [35244.0, 209568.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities ', ' Rendering of services ', ' Revenue from rendering of services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' sale of products ', 67), (' Sale of coal ', 67), (' net sales ', 59), (' Sales revenue ', 50), (' Rendering of services ', 36), (' from trading business ', 33), ('revenue from operations ', 32), (' Revenue from rendering of services', 29), (' revenue from continuing activities ', 24), (' transmission and distribution business ', 22), (' revenue from contracts with customers ', 20), (' Revenue ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' Rendering of services ', 100), (' Revenue from rendering of services', 68), (' Sales revenue ', 50), (' net sales ', 48), ('revenue from operations ', 41), (' sale of products ', 40), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' transmission and distribution business ', 29), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' from trading business ', 21)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' Revenue ', 63), ('revenue from operations ', 62), (' Revenue from rendering of services', 53), (' Sales revenue ', 50), (' net sales ', 48), (' revenue from continuing activities ', 47), (' Rendering of services ', 46), (' revenue from contracts with customers ', 44), (' sale of products ', 40), (' Sale of coal ', 36), (' from trading business ', 29), (' transmission and distribution business ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue ', 100), (' Sales revenue ', 71), ('revenue from operations ', 55), (' revenue from continuing activities ', 39), (' Revenue from rendering of services', 39), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' net sales ', 29), (' sale of products ', 22), (' from trading business ', 19), (' Sale of coal ', 13), (' transmission and distribution business ', 12)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Rendering of services ', 27), ('revenue from operations ', 24), (' Revenue from rendering of services', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' Rendering of services ', 32), (' Revenue from rendering of services', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities ', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [('revenue from operations ', 56), (' revenue from contracts with customers ', 42), (' Rendering of services ', 41), (' from trading business ', 39), (' Revenue from rendering of services', 39), (' sale of products ', 36), (' revenue from continuing activities ', 34), (' net sales ', 33), (' Sale of coal ', 32), (' transmission and distribution business ', 27), (' Sales revenue ', 22), (' Revenue ', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' transmission and distribution business ', 55), (' revenue from continuing activities ', 39), (' Sales revenue ', 37), (' sale of products ', 36), (' Revenue ', 36), (' Revenue from rendering of services', 34), (' revenue from contracts with customers ', 33), ('revenue from operations ', 31), (' Rendering of services ', 28), (' from trading business ', 26), (' net sales ', 25), (' Sale of coal ', 16)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue ', 50), (' net sales ', 38), (' from trading business ', 36), ('revenue from operations ', 34), (' sale of products ', 32), (' Revenue ', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' Revenue from rendering of services', 26), (' transmission and distribution business ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue ', 44), (' Sales revenue ', 35), (' Rendering of services ', 32), ('revenue from operations ', 29), (' Revenue from rendering of services', 27), (' sale of products ', 25), (' revenue from contracts with customers ', 23), (' from trading business ', 22), (' revenue from continuing activities ', 22), (' net sales ', 20), (' transmission and distribution business ', 20), (' Sale of coal ', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities ', 44), (' Revenue from rendering of services', 39), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' Rendering of services ', 28), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' Rendering of services ', 47), ('revenue from operations ', 42), (' from trading business ', 38), (' Sales revenue ', 36), (' sale of products ', 34), (' revenue from contracts with customers ', 33), (' Revenue from rendering of services', 33), (' net sales ', 32), (' transmission and distribution business ', 31), (' Revenue ', 26), (' revenue from continuing activities ', 24), (' Sale of coal ', 23)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' revenue from contracts with customers ', 42), ('revenue from operations ', 40), (' Revenue from rendering of services', 37), (' revenue from continuing activities ', 34), (' sale of products ', 30), (' Rendering of services ', 30), (' net sales ', 29), (' transmission and distribution business ', 29), (' from trading business ', 29), (' Sale of coal ', 28), (' Sales revenue ', 27), (' Revenue ', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' revenue from continuing activities ', 42), (' transmission and distribution business ', 34), (' Revenue from rendering of services', 32), (' revenue from contracts with customers ', 31), (' Rendering of services ', 31), (' from trading business ', 29), ('revenue from operations ', 21), (' net sales ', 19), (' Sale of coal ', 18), (' Sales revenue ', 17), (' sale of products ', 16), (' Revenue ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Sales revenue ', 40), (' Rendering of services ', 37), (' transmission and distribution business ', 33), (' Revenue from rendering of services', 31), (' Revenue ', 30), (' from trading business ', 28), ('revenue from operations ', 27), (' net sales ', 27), (' revenue from contracts with customers ', 26), (' sale of products ', 23), (' revenue from continuing activities ', 21), (' Sale of coal ', 17)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Sale of coal ', 42), (' revenue from contracts with customers ', 38), (' sale of products ', 37), (' net sales ', 35), (' revenue from continuing activities ', 35), (' from trading business ', 33), (' Revenue from rendering of services', 30), ('revenue from operations ', 26), (' transmission and distribution business ', 23), (' Sales revenue ', 23), (' Rendering of services ', 21), (' Revenue ', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' from trading business ', 44), ('revenue from operations ', 38), (' transmission and distribution business ', 37), (' sale of products ', 36), (' Rendering of services ', 35), (' revenue from contracts with customers ', 34), (' Revenue from rendering of services', 30), (' net sales ', 28), (' Sale of coal ', 27), (' revenue from continuing activities ', 26), (' Sales revenue ', 25), (' Revenue ', 7)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' Rendering of services ', 34), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities ', 29), (' Revenue from rendering of services', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('revenue from operations ', 48), (' revenue from contracts with customers ', 41), (' from trading business ', 39), (' Revenue from rendering of services', 39), (' sale of products ', 37), (' transmission and distribution business ', 33), (' revenue from continuing activities ', 31), (' Rendering of services ', 31), (' net sales ', 24), (' Sale of coal ', 23), (' Sales revenue ', 22), (' Revenue ', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' transmission and distribution business ', 36), (' revenue from contracts with customers ', 35), ('revenue from operations ', 34), (' revenue from continuing activities ', 33), (' Revenue from rendering of services', 33), (' from trading business ', 27), (' Rendering of services ', 27), (' Sales revenue ', 23), (' sale of products ', 22), (' net sales ', 18), (' Sale of coal ', 17), (' Revenue ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' transmission and distribution business ', 36), (' revenue from contracts with customers ', 35), ('revenue from operations ', 34), (' revenue from continuing activities ', 33), (' Revenue from rendering of services', 33), (' from trading business ', 27), (' Rendering of services ', 27), (' Sales revenue ', 23), (' sale of products ', 22), (' net sales ', 18), (' Sale of coal ', 17), (' Revenue ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' from trading business ', 40), (' revenue from contracts with customers ', 39), (' sale of products ', 38), (' revenue from continuing activities ', 37), (' Revenue from rendering of services', 37), (' Sales revenue ', 35), ('revenue from operations ', 31), (' transmission and distribution business ', 29), (' Rendering of services ', 29), (' net sales ', 28), (' Sale of coal ', 27), (' Revenue ', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 287988.0, 'line_item_label': ['Rendering of services', 'Revenue'], 'note_numbers': [nan, nan], 'line_item_value': [39799.0, 248189.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('cost of sales', 67), ('Cost of sales', 67), (' cost of goods sold ', 61), (' Cost of product sold', 46), (' cost of coal sold', 43), (' Cost of goods and services sold', 41), (' Cost of rendering services', 37), (' Cost of inventory sold', 36), (' Personnel costs', 35), ('total expenditure', 32), (' Premises cost ', 30), ('total expenses', 29), (' change in inventory ', 25), ('purchase of stock-in-trade', 21), ('expense', 13), ('expenditure', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' Cost of rendering services', 84), (' Cost of goods and services sold', 47), (' change in inventory ', 36), ('expenditure', 35), ('total expenditure', 34), ('expense', 32), (' Cost of inventory sold', 31), (' Personnel costs', 30), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of product sold', 27), ('purchase of stock-in-trade', 25), (' Premises cost ', 25), ('total expenses', 24), (' cost of goods sold ', 22), (' cost of coal sold', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('total expenses', 40), (' Cost of rendering services', 39), ('cost of sales', 36), ('Cost of sales', 36), (' change in inventory ', 36), ('expenditure', 35), ('total expenditure', 34), (' Premises cost ', 33), ('expense', 32), (' Cost of inventory sold', 31), (' Personnel costs', 30), (' Cost of product sold', 27), (' Cost of goods and services sold', 26), ('purchase of stock-in-trade', 25), (' cost of coal sold', 22), (' cost of goods sold ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory ', 29), (' Cost of rendering services', 25), (' Cost of inventory sold', 24), (' Premises cost ', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Premises cost ', 60), (' Cost of product sold', 54), (' Cost of rendering services', 52), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory ', 25), ('expense', 13), ('expenditure', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of rendering services', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory ', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' Personnel costs', 53), (' Cost of rendering services', 47), (' Cost of goods and services sold', 44), (' Premises cost ', 44), (' Cost of product sold', 42), (' cost of coal sold', 40), (' Cost of inventory sold', 40), (' cost of goods sold ', 40), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), ('expenditure', 31), ('expense', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Cost of product sold', 42), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' cost of coal sold', 27), (' cost of goods sold ', 27), (' change in inventory ', 26), ('purchase of stock-in-trade', 23)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), (' Premises cost ', 33), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' change in inventory ', 29), (' Cost of product sold', 27), (' Cost of rendering services', 26), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of rendering services', 27), (' Cost of inventory sold', 26), (' Premises cost ', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23), (' change in inventory ', 22), ('cost of sales', 19), ('Cost of sales', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('total expenses', 62), ('total expenditure', 55), ('expense', 52), ('expenditure', 52), (' Personnel costs', 45), (' Cost of rendering services', 40), (' Cost of goods and services sold', 38), (' Premises cost ', 36), (' Cost of product sold', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory ', 31), (' cost of coal sold', 26), ('cost of sales', 23), ('Cost of sales', 23)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Cost of inventory sold', 45), (' Cost of rendering services', 42), (' Cost of goods and services sold', 41), (' cost of coal sold', 38), (' Personnel costs', 38), (' cost of goods sold ', 38), ('cost of sales', 37), ('Cost of sales', 37), (' Premises cost ', 36), (' Cost of product sold', 35), (' change in inventory ', 33), ('purchase of stock-in-trade', 30), ('total expenditure', 28), ('total expenses', 26), ('expenditure', 23), ('expense', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' change in inventory ', 43), (' Cost of inventory sold', 38), (' Cost of goods and services sold', 37), (' cost of coal sold', 30), ('total expenditure', 28), (' Cost of product sold', 27), (' Cost of rendering services', 26), ('purchase of stock-in-trade', 25), (' Premises cost ', 25), ('total expenses', 24), (' Personnel costs', 22), (' cost of goods sold ', 22), ('cost of sales', 18), ('Cost of sales', 18), ('expenditure', 17), ('expense', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('total expenses', 62), ('expense', 60), ('expenditure', 50), ('total expenditure', 47), (' change in inventory ', 41), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Personnel costs', 36), (' Cost of rendering services', 31), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of goods and services sold', 26), (' Premises cost ', 24), (' Cost of product sold', 19), (' cost of coal sold', 14), (' cost of goods sold ', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of rendering services', 48), (' change in inventory ', 47), (' Premises cost ', 46), (' Cost of product sold', 44), (' cost of goods sold ', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' Cost of product sold', 42), ('total expenditure', 38), (' Premises cost ', 38), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), (' Cost of rendering services', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 30), (' cost of goods sold ', 29), ('expenditure', 26), (' change in inventory ', 22), ('expense', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), (' Cost of goods and services sold', 29), (' Cost of rendering services', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24), (' Premises cost ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' Cost of product sold', 42), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of inventory sold', 36), (' Cost of rendering services', 36), (' cost of coal sold', 35), (' cost of goods sold ', 35), ('total expenditure', 33), (' Premises cost ', 32), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenses', 26), (' change in inventory ', 24), ('expense', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Cost of goods and services sold', 35), (' Cost of product sold', 31), (' Cost of rendering services', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), (' Personnel costs', 30), (' Premises cost ', 28), (' cost of coal sold', 27), (' cost of goods sold ', 27), (' change in inventory ', 27), ('total expenditure', 26), ('total expenses', 25), ('expenditure', 20), ('cost of sales', 20), ('Cost of sales', 20), ('expense', 12)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Cost of goods and services sold', 35), (' Cost of product sold', 31), (' Cost of rendering services', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), (' Personnel costs', 30), (' Premises cost ', 28), (' cost of coal sold', 27), (' cost of goods sold ', 27), (' change in inventory ', 27), ('total expenditure', 26), ('total expenses', 25), ('expenditure', 20), ('cost of sales', 20), ('Cost of sales', 20), ('expense', 12)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' change in inventory ', 40), (' Cost of product sold', 38), (' Cost of rendering services', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold ', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), (' Premises cost ', 26), ('expense', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': 100, 'value': -135340.0, 'line_item_label': ['Rendering of services', 'Cost of sales'], 'note_numbers': [nan, nan], 'line_item_value': [35244.0, -170584.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory ', ' Premises cost ', ' Cost of rendering services'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('cost of sales', 67), ('Cost of sales', 67), (' cost of goods sold ', 61), (' Cost of product sold', 46), (' cost of coal sold', 43), (' Cost of goods and services sold', 41), (' Cost of rendering services', 37), (' Cost of inventory sold', 36), (' Personnel costs', 35), ('total expenditure', 32), (' Premises cost ', 30), ('total expenses', 29), (' change in inventory ', 25), ('purchase of stock-in-trade', 21), ('expense', 13), ('expenditure', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' Cost of rendering services', 84), (' Cost of goods and services sold', 47), (' change in inventory ', 36), ('expenditure', 35), ('total expenditure', 34), ('expense', 32), (' Cost of inventory sold', 31), (' Personnel costs', 30), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of product sold', 27), ('purchase of stock-in-trade', 25), (' Premises cost ', 25), ('total expenses', 24), (' cost of goods sold ', 22), (' cost of coal sold', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('total expenses', 40), (' Cost of rendering services', 39), ('cost of sales', 36), ('Cost of sales', 36), (' change in inventory ', 36), ('expenditure', 35), ('total expenditure', 34), (' Premises cost ', 33), ('expense', 32), (' Cost of inventory sold', 31), (' Personnel costs', 30), (' Cost of product sold', 27), (' Cost of goods and services sold', 26), ('purchase of stock-in-trade', 25), (' cost of coal sold', 22), (' cost of goods sold ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' change in inventory ', 29), (' Cost of rendering services', 25), (' Cost of inventory sold', 24), (' Premises cost ', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold ', 0)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Premises cost ', 60), (' Cost of product sold', 54), (' Cost of rendering services', 52), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory ', 25), ('expense', 13), ('expenditure', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of rendering services', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory ', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' Personnel costs', 53), (' Cost of rendering services', 47), (' Cost of goods and services sold', 44), (' Premises cost ', 44), (' Cost of product sold', 42), (' cost of coal sold', 40), (' Cost of inventory sold', 40), (' cost of goods sold ', 40), ('total expenditure', 38), ('total expenses', 36), ('purchase of stock-in-trade', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), ('expenditure', 31), ('expense', 18)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Cost of product sold', 42), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' cost of coal sold', 27), (' cost of goods sold ', 27), (' change in inventory ', 26), ('purchase of stock-in-trade', 23)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), (' Premises cost ', 33), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' change in inventory ', 29), (' Cost of product sold', 27), (' Cost of rendering services', 26), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15), (' cost of goods sold ', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of rendering services', 27), (' Cost of inventory sold', 26), (' Premises cost ', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23), (' change in inventory ', 22), ('cost of sales', 19), ('Cost of sales', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('expense', 55), (' Premises cost ', 44), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of rendering services', 35), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('total expenses', 62), ('total expenditure', 55), ('expense', 52), ('expenditure', 52), (' Personnel costs', 45), (' Cost of rendering services', 40), (' Cost of goods and services sold', 38), (' Premises cost ', 36), (' Cost of product sold', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory ', 31), (' cost of coal sold', 26), ('cost of sales', 23), ('Cost of sales', 23)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Cost of inventory sold', 45), (' Cost of rendering services', 42), (' Cost of goods and services sold', 41), (' cost of coal sold', 38), (' Personnel costs', 38), (' cost of goods sold ', 38), ('cost of sales', 37), ('Cost of sales', 37), (' Premises cost ', 36), (' Cost of product sold', 35), (' change in inventory ', 33), ('purchase of stock-in-trade', 30), ('total expenditure', 28), ('total expenses', 26), ('expenditure', 23), ('expense', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' change in inventory ', 43), (' Cost of inventory sold', 38), (' Cost of goods and services sold', 37), (' cost of coal sold', 30), ('total expenditure', 28), (' Cost of product sold', 27), (' Cost of rendering services', 26), ('purchase of stock-in-trade', 25), (' Premises cost ', 25), ('total expenses', 24), (' Personnel costs', 22), (' cost of goods sold ', 22), ('cost of sales', 18), ('Cost of sales', 18), ('expenditure', 17), ('expense', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('total expenses', 62), ('expense', 60), ('expenditure', 50), ('total expenditure', 47), (' change in inventory ', 41), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Personnel costs', 36), (' Cost of rendering services', 31), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of goods and services sold', 26), (' Premises cost ', 24), (' Cost of product sold', 19), (' cost of coal sold', 14), (' cost of goods sold ', 14)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of rendering services', 48), (' change in inventory ', 47), (' Premises cost ', 46), (' Cost of product sold', 44), (' cost of goods sold ', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' Cost of product sold', 42), ('total expenditure', 38), (' Premises cost ', 38), ('total expenses', 36), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), (' Cost of rendering services', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 30), (' cost of goods sold ', 29), ('expenditure', 26), (' change in inventory ', 22), ('expense', 15)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory ', 32), (' Cost of goods and services sold', 29), (' Cost of rendering services', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24), (' Premises cost ', 22)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' Cost of product sold', 42), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of inventory sold', 36), (' Cost of rendering services', 36), (' cost of coal sold', 35), (' cost of goods sold ', 35), ('total expenditure', 33), (' Premises cost ', 32), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenses', 26), (' change in inventory ', 24), ('expense', 19)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Cost of goods and services sold', 35), (' Cost of product sold', 31), (' Cost of rendering services', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), (' Personnel costs', 30), (' Premises cost ', 28), (' cost of coal sold', 27), (' cost of goods sold ', 27), (' change in inventory ', 27), ('total expenditure', 26), ('total expenses', 25), ('expenditure', 20), ('cost of sales', 20), ('Cost of sales', 20), ('expense', 12)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Cost of goods and services sold', 35), (' Cost of product sold', 31), (' Cost of rendering services', 31), ('purchase of stock-in-trade', 30), (' Cost of inventory sold', 30), (' Personnel costs', 30), (' Premises cost ', 28), (' cost of coal sold', 27), (' cost of goods sold ', 27), (' change in inventory ', 27), ('total expenditure', 26), ('total expenses', 25), ('expenditure', 20), ('cost of sales', 20), ('Cost of sales', 20), ('expense', 12)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' change in inventory ', 40), (' Cost of product sold', 38), (' Cost of rendering services', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), (' cost of goods sold ', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), (' Premises cost ', 26), ('expense', 20)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': 100, 'value': -158383.0, 'line_item_label': ['Rendering of services', 'Cost of sales'], 'note_numbers': [nan, nan], 'line_item_value': [39799.0, -198182.0]}
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs ', ' Salary & wages expense ', ' Superannuation expense ', ' other administration']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:01+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-28 12:04:01+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:01+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:01+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' Sales and marketing ', 50), (' Royalties ', 38), (' Selling and marketting expenses ', 32), (' levies ', 31), (' Lease expenses ', 30), (' Selling Expenses ', 30), (' Salaries and employee benefits ', 29), (' marketing and advertising expenses ', 29), (' Logistics and distribution ', 28), (' Marketing expenses ', 27), (' Selling & distribution expenses ', 27), (' Servicing expenses', 27), (' Depreciation expenses ', 26), (' Amortisation expenses ', 26), (' employee benefit espense ', 26), (' depreciation ', 25), (' Advertising expenses ', 25), (' Distribution expenses ', 24), (' Administrative expenses ', 24), (' Administration expenses ', 24), (' Administrative and other expenses ', 23), (' Depreciation and amortisation expenses ', 23), (' Administration ', 22), (' other expenses ', 19), (' Other expenses ', 19), (' Management expenses ', 19), (' Other expenses ', 19), (' employee benefits expense ', 19), (' property espense ', 17), (' Occupancy ', 14), ('expenses ', 13), (' Occupancy expenses ', 10)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' Servicing expenses', 69), (' depreciation ', 50), (' Sales and marketing ', 43), (' property espense ', 43), (' Selling Expenses ', 42), (' other expenses ', 40), (' Other expenses ', 40), (' Other expenses ', 40), (' Selling and marketting expenses ', 40), (' Depreciation expenses ', 37), (' Administrative and other expenses ', 36), (' Advertising expenses ', 36), (' Depreciation and amortisation expenses ', 36), (' Logistics and distribution ', 36), (' Salaries and employee benefits ', 36), (' Selling & distribution expenses ', 35), (' levies ', 35), (' employee benefit espense ', 34), (' Lease expenses ', 33), ('expenses ', 32), (' Occupancy expenses ', 32), (' Marketing expenses ', 31), (' marketing and advertising expenses ', 31), (' Amortisation expenses ', 30), (' employee benefits expense ', 29), (' Distribution expenses ', 28), (' Administrative expenses ', 28), (' Administration expenses ', 28), (' Administration ', 27), (' Management expenses ', 24), (' Royalties ', 20), (' Occupancy ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' employee benefits expense ', 46), (' employee benefit espense ', 46), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Sales and marketing ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administration expenses ', 41), (' Depreciation and amortisation expenses ', 41), (' Marketing expenses ', 38), (' Servicing expenses', 38), (' Administrative and other expenses ', 36), (' property espense ', 36), (' marketing and advertising expenses ', 36), (' Selling & distribution expenses ', 35), (' levies ', 35), (' Selling and marketting expenses ', 34), (' Lease expenses ', 33), (' Selling Expenses ', 33), ('expenses ', 32), (' other expenses ', 32), (' Occupancy expenses ', 32), (' Other expenses ', 32), (' Management expenses ', 32), (' Other expenses ', 32), (' Salaries and employee benefits ', 31), (' depreciation ', 30), (' Royalties ', 30), (' Administration ', 27), (' Logistics and distribution ', 24), (' Occupancy ', 11)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies ', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' Servicing expenses', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' marketing and advertising expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Selling and marketting expenses ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13), (' Salaries and employee benefits ', 12)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Servicing expenses', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Selling and marketting expenses ', 32), (' levies ', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Salaries and employee benefits ', 29), (' marketing and advertising expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-28 12:04:01+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' marketing and advertising expenses ', 32), (' Servicing expenses', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Selling and marketting expenses ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Salaries and employee benefits ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies ', 12), ('expenses ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' other expenses ', 57), (' Other expenses ', 57), (' Other expenses ', 57), (' Administrative and other expenses ', 52), (' property espense ', 45), (' Selling and marketting expenses ', 37), (' Servicing expenses', 34), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' Salaries and employee benefits ', 33), (' marketing and advertising expenses ', 33), (' Selling & distribution expenses ', 32), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Administration ', 32), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' Lease expenses ', 30), (' Selling Expenses ', 30), (' Occupancy expenses ', 29), (' Marketing expenses ', 28), (' Depreciation expenses ', 27), (' depreciation ', 26), (' Advertising expenses ', 26), (' Royalties ', 26), (' Distribution expenses ', 25), (' Management expenses ', 21), (' Occupancy ', 19), ('expenses ', 18), (' levies ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Distribution expenses ', 100), (' Selling & distribution expenses ', 86), (' Administrative expenses ', 75), (' Administration expenses ', 75), (' Depreciation expenses ', 67), (' Advertising expenses ', 65), (' Logistics and distribution ', 61), (' Amortisation expenses ', 60), (' Administrative and other expenses ', 57), ('expenses ', 55), (' Depreciation and amortisation expenses ', 52), (' marketing and advertising expenses ', 48), (' employee benefits expense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' employee benefit espense ', 42), (' Selling and marketting expenses ', 42), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Administration ', 40), (' Salaries and employee benefits ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' property espense ', 32), (' Occupancy ', 19), (' Royalties ', 17), (' levies ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses ', 100), (' Selling and marketting expenses ', 74), (' Management expenses ', 72), (' Lease expenses ', 67), (' Selling Expenses ', 67), (' marketing and advertising expenses ', 67), (' other expenses ', 64), (' Other expenses ', 64), (' Other expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Servicing expenses', 62), (' Sales and marketing ', 57), (' Occupancy expenses ', 56), (' Selling & distribution expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administrative and other expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' Salaries and employee benefits ', 31), (' employee benefit espense ', 29), (' Administration ', 27), (' Logistics and distribution ', 24), (' Royalties ', 20), (' levies ', 12), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), ('expenses ', 67), (' other expenses ', 67), (' Other expenses ', 67), (' Other expenses ', 67), (' Servicing expenses', 64), (' Lease expenses ', 61), (' Selling Expenses ', 61), (' Occupancy ', 59), (' property espense ', 59), (' Management expenses ', 58), (' Marketing expenses ', 56), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' depreciation ', 42), (' Selling & distribution expenses ', 42), (' Administrative and other expenses ', 42), (' Selling and marketting expenses ', 41), (' marketing and advertising expenses ', 37), (' employee benefits expense ', 35), (' Depreciation and amortisation expenses ', 32), (' employee benefit espense ', 29), (' Logistics and distribution ', 25), (' Salaries and employee benefits ', 21), (' Administration ', 19), (' Sales and marketing ', 15), (' levies ', 12), (' Royalties ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' marketing and advertising expenses ', 52), (' Salaries and employee benefits ', 48), (' employee benefit espense ', 47), (' Selling and marketting expenses ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' other expenses ', 83), (' Other expenses ', 83), (' Other expenses ', 83), (' property espense ', 69), (' Occupancy expenses ', 62), (' Marketing expenses ', 60), (' Servicing expenses', 60), (' Lease expenses ', 57), (' Selling Expenses ', 57), (' Administrative and other expenses ', 56), ('expenses ', 52), (' Selling and marketting expenses ', 51), (' Management expenses ', 48), (' Selling & distribution expenses ', 42), (' marketing and advertising expenses ', 42), (' Depreciation expenses ', 39), (' Amortisation expenses ', 39), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' depreciation ', 33), (' Salaries and employee benefits ', 33), (' Logistics and distribution ', 32), (' Sales and marketing ', 31), (' Administration ', 31), (' Depreciation and amortisation expenses ', 28), (' Royalties ', 25), (' Occupancy ', 18), (' levies ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' property espense ', 41), (' marketing and advertising expenses ', 40), (' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 37), (' Salaries and employee benefits ', 37), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' Advertising expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' other expenses ', 30), (' Other expenses ', 30), (' Other expenses ', 30), (' Servicing expenses', 30), (' Depreciation expenses ', 29), (' Selling and marketting expenses ', 29), (' Marketing expenses ', 26), (' Occupancy expenses ', 26), (' Selling & distribution expenses ', 25), (' Distribution expenses ', 24), (' Administrative expenses ', 24), (' Administration expenses ', 24), (' Sales and marketing ', 24), (' Royalties ', 24), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Management expenses ', 22), (' Occupancy ', 21), (' depreciation ', 20), (' Administration ', 19), (' levies ', 16), ('expenses ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administrative and other expenses ', 36), (' Depreciation and amortisation expenses ', 36), (' Administrative expenses ', 34), (' Administration expenses ', 34), (' marketing and advertising expenses ', 31), (' Servicing expenses', 31), (' Depreciation expenses ', 30), (' Amortisation expenses ', 30), (' Logistics and distribution ', 30), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling and marketting expenses ', 29), (' Distribution expenses ', 28), (' Administration ', 27), (' Salaries and employee benefits ', 26), (' other expenses ', 24), (' Occupancy expenses ', 24), (' Other expenses ', 24), (' Selling & distribution expenses ', 24), (' Management expenses ', 24), (' Other expenses ', 24), (' Marketing expenses ', 23), (' employee benefits expense ', 23), (' employee benefit espense ', 23), (' Occupancy ', 22), (' property espense ', 21), (' depreciation ', 20), (' Royalties ', 20), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies ', 12), ('expenses ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Management expenses ', 69), (' Servicing expenses', 67), (' Lease expenses ', 64), (' Occupancy expenses ', 62), ('expenses ', 60), (' Marketing expenses ', 59), (' Selling Expenses ', 56), (' other expenses ', 54), (' Other expenses ', 54), (' Other expenses ', 54), (' depreciation ', 48), (' property espense ', 48), (' Selling and marketting expenses ', 44), (' Depreciation expenses ', 43), (' Amortisation expenses ', 43), (' Advertising expenses ', 41), (' Distribution expenses ', 40), (' Administrative expenses ', 40), (' Selling & distribution expenses ', 40), (' Administration expenses ', 40), (' marketing and advertising expenses ', 40), (' Administrative and other expenses ', 35), (' employee benefits expense ', 33), (' Depreciation and amortisation expenses ', 30), (' Salaries and employee benefits ', 30), (' employee benefit espense ', 28), (' Administration ', 26), (' Logistics and distribution ', 24), (' levies ', 22), (' Sales and marketing ', 21), (' Royalties ', 19), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Administrative and other expenses ', 39), (' Depreciation and amortisation expenses ', 39), (' marketing and advertising expenses ', 39), (' Marketing expenses ', 36), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Selling and marketting expenses ', 32), (' Management expenses ', 30), (' Logistics and distribution ', 29), (' Salaries and employee benefits ', 29), (' Servicing expenses', 29), (' Depreciation expenses ', 28), (' Advertising expenses ', 27), (' Royalties ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Administration ', 25), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' employee benefits expense ', 22), (' employee benefit espense ', 22), (' Occupancy ', 20), (' depreciation ', 18), (' levies ', 11), ('expenses ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' property espense ', 44), (' Depreciation and amortisation expenses ', 38), (' Salaries and employee benefits ', 38), (' employee benefits expense ', 37), (' employee benefit espense ', 37), (' Depreciation expenses ', 34), (' Logistics and distribution ', 34), (' Distribution expenses ', 32), (' other expenses ', 30), (' Other expenses ', 30), (' Other expenses ', 30), (' marketing and advertising expenses ', 30), (' depreciation ', 29), (' Marketing expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Servicing expenses', 29), (' Advertising expenses ', 28), (' Sales and marketing ', 28), (' Selling and marketting expenses ', 28), (' Administrative and other expenses ', 26), (' Lease expenses ', 25), (' Occupancy expenses ', 24), (' Management expenses ', 24), (' Administrative expenses ', 22), (' Administration expenses ', 22), (' Royalties ', 21), (' Selling Expenses ', 19), (' levies ', 16), ('expenses ', 15), (' Occupancy ', 15), (' Administration ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Servicing expenses', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Selling and marketting expenses ', 47), (' Administrative and other expenses ', 43), (' marketing and advertising expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Salaries and employee benefits ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies ', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' property espense ', 44), (' Depreciation and amortisation expenses ', 42), (' Administrative and other expenses ', 38), (' other expenses ', 37), (' Other expenses ', 37), (' Other expenses ', 37), (' Amortisation expenses ', 35), (' Logistics and distribution ', 35), (' employee benefits expense ', 33), (' employee benefit espense ', 33), (' Selling and marketting expenses ', 33), (' Salaries and employee benefits ', 31), (' marketing and advertising expenses ', 31), (' Depreciation expenses ', 30), (' Selling & distribution expenses ', 30), (' Distribution expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Marketing expenses ', 26), (' Servicing expenses', 26), (' depreciation ', 24), (' Administrative expenses ', 24), (' Administration expenses ', 24), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' levies ', 20), ('expenses ', 19), (' Royalties ', 18), (' Administration ', 17), (' Management expenses ', 16), (' Occupancy ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Administrative and other expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' property espense ', 32), (' Selling & distribution expenses ', 30), (' Logistics and distribution ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' employee benefits expense ', 29), (' employee benefit espense ', 29), (' Selling and marketting expenses ', 29), (' other expenses ', 28), (' Other expenses ', 28), (' Other expenses ', 28), (' Salaries and employee benefits ', 28), (' Servicing expenses', 27), (' marketing and advertising expenses ', 26), (' Marketing expenses ', 25), (' Lease expenses ', 25), (' Distribution expenses ', 24), (' Depreciation expenses ', 24), (' Amortisation expenses ', 24), (' Sales and marketing ', 24), (' Selling Expenses ', 23), (' Occupancy expenses ', 22), (' Advertising expenses ', 21), (' Management expenses ', 19), (' depreciation ', 18), (' Administration ', 17), (' Royalties ', 15), ('expenses ', 12), (' Occupancy ', 12), (' levies ', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Administrative and other expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' property espense ', 32), (' Selling & distribution expenses ', 30), (' Logistics and distribution ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' employee benefits expense ', 29), (' employee benefit espense ', 29), (' Selling and marketting expenses ', 29), (' other expenses ', 28), (' Other expenses ', 28), (' Other expenses ', 28), (' Salaries and employee benefits ', 28), (' Servicing expenses', 27), (' marketing and advertising expenses ', 26), (' Marketing expenses ', 25), (' Lease expenses ', 25), (' Distribution expenses ', 24), (' Depreciation expenses ', 24), (' Amortisation expenses ', 24), (' Sales and marketing ', 24), (' Selling Expenses ', 23), (' Occupancy expenses ', 22), (' Advertising expenses ', 21), (' Management expenses ', 19), (' depreciation ', 18), (' Administration ', 17), (' Royalties ', 15), ('expenses ', 12), (' Occupancy ', 12), (' levies ', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other expenses ', 43), (' Other expenses ', 43), (' Administrative and other expenses ', 43), (' Other expenses ', 43), (' property espense ', 36), (' Salaries and employee benefits ', 36), (' Lease expenses ', 35), (' Selling and marketting expenses ', 35), (' Management expenses ', 34), (' Marketing expenses ', 33), (' Servicing expenses', 33), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 30), (' Selling Expenses ', 30), (' Depreciation and amortisation expenses ', 30), (' marketing and advertising expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Administration ', 23), ('expenses ', 20), (' depreciation ', 19), (' Royalties ', 19), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9, 10, 11], 'score': 83, 'value': -36368.0, 'line_item_label': ['Distribution expenses', 'Marketing expenses', 'Occupancy expenses', 'Administrative expenses', 'Other operating expenses'], 'note_numbers': [nan, nan, nan, nan, '3'], 'line_item_value': [-112.0, -406.0, -182.0, -19750.0, -15918.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies ', ' Salaries and employee benefits ', ' marketing and advertising expenses ', ' Selling and marketting expenses ', ' Servicing expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' Sales and marketing ', 50), (' Royalties ', 38), (' Selling and marketting expenses ', 32), (' levies ', 31), (' Lease expenses ', 30), (' Selling Expenses ', 30), (' Salaries and employee benefits ', 29), (' marketing and advertising expenses ', 29), (' Logistics and distribution ', 28), (' Marketing expenses ', 27), (' Selling & distribution expenses ', 27), (' Servicing expenses', 27), (' Depreciation expenses ', 26), (' Amortisation expenses ', 26), (' employee benefit espense ', 26), (' depreciation ', 25), (' Advertising expenses ', 25), (' Distribution expenses ', 24), (' Administrative expenses ', 24), (' Administration expenses ', 24), (' Administrative and other expenses ', 23), (' Depreciation and amortisation expenses ', 23), (' Administration ', 22), (' other expenses ', 19), (' Other expenses ', 19), (' Management expenses ', 19), (' Other expenses ', 19), (' employee benefits expense ', 19), (' property espense ', 17), (' Occupancy ', 14), ('expenses ', 13), (' Occupancy expenses ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' Servicing expenses', 69), (' depreciation ', 50), (' Sales and marketing ', 43), (' property espense ', 43), (' Selling Expenses ', 42), (' other expenses ', 40), (' Other expenses ', 40), (' Other expenses ', 40), (' Selling and marketting expenses ', 40), (' Depreciation expenses ', 37), (' Administrative and other expenses ', 36), (' Advertising expenses ', 36), (' Depreciation and amortisation expenses ', 36), (' Logistics and distribution ', 36), (' Salaries and employee benefits ', 36), (' Selling & distribution expenses ', 35), (' levies ', 35), (' employee benefit espense ', 34), (' Lease expenses ', 33), ('expenses ', 32), (' Occupancy expenses ', 32), (' Marketing expenses ', 31), (' marketing and advertising expenses ', 31), (' Amortisation expenses ', 30), (' employee benefits expense ', 29), (' Distribution expenses ', 28), (' Administrative expenses ', 28), (' Administration expenses ', 28), (' Administration ', 27), (' Management expenses ', 24), (' Royalties ', 20), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' employee benefits expense ', 46), (' employee benefit espense ', 46), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Sales and marketing ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administration expenses ', 41), (' Depreciation and amortisation expenses ', 41), (' Marketing expenses ', 38), (' Servicing expenses', 38), (' Administrative and other expenses ', 36), (' property espense ', 36), (' marketing and advertising expenses ', 36), (' Selling & distribution expenses ', 35), (' levies ', 35), (' Selling and marketting expenses ', 34), (' Lease expenses ', 33), (' Selling Expenses ', 33), ('expenses ', 32), (' other expenses ', 32), (' Occupancy expenses ', 32), (' Other expenses ', 32), (' Management expenses ', 32), (' Other expenses ', 32), (' Salaries and employee benefits ', 31), (' depreciation ', 30), (' Royalties ', 30), (' Administration ', 27), (' Logistics and distribution ', 24), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expenses ', 50), (' Occupancy expenses ', 44), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' levies ', 40), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' Lease expenses ', 35), (' Selling Expenses ', 35), (' other expenses ', 33), (' Other expenses ', 33), (' Management expenses ', 33), (' Other expenses ', 33), (' Marketing expenses ', 32), (' Servicing expenses', 32), (' depreciation ', 31), (' Selling & distribution expenses ', 30), (' Sales and marketing ', 29), (' property espense ', 29), (' Administrative and other expenses ', 25), (' Depreciation and amortisation expenses ', 25), (' marketing and advertising expenses ', 25), (' employee benefits expense ', 21), (' employee benefit espense ', 21), (' Selling and marketting expenses ', 21), (' Occupancy ', 18), (' Logistics and distribution ', 15), (' Royalties ', 15), (' Administration ', 13), (' Salaries and employee benefits ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Servicing expenses', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Selling and marketting expenses ', 32), (' levies ', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Salaries and employee benefits ', 29), (' marketing and advertising expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' marketing and advertising expenses ', 32), (' Servicing expenses', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Selling and marketting expenses ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Salaries and employee benefits ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies ', 12), ('expenses ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' other expenses ', 57), (' Other expenses ', 57), (' Other expenses ', 57), (' Administrative and other expenses ', 52), (' property espense ', 45), (' Selling and marketting expenses ', 37), (' Servicing expenses', 34), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' Salaries and employee benefits ', 33), (' marketing and advertising expenses ', 33), (' Selling & distribution expenses ', 32), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Administration ', 32), (' Administrative expenses ', 31), (' Administration expenses ', 31), (' Lease expenses ', 30), (' Selling Expenses ', 30), (' Occupancy expenses ', 29), (' Marketing expenses ', 28), (' Depreciation expenses ', 27), (' depreciation ', 26), (' Advertising expenses ', 26), (' Royalties ', 26), (' Distribution expenses ', 25), (' Management expenses ', 21), (' Occupancy ', 19), ('expenses ', 18), (' levies ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Distribution expenses ', 100), (' Selling & distribution expenses ', 86), (' Administrative expenses ', 75), (' Administration expenses ', 75), (' Depreciation expenses ', 67), (' Advertising expenses ', 65), (' Logistics and distribution ', 61), (' Amortisation expenses ', 60), (' Administrative and other expenses ', 57), ('expenses ', 55), (' Depreciation and amortisation expenses ', 52), (' marketing and advertising expenses ', 48), (' employee benefits expense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' employee benefit espense ', 42), (' Selling and marketting expenses ', 42), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Administration ', 40), (' Salaries and employee benefits ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' property espense ', 32), (' Occupancy ', 19), (' Royalties ', 17), (' levies ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses ', 100), (' Selling and marketting expenses ', 74), (' Management expenses ', 72), (' Lease expenses ', 67), (' Selling Expenses ', 67), (' marketing and advertising expenses ', 67), (' other expenses ', 64), (' Other expenses ', 64), (' Other expenses ', 64), (' property espense ', 64), ('expenses ', 63), (' Servicing expenses', 62), (' Sales and marketing ', 57), (' Occupancy expenses ', 56), (' Selling & distribution expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), (' Advertising expenses ', 43), (' Distribution expenses ', 41), (' Administrative expenses ', 41), (' Administrative and other expenses ', 41), (' Administration expenses ', 41), (' depreciation ', 40), (' employee benefits expense ', 34), (' Depreciation and amortisation expenses ', 31), (' Salaries and employee benefits ', 31), (' employee benefit espense ', 29), (' Administration ', 27), (' Logistics and distribution ', 24), (' Royalties ', 20), (' levies ', 12), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), ('expenses ', 67), (' other expenses ', 67), (' Other expenses ', 67), (' Other expenses ', 67), (' Servicing expenses', 64), (' Lease expenses ', 61), (' Selling Expenses ', 61), (' Occupancy ', 59), (' property espense ', 59), (' Management expenses ', 58), (' Marketing expenses ', 56), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' depreciation ', 42), (' Selling & distribution expenses ', 42), (' Administrative and other expenses ', 42), (' Selling and marketting expenses ', 41), (' marketing and advertising expenses ', 37), (' employee benefits expense ', 35), (' Depreciation and amortisation expenses ', 32), (' employee benefit espense ', 29), (' Logistics and distribution ', 25), (' Salaries and employee benefits ', 21), (' Administration ', 19), (' Sales and marketing ', 15), (' levies ', 12), (' Royalties ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' marketing and advertising expenses ', 52), (' Salaries and employee benefits ', 48), (' employee benefit espense ', 47), (' Selling and marketting expenses ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Servicing expenses', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' other expenses ', 83), (' Other expenses ', 83), (' Other expenses ', 83), (' property espense ', 69), (' Occupancy expenses ', 62), (' Marketing expenses ', 60), (' Servicing expenses', 60), (' Lease expenses ', 57), (' Selling Expenses ', 57), (' Administrative and other expenses ', 56), ('expenses ', 52), (' Selling and marketting expenses ', 51), (' Management expenses ', 48), (' Selling & distribution expenses ', 42), (' marketing and advertising expenses ', 42), (' Depreciation expenses ', 39), (' Amortisation expenses ', 39), (' Advertising expenses ', 38), (' Distribution expenses ', 36), (' Administrative expenses ', 36), (' Administration expenses ', 36), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' depreciation ', 33), (' Salaries and employee benefits ', 33), (' Logistics and distribution ', 32), (' Sales and marketing ', 31), (' Administration ', 31), (' Depreciation and amortisation expenses ', 28), (' Royalties ', 25), (' Occupancy ', 18), (' levies ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' property espense ', 41), (' marketing and advertising expenses ', 40), (' Administrative and other expenses ', 37), (' Depreciation and amortisation expenses ', 37), (' Salaries and employee benefits ', 37), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' Advertising expenses ', 33), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' other expenses ', 30), (' Other expenses ', 30), (' Other expenses ', 30), (' Servicing expenses', 30), (' Depreciation expenses ', 29), (' Selling and marketting expenses ', 29), (' Marketing expenses ', 26), (' Occupancy expenses ', 26), (' Selling & distribution expenses ', 25), (' Distribution expenses ', 24), (' Administrative expenses ', 24), (' Administration expenses ', 24), (' Sales and marketing ', 24), (' Royalties ', 24), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Management expenses ', 22), (' Occupancy ', 21), (' depreciation ', 20), (' Administration ', 19), (' levies ', 16), ('expenses ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administrative and other expenses ', 36), (' Depreciation and amortisation expenses ', 36), (' Administrative expenses ', 34), (' Administration expenses ', 34), (' marketing and advertising expenses ', 31), (' Servicing expenses', 31), (' Depreciation expenses ', 30), (' Amortisation expenses ', 30), (' Logistics and distribution ', 30), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling and marketting expenses ', 29), (' Distribution expenses ', 28), (' Administration ', 27), (' Salaries and employee benefits ', 26), (' other expenses ', 24), (' Occupancy expenses ', 24), (' Other expenses ', 24), (' Selling & distribution expenses ', 24), (' Management expenses ', 24), (' Other expenses ', 24), (' Marketing expenses ', 23), (' employee benefits expense ', 23), (' employee benefit espense ', 23), (' Occupancy ', 22), (' property espense ', 21), (' depreciation ', 20), (' Royalties ', 20), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' levies ', 12), ('expenses ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Management expenses ', 69), (' Servicing expenses', 67), (' Lease expenses ', 64), (' Occupancy expenses ', 62), ('expenses ', 60), (' Marketing expenses ', 59), (' Selling Expenses ', 56), (' other expenses ', 54), (' Other expenses ', 54), (' Other expenses ', 54), (' depreciation ', 48), (' property espense ', 48), (' Selling and marketting expenses ', 44), (' Depreciation expenses ', 43), (' Amortisation expenses ', 43), (' Advertising expenses ', 41), (' Distribution expenses ', 40), (' Administrative expenses ', 40), (' Selling & distribution expenses ', 40), (' Administration expenses ', 40), (' marketing and advertising expenses ', 40), (' Administrative and other expenses ', 35), (' employee benefits expense ', 33), (' Depreciation and amortisation expenses ', 30), (' Salaries and employee benefits ', 30), (' employee benefit espense ', 28), (' Administration ', 26), (' Logistics and distribution ', 24), (' levies ', 22), (' Sales and marketing ', 21), (' Royalties ', 19), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Administrative and other expenses ', 39), (' Depreciation and amortisation expenses ', 39), (' marketing and advertising expenses ', 39), (' Marketing expenses ', 36), (' Amortisation expenses ', 34), (' Selling & distribution expenses ', 33), (' Sales and marketing ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Selling and marketting expenses ', 32), (' Management expenses ', 30), (' Logistics and distribution ', 29), (' Salaries and employee benefits ', 29), (' Servicing expenses', 29), (' Depreciation expenses ', 28), (' Advertising expenses ', 27), (' Royalties ', 27), (' Administrative expenses ', 26), (' Administration expenses ', 26), (' Administration ', 25), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' other expenses ', 22), (' Occupancy expenses ', 22), (' Other expenses ', 22), (' Other expenses ', 22), (' employee benefits expense ', 22), (' employee benefit espense ', 22), (' Occupancy ', 20), (' depreciation ', 18), (' levies ', 11), ('expenses ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' property espense ', 44), (' Depreciation and amortisation expenses ', 38), (' Salaries and employee benefits ', 38), (' employee benefits expense ', 37), (' employee benefit espense ', 37), (' Depreciation expenses ', 34), (' Logistics and distribution ', 34), (' Distribution expenses ', 32), (' other expenses ', 30), (' Other expenses ', 30), (' Other expenses ', 30), (' marketing and advertising expenses ', 30), (' depreciation ', 29), (' Marketing expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Servicing expenses', 29), (' Advertising expenses ', 28), (' Sales and marketing ', 28), (' Selling and marketting expenses ', 28), (' Administrative and other expenses ', 26), (' Lease expenses ', 25), (' Occupancy expenses ', 24), (' Management expenses ', 24), (' Administrative expenses ', 22), (' Administration expenses ', 22), (' Royalties ', 21), (' Selling Expenses ', 19), (' levies ', 16), ('expenses ', 15), (' Occupancy ', 15), (' Administration ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Servicing expenses', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Selling and marketting expenses ', 47), (' Administrative and other expenses ', 43), (' marketing and advertising expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Salaries and employee benefits ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies ', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' property espense ', 44), (' Depreciation and amortisation expenses ', 42), (' Administrative and other expenses ', 38), (' other expenses ', 37), (' Other expenses ', 37), (' Other expenses ', 37), (' Amortisation expenses ', 35), (' Logistics and distribution ', 35), (' employee benefits expense ', 33), (' employee benefit espense ', 33), (' Selling and marketting expenses ', 33), (' Salaries and employee benefits ', 31), (' marketing and advertising expenses ', 31), (' Depreciation expenses ', 30), (' Selling & distribution expenses ', 30), (' Distribution expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Marketing expenses ', 26), (' Servicing expenses', 26), (' depreciation ', 24), (' Administrative expenses ', 24), (' Administration expenses ', 24), (' Lease expenses ', 22), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' levies ', 20), ('expenses ', 19), (' Royalties ', 18), (' Administration ', 17), (' Management expenses ', 16), (' Occupancy ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Administrative and other expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' property espense ', 32), (' Selling & distribution expenses ', 30), (' Logistics and distribution ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' employee benefits expense ', 29), (' employee benefit espense ', 29), (' Selling and marketting expenses ', 29), (' other expenses ', 28), (' Other expenses ', 28), (' Other expenses ', 28), (' Salaries and employee benefits ', 28), (' Servicing expenses', 27), (' marketing and advertising expenses ', 26), (' Marketing expenses ', 25), (' Lease expenses ', 25), (' Distribution expenses ', 24), (' Depreciation expenses ', 24), (' Amortisation expenses ', 24), (' Sales and marketing ', 24), (' Selling Expenses ', 23), (' Occupancy expenses ', 22), (' Advertising expenses ', 21), (' Management expenses ', 19), (' depreciation ', 18), (' Administration ', 17), (' Royalties ', 15), ('expenses ', 12), (' Occupancy ', 12), (' levies ', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Administrative and other expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' property espense ', 32), (' Selling & distribution expenses ', 30), (' Logistics and distribution ', 30), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' employee benefits expense ', 29), (' employee benefit espense ', 29), (' Selling and marketting expenses ', 29), (' other expenses ', 28), (' Other expenses ', 28), (' Other expenses ', 28), (' Salaries and employee benefits ', 28), (' Servicing expenses', 27), (' marketing and advertising expenses ', 26), (' Marketing expenses ', 25), (' Lease expenses ', 25), (' Distribution expenses ', 24), (' Depreciation expenses ', 24), (' Amortisation expenses ', 24), (' Sales and marketing ', 24), (' Selling Expenses ', 23), (' Occupancy expenses ', 22), (' Advertising expenses ', 21), (' Management expenses ', 19), (' depreciation ', 18), (' Administration ', 17), (' Royalties ', 15), ('expenses ', 12), (' Occupancy ', 12), (' levies ', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other expenses ', 43), (' Other expenses ', 43), (' Administrative and other expenses ', 43), (' Other expenses ', 43), (' property espense ', 36), (' Salaries and employee benefits ', 36), (' Lease expenses ', 35), (' Selling and marketting expenses ', 35), (' Management expenses ', 34), (' Marketing expenses ', 33), (' Servicing expenses', 33), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Occupancy expenses ', 30), (' Selling Expenses ', 30), (' Depreciation and amortisation expenses ', 30), (' marketing and advertising expenses ', 30), (' Depreciation expenses ', 29), (' Selling & distribution expenses ', 29), (' Amortisation expenses ', 29), (' Logistics and distribution ', 29), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Administration ', 23), ('expenses ', 20), (' depreciation ', 19), (' Royalties ', 19), (' Occupancy ', 10), (' levies ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9, 10, 11], 'score': 83, 'value': -40636.0, 'line_item_label': ['Distribution expenses', 'Marketing expenses', 'Occupancy expenses', 'Administrative expenses', 'Other operating expenses'], 'note_numbers': [nan, nan, nan, nan, '3'], 'line_item_value': [-121.0, -584.0, -728.0, -25143.0, -14060.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs ', ' Salary & wages expense ', ' Superannuation expense ', ' other administration'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses ', ' Rental expense relating to operating leases lease expense']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' Premises cost ', 30), (' Rental expenses ', 27), (' Administration expenses ', 24), (' Other expense', 19), ('Rent ', 15), (' Occupancy ', 14), (' Occupancy expenses ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' Other expense', 40), ('Rent ', 35), (' Occupancy expenses ', 32), (' Rental expenses ', 31), (' Administration expenses ', 28), (' Premises cost ', 25), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('Rent ', 47), (' Rental expenses ', 46), (' Administration expenses ', 41), (' Premises cost ', 33), (' Occupancy expenses ', 32), (' Other expense', 32), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses ', 44), (' Administration expenses ', 36), (' Other expense', 33), (' Rental expenses ', 32), (' Premises cost ', 24), (' Occupancy ', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Premises cost ', 60), (' Rental expenses ', 36), (' Administration expenses ', 32), (' Other expense', 29), (' Occupancy expenses ', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Other expense', 33), (' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses ', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' Other expense', 57), (' Premises cost ', 44), (' Administration expenses ', 31), (' Occupancy expenses ', 29), (' Rental expenses ', 28), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Administration expenses ', 75), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses ', 77), (' Other expense', 64), (' Occupancy expenses ', 56), (' Administration expenses ', 41), ('Rent ', 35), (' Premises cost ', 33), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), (' Other expense', 67), (' Occupancy ', 59), (' Rental expenses ', 56), (' Administration expenses ', 43), (' Premises cost ', 26), ('Rent ', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' Other expense', 83), (' Occupancy expenses ', 62), (' Rental expenses ', 60), (' Administration expenses ', 36), (' Premises cost ', 36), ('Rent ', 29), (' Occupancy ', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Premises cost ', 36), (' Other expense', 30), (' Rental expenses ', 26), (' Occupancy expenses ', 26), (' Administration expenses ', 24), (' Occupancy ', 21), ('Rent ', 16)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administration expenses ', 34), (' Premises cost ', 25), (' Occupancy expenses ', 24), (' Other expense', 24), (' Rental expenses ', 23), (' Occupancy ', 22), ('Rent ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Rental expenses ', 67), (' Occupancy expenses ', 62), (' Other expense', 54), (' Administration expenses ', 40), (' Premises cost ', 24), ('Rent ', 22), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Premises cost ', 46), (' Rental expenses ', 29), (' Administration expenses ', 26), (' Occupancy expenses ', 22), (' Other expense', 22), ('Rent ', 21), (' Occupancy ', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' Premises cost ', 38), (' Rental expenses ', 35), (' Other expense', 30), (' Occupancy expenses ', 24), (' Administration expenses ', 22), ('Rent ', 16), (' Occupancy ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Other expense', 64), (' Occupancy expenses ', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Premises cost ', 22), (' Occupancy ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' Other expense', 37), (' Premises cost ', 32), (' Rental expenses ', 26), (' Administration expenses ', 24), (' Occupancy expenses ', 21), ('Rent ', 20), (' Occupancy ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Administration expenses ', 29), (' Premises cost ', 28), (' Other expense', 28), (' Rental expenses ', 25), (' Occupancy expenses ', 22), ('Rent ', 12), (' Occupancy ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Administration expenses ', 29), (' Premises cost ', 28), (' Other expense', 28), (' Rental expenses ', 25), (' Occupancy expenses ', 22), ('Rent ', 12), (' Occupancy ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Other expense', 43), (' Rental expenses ', 42), (' Occupancy expenses ', 30), (' Administration expenses ', 27), (' Premises cost ', 26), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10, 11], 'score': 83, 'value': -35850.0, 'line_item_label': ['Occupancy expenses', 'Administrative expenses', 'Other operating expenses'], 'note_numbers': [nan, nan, '3'], 'line_item_value': [-182.0, -19750.0, -15918.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses ', ' Premises cost ', ' Other expense'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' Premises cost ', 30), (' Rental expenses ', 27), (' Administration expenses ', 24), (' Other expense', 19), ('Rent ', 15), (' Occupancy ', 14), (' Occupancy expenses ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' Other expense', 40), ('Rent ', 35), (' Occupancy expenses ', 32), (' Rental expenses ', 31), (' Administration expenses ', 28), (' Premises cost ', 25), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('Rent ', 47), (' Rental expenses ', 46), (' Administration expenses ', 41), (' Premises cost ', 33), (' Occupancy expenses ', 32), (' Other expense', 32), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent ', 60), (' Occupancy expenses ', 44), (' Administration expenses ', 36), (' Other expense', 33), (' Rental expenses ', 32), (' Premises cost ', 24), (' Occupancy ', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Premises cost ', 60), (' Rental expenses ', 36), (' Administration expenses ', 32), (' Other expense', 29), (' Occupancy expenses ', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Premises cost ', 52), (' Other expense', 33), (' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses ', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' Other expense', 57), (' Premises cost ', 44), (' Administration expenses ', 31), (' Occupancy expenses ', 29), (' Rental expenses ', 28), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Administration expenses ', 75), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses ', 77), (' Other expense', 64), (' Occupancy expenses ', 56), (' Administration expenses ', 41), ('Rent ', 35), (' Premises cost ', 33), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses ', 100), (' Other expense', 67), (' Occupancy ', 59), (' Rental expenses ', 56), (' Administration expenses ', 43), (' Premises cost ', 26), ('Rent ', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Premises cost ', 44), (' Occupancy expenses ', 43), (' Other expense', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' Other expense', 83), (' Occupancy expenses ', 62), (' Rental expenses ', 60), (' Administration expenses ', 36), (' Premises cost ', 36), ('Rent ', 29), (' Occupancy ', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Premises cost ', 36), (' Other expense', 30), (' Rental expenses ', 26), (' Occupancy expenses ', 26), (' Administration expenses ', 24), (' Occupancy ', 21), ('Rent ', 16)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Administration expenses ', 34), (' Premises cost ', 25), (' Occupancy expenses ', 24), (' Other expense', 24), (' Rental expenses ', 23), (' Occupancy ', 22), ('Rent ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' Rental expenses ', 67), (' Occupancy expenses ', 62), (' Other expense', 54), (' Administration expenses ', 40), (' Premises cost ', 24), ('Rent ', 22), (' Occupancy ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Premises cost ', 46), (' Rental expenses ', 29), (' Administration expenses ', 26), (' Occupancy expenses ', 22), (' Other expense', 22), ('Rent ', 21), (' Occupancy ', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' Premises cost ', 38), (' Rental expenses ', 35), (' Other expense', 30), (' Occupancy expenses ', 24), (' Administration expenses ', 22), ('Rent ', 16), (' Occupancy ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Other expense', 64), (' Occupancy expenses ', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Premises cost ', 22), (' Occupancy ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' Other expense', 37), (' Premises cost ', 32), (' Rental expenses ', 26), (' Administration expenses ', 24), (' Occupancy expenses ', 21), ('Rent ', 20), (' Occupancy ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Administration expenses ', 29), (' Premises cost ', 28), (' Other expense', 28), (' Rental expenses ', 25), (' Occupancy expenses ', 22), ('Rent ', 12), (' Occupancy ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Administration expenses ', 29), (' Premises cost ', 28), (' Other expense', 28), (' Rental expenses ', 25), (' Occupancy expenses ', 22), ('Rent ', 12), (' Occupancy ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Other expense', 43), (' Rental expenses ', 42), (' Occupancy expenses ', 30), (' Administration expenses ', 27), (' Premises cost ', 26), ('Rent ', 21), (' Occupancy ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10, 11], 'score': 83, 'value': -39931.0, 'line_item_label': ['Occupancy expenses', 'Administrative expenses', 'Other operating expenses'], 'note_numbers': [nan, nan, '3'], 'line_item_value': [-728.0, -25143.0, -14060.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses ', ' Rental expense relating to operating leases lease expense'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue ', ' Other income']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['Commission revenue ', ' Rent ', ' rental revenue']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue ', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('other operating', 32), (' Other income', 30), ('Other revenue ', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [('other operating', 43), ('Other revenue ', 40), (' Other income', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('Other revenue ', 64), ('other operating', 26), (' Other income', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue ', 67), ('other operating', 25), (' Other income', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue ', 38), ('other operating', 32)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue ', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' Other income', 81), ('other operating', 77), ('Other revenue ', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Other revenue ', 43), ('other operating', 23), (' Other income', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue ', 32), (' Other income', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue ', 33), (' Other income', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue ', 43), (' Other income', 30), ('other operating', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('other operating', 74), (' Other income', 57), ('Other revenue ', 34)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Other income', 36), ('other operating', 32), ('Other revenue ', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Other income', 42), ('other operating', 17), ('Other revenue ', 16)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('other operating', 25), (' Other income', 24), ('Other revenue ', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Other income', 38), ('Other revenue ', 30), ('other operating', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [('other operating', 32), (' Other income', 25), ('Other revenue ', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('other operating', 50), (' Other income', 38), ('Other revenue ', 32)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Other income', 31), ('Other revenue ', 28), ('other operating', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Other income', 31), ('Other revenue ', 28), ('other operating', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue ', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 109.0, 'line_item_label': ['Other operating income'], 'note_numbers': [nan], 'line_item_value': [109.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue ', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('other operating', 32), (' Other income', 30), ('Other revenue ', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [('other operating', 43), ('Other revenue ', 40), (' Other income', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('Other revenue ', 64), ('other operating', 26), (' Other income', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue ', 67), ('other operating', 25), (' Other income', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue ', 38), ('other operating', 32)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue ', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' Other income', 81), ('other operating', 77), ('Other revenue ', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Other revenue ', 43), ('other operating', 23), (' Other income', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue ', 32), (' Other income', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue ', 33), (' Other income', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('Other revenue ', 43), (' Other income', 30), ('other operating', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('other operating', 74), (' Other income', 57), ('Other revenue ', 34)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Other income', 36), ('other operating', 32), ('Other revenue ', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' Other income', 42), ('other operating', 17), ('Other revenue ', 16)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('other operating', 25), (' Other income', 24), ('Other revenue ', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Other income', 38), ('Other revenue ', 30), ('other operating', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [('other operating', 32), (' Other income', 25), ('Other revenue ', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('other operating', 50), (' Other income', 38), ('Other revenue ', 32)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Other income', 31), ('Other revenue ', 28), ('other operating', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Other income', 31), ('Other revenue ', 28), ('other operating', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue ', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 422.0, 'line_item_label': ['Other operating income'], 'note_numbers': [nan], 'line_item_value': [422.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue ', ' Interest income from cash and cash equivalents ', ' Interest income from financial assets measured at amortised cost']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' Net finance costs ', 33), ('other income', 30), (' Other revenue', 29), ('Finance income and costs', 27), (' Finance income and finance costs', 22), (' Interest revenue', 17), ('finance income', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' Interest revenue', 43), (' Other revenue', 40), ('Finance income and costs', 35), ('other income', 33), ('finance income', 32), (' Finance income and finance costs', 29), (' Net finance costs ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' Interest revenue', 71), (' Other revenue', 64), ('finance income', 32), ('Finance income and costs', 29), (' Net finance costs ', 29), ('other income', 25), (' Finance income and finance costs', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Other revenue', 67), (' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs ', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs ', 58), ('other income', 40), ('Finance income and costs', 40), (' Other revenue', 38), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), (' Other revenue', 25), ('finance income', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [('other income', 81), (' Interest revenue', 39), (' Net finance costs ', 39), ('finance income', 36), (' Other revenue', 36), ('Finance income and costs', 32), (' Finance income and finance costs', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Net finance costs ', 32), (' Finance income and finance costs', 27), ('other income', 22), ('finance income', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs ', 36), (' Other revenue', 32), ('other income', 25), ('finance income', 24), ('Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Other revenue', 33), ('Finance income and costs', 30), ('other income', 26), ('finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs ', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('other income', 57), (' Interest revenue', 38), (' Other revenue', 34), ('Finance income and costs', 26), (' Net finance costs ', 25), (' Finance income and finance costs', 22), ('finance income', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Net finance costs ', 57), ('Finance income and costs', 51), (' Finance income and finance costs', 48), ('other income', 36), ('finance income', 35), (' Other revenue', 26), (' Interest revenue', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('finance income', 96), ('Finance income and costs', 71), (' Finance income and finance costs', 63), (' Net finance costs ', 57), ('other income', 42), (' Interest revenue', 29), (' Other revenue', 16)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('Finance income and costs', 57), (' Net finance costs ', 55), ('finance income', 54), (' Finance income and finance costs', 48), (' Interest revenue', 34), ('other income', 24), (' Other revenue', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Net finance costs ', 100), ('Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('other income', 38), (' Other revenue', 30), (' Interest revenue', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' Net finance costs ', 39), ('Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 28), ('other income', 25), (' Other revenue', 24), ('finance income', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs ', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32), (' Other revenue', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('other income', 38), (' Net finance costs ', 34), (' Finance income and finance costs', 33), (' Other revenue', 32), ('Finance income and costs', 30), (' Interest revenue', 24), ('finance income', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Interest revenue', 32), ('other income', 31), (' Finance income and finance costs', 30), (' Other revenue', 28), ('Finance income and costs', 27), (' Net finance costs ', 27), ('finance income', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Interest revenue', 32), ('other income', 31), (' Finance income and finance costs', 30), (' Other revenue', 28), ('Finance income and costs', 27), (' Net finance costs ', 27), ('finance income', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 43), ('Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), (' Other revenue', 30), (' Interest revenue', 28)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 13, 15], 'score': 100, 'value': -1068.0, 'line_item_label': ['Other operating income', 'Financial income', 'Net financing costs'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [109.0, 261.0, -1438.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs ', ' Other revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' Net finance costs ', 33), ('other income', 30), (' Other revenue', 29), ('Finance income and costs', 27), (' Finance income and finance costs', 22), (' Interest revenue', 17), ('finance income', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' Interest revenue', 43), (' Other revenue', 40), ('Finance income and costs', 35), ('other income', 33), ('finance income', 32), (' Finance income and finance costs', 29), (' Net finance costs ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' Interest revenue', 71), (' Other revenue', 64), ('finance income', 32), ('Finance income and costs', 29), (' Net finance costs ', 29), ('other income', 25), (' Finance income and finance costs', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Other revenue', 67), (' Interest revenue', 57), ('other income', 12), ('finance income', 11), (' Net finance costs ', 10), ('Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs ', 58), ('other income', 40), ('Finance income and costs', 40), (' Other revenue', 38), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 35), ('Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), (' Other revenue', 25), ('finance income', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [('other income', 81), (' Interest revenue', 39), (' Net finance costs ', 39), ('finance income', 36), (' Other revenue', 36), ('Finance income and costs', 32), (' Finance income and finance costs', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Net finance costs ', 32), (' Finance income and finance costs', 27), ('other income', 22), ('finance income', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs ', 36), (' Other revenue', 32), ('other income', 25), ('finance income', 24), ('Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Other revenue', 33), ('Finance income and costs', 30), ('other income', 26), ('finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest revenue', 52), (' Other revenue', 43), ('Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), (' Net finance costs ', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('other income', 57), (' Interest revenue', 38), (' Other revenue', 34), ('Finance income and costs', 26), (' Net finance costs ', 25), (' Finance income and finance costs', 22), ('finance income', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Net finance costs ', 57), ('Finance income and costs', 51), (' Finance income and finance costs', 48), ('other income', 36), ('finance income', 35), (' Other revenue', 26), (' Interest revenue', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('finance income', 96), ('Finance income and costs', 71), (' Finance income and finance costs', 63), (' Net finance costs ', 57), ('other income', 42), (' Interest revenue', 29), (' Other revenue', 16)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('Finance income and costs', 57), (' Net finance costs ', 55), ('finance income', 54), (' Finance income and finance costs', 48), (' Interest revenue', 34), ('other income', 24), (' Other revenue', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Net finance costs ', 100), ('Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('other income', 38), (' Other revenue', 30), (' Interest revenue', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' Net finance costs ', 39), ('Finance income and costs', 33), (' Finance income and finance costs', 33), (' Interest revenue', 28), ('other income', 25), (' Other revenue', 24), ('finance income', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), (' Net finance costs ', 45), ('Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32), (' Other revenue', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('other income', 38), (' Net finance costs ', 34), (' Finance income and finance costs', 33), (' Other revenue', 32), ('Finance income and costs', 30), (' Interest revenue', 24), ('finance income', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Interest revenue', 32), ('other income', 31), (' Finance income and finance costs', 30), (' Other revenue', 28), ('Finance income and costs', 27), (' Net finance costs ', 27), ('finance income', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Interest revenue', 32), ('other income', 31), (' Finance income and finance costs', 30), (' Other revenue', 28), ('Finance income and costs', 27), (' Net finance costs ', 27), ('finance income', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs ', 44), ('other income', 43), ('Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), (' Other revenue', 30), (' Interest revenue', 28)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 13, 15], 'score': 100, 'value': -3722.0, 'line_item_label': ['Other operating income', 'Financial income', 'Net financing costs'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [422.0, 70.0, -4214.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue ', ' Interest income from cash and cash equivalents ', ' Interest income from financial assets measured at amortised cost'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue ', ' Interest income from cash and cash equivalents ', ' Interest income from financial assets measured at amortised cost'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['Interest expense', 'interest expense'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income ', ' Interest on lease liabilities ', ' Interest expense from financial liabilities measured at amortised cost ', ' Unwind of discount on decommissioning provision ', ' Unwind of discount on Lease Liability']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' net finance costs ', 33), ('finance cost ', 30), (' Interest in finance leases', 28), (' Interest on external debt ', 21), (' finance expenses ', 18), (' interest expense ', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' finance expenses ', 38), (' interest expense ', 36), (' Interest on external debt ', 36), (' Interest in finance leases', 30), ('finance cost ', 25), (' net finance costs ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' interest expense ', 36), (' Interest on external debt ', 36), (' Interest in finance leases', 36), (' finance expenses ', 31), (' net finance costs ', 29), ('finance cost ', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense ', 29), (' Interest on external debt ', 23), (' Interest in finance leases', 23), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' Interest in finance leases', 41), (' finance expenses ', 27), (' interest expense ', 25), (' Interest on external debt ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense ', 30), (' Interest on external debt ', 25), (' Interest in finance leases', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' Interest in finance leases', 44), (' net finance costs ', 39), (' interest expense ', 39), (' Interest on external debt ', 39), ('finance cost ', 22), (' finance expenses ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest on external debt ', 50), (' finance expenses ', 41), (' interest expense ', 39), (' Interest in finance leases', 39), (' net finance costs ', 32), ('finance cost ', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' interest expense ', 71), (' finance expenses ', 62), (' Interest on external debt ', 48), (' net finance costs ', 36), (' Interest in finance leases', 30), ('finance cost ', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses ', 64), (' interest expense ', 52), (' Interest on external debt ', 31), ('finance cost ', 26), (' Interest in finance leases', 25), (' net finance costs ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest on external debt ', 44), (' Interest in finance leases', 44), (' finance expenses ', 41), (' interest expense ', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' interest expense ', 62), (' finance expenses ', 47), (' Interest on external debt ', 43), (' Interest in finance leases', 32), (' net finance costs ', 25), ('finance cost ', 14)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' net finance costs ', 57), ('finance cost ', 49), (' finance expenses ', 38), (' Interest in finance leases', 37), (' interest expense ', 33), (' Interest on external debt ', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' net finance costs ', 57), (' Interest in finance leases', 55), ('finance cost ', 50), (' finance expenses ', 46), (' interest expense ', 29), (' Interest on external debt ', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses ', 96), ('finance cost ', 64), (' interest expense ', 62), (' net finance costs ', 55), (' Interest on external debt ', 41), (' Interest in finance leases', 41)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance expenses ', 57), (' Interest in finance leases', 57), (' interest expense ', 40), (' Interest on external debt ', 40)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 38), (' finance expenses ', 35), (' Interest on external debt ', 34), (' interest expense ', 33), (' Interest in finance leases', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense ', 65), (' net finance costs ', 45), (' Interest on external debt ', 44), ('finance cost ', 37), (' Interest in finance leases', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' net finance costs ', 34), (' Interest on external debt ', 30), (' Interest in finance leases', 30), (' interest expense ', 29), ('finance cost ', 27), (' finance expenses ', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' interest expense ', 32), (' Interest in finance leases', 32), (' Interest on external debt ', 28), (' net finance costs ', 27), ('finance cost ', 23), (' finance expenses ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' interest expense ', 32), (' Interest in finance leases', 32), (' Interest on external debt ', 28), (' net finance costs ', 27), ('finance cost ', 23), (' finance expenses ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' interest expense ', 40), (' Interest in finance leases', 40), (' finance expenses ', 38), ('finance cost ', 35), (' Interest on external debt ', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15], 'score': 100, 'value': -3137.0, 'line_item_label': ['Financial expenses', 'Net financing costs'], 'note_numbers': [nan, '5'], 'line_item_value': [-1699.0, -1438.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses ', ' net finance costs ', ' interest expense ', ' Interest on external debt ', ' Interest in finance leases'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' net finance costs ', 33), ('finance cost ', 30), (' Interest in finance leases', 28), (' Interest on external debt ', 21), (' finance expenses ', 18), (' interest expense ', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' finance expenses ', 38), (' interest expense ', 36), (' Interest on external debt ', 36), (' Interest in finance leases', 30), ('finance cost ', 25), (' net finance costs ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' interest expense ', 36), (' Interest on external debt ', 36), (' Interest in finance leases', 36), (' finance expenses ', 31), (' net finance costs ', 29), ('finance cost ', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses ', 32), (' interest expense ', 29), (' Interest on external debt ', 23), (' Interest in finance leases', 23), ('finance cost ', 12), (' net finance costs ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' Interest in finance leases', 41), (' finance expenses ', 27), (' interest expense ', 25), (' Interest on external debt ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance expenses ', 32), (' interest expense ', 30), (' Interest on external debt ', 25), (' Interest in finance leases', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' Interest in finance leases', 44), (' net finance costs ', 39), (' interest expense ', 39), (' Interest on external debt ', 39), ('finance cost ', 22), (' finance expenses ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest on external debt ', 50), (' finance expenses ', 41), (' interest expense ', 39), (' Interest in finance leases', 39), (' net finance costs ', 32), ('finance cost ', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' interest expense ', 71), (' finance expenses ', 62), (' Interest on external debt ', 48), (' net finance costs ', 36), (' Interest in finance leases', 30), ('finance cost ', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses ', 64), (' interest expense ', 52), (' Interest on external debt ', 31), ('finance cost ', 26), (' Interest in finance leases', 25), (' net finance costs ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Interest on external debt ', 44), (' Interest in finance leases', 44), (' finance expenses ', 41), (' interest expense ', 39), ('finance cost ', 30), (' net finance costs ', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' interest expense ', 62), (' finance expenses ', 47), (' Interest on external debt ', 43), (' Interest in finance leases', 32), (' net finance costs ', 25), ('finance cost ', 14)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' net finance costs ', 57), ('finance cost ', 49), (' finance expenses ', 38), (' Interest in finance leases', 37), (' interest expense ', 33), (' Interest on external debt ', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' net finance costs ', 57), (' Interest in finance leases', 55), ('finance cost ', 50), (' finance expenses ', 46), (' interest expense ', 29), (' Interest on external debt ', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses ', 96), ('finance cost ', 64), (' interest expense ', 62), (' net finance costs ', 55), (' Interest on external debt ', 41), (' Interest in finance leases', 41)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance expenses ', 57), (' Interest in finance leases', 57), (' interest expense ', 40), (' Interest on external debt ', 40)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 38), (' finance expenses ', 35), (' Interest on external debt ', 34), (' interest expense ', 33), (' Interest in finance leases', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense ', 65), (' net finance costs ', 45), (' Interest on external debt ', 44), ('finance cost ', 37), (' Interest in finance leases', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' net finance costs ', 34), (' Interest on external debt ', 30), (' Interest in finance leases', 30), (' interest expense ', 29), ('finance cost ', 27), (' finance expenses ', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' interest expense ', 32), (' Interest in finance leases', 32), (' Interest on external debt ', 28), (' net finance costs ', 27), ('finance cost ', 23), (' finance expenses ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' interest expense ', 32), (' Interest in finance leases', 32), (' Interest on external debt ', 28), (' net finance costs ', 27), ('finance cost ', 23), (' finance expenses ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' interest expense ', 40), (' Interest in finance leases', 40), (' finance expenses ', 38), ('finance cost ', 35), (' Interest on external debt ', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15], 'score': 100, 'value': -8498.0, 'line_item_label': ['Financial expenses', 'Net financing costs'], 'note_numbers': [nan, '5'], 'line_item_value': [-4284.0, -4214.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income ', ' Interest on lease liabilities ', ' Interest expense from financial liabilities measured at amortised cost ', ' Unwind of discount on decommissioning provision ', ' Unwind of discount on Lease Liability'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['interest income'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense ', ' interest income ', ' Interest on lease liabilities ', ' Interest expense from financial liabilities measured at amortised cost ', ' Unwind of discount on decommissioning provision ', ' Unwind of discount on Lease Liability'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['interest income'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax ']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue ', ' commission revenue ', ' government grants ', ' insurance proceeds ', ' foreign exchange gain ', ' other ', ' dividend from other parties ', ' other income ', ' net foreign exchange gain ', ' effective portion of changes in fair value of cash flow ', ' profit from discontinued operation ', ' net of tax ', ' share of jv income ', ' secondment income (tw recovery) ', ' japan recoveries ', ' margin charge income ', ' net foreign exchange gains/(losses) ', ' paid by customers - at amortised cost ', ' net foreign exchange (loss)/gain ', ' net ppe disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' quota lease income ', ' sundry income ', ' net (loss)/profit on disposal of non-current assets ', ' net other foreign exchange (losses)/gains ', ' Sub-lease rental income ', ' Profit on sale of assets ', ' Asset impairment ', ' Loss on sale of disposal of assets ', ' Remuneration from services linked to newly acquired entities ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' net gain / loss on disposal of property plant and equipment  ', ' Investment in joint venture ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Interest on unwinding of discount in provisions ', ' Profit from discontinued operation ', ' net of tax ', ' Net loss on disposal of property ', ' plant and equipment ', ' Net foreign exchange gains/(losses) ', ' Accretion expense ', ' Loss on loan refinancing ', ' Net foreign exchange (loss)/gain ', ' Net PPE disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Net (loss)/profit on disposal of non-current assets ', ' Net other foreign exchange (losses)/gains ', ' Miscellanous income ', ' Commision rebate ', ' Net foreign losses ', ' Derivaties at FVTPL- net change in fair value ', ' Other income - Bank guarantee ', ' Other expense - Net loss on sale or property, plant and equipment ', ' Other expense - Loss on inventory obsolescence ', ' Bank charges']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax '] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' Share of gain/(loss) of joint venture ', 38), (' net finance costs ', 33), (' other gains/losses ', 33), (' Loss on revaluation of inventories ', 33), ('finance cost ', 30), (' other opertaing income ', 30), (' other income ', 30), (' Other income ', 30), (' share of profit of equity accounted investees ', 27), (' finance income and costs ', 27), (' Finance income and costs ', 27), (' interest gains and losses ', 26), (' other income and revenue ', 26), (' net of tax ', 25), (' net of tax ', 25), (' finance income and finance cost ', 22), (' Finance income and finance costs ', 22), (' Profit from discontinued operation ', 22), (' Impairement (expenses)/reversal ', 21), (' Share of profit of equity-accounted investees, net of income tax ', 21), (' Impairment loss ', 20), (' finance expenses', 18), (' interest revenue ', 17), (' expenses ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' interest revenue ', 43), (' Loss on revaluation of inventories ', 41), (' other income and revenue ', 40), (' other opertaing income ', 39), (' finance expenses', 38), (' other gains/losses ', 36), (' Impairement (expenses)/reversal ', 36), (' finance income and costs ', 35), (' Finance income and costs ', 35), (' interest gains and losses ', 34), (' other income ', 33), (' Other income ', 33), (' expenses ', 32), (' net of tax ', 30), (' Profit from discontinued operation ', 30), (' net of tax ', 30), (' finance income and finance cost ', 29), (' share of profit of equity accounted investees ', 29), (' Finance income and finance costs ', 29), ('finance cost ', 25), (' Impairment loss ', 25), (' Share of gain/(loss) of joint venture ', 24), (' Share of profit of equity-accounted investees, net of income tax ', 23), (' net finance costs ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' interest revenue ', 71), (' Loss on revaluation of inventories ', 53), (' other income and revenue ', 51), (' Share of gain/(loss) of joint venture ', 49), (' Impairement (expenses)/reversal ', 48), (' other opertaing income ', 32), (' expenses ', 32), (' finance expenses', 31), (' net of tax ', 30), (' net of tax ', 30), (' net finance costs ', 29), (' other gains/losses ', 29), (' finance income and costs ', 29), (' interest gains and losses ', 29), (' Finance income and costs ', 29), ('finance cost ', 25), (' other income ', 25), (' share of profit of equity accounted investees ', 25), (' Other income ', 25), (' Profit from discontinued operation ', 25), (' finance income and finance cost ', 24), (' Finance income and finance costs ', 24), (' Share of profit of equity-accounted investees, net of income tax ', 23), (' Impairment loss ', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories ', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' Share of profit of equity-accounted investees, net of income tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories ', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' Share of profit of equity-accounted investees, net of income tax ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories ', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' Share of profit of equity-accounted investees, net of income tax ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' other opertaing income ', 94), (' other income ', 81), (' Other income ', 81), (' other gains/losses ', 65), (' other income and revenue ', 58), (' Profit from discontinued operation ', 56), (' Impairment loss ', 44), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 39), (' interest revenue ', 39), (' Impairement (expenses)/reversal ', 39), (' Loss on revaluation of inventories ', 38), (' Share of profit of equity-accounted investees, net of income tax ', 38), (' interest gains and losses ', 37), (' share of profit of equity accounted investees ', 35), (' net of tax ', 35), (' net of tax ', 35), (' finance income and costs ', 32), (' Finance income and costs ', 32), (' finance income and finance cost ', 27), (' Finance income and finance costs ', 27), ('finance cost ', 22), (' finance expenses', 21), (' expenses ', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' expenses ', 55), (' interest revenue ', 52), (' other income and revenue ', 42), (' Profit from discontinued operation ', 42), (' finance expenses', 41), (' interest gains and losses ', 37), (' Impairement (expenses)/reversal ', 33), (' net finance costs ', 32), (' finance income and costs ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' Impairment loss ', 30), (' other opertaing income ', 29), (' Share of profit of equity-accounted investees, net of income tax ', 28), (' finance income and finance cost ', 27), (' Finance income and finance costs ', 27), (' other gains/losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' other income ', 22), (' Other income ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 67), (' expenses ', 63), (' finance expenses', 62), (' interest revenue ', 43), (' net finance costs ', 36), (' Loss on revaluation of inventories ', 35), (' interest gains and losses ', 34), (' Share of gain/(loss) of joint venture ', 34), (' net of tax ', 30), (' net of tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' other income and revenue ', 29), (' other opertaing income ', 26), (' Share of profit of equity-accounted investees, net of income tax ', 26), ('finance cost ', 25), (' other income ', 25), (' Other income ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' expenses ', 67), (' finance expenses', 64), (' Impairement (expenses)/reversal ', 50), (' interest revenue ', 37), (' other gains/losses ', 30), (' finance income and costs ', 30), (' Finance income and costs ', 30), (' Loss on revaluation of inventories ', 30), (' interest gains and losses ', 29), (' other opertaing income ', 27), ('finance cost ', 26), (' other income ', 26), (' Other income ', 26), (' Impairment loss ', 26), (' finance income and finance cost ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net finance costs ', 22), (' share of profit of equity accounted investees ', 21), (' net of tax ', 21), (' Profit from discontinued operation ', 21), (' net of tax ', 21), (' Share of gain/(loss) of joint venture ', 20), (' Share of profit of equity-accounted investees, net of income tax ', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' other opertaing income ', 69), (' Impairement (expenses)/reversal ', 65), (' other income ', 57), (' Other income ', 57), (' other gains/losses ', 56), (' expenses ', 52), (' finance expenses', 47), (' other income and revenue ', 46), (' Profit from discontinued operation ', 41), (' share of profit of equity accounted investees ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories ', 37), (' Share of gain/(loss) of joint venture ', 36), (' net of tax ', 33), (' net of tax ', 33), (' interest gains and losses ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), (' Impairment loss ', 29), (' finance income and costs ', 26), (' Finance income and costs ', 26), (' net finance costs ', 25), (' finance income and finance cost ', 22), (' Finance income and finance costs ', 22), ('finance cost ', 14)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Profit from discontinued operation ', 62), (' net finance costs ', 57), (' finance income and costs ', 51), (' Finance income and costs ', 51), ('finance cost ', 49), (' finance income and finance cost ', 48), (' Finance income and finance costs ', 48), (' other opertaing income ', 46), (' Share of profit of equity-accounted investees, net of income tax ', 46), (' other gains/losses ', 45), (' share of profit of equity accounted investees ', 43), (' Share of gain/(loss) of joint venture ', 42), (' Loss on revaluation of inventories ', 40), (' other income and revenue ', 39), (' finance expenses', 38), (' other income ', 36), (' Other income ', 36), (' interest gains and losses ', 32), (' Impairment loss ', 31), (' Impairement (expenses)/reversal ', 30), (' interest revenue ', 24), (' net of tax ', 20), (' net of tax ', 20), (' expenses ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' finance income and costs ', 71), (' Finance income and costs ', 71), (' finance income and finance cost ', 63), (' Finance income and finance costs ', 63), (' net finance costs ', 57), ('finance cost ', 50), (' finance expenses', 46), (' other income and revenue ', 46), (' other income ', 42), (' Other income ', 42), (' Impairment loss ', 42), (' interest gains and losses ', 40), (' Loss on revaluation of inventories ', 35), (' other opertaing income ', 32), (' Profit from discontinued operation ', 30), (' Share of profit of equity-accounted investees, net of income tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' interest revenue ', 29), (' Share of gain/(loss) of joint venture ', 29), (' Impairement (expenses)/reversal ', 24), (' net of tax ', 20), (' net of tax ', 20), (' expenses ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses', 96), ('finance cost ', 64), (' expenses ', 60), (' Impairement (expenses)/reversal ', 59), (' finance income and costs ', 57), (' Finance income and costs ', 57), (' net finance costs ', 55), (' finance income and finance cost ', 48), (' Finance income and finance costs ', 48), (' interest revenue ', 34), (' share of profit of equity accounted investees ', 29), (' Share of gain/(loss) of joint venture ', 29), (' net of tax ', 29), (' net of tax ', 29), (' Loss on revaluation of inventories ', 29), (' interest gains and losses ', 28), (' other income and revenue ', 28), (' other income ', 24), (' Other income ', 24), (' Impairment loss ', 24), (' Profit from discontinued operation ', 24), (' Share of profit of equity-accounted investees, net of income tax ', 23), (' other gains/losses ', 21), (' other opertaing income ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance income and costs ', 72), (' Finance income and costs ', 72), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' finance expenses', 57), (' other income ', 38), (' interest gains and losses ', 38), (' Other income ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 36), (' share of profit of equity accounted investees ', 36), (' Share of profit of equity-accounted investees, net of income tax ', 35), (' Impairement (expenses)/reversal ', 34), (' Share of gain/(loss) of joint venture ', 33), (' other income and revenue ', 32), (' Loss on revaluation of inventories ', 28), (' other gains/losses ', 27), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 23), (' expenses ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' Loss on revaluation of inventories ', 52), (' Profit from discontinued operation ', 46), (' Share of profit of equity-accounted investees, net of income tax ', 46), (' other gains/losses ', 44), (' share of profit of equity accounted investees ', 43), (' net of tax ', 43), (' net of tax ', 43), (' other opertaing income ', 41), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 39), ('finance cost ', 38), (' Impairment loss ', 38), (' finance expenses', 35), (' finance income and finance cost ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Finance income and finance costs ', 33), (' Finance income and costs ', 33), (' Impairement (expenses)/reversal ', 29), (' interest revenue ', 28), (' other income and revenue ', 28), (' other income ', 25), (' Other income ', 25), (' expenses ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), (' Share of profit of equity-accounted investees, net of income tax ', 38), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' Profit from discontinued operation ', 53), (' other opertaing income ', 50), (' other gains/losses ', 49), (' share of profit of equity accounted investees ', 46), (' Loss on revaluation of inventories ', 43), (' Share of profit of equity-accounted investees, net of income tax ', 43), (' other income ', 38), (' Other income ', 38), (' Share of gain/(loss) of joint venture ', 37), (' net finance costs ', 34), (' finance income and finance cost ', 33), (' other income and revenue ', 33), (' Finance income and finance costs ', 33), (' Impairment loss ', 32), (' finance income and costs ', 30), (' Impairement (expenses)/reversal ', 30), (' Finance income and costs ', 30), ('finance cost ', 27), (' finance expenses', 26), (' interest gains and losses ', 25), (' interest revenue ', 24), (' net of tax ', 24), (' net of tax ', 24), (' expenses ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Share of profit of equity-accounted investees, net of income tax ', 48), (' other income and revenue ', 44), (' Profit from discontinued operation ', 44), (' share of profit of equity accounted investees ', 40), (' other opertaing income ', 36), (' Share of gain/(loss) of joint venture ', 36), (' other gains/losses ', 35), (' Impairement (expenses)/reversal ', 35), (' interest gains and losses ', 34), (' interest revenue ', 32), (' Loss on revaluation of inventories ', 32), (' other income ', 31), (' Other income ', 31), (' finance income and finance cost ', 30), (' Finance income and finance costs ', 30), (' net finance costs ', 27), (' finance income and costs ', 27), (' Finance income and costs ', 27), (' Impairment loss ', 25), ('finance cost ', 23), (' finance expenses', 22), (' net of tax ', 15), (' net of tax ', 15), (' expenses ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Share of profit of equity-accounted investees, net of income tax ', 48), (' other income and revenue ', 44), (' Profit from discontinued operation ', 44), (' share of profit of equity accounted investees ', 40), (' other opertaing income ', 36), (' Share of gain/(loss) of joint venture ', 36), (' other gains/losses ', 35), (' Impairement (expenses)/reversal ', 35), (' interest gains and losses ', 34), (' interest revenue ', 32), (' Loss on revaluation of inventories ', 32), (' other income ', 31), (' Other income ', 31), (' finance income and finance cost ', 30), (' Finance income and finance costs ', 30), (' net finance costs ', 27), (' finance income and costs ', 27), (' Finance income and costs ', 27), (' Impairment loss ', 25), ('finance cost ', 23), (' finance expenses', 22), (' net of tax ', 15), (' net of tax ', 15), (' expenses ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other income and revenue ', 46), (' Share of profit of equity-accounted investees, net of income tax ', 46), (' other opertaing income ', 45), (' net finance costs ', 44), (' other income ', 43), (' share of profit of equity accounted investees ', 43), (' Other income ', 43), (' Profit from discontinued operation ', 42), (' Impairement (expenses)/reversal ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance expenses', 38), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Loss on revaluation of inventories ', 36), ('finance cost ', 35), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' interest gains and losses ', 32), (' interest revenue ', 28), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22), (' expenses ', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 14, 15], 'score': 100, 'value': -3028.0, 'line_item_label': ['Other operating income', 'Financial expenses', 'Net financing costs'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [109.0, -1699.0, -1438.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses ', ' finance income and finance cost ', ' share of profit of equity accounted investees ', ' finance income and costs ', ' interest revenue ', ' interest gains and losses ', ' other income and revenue ', ' Other income ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Impairement (expenses)/reversal ', ' Finance income and finance costs ', ' Profit from discontinued operation ', ' net of tax ', ' Finance income and costs ', ' Loss on revaluation of inventories ', ' Share of profit of equity-accounted investees, net of income tax '] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' Share of gain/(loss) of joint venture ', 38), (' net finance costs ', 33), (' other gains/losses ', 33), (' Loss on revaluation of inventories ', 33), ('finance cost ', 30), (' other opertaing income ', 30), (' other income ', 30), (' Other income ', 30), (' share of profit of equity accounted investees ', 27), (' finance income and costs ', 27), (' Finance income and costs ', 27), (' interest gains and losses ', 26), (' other income and revenue ', 26), (' net of tax ', 25), (' net of tax ', 25), (' finance income and finance cost ', 22), (' Finance income and finance costs ', 22), (' Profit from discontinued operation ', 22), (' Impairement (expenses)/reversal ', 21), (' Share of profit of equity-accounted investees, net of income tax ', 21), (' Impairment loss ', 20), (' finance expenses', 18), (' interest revenue ', 17), (' expenses ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' interest revenue ', 43), (' Loss on revaluation of inventories ', 41), (' other income and revenue ', 40), (' other opertaing income ', 39), (' finance expenses', 38), (' other gains/losses ', 36), (' Impairement (expenses)/reversal ', 36), (' finance income and costs ', 35), (' Finance income and costs ', 35), (' interest gains and losses ', 34), (' other income ', 33), (' Other income ', 33), (' expenses ', 32), (' net of tax ', 30), (' Profit from discontinued operation ', 30), (' net of tax ', 30), (' finance income and finance cost ', 29), (' share of profit of equity accounted investees ', 29), (' Finance income and finance costs ', 29), ('finance cost ', 25), (' Impairment loss ', 25), (' Share of gain/(loss) of joint venture ', 24), (' Share of profit of equity-accounted investees, net of income tax ', 23), (' net finance costs ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' interest revenue ', 71), (' Loss on revaluation of inventories ', 53), (' other income and revenue ', 51), (' Share of gain/(loss) of joint venture ', 49), (' Impairement (expenses)/reversal ', 48), (' other opertaing income ', 32), (' expenses ', 32), (' finance expenses', 31), (' net of tax ', 30), (' net of tax ', 30), (' net finance costs ', 29), (' other gains/losses ', 29), (' finance income and costs ', 29), (' interest gains and losses ', 29), (' Finance income and costs ', 29), ('finance cost ', 25), (' other income ', 25), (' share of profit of equity accounted investees ', 25), (' Other income ', 25), (' Profit from discontinued operation ', 25), (' finance income and finance cost ', 24), (' Finance income and finance costs ', 24), (' Share of profit of equity-accounted investees, net of income tax ', 23), (' Impairment loss ', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' interest revenue ', 57), (' expenses ', 50), (' other income and revenue ', 43), (' Share of gain/(loss) of joint venture ', 35), (' finance expenses', 32), (' Impairement (expenses)/reversal ', 31), (' Loss on revaluation of inventories ', 30), (' other opertaing income ', 17), (' share of profit of equity accounted investees ', 15), (' net of tax ', 15), (' net of tax ', 15), (' Share of profit of equity-accounted investees, net of income tax ', 15), (' interest gains and losses ', 14), ('finance cost ', 12), (' other income ', 12), (' Other income ', 12), (' Impairment loss ', 12), (' Profit from discontinued operation ', 12), (' net finance costs ', 10), (' other gains/losses ', 10), (' finance income and costs ', 7), (' Finance income and costs ', 7), (' finance income and finance cost ', 6), (' Finance income and finance costs ', 6)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' net finance costs ', 58), (' other income ', 40), (' finance income and costs ', 40), (' Other income ', 40), (' Finance income and costs ', 40), (' net of tax ', 38), (' net of tax ', 38), (' other opertaing income ', 37), (' share of profit of equity accounted investees ', 36), (' other gains/losses ', 33), (' interest revenue ', 33), (' Loss on revaluation of inventories ', 33), (' finance income and finance cost ', 32), (' other income and revenue ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and finance costs ', 32), (' Impairment loss ', 30), (' Impairement (expenses)/reversal ', 28), (' Profit from discontinued operation ', 28), (' Share of profit of equity-accounted investees, net of income tax ', 28), (' finance expenses', 27), (' interest gains and losses ', 26), (' expenses ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses ', 52), (' Profit from discontinued operation ', 46), (' net finance costs ', 44), ('finance cost ', 43), (' other opertaing income ', 40), (' share of profit of equity accounted investees ', 38), (' Loss on revaluation of inventories ', 36), (' other income ', 35), (' Other income ', 35), (' Share of gain/(loss) of joint venture ', 35), (' Impairment loss ', 35), (' finance expenses', 32), (' finance income and costs ', 30), (' interest revenue ', 30), (' Finance income and costs ', 30), (' Share of profit of equity-accounted investees, net of income tax ', 30), (' interest gains and losses ', 29), (' finance income and finance cost ', 25), (' Impairement (expenses)/reversal ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net of tax ', 21), (' net of tax ', 21), (' expenses ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' other opertaing income ', 94), (' other income ', 81), (' Other income ', 81), (' other gains/losses ', 65), (' other income and revenue ', 58), (' Profit from discontinued operation ', 56), (' Impairment loss ', 44), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 39), (' interest revenue ', 39), (' Impairement (expenses)/reversal ', 39), (' Loss on revaluation of inventories ', 38), (' Share of profit of equity-accounted investees, net of income tax ', 38), (' interest gains and losses ', 37), (' share of profit of equity accounted investees ', 35), (' net of tax ', 35), (' net of tax ', 35), (' finance income and costs ', 32), (' Finance income and costs ', 32), (' finance income and finance cost ', 27), (' Finance income and finance costs ', 27), ('finance cost ', 22), (' finance expenses', 21), (' expenses ', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' expenses ', 55), (' interest revenue ', 52), (' other income and revenue ', 42), (' Profit from discontinued operation ', 42), (' finance expenses', 41), (' interest gains and losses ', 37), (' Impairement (expenses)/reversal ', 33), (' net finance costs ', 32), (' finance income and costs ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), ('finance cost ', 30), (' Impairment loss ', 30), (' other opertaing income ', 29), (' Share of profit of equity-accounted investees, net of income tax ', 28), (' finance income and finance cost ', 27), (' Finance income and finance costs ', 27), (' other gains/losses ', 26), (' net of tax ', 26), (' net of tax ', 26), (' other income ', 22), (' Other income ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Impairement (expenses)/reversal ', 67), (' expenses ', 63), (' finance expenses', 62), (' interest revenue ', 43), (' net finance costs ', 36), (' Loss on revaluation of inventories ', 35), (' interest gains and losses ', 34), (' Share of gain/(loss) of joint venture ', 34), (' net of tax ', 30), (' net of tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' other income and revenue ', 29), (' other opertaing income ', 26), (' Share of profit of equity-accounted investees, net of income tax ', 26), ('finance cost ', 25), (' other income ', 25), (' Other income ', 25), (' Impairment loss ', 25), (' Profit from discontinued operation ', 25), (' finance income and costs ', 24), (' Finance income and costs ', 24), (' finance income and finance cost ', 20), (' Finance income and finance costs ', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' expenses ', 67), (' finance expenses', 64), (' Impairement (expenses)/reversal ', 50), (' interest revenue ', 37), (' other gains/losses ', 30), (' finance income and costs ', 30), (' Finance income and costs ', 30), (' Loss on revaluation of inventories ', 30), (' interest gains and losses ', 29), (' other opertaing income ', 27), ('finance cost ', 26), (' other income ', 26), (' Other income ', 26), (' Impairment loss ', 26), (' finance income and finance cost ', 25), (' Finance income and finance costs ', 25), (' other income and revenue ', 24), (' net finance costs ', 22), (' share of profit of equity accounted investees ', 21), (' net of tax ', 21), (' Profit from discontinued operation ', 21), (' net of tax ', 21), (' Share of gain/(loss) of joint venture ', 20), (' Share of profit of equity-accounted investees, net of income tax ', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' expenses ', 55), (' other income and revenue ', 53), (' interest revenue ', 52), (' interest gains and losses ', 47), (' finance expenses', 41), (' Share of gain/(loss) of joint venture ', 41), (' other gains/losses ', 39), (' Impairement (expenses)/reversal ', 39), (' Impairment loss ', 37), (' Profit from discontinued operation ', 37), (' net of tax ', 35), (' net of tax ', 35), (' finance income and finance cost ', 32), (' finance income and costs ', 32), (' Finance income and finance costs ', 32), (' Finance income and costs ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), ('finance cost ', 30), (' other income ', 30), (' Other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' other opertaing income ', 69), (' Impairement (expenses)/reversal ', 65), (' other income ', 57), (' Other income ', 57), (' other gains/losses ', 56), (' expenses ', 52), (' finance expenses', 47), (' other income and revenue ', 46), (' Profit from discontinued operation ', 41), (' share of profit of equity accounted investees ', 38), (' interest revenue ', 38), (' Loss on revaluation of inventories ', 37), (' Share of gain/(loss) of joint venture ', 36), (' net of tax ', 33), (' net of tax ', 33), (' interest gains and losses ', 31), (' Share of profit of equity-accounted investees, net of income tax ', 31), (' Impairment loss ', 29), (' finance income and costs ', 26), (' Finance income and costs ', 26), (' net finance costs ', 25), (' finance income and finance cost ', 22), (' Finance income and finance costs ', 22), ('finance cost ', 14)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Profit from discontinued operation ', 62), (' net finance costs ', 57), (' finance income and costs ', 51), (' Finance income and costs ', 51), ('finance cost ', 49), (' finance income and finance cost ', 48), (' Finance income and finance costs ', 48), (' other opertaing income ', 46), (' Share of profit of equity-accounted investees, net of income tax ', 46), (' other gains/losses ', 45), (' share of profit of equity accounted investees ', 43), (' Share of gain/(loss) of joint venture ', 42), (' Loss on revaluation of inventories ', 40), (' other income and revenue ', 39), (' finance expenses', 38), (' other income ', 36), (' Other income ', 36), (' interest gains and losses ', 32), (' Impairment loss ', 31), (' Impairement (expenses)/reversal ', 30), (' interest revenue ', 24), (' net of tax ', 20), (' net of tax ', 20), (' expenses ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' finance income and costs ', 71), (' Finance income and costs ', 71), (' finance income and finance cost ', 63), (' Finance income and finance costs ', 63), (' net finance costs ', 57), ('finance cost ', 50), (' finance expenses', 46), (' other income and revenue ', 46), (' other income ', 42), (' Other income ', 42), (' Impairment loss ', 42), (' interest gains and losses ', 40), (' Loss on revaluation of inventories ', 35), (' other opertaing income ', 32), (' Profit from discontinued operation ', 30), (' Share of profit of equity-accounted investees, net of income tax ', 30), (' other gains/losses ', 29), (' share of profit of equity accounted investees ', 29), (' interest revenue ', 29), (' Share of gain/(loss) of joint venture ', 29), (' Impairement (expenses)/reversal ', 24), (' net of tax ', 20), (' net of tax ', 20), (' expenses ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' finance expenses', 96), ('finance cost ', 64), (' expenses ', 60), (' Impairement (expenses)/reversal ', 59), (' finance income and costs ', 57), (' Finance income and costs ', 57), (' net finance costs ', 55), (' finance income and finance cost ', 48), (' Finance income and finance costs ', 48), (' interest revenue ', 34), (' share of profit of equity accounted investees ', 29), (' Share of gain/(loss) of joint venture ', 29), (' net of tax ', 29), (' net of tax ', 29), (' Loss on revaluation of inventories ', 29), (' interest gains and losses ', 28), (' other income and revenue ', 28), (' other income ', 24), (' Other income ', 24), (' Impairment loss ', 24), (' Profit from discontinued operation ', 24), (' Share of profit of equity-accounted investees, net of income tax ', 23), (' other gains/losses ', 21), (' other opertaing income ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost ', 85), (' finance income and costs ', 72), (' Finance income and costs ', 72), (' finance income and finance cost ', 60), (' Finance income and finance costs ', 60), (' finance expenses', 57), (' other income ', 38), (' interest gains and losses ', 38), (' Other income ', 38), (' Profit from discontinued operation ', 38), (' other opertaing income ', 36), (' share of profit of equity accounted investees ', 36), (' Share of profit of equity-accounted investees, net of income tax ', 35), (' Impairement (expenses)/reversal ', 34), (' Share of gain/(loss) of joint venture ', 33), (' other income and revenue ', 32), (' Loss on revaluation of inventories ', 28), (' other gains/losses ', 27), (' interest revenue ', 27), (' net of tax ', 27), (' net of tax ', 27), (' Impairment loss ', 23), (' expenses ', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' Loss on revaluation of inventories ', 52), (' Profit from discontinued operation ', 46), (' Share of profit of equity-accounted investees, net of income tax ', 46), (' other gains/losses ', 44), (' share of profit of equity accounted investees ', 43), (' net of tax ', 43), (' net of tax ', 43), (' other opertaing income ', 41), (' Share of gain/(loss) of joint venture ', 41), (' net finance costs ', 39), ('finance cost ', 38), (' Impairment loss ', 38), (' finance expenses', 35), (' finance income and finance cost ', 33), (' finance income and costs ', 33), (' interest gains and losses ', 33), (' Finance income and finance costs ', 33), (' Finance income and costs ', 33), (' Impairement (expenses)/reversal ', 29), (' interest revenue ', 28), (' other income and revenue ', 28), (' other income ', 25), (' Other income ', 25), (' expenses ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' Impairement (expenses)/reversal ', 56), (' expenses ', 55), (' other income ', 52), (' Other income ', 52), (' other opertaing income ', 47), (' other income and revenue ', 47), (' net finance costs ', 45), (' finance income and costs ', 43), (' net of tax ', 43), (' net of tax ', 43), (' Finance income and costs ', 43), (' Share of profit of equity-accounted investees, net of income tax ', 38), ('finance cost ', 37), (' finance income and finance cost ', 36), (' Finance income and finance costs ', 36), (' Profit from discontinued operation ', 33), (' other gains/losses ', 32), (' interest revenue ', 32), (' interest gains and losses ', 32), (' Share of gain/(loss) of joint venture ', 32), (' Loss on revaluation of inventories ', 32), (' share of profit of equity accounted investees ', 27), (' Impairment loss ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' Profit from discontinued operation ', 53), (' other opertaing income ', 50), (' other gains/losses ', 49), (' share of profit of equity accounted investees ', 46), (' Loss on revaluation of inventories ', 43), (' Share of profit of equity-accounted investees, net of income tax ', 43), (' other income ', 38), (' Other income ', 38), (' Share of gain/(loss) of joint venture ', 37), (' net finance costs ', 34), (' finance income and finance cost ', 33), (' other income and revenue ', 33), (' Finance income and finance costs ', 33), (' Impairment loss ', 32), (' finance income and costs ', 30), (' Impairement (expenses)/reversal ', 30), (' Finance income and costs ', 30), ('finance cost ', 27), (' finance expenses', 26), (' interest gains and losses ', 25), (' interest revenue ', 24), (' net of tax ', 24), (' net of tax ', 24), (' expenses ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Share of profit of equity-accounted investees, net of income tax ', 48), (' other income and revenue ', 44), (' Profit from discontinued operation ', 44), (' share of profit of equity accounted investees ', 40), (' other opertaing income ', 36), (' Share of gain/(loss) of joint venture ', 36), (' other gains/losses ', 35), (' Impairement (expenses)/reversal ', 35), (' interest gains and losses ', 34), (' interest revenue ', 32), (' Loss on revaluation of inventories ', 32), (' other income ', 31), (' Other income ', 31), (' finance income and finance cost ', 30), (' Finance income and finance costs ', 30), (' net finance costs ', 27), (' finance income and costs ', 27), (' Finance income and costs ', 27), (' Impairment loss ', 25), ('finance cost ', 23), (' finance expenses', 22), (' net of tax ', 15), (' net of tax ', 15), (' expenses ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Share of profit of equity-accounted investees, net of income tax ', 48), (' other income and revenue ', 44), (' Profit from discontinued operation ', 44), (' share of profit of equity accounted investees ', 40), (' other opertaing income ', 36), (' Share of gain/(loss) of joint venture ', 36), (' other gains/losses ', 35), (' Impairement (expenses)/reversal ', 35), (' interest gains and losses ', 34), (' interest revenue ', 32), (' Loss on revaluation of inventories ', 32), (' other income ', 31), (' Other income ', 31), (' finance income and finance cost ', 30), (' Finance income and finance costs ', 30), (' net finance costs ', 27), (' finance income and costs ', 27), (' Finance income and costs ', 27), (' Impairment loss ', 25), ('finance cost ', 23), (' finance expenses', 22), (' net of tax ', 15), (' net of tax ', 15), (' expenses ', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' other income and revenue ', 46), (' Share of profit of equity-accounted investees, net of income tax ', 46), (' other opertaing income ', 45), (' net finance costs ', 44), (' other income ', 43), (' share of profit of equity accounted investees ', 43), (' Other income ', 43), (' Profit from discontinued operation ', 42), (' Impairement (expenses)/reversal ', 40), (' finance income and costs ', 39), (' Finance income and costs ', 39), (' finance expenses', 38), (' Share of gain/(loss) of joint venture ', 38), (' other gains/losses ', 36), (' Loss on revaluation of inventories ', 36), ('finance cost ', 35), (' finance income and finance cost ', 35), (' Finance income and finance costs ', 35), (' interest gains and losses ', 32), (' interest revenue ', 28), (' net of tax ', 24), (' net of tax ', 24), (' Impairment loss ', 22), (' expenses ', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 14, 15], 'score': 100, 'value': -8076.0, 'line_item_label': ['Other operating income', 'Financial expenses', 'Net financing costs'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [422.0, -4284.0, -4214.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['other revenue ', ' commission revenue ', ' government grants ', ' insurance proceeds ', ' foreign exchange gain ', ' other ', ' dividend from other parties ', ' other income ', ' net foreign exchange gain ', ' effective portion of changes in fair value of cash flow ', ' profit from discontinued operation ', ' net of tax ', ' share of jv income ', ' secondment income (tw recovery) ', ' japan recoveries ', ' margin charge income ', ' net foreign exchange gains/(losses) ', ' paid by customers - at amortised cost ', ' net foreign exchange (loss)/gain ', ' net ppe disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' quota lease income ', ' sundry income ', ' net (loss)/profit on disposal of non-current assets ', ' net other foreign exchange (losses)/gains ', ' Sub-lease rental income ', ' Profit on sale of assets ', ' Asset impairment ', ' Loss on sale of disposal of assets ', ' Remuneration from services linked to newly acquired entities ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' net gain / loss on disposal of property plant and equipment  ', ' Investment in joint venture ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Interest on unwinding of discount in provisions ', ' Profit from discontinued operation ', ' net of tax ', ' Net loss on disposal of property ', ' plant and equipment ', ' Net foreign exchange gains/(losses) ', ' Accretion expense ', ' Loss on loan refinancing ', ' Net foreign exchange (loss)/gain ', ' Net PPE disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Net (loss)/profit on disposal of non-current assets ', ' Net other foreign exchange (losses)/gains ', ' Miscellanous income ', ' Commision rebate ', ' Net foreign losses ', ' Derivaties at FVTPL- net change in fair value ', ' Other income - Bank guarantee ', ' Other expense - Net loss on sale or property, plant and equipment ', ' Other expense - Loss on inventory obsolescence ', ' Bank charges'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['other revenue ', ' commission revenue ', ' government grants ', ' insurance proceeds ', ' foreign exchange gain ', ' other ', ' dividend from other parties ', ' other income ', ' net foreign exchange gain ', ' effective portion of changes in fair value of cash flow ', ' profit from discontinued operation ', ' net of tax ', ' share of jv income ', ' secondment income (tw recovery) ', ' japan recoveries ', ' margin charge income ', ' net foreign exchange gains/(losses) ', ' paid by customers - at amortised cost ', ' net foreign exchange (loss)/gain ', ' net ppe disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' quota lease income ', ' sundry income ', ' net (loss)/profit on disposal of non-current assets ', ' net other foreign exchange (losses)/gains ', ' Sub-lease rental income ', ' Profit on sale of assets ', ' Asset impairment ', ' Loss on sale of disposal of assets ', ' Remuneration from services linked to newly acquired entities ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' net gain / loss on disposal of property plant and equipment  ', ' Investment in joint venture ', ' Share of gain/(loss) of joint venture ', ' net of tax ', ' Impairment loss ', ' Interest on unwinding of discount in provisions ', ' Profit from discontinued operation ', ' net of tax ', ' Net loss on disposal of property ', ' plant and equipment ', ' Net foreign exchange gains/(losses) ', ' Accretion expense ', ' Loss on loan refinancing ', ' Net foreign exchange (loss)/gain ', ' Net PPE disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' Arising from inventory of cranes ', ' Arising from inventory of spare parts ', ' Net (loss)/profit on disposal of non-current assets ', ' Net other foreign exchange (losses)/gains ', ' Miscellanous income ', ' Commision rebate ', ' Net foreign losses ', ' Derivaties at FVTPL- net change in fair value ', ' Other income - Bank guarantee ', ' Other expense - Net loss on sale or property, plant and equipment ', ' Other expense - Loss on inventory obsolescence ', ' Bank charges'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('NULL', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('NULL', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('NULL', 7)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('NULL', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('NULL', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('NULL', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('NULL', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('NULL', 7)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('NULL', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('NULL', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('deferred tax', 33), (' income tax', 33), ('provision for taxation previous year', 32), ('prior year ', 32), ('earlier year', 29), (' income tax expense', 24), (' income tax benefit', 23), ('amount transferred to retained earnings', 22), (' tax (expense)/benefit', 22), ('current tax', 20), (' income tax benefit/(expense)', 18), ('minimum alternate tax credit entitlement', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [('earlier year', 48), ('prior year ', 43), (' income tax benefit', 40), (' income tax benefit/(expense)', 38), ('deferred tax', 36), ('amount transferred to retained earnings', 35), (' income tax expense', 34), ('current tax', 33), (' tax (expense)/benefit', 32), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' tax (expense)/benefit', 45), ('current tax', 42), ('earlier year', 40), (' income tax benefit/(expense)', 38), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 35), ('prior year ', 35), (' income tax benefit', 33), ('provision for taxation previous year', 29), (' income tax expense', 28), ('deferred tax', 27), (' income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' income tax', 56), ('prior year ', 46), (' income tax expense', 44), ('earlier year', 43), (' income tax benefit', 42), ('provision for taxation previous year', 40), ('amount transferred to retained earnings', 37), (' income tax benefit/(expense)', 35), (' tax (expense)/benefit', 35), ('deferred tax', 32), ('current tax', 30), ('minimum alternate tax credit entitlement', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 45), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('deferred tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('minimum alternate tax credit entitlement', 29), ('earlier year', 29), ('provision for taxation previous year', 27), (' income tax', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' income tax expense', 61), (' income tax benefit/(expense)', 49), (' tax (expense)/benefit', 46), ('prior year ', 44), ('earlier year', 41), ('provision for taxation previous year', 39), ('deferred tax', 38), ('amount transferred to retained earnings', 36), (' income tax benefit', 35), (' income tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' income tax benefit', 43), (' income tax benefit/(expense)', 41), ('provision for taxation previous year', 38), ('amount transferred to retained earnings', 36), (' income tax expense', 36), (' tax (expense)/benefit', 35), ('minimum alternate tax credit entitlement', 33), ('earlier year', 30), ('deferred tax', 28), (' income tax', 28), ('prior year ', 27), ('current tax', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' income tax benefit', 53), (' income tax benefit/(expense)', 49), (' income tax expense', 48), (' income tax', 45), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 30), (' tax (expense)/benefit', 26), ('earlier year', 24), ('provision for taxation previous year', 19), ('deferred tax', 18), ('current tax', 17), ('prior year ', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' income tax expense', 67), (' income tax benefit/(expense)', 53), (' tax (expense)/benefit', 50), (' income tax benefit', 39), ('deferred tax', 35), ('amount transferred to retained earnings', 34), ('current tax', 32), ('earlier year', 31), ('minimum alternate tax credit entitlement', 30), (' income tax', 26), ('prior year ', 25), ('provision for taxation previous year', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [('provision for taxation previous year', 56), (' income tax benefit/(expense)', 49), ('deferred tax', 47), (' income tax benefit', 47), (' tax (expense)/benefit', 46), ('current tax', 44), (' income tax expense', 43), ('minimum alternate tax credit entitlement', 38), ('earlier year', 36), ('amount transferred to retained earnings', 33), (' income tax', 33), ('prior year ', 32)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 39), ('amount transferred to retained earnings', 38), ('earlier year', 32), (' income tax benefit/(expense)', 32), ('minimum alternate tax credit entitlement', 31), ('deferred tax', 29), (' income tax expense', 29), (' income tax benefit', 28), ('current tax', 27), (' tax (expense)/benefit', 27), (' income tax', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('provision for taxation previous year', 36), ('amount transferred to retained earnings', 34), (' income tax expense', 34), ('minimum alternate tax credit entitlement', 33), (' income tax benefit/(expense)', 31), (' income tax benefit', 29), (' tax (expense)/benefit', 26), ('current tax', 23), ('prior year ', 23), (' income tax', 23), ('earlier year', 19), ('deferred tax', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('provision for taxation previous year', 36), ('amount transferred to retained earnings', 34), (' income tax expense', 34), ('minimum alternate tax credit entitlement', 33), (' income tax benefit/(expense)', 31), (' income tax benefit', 29), (' tax (expense)/benefit', 26), ('current tax', 23), ('prior year ', 23), (' income tax', 23), ('earlier year', 19), ('deferred tax', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': -1300.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['6'], 'line_item_value': [-1300.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('deferred tax', 33), (' income tax', 33), ('provision for taxation previous year', 32), ('prior year ', 32), ('earlier year', 29), (' income tax expense', 24), (' income tax benefit', 23), ('amount transferred to retained earnings', 22), (' tax (expense)/benefit', 22), ('current tax', 20), (' income tax benefit/(expense)', 18), ('minimum alternate tax credit entitlement', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [('earlier year', 48), ('prior year ', 43), (' income tax benefit', 40), (' income tax benefit/(expense)', 38), ('deferred tax', 36), ('amount transferred to retained earnings', 35), (' income tax expense', 34), ('current tax', 33), (' tax (expense)/benefit', 32), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' tax (expense)/benefit', 45), ('current tax', 42), ('earlier year', 40), (' income tax benefit/(expense)', 38), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 35), ('prior year ', 35), (' income tax benefit', 33), ('provision for taxation previous year', 29), (' income tax expense', 28), ('deferred tax', 27), (' income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' income tax', 56), ('prior year ', 46), (' income tax expense', 44), ('earlier year', 43), (' income tax benefit', 42), ('provision for taxation previous year', 40), ('amount transferred to retained earnings', 37), (' income tax benefit/(expense)', 35), (' tax (expense)/benefit', 35), ('deferred tax', 32), ('current tax', 30), ('minimum alternate tax credit entitlement', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 45), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('deferred tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('minimum alternate tax credit entitlement', 29), ('earlier year', 29), ('provision for taxation previous year', 27), (' income tax', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' income tax expense', 61), (' income tax benefit/(expense)', 49), (' tax (expense)/benefit', 46), ('prior year ', 44), ('earlier year', 41), ('provision for taxation previous year', 39), ('deferred tax', 38), ('amount transferred to retained earnings', 36), (' income tax benefit', 35), (' income tax', 31), ('current tax', 29), ('minimum alternate tax credit entitlement', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' income tax benefit', 43), (' income tax benefit/(expense)', 41), ('provision for taxation previous year', 38), ('amount transferred to retained earnings', 36), (' income tax expense', 36), (' tax (expense)/benefit', 35), ('minimum alternate tax credit entitlement', 33), ('earlier year', 30), ('deferred tax', 28), (' income tax', 28), ('prior year ', 27), ('current tax', 18)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' income tax benefit', 53), (' income tax benefit/(expense)', 49), (' income tax expense', 48), (' income tax', 45), ('minimum alternate tax credit entitlement', 36), ('amount transferred to retained earnings', 30), (' tax (expense)/benefit', 26), ('earlier year', 24), ('provision for taxation previous year', 19), ('deferred tax', 18), ('current tax', 17), ('prior year ', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' income tax expense', 67), (' income tax benefit/(expense)', 53), (' tax (expense)/benefit', 50), (' income tax benefit', 39), ('deferred tax', 35), ('amount transferred to retained earnings', 34), ('current tax', 32), ('earlier year', 31), ('minimum alternate tax credit entitlement', 30), (' income tax', 26), ('prior year ', 25), ('provision for taxation previous year', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [('provision for taxation previous year', 56), (' income tax benefit/(expense)', 49), ('deferred tax', 47), (' income tax benefit', 47), (' tax (expense)/benefit', 46), ('current tax', 44), (' income tax expense', 43), ('minimum alternate tax credit entitlement', 38), ('earlier year', 36), ('amount transferred to retained earnings', 33), (' income tax', 33), ('prior year ', 32)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('provision for taxation previous year', 58), ('prior year ', 39), ('amount transferred to retained earnings', 38), ('earlier year', 32), (' income tax benefit/(expense)', 32), ('minimum alternate tax credit entitlement', 31), ('deferred tax', 29), (' income tax expense', 29), (' income tax benefit', 28), ('current tax', 27), (' tax (expense)/benefit', 27), (' income tax', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('provision for taxation previous year', 36), ('amount transferred to retained earnings', 34), (' income tax expense', 34), ('minimum alternate tax credit entitlement', 33), (' income tax benefit/(expense)', 31), (' income tax benefit', 29), (' tax (expense)/benefit', 26), ('current tax', 23), ('prior year ', 23), (' income tax', 23), ('earlier year', 19), ('deferred tax', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('provision for taxation previous year', 36), ('amount transferred to retained earnings', 34), (' income tax expense', 34), ('minimum alternate tax credit entitlement', 33), (' income tax benefit/(expense)', 31), (' income tax benefit', 29), (' tax (expense)/benefit', 26), ('current tax', 23), ('prior year ', 23), (' income tax', 23), ('earlier year', 19), ('deferred tax', 17)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': -2305.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['6'], 'line_item_value': [-2305.0]}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 1-apr , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 1-apr , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 1-apr , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 1-apr , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [(' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' income tax expense on continuing operations', 45), ('income tax expense', 38), (' deferred income tax', 33), (' current income tax', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 1-apr , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none tax loss carry-forwards , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 41), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' deferred income tax', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 1-apr , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none contract liabilities - service contracts , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 1-apr , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none net tax asset , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' deferred income tax', 47), ('income tax expense', 45), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 1-apr , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' income tax expense on continuing operations', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised as profit or loss recognised as profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised as profit or loss recognised as profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised as profit or loss recognised as profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised as profit or loss recognised as profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [(' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' income tax expense on continuing operations', 45), ('income tax expense', 38), (' deferred income tax', 33), (' current income tax', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised as profit or loss recognised as profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none tax loss carry-forwards , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 41), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' deferred income tax', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised as profit or loss recognised as profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none contract liabilities - service contracts , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised as profit or loss recognised as profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none net tax asset , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' deferred income tax', 47), ('income tax expense', 45), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised as profit or loss recognised as profit or loss , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 37), (' current income tax', 35), (' deferred income tax', 33), ('income tax expense', 31)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised on business , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 69), (' total income tax expense / (benefit)', 46), (' current income tax', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 31), ('income tax expense', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised on business , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 69), (' total income tax expense / (benefit)', 46), (' current income tax', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 31), ('income tax expense', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised on business , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 69), (' total income tax expense / (benefit)', 46), (' current income tax', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 31), ('income tax expense', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised on business , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 69), (' total income tax expense / (benefit)', 46), (' current income tax', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 31), ('income tax expense', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [(' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' income tax expense on continuing operations', 45), ('income tax expense', 38), (' deferred income tax', 33), (' current income tax', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised on business , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 69), (' total income tax expense / (benefit)', 46), (' current income tax', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 31), ('income tax expense', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none tax loss carry-forwards , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 41), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' deferred income tax', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised on business , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 69), (' total income tax expense / (benefit)', 46), (' current income tax', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 31), ('income tax expense', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none contract liabilities - service contracts , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised on business , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 69), (' total income tax expense / (benefit)', 46), (' current income tax', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 31), ('income tax expense', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none net tax asset , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' deferred income tax', 47), ('income tax expense', 45), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = recognised on business , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 69), (' total income tax expense / (benefit)', 46), (' current income tax', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 31), ('income tax expense', 23)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 31-mar , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 30), ('income tax expense', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 31-mar , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 30), ('income tax expense', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 31-mar , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 30), ('income tax expense', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 31-mar , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 30), ('income tax expense', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [(' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' income tax expense on continuing operations', 45), ('income tax expense', 38), (' deferred income tax', 33), (' current income tax', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 31-mar , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 30), ('income tax expense', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none tax loss carry-forwards , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 41), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' deferred income tax', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 31-mar , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 30), ('income tax expense', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none contract liabilities - service contracts , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 31-mar , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 30), ('income tax expense', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none net tax asset , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' deferred income tax', 47), ('income tax expense', 45), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = balance 31-mar , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' current income tax', 40), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 30), ('income tax expense', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [(' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' income tax expense on continuing operations', 45), ('income tax expense', 38), (' deferred income tax', 33), (' current income tax', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none tax loss carry-forwards , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 41), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' deferred income tax', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none contract liabilities service contracts , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none net tax asset , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' deferred income tax', 47), ('income tax expense', 45), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [(' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' income tax expense on continuing operations', 45), ('income tax expense', 38), (' deferred income tax', 33), (' current income tax', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none tax loss carry-forwards , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 41), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' deferred income tax', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none contract liabilities service contracts , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none net tax asset , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' deferred income tax', 47), ('income tax expense', 45), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [(' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' income tax expense on continuing operations', 45), ('income tax expense', 38), (' deferred income tax', 33), (' current income tax', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none tax loss carry-forwards , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 41), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' deferred income tax', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none contract liabilities service contracts , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none net tax asset , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' deferred income tax', 47), ('income tax expense', 45), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none property, plant and equipment , res_fuzz_match = [(' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' deferred income tax', 40), ('income tax expense', 39), (' total income tax expense / (benefit)', 39), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 34)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none inventories , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 43), (' total tax (expense)/benefit in income statement', 43), ('income tax expense', 36), (' current income tax', 36), (' deferred income tax', 36), (' total income tax expense / (benefit)', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none lease liabilities , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' total tax (expense)/benefit in income statement', 38), (' deferred income tax', 33), ('income tax expense', 31), (' current income tax', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none provisions , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 45), (' total income tax expense / (benefit)', 36), (' total tax (expense)/benefit in income statement', 36), ('income tax expense', 27), (' current income tax', 27), (' deferred income tax', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none employee benefits , res_fuzz_match = [(' total income tax expense / (benefit)', 62), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 55), (' income tax expense on continuing operations', 45), ('income tax expense', 38), (' deferred income tax', 33), (' current income tax', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none tax loss carry-forwards , res_fuzz_match = [('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 42), (' total income tax expense / (benefit)', 41), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' deferred income tax', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none contract liabilities service contracts , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total tax (expense)/benefit in income statement', 42), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows = none net tax asset , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' deferred income tax', 47), ('income tax expense', 45), (' income tax expense on continuing operations', 44), (' total tax (expense)/benefit in income statement', 44), (' current income tax', 41)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:ProfitLossDataBucketing.py,  function: get_cdm_item_data_buckets
2023-08-28 12:04:02+0530 - sLogger - ERROR - error occured: unsupported operand type(s) for +: 'int' and 'str'
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('share of', 27), ('share in', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' prior period ', 29), (' Actuarial gains / (losses) on retirement benefit obligation', 22), ('exceptional ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' prior period ', 40), (' Actuarial gains / (losses) on retirement benefit obligation', 32), ('exceptional ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 36), (' prior period ', 24), ('exceptional ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), (' prior period ', 29), ('exceptional ', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional ', 42), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 32)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' prior period ', 48), ('exceptional ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 48), (' prior period ', 35), ('exceptional ', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 28), ('exceptional ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' prior period ', 31), ('exceptional ', 30), (' Actuarial gains / (losses) on retirement benefit obligation', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 29), (' prior period ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 45), (' prior period ', 42), ('exceptional ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' prior period ', 53), (' Actuarial gains / (losses) on retirement benefit obligation', 35), ('exceptional ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 39), (' prior period ', 31), ('exceptional ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 39), (' prior period ', 31), ('exceptional ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 34), ('exceptional ', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [(' prior period ', 29), (' Actuarial gains / (losses) on retirement benefit obligation', 22), ('exceptional ', 13)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [(' prior period ', 40), (' Actuarial gains / (losses) on retirement benefit obligation', 32), ('exceptional ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 36), (' prior period ', 24), ('exceptional ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 19), (' prior period ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), (' prior period ', 29), ('exceptional ', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional ', 42), (' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 32)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [(' prior period ', 48), ('exceptional ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 33)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 48), (' prior period ', 35), ('exceptional ', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [(' prior period ', 32), (' Actuarial gains / (losses) on retirement benefit obligation', 28), ('exceptional ', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [(' prior period ', 31), ('exceptional ', 30), (' Actuarial gains / (losses) on retirement benefit obligation', 27)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), ('exceptional ', 29), (' prior period ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 45), (' prior period ', 42), ('exceptional ', 22)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [(' prior period ', 53), (' Actuarial gains / (losses) on retirement benefit obligation', 35), ('exceptional ', 19)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 39), (' prior period ', 31), ('exceptional ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 39), (' prior period ', 31), ('exceptional ', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 42), (' prior period ', 34), ('exceptional ', 20)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-28 12:04:02+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-28 12:04:02+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('NULL', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('NULL', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('NULL', 7)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('NULL', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('NULL', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-28 12:04:02+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-28 12:04:02+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = sale of goods , res_fuzz_match = [('NULL', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rendering of services , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = rental revenue , res_fuzz_match = [('NULL', 24)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating income , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = administrative expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other operating expenses , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = operating profit/(loss) before financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial income , res_fuzz_match = [('NULL', 12)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = financial expenses , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = net financing costs , res_fuzz_match = [('NULL', 11)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit / (loss) before tax , res_fuzz_match = [('NULL', 8)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = profit/ (loss) for the period , res_fuzz_match = [('NULL', 7)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('NULL', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = other comprehensive income to be reclassified to profit or loss in subsequent periods , res_fuzz_match = [('NULL', 9)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-08-28 12:04:02+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

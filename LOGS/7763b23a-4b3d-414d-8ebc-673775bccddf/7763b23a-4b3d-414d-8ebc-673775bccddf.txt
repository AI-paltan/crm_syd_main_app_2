2023-07-26 14:19:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-26 14:19:22+0530 - sLogger - DEBUG - process_main_pages started
2023-07-26 14:19:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-26 14:19:22+0530 - sLogger - DEBUG - start_refactoring started
2023-07-26 14:19:22+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_without_notes
2023-07-26 14:19:22+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-07-26 14:19:22+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-26 14:19:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-26 14:19:22+0530 - sLogger - DEBUG - start_refactoring started
2023-07-26 14:19:22+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-26 14:19:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-26 14:19:22+0530 - sLogger - DEBUG - start_refactoring started
2023-07-26 14:19:22+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-26 14:19:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-26 14:19:22+0530 - sLogger - DEBUG - set_section_details started
2023-07-26 14:19:22+0530 - sLogger - DEBUG - CURRENT ASSETS | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current assets | score 100
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current liabilities | score 67
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent assets | score 90
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 61
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current assets | score 95
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current liabilities | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Cash assets | [('assets', 67), ('current assets', 61), ('noncurrent assets', 61), ('equity and liabilities', 37), ('equity liabilities', 35), ('current liabilities', 33), ('equity', 25), ('noncurrent liabilities', 25), ('liabilities', 12)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD current assets | score 67
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD current liabilities | score 33
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrent assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrent liabilities | score 31
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD non current assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD non current liabilities | score 31
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD equity and liabilities | score 31
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Receivables | [('equity', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity and liabilities', 17), ('noncurrent liabilities', 10)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD current assets | score 40
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD current liabilities | score 53
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrent assets | score 40
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrent liabilities | score 50
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD non current assets | score 40
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD non current liabilities | score 50
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD equity and liabilities | score 50
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Inventory | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD current assets | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD current liabilities | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrent assets | score 40
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrent liabilities | score 40
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD non current assets | score 38
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD non current liabilities | score 38
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD equity and liabilities | score 38
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD equity | score 45
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Other | [('current assets', 22), ('noncurrent assets', 22), ('noncurrent liabilities', 21), ('assets', 20), ('equity', 18), ('current liabilities', 11), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current assets | score 21
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent assets | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current assets | score 26
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity and liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity | score 18
2023-07-26 14:19:22+0530 - sLogger - DEBUG - TOTAL CURRENT ASSETS | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current assets | score 95
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current liabilities | score 56
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent assets | score 81
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 57
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current assets | score 84
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current liabilities | score 60
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - NONCURRENT ASSETS | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current liabilities | score 61
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 100
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 72
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current assets | score 97
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current liabilities | score 70
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Plant and Equipment | [('equity and liabilities', 69), ('equity liabilities', 50), ('equity', 48), ('current assets', 36), ('assets', 30), ('noncurrent assets', 29), ('liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD current assets | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD current liabilities | score 40
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrent assets | score 33
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrent liabilities | score 29
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD non current assets | score 41
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD non current liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD equity and liabilities | score 60
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD equity | score 60
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Investments | [('assets', 36), ('equity', 33), ('equity and liabilities', 26), ('current assets', 21), ('noncurrent assets', 21), ('equity liabilities', 21), ('current liabilities', 20), ('noncurrent liabilities', 20), ('liabilities', 17)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current assets | score 40
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current liabilities | score 32
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent assets | score 43
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent liabilities | score 32
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current assets | score 41
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current liabilities | score 32
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity and liabilities | score 32
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Advance Payments and Deposits | [('equity and liabilities', 42), ('current assets', 36), ('assets', 26), ('noncurrent assets', 26), ('equity liabilities', 26), ('current liabilities', 25), ('noncurrent liabilities', 25), ('equity', 19), ('liabilities', 12)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD current assets | score 45
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD current liabilities | score 38
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrent assets | score 43
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrent liabilities | score 39
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD non current assets | score 43
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD non current liabilities | score 38
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD equity and liabilities | score 41
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Right of Use Assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('liabilities', 19)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD current assets | score 57
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD current liabilities | score 32
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrent assets | score 56
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrent liabilities | score 34
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD non current assets | score 59
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD non current liabilities | score 38
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equity and liabilities | score 34
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - TOTAL NONCURRENT ASSETS | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current liabilities | score 52
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 95
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 62
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current assets | score 83
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current liabilities | score 61
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - TOTAL ASSETS | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current assets | score 64
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent assets | score 64
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity and liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - CURRENT LIABILITIES | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current assets | score 67
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current liabilities | score 100
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 61
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 93
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current assets | score 59
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current liabilities | score 95
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 69
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Payables | [('liabilities', 50), ('equity and liabilities', 35), ('equity liabilities', 32), ('current liabilities', 30), ('noncurrent liabilities', 30), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('equity', 0)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD current assets | score 34
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD current liabilities | score 45
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrent assets | score 34
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrent liabilities | score 45
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD non current assets | score 34
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD non current liabilities | score 45
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD equity and liabilities | score 45
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD equity | score 14
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Interest Bearing Liabilities | [('current liabilities', 65), ('equity liabilities', 61), ('equity and liabilities', 59), ('liabilities', 46), ('noncurrent liabilities', 35), ('equity', 31), ('current assets', 30), ('assets', 24), ('noncurrent assets', 24)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD current assets | score 33
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD current liabilities | score 69
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD noncurrent assets | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD noncurrent liabilities | score 65
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD non current assets | score 35
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD non current liabilities | score 63
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD equity and liabilities | score 68
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Other | [('current assets', 22), ('noncurrent assets', 22), ('noncurrent liabilities', 21), ('assets', 20), ('equity', 18), ('current liabilities', 11), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current assets | score 21
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent assets | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current assets | score 26
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity and liabilities | score 36
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity | score 18
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Lease Liabilities Right of Use Assets | [('equity and liabilities', 45), ('equity liabilities', 45), ('current liabilities', 44), ('current assets', 40), ('noncurrent liabilities', 39), ('liabilities', 36), ('noncurrent assets', 35), ('assets', 31), ('equity', 18)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current liabilities | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent liabilities | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current liabilities | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity and liabilities | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - TOTAL CURRENT LIABILITIES | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current liabilities | score 95
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 57
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 85
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current assets | score 60
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current liabilities | score 88
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - NONCURRENT LIABILITIES | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 93
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 72
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 100
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current assets | score 70
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 98
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 65
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-26 14:19:22+0530 - sLogger - DEBUG - Lease Liabilities Right of Use Assets | [('equity and liabilities', 45), ('equity liabilities', 45), ('current liabilities', 44), ('current assets', 40), ('noncurrent liabilities', 39), ('liabilities', 36), ('noncurrent assets', 35), ('assets', 31), ('equity', 18)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current liabilities | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent liabilities | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current liabilities | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity and liabilities | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - TOTAL NONCURRENT LIABILITIES | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 81
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 95
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current assets | score 61
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - TOTAL LIABILITIES | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current assets | score 32
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current liabilities | score 75
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent assets | score 35
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent liabilities | score 75
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current assets | score 34
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current liabilities | score 75
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity and liabilities | score 75
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - NET ASSETS | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current assets | score 75
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current liabilities | score 41
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent liabilities | score 44
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current assets | score 86
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current liabilities | score 42
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity and liabilities | score 38
2023-07-26 14:19:22+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity | score 30
2023-07-26 14:19:22+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-26 14:19:22+0530 - sLogger - DEBUG - set_section_details started
2023-07-26 14:19:22+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Activities 5 | working capital adjustments
2023-07-26 14:19:24+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 14:19:24+0530 - sLogger - ERROR - error occured: 'year'
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: 'value'
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: 'value'
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: 'year'
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: 'value'
2023-07-26 14:19:25+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('cash and cash equivalents', 45), (' cash and cash equivalents', 45), ('cash and bank balances', 40), ('cash and short term deposits', 38), ('other bank balances', 30), ('bank balances other than above', 27), ('bank balances other than cash and cash equivalents', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('cash and short term deposits', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('bank balances other than above', 12), ('cash and bank balances', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other bank balances', 45), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('bank balances other than cash and cash equivalents', 20), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('cash and bank balances', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('cash and cash equivalents', 45), (' cash and cash equivalents', 45), ('cash and bank balances', 40), ('cash and short term deposits', 38), ('other bank balances', 30), ('bank balances other than above', 27), ('bank balances other than cash and cash equivalents', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('cash and short term deposits', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('bank balances other than above', 12), ('cash and bank balances', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other bank balances', 45), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('bank balances other than cash and cash equivalents', 20), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('cash and bank balances', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('inventories', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('inventories', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('inventories', 100)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('inventories', 40)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 4700378.0, 'line_item_label': ['Inventory'], 'note_numbers': ['8'], 'line_item_value': [4700378.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('inventories', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('inventories', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('inventories', 100)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('inventories', 40)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 3923249.0, 'line_item_label': ['Inventory'], 'note_numbers': ['8'], 'line_item_value': [3923249.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), ('other current assets', 55), ('other financial assets', 55), ('other current financial assets', 49), ('prepayments', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('prepayments', 33), ('other current assets', 24), ('other financial assets', 24), ('other current financial assets', 24), ('other assets', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), ('other current assets', 55), ('other financial assets', 55), ('other current financial assets', 49), ('prepayments', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('prepayments', 33), ('other current assets', 24), ('other financial assets', 24), ('other current financial assets', 24), ('other assets', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), (' financial assets', 61), ('other current assets', 55), (' other current assets', 55), (' biological assets', 55), (' other financial assets', 55), (' trade and other receivables', 31), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [(' trade and other receivables', 43), (' financial assets', 32), (' income tax receivable from related parties', 31), (' deferred operating expenditure', 30), ('other current assets', 24), ('other assets', 24), (' other current assets', 24), (' other financial assets', 24), (' biological assets', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 37), (' deferred operating expenditure', 23), (' income tax receivable from related parties', 21), (' biological assets', 12), (' financial assets', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), (' financial assets', 61), ('other current assets', 55), (' other current assets', 55), (' biological assets', 55), (' other financial assets', 55), (' trade and other receivables', 31), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [(' trade and other receivables', 43), (' financial assets', 32), (' income tax receivable from related parties', 31), (' deferred operating expenditure', 30), ('other current assets', 24), ('other assets', 24), (' other current assets', 24), (' other financial assets', 24), (' biological assets', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 37), (' deferred operating expenditure', 23), (' income tax receivable from related parties', 21), (' biological assets', 12), (' financial assets', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('current assets', 61)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('current assets', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('current assets', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current assets', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('current assets', 61)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('current assets', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('current assets', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current assets', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('right of use', 22), ('right to use', 22), ('work in progress', 15), ('rightofuse', 11), ('righttouse', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('rightofuse', 33), ('righttouse', 33), ('right of use', 33), ('right to use', 33), ('work in progress', 33), ('tangible', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 40), ('capital workinprogress', 40), ('capital work in progress', 37), ('work in progress', 31), ('rightofuse', 22), ('righttouse', 22), ('right of use', 22), ('right to use', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('right of use', 100), ('right to use', 100), ('rightofuse', 78), ('righttouse', 78), ('capital work-in-progress', 40), ('capital workinprogress', 40), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 463799.0, 'line_item_label': ['Right of Use Assets'], 'note_numbers': ['13'], 'line_item_value': [463799.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('right of use', 22), ('right to use', 22), ('work in progress', 15), ('rightofuse', 11), ('righttouse', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('rightofuse', 33), ('righttouse', 33), ('right of use', 33), ('right to use', 33), ('work in progress', 33), ('tangible', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 40), ('capital workinprogress', 40), ('capital work in progress', 37), ('work in progress', 31), ('rightofuse', 22), ('righttouse', 22), ('right of use', 22), ('right to use', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('right of use', 100), ('right to use', 100), ('rightofuse', 78), ('righttouse', 78), ('capital work-in-progress', 40), ('capital workinprogress', 40), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 358221.0, 'line_item_label': ['Right of Use Assets'], 'note_numbers': ['13'], 'line_item_value': [358221.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible assets', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible assets', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible', 50), ('intangible under development', 50), ('intangible assets under development', 50)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('intangible', 67), ('intangible assets under development', 52), ('intangible under development', 50)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets under development', 47), ('intangible under development', 40), ('intangible', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible', 50), ('intangible under development', 50), ('intangible assets under development', 50)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('intangible', 67), ('intangible assets under development', 52), ('intangible under development', 50)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets under development', 47), ('intangible under development', 40), ('intangible', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('donations', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('donations', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('joint ventures and associates', 53), ('investment', 50), (' investment in associate', 46), ('derivative financial instruments', 42), (' investments accounted for using the equity method', 38), (' investment in joint venture', 37)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 330001.0, 'line_item_label': ['Investments'], 'note_numbers': ['11'], 'line_item_value': [330001.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('joint ventures and associates', 53), ('investment', 50), (' investment in associate', 46), ('derivative financial instruments', 42), (' investments accounted for using the equity method', 38), (' investment in joint venture', 37)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 330001.0, 'line_item_label': ['Investments'], 'note_numbers': ['11'], 'line_item_value': [330001.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = none investments in unlisted companies , res_fuzz_match = [(' investment in associate', 62), ('investment in joint venture', 53), (' carrying amount at the end of the financial year', 42)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [('investment in joint venture', 67), (' carrying amount at the end of the financial year', 67), (' investment in associate', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = at cost total , res_fuzz_match = [('investment in joint venture', 50), (' investment in associate', 40), (' carrying amount at the end of the financial year', 40)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [('investment in joint venture', 67), (' carrying amount at the end of the financial year', 67), (' investment in associate', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = none investments in unlisted companies , res_fuzz_match = [(' investment in associate', 62), ('investment in joint venture', 53), (' carrying amount at the end of the financial year', 42)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [('investment in joint venture', 67), (' carrying amount at the end of the financial year', 67), (' investment in associate', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = at cost total , res_fuzz_match = [('investment in joint venture', 50), (' investment in associate', 40), (' carrying amount at the end of the financial year', 40)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [('investment in joint venture', 67), (' carrying amount at the end of the financial year', 67), (' investment in associate', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('deferred charges', 32), ('deferred tax assets', 29), ('deferred tax', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('deferred charges', 32), ('deferred tax assets', 29), ('deferred tax', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), ('other assets', 24), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' financial assets', 31), (' other non-current assets', 31), (' other non-current assets', 31), (' leased assets', 28), ('other assets', 27), (' other assets', 27), (' loan receivables', 27), ('non-current', 18), (' leases', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('other assets', 62), (' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), ('other assets', 24), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' financial assets', 31), (' other non-current assets', 31), (' other non-current assets', 31), (' leased assets', 28), ('other assets', 27), (' other assets', 27), (' loan receivables', 27), ('non-current', 18), (' leases', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('other assets', 62), (' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('non-current assets total', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('non-current assets total', 16)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('non-current assets total', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('non-current assets total', 47)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('non-current assets total', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('non-current assets total', 16)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('non-current assets total', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('non-current assets total', 47)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('lease liabilities', 47), (' loans and borrowings', 29), (' bank overdraft', 20), (' leases', 20), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), ('shortterm borrowings', 9)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('lease liabilities', 65), (' bank overdraft', 35), ('short term debt', 34), (' loans and borrowings', 34), ('shortterm borrowings', 33), ('short-term debt', 29), ('shortterm debt', 29), (' leases', 25), ('borrowings', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('short-term debt', 42), ('shortterm debt', 42), ('short term debt', 40), ('shortterm borrowings', 38), ('borrowings', 36), (' bank overdraft', 32), (' leases', 22), (' loans and borrowings', 20), ('lease liabilities', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 58), ('short term debt', 38), ('short-term debt', 34), ('shortterm debt', 34), (' leases', 26), (' loans and borrowings', 24), (' bank overdraft', 24), ('shortterm borrowings', 23), ('borrowings', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('lease liabilities', 47), (' loans and borrowings', 29), (' bank overdraft', 20), (' leases', 20), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), ('shortterm borrowings', 9)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('lease liabilities', 65), (' bank overdraft', 35), ('short term debt', 34), (' loans and borrowings', 34), ('shortterm borrowings', 33), ('short-term debt', 29), ('shortterm debt', 29), (' leases', 25), ('borrowings', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('short-term debt', 42), ('shortterm debt', 42), ('short term debt', 40), ('shortterm borrowings', 38), ('borrowings', 36), (' bank overdraft', 32), (' leases', 22), (' loans and borrowings', 20), ('lease liabilities', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 58), ('short term debt', 38), ('short-term debt', 34), ('shortterm debt', 34), (' leases', 26), (' loans and borrowings', 24), (' bank overdraft', 24), ('shortterm borrowings', 23), ('borrowings', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('note payable(debt)', 55)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('note payable(debt)', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('note payable(debt)', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('note payable(debt)', 55)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('note payable(debt)', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('note payable(debt)', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade payable', 67), ('accounts payable', 60), ('other trade payables', 50), ('trade and other payables', 43), ('small enterprises', 29), ('micro enterprises and small enterprises', 15), ('outstanding dues of micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('micro enterprises', 10), ('total outstanding due of other creditors other than micro and small', 9)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('small enterprises', 51), ('micro enterprises', 46), ('micro enterprises and small enterprises', 44), ('trade and other payables', 43), ('accounts payable', 41), ('other than micro and small enterprises', 39), ('outstanding dues of creditors other than', 38), ('other trade payables', 37), ('outstanding dues of micro enterprises and small enterprises', 35), ('total outstanding due of other creditors other than micro and small', 35), ('outstanding dues of creditors other than micro enterprises and small enterprises', 32), ('trade payable', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other trade payables', 43), ('trade and other payables', 37), ('micro enterprises', 30), ('small enterprises', 30), ('outstanding dues of creditors other than', 27), ('trade payable', 24), ('other than micro and small enterprises', 24), ('accounts payable', 21), ('micro enterprises and small enterprises', 15), ('total outstanding due of other creditors other than micro and small', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41), ('other trade payables', 40), ('trade payable', 36), ('micro enterprises and small enterprises', 35), ('other than micro and small enterprises', 35), ('accounts payable', 34), ('micro enterprises', 33), ('small enterprises', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('outstanding dues of creditors other than', 31), ('total outstanding due of other creditors other than micro and small', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade payable', 67), ('accounts payable', 60), ('other trade payables', 50), ('trade and other payables', 43), ('small enterprises', 29), ('micro enterprises and small enterprises', 15), ('outstanding dues of micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('micro enterprises', 10), ('total outstanding due of other creditors other than micro and small', 9)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('small enterprises', 51), ('micro enterprises', 46), ('micro enterprises and small enterprises', 44), ('trade and other payables', 43), ('accounts payable', 41), ('other than micro and small enterprises', 39), ('outstanding dues of creditors other than', 38), ('other trade payables', 37), ('outstanding dues of micro enterprises and small enterprises', 35), ('total outstanding due of other creditors other than micro and small', 35), ('outstanding dues of creditors other than micro enterprises and small enterprises', 32), ('trade payable', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other trade payables', 43), ('trade and other payables', 37), ('micro enterprises', 30), ('small enterprises', 30), ('outstanding dues of creditors other than', 27), ('trade payable', 24), ('other than micro and small enterprises', 24), ('accounts payable', 21), ('micro enterprises and small enterprises', 15), ('total outstanding due of other creditors other than micro and small', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41), ('other trade payables', 40), ('trade payable', 36), ('micro enterprises and small enterprises', 35), ('other than micro and small enterprises', 35), ('accounts payable', 34), ('micro enterprises', 33), ('small enterprises', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('outstanding dues of creditors other than', 31), ('total outstanding due of other creditors other than micro and small', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade and other payables', 43), ('other liabilities', 33), ('other financial liabilities', 31), ('other current financial liabilities', 24), ('other current liabilities', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('other current liabilities', 55), ('other current financial liabilities', 46), ('other financial liabilities', 45), ('trade and other payables', 43), ('other liabilities', 38)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other liabilities', 59), ('other current liabilities', 40), ('other financial liabilities', 40), ('trade and other payables', 37), ('other current financial liabilities', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), ('other current financial liabilities', 51), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 41)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 82, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade and other payables', 43), ('other liabilities', 33), ('other financial liabilities', 31), ('other current financial liabilities', 24), ('other current liabilities', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('other current liabilities', 55), ('other current financial liabilities', 46), ('other financial liabilities', 45), ('trade and other payables', 43), ('other liabilities', 38)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other liabilities', 59), ('other current liabilities', 40), ('other financial liabilities', 40), ('trade and other payables', 37), ('other current financial liabilities', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), ('other current financial liabilities', 51), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 41)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 82, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' income tax payable', 100), ('current tax liabilities', 50), ('tax', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 38), ('tax', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' income tax payable', 40), ('tax', 33), ('current tax liabilities', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('tax', 33), ('current tax liabilities', 29), (' income tax payable', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 1526885.0, 'line_item_label': ['Payables'], 'note_numbers': ['14'], 'line_item_value': [1526885.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' income tax payable', 100), ('current tax liabilities', 50), ('tax', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 38), ('tax', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' income tax payable', 40), ('tax', 33), ('current tax liabilities', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('tax', 33), ('current tax liabilities', 29), (' income tax payable', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 1726142.0, 'line_item_label': ['Payables'], 'note_numbers': ['14'], 'line_item_value': [1726142.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' trade and other payables', 43), (' financial liabilities', 40), (' other financial liabilities', 31), ('other current liabilities', 23), (' other current liabilities', 23), (' foreign exchange contract liability', 22), (' employee benefits', 19), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('other current liabilities', 55), (' other current liabilities', 55), (' financial liabilities', 53), (' foreign exchange contract liability', 47), (' other financial liabilities', 45), (' trade and other payables', 43), (' employee benefits', 40), (' deferred revenue', 31), (' customer deposits', 24), ('provisions', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 40), (' trade and other payables', 37), (' deferred revenue', 24), (' foreign exchange contract liability', 22), (' customer deposits', 21), (' employee benefits', 20), ('provisions', 18), (' financial liabilities', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), (' other current liabilities', 51), (' other financial liabilities', 47), (' trade and other payables', 41), (' foreign exchange contract liability', 41), (' financial liabilities', 39), (' customer deposits', 34), (' employee benefits', 29), (' deferred revenue', 26), ('provisions', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 16], 'score': 100, 'value': 63080.0, 'line_item_label': ['CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 63080.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' trade and other payables', 43), (' financial liabilities', 40), (' other financial liabilities', 31), ('other current liabilities', 23), (' other current liabilities', 23), (' foreign exchange contract liability', 22), (' employee benefits', 19), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('other current liabilities', 55), (' other current liabilities', 55), (' financial liabilities', 53), (' foreign exchange contract liability', 47), (' other financial liabilities', 45), (' trade and other payables', 43), (' employee benefits', 40), (' deferred revenue', 31), (' customer deposits', 24), ('provisions', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 40), (' trade and other payables', 37), (' deferred revenue', 24), (' foreign exchange contract liability', 22), (' customer deposits', 21), (' employee benefits', 20), ('provisions', 18), (' financial liabilities', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), (' other current liabilities', 51), (' other financial liabilities', 47), (' trade and other payables', 41), (' foreign exchange contract liability', 41), (' financial liabilities', 39), (' customer deposits', 34), (' employee benefits', 29), (' deferred revenue', 26), ('provisions', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 16], 'score': 100, 'value': 134131.0, 'line_item_label': ['CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 134131.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 73), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 59), (' make good provisions', 50), (' warranty', 50), ('other creditors and accruals', 46), (' total current employee benefits', 45), (' share of joint venture payables', 44), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' restructuring', 40), (' loans from related party', 39), (' ultimate parent entity', 37), (' other related parties', 36), (' employee benefits - payroll', 36), (' gst', 33), (' forward exchange contracts', 33), (' contract liabilites - current', 32), (' employee benefits - current', 30), (' gst liabilities', 30), (' abandonment and decommissioning costs', 27), (' other', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [('current', 100), (' provisions - current', 64), (' provision for associate funding', 62), (' current - liability for annual and long service leave', 61), (' rebates', 60), (' total current employee benefits', 55), (' arising from service contracts', 50), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), ('other creditors and accruals', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' forward exchange contracts', 38), (' share of joint venture payables', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [('current', 100), (' gst', 100), (' provision for associate funding', 67), (' current - liability for annual and long service leave', 64), (' provisions - current', 64), (' rebates', 60), (' total current employee benefits', 55), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 45), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' arising from service contracts', 41), (' loans from related party', 40), (' restructuring', 40), (' other', 40), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 36), (' secured long-term bank loans', 36), (' share of joint venture payables', 36), (' forward exchange contracts', 36), ('other creditors and accruals', 32), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30), (' gst payable and accruals', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 64), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 56), (' total current employee benefits', 55), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' share of joint venture payables', 41), (' arising from service contracts', 41), (' loans from related party', 40), (' restructuring', 40), (' other', 40), (' abandonment and decommissioning costs', 39), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 36), (' secured long-term bank loans', 36), (' forward exchange contracts', 36), (' gst', 33), ('other creditors and accruals', 32), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30), (' gst payable and accruals', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [('current', 100), (' make good provisions', 77), (' provision for associate funding', 64), (' rebates', 60), (' current - liability for annual and long service leave', 59), (' provisions - current', 57), (' warranty', 50), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' loan payable to relayed party under tax funding agreement', 41), (' total current employee benefits', 41), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' restructuring', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' ultimate parent entity', 37), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' other related parties', 35), (' gst', 33), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' other', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 73), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 59), (' make good provisions', 50), (' warranty', 50), ('other creditors and accruals', 46), (' total current employee benefits', 45), (' share of joint venture payables', 44), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' restructuring', 40), (' loans from related party', 39), (' ultimate parent entity', 37), (' other related parties', 36), (' employee benefits - payroll', 36), (' gst', 33), (' forward exchange contracts', 33), (' contract liabilites - current', 32), (' employee benefits - current', 30), (' gst liabilities', 30), (' abandonment and decommissioning costs', 27), (' other', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [('current', 100), (' provisions - current', 64), (' provision for associate funding', 62), (' current - liability for annual and long service leave', 61), (' rebates', 60), (' total current employee benefits', 55), (' arising from service contracts', 50), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), ('other creditors and accruals', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' forward exchange contracts', 38), (' share of joint venture payables', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [('current', 100), (' gst', 100), (' provision for associate funding', 67), (' current - liability for annual and long service leave', 64), (' provisions - current', 64), (' rebates', 60), (' total current employee benefits', 55), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 45), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' arising from service contracts', 41), (' loans from related party', 40), (' restructuring', 40), (' other', 40), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 36), (' secured long-term bank loans', 36), (' share of joint venture payables', 36), (' forward exchange contracts', 36), ('other creditors and accruals', 32), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30), (' gst payable and accruals', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 64), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 56), (' total current employee benefits', 55), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' share of joint venture payables', 41), (' arising from service contracts', 41), (' loans from related party', 40), (' restructuring', 40), (' other', 40), (' abandonment and decommissioning costs', 39), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 36), (' secured long-term bank loans', 36), (' forward exchange contracts', 36), (' gst', 33), ('other creditors and accruals', 32), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30), (' gst payable and accruals', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [('current', 100), (' make good provisions', 77), (' provision for associate funding', 64), (' rebates', 60), (' current - liability for annual and long service leave', 59), (' provisions - current', 57), (' warranty', 50), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' loan payable to relayed party under tax funding agreement', 41), (' total current employee benefits', 41), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' restructuring', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' ultimate parent entity', 37), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' other related parties', 35), (' gst', 33), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' other', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [54407.0, 51952.0, -4372.0, 1874.0, 30270.0, 134131.0, 46231.0, 27392.0, -44011.0, 4447.0, 29022.0, 63080.0], 'label': ['Current Provision for Annual Leave', 'Current Provision for Income Tax', 'Current Provision for GST', 'Current Provision for FBT', 'Current Provision for Make Good Obligation', 'Current Total', 'Current Provision for Annual Leave', 'Current Provision for Income Tax', 'Current Provision for GST', 'Current Provision for FBT', 'Current Provision for Make Good Obligation', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('current liabilities', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('current liabilities', 65)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current liabilities', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('current liabilities', 44)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('current liabilities', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('current liabilities', 65)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current liabilities', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('current liabilities', 44)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term debt', 34)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term debt', 34)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), (' loans and borrowings', 40), (' borrowings', 33), ('interest bearing loans and borrowings', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [22], 'score': 100, 'value': 359790.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [359790.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), (' loans and borrowings', 40), (' borrowings', 33), ('interest bearing loans and borrowings', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [22], 'score': 100, 'value': 265356.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [265356.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [22], 'score': 100, 'value': 359790.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [359790.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [22], 'score': 100, 'value': 265356.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [265356.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' other financial liabilities', 47), ('other long term liabilities', 45), (' other non-current liabilities', 43), ('trade and other payables', 41), (' financial liabilities', 39), (' provision for associate funding', 37), (' employee benefits', 29), (' provisions', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21], 'score': 100, 'value': 49640.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 49640.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' other financial liabilities', 47), ('other long term liabilities', 45), (' other non-current liabilities', 43), ('trade and other payables', 41), (' financial liabilities', 39), (' provision for associate funding', 37), (' employee benefits', 29), (' provisions', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21], 'score': 100, 'value': 54716.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 54716.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 59), (' non-current - liability for long-service leave', 53), (' make good provisions', 50), ('non-current trade and other payables', 43), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 40), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 34), (' abandonment and decommissioning costs', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 62), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' derivative contracts - at fair value', 42), (' total non-current employee benefits', 41), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 39), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' abandonment and decommissioning costs', 35), (' trade payables - related parties', 33), (' employee benefits - payroll', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [(' provision for associate funding', 67), (' provisions - non-current', 64), (' non-current - liability for long-service leave', 59), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 44), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 56), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 39), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [(' make good provisions', 77), (' provisions - non-current', 64), (' provision for associate funding', 64), (' electricity derivatives at fair value through oci', 45), (' non-current - liability for long-service leave', 41), ('non-current trade and other payables', 40), (' derivative contracts - at fair value', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' trade payables - related parties', 33), (' contract liabilites - non-current', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - non current', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('non-current trade and other payables', 54), (' employee benefits - non current', 54), (' non-current - liability for long-service leave', 54), (' employee benefits - payroll', 46), (' total non-current employee benefits', 46), (' electricity derivatives at fair value through oci', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' provisions - non-current', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 59), (' non-current - liability for long-service leave', 53), (' make good provisions', 50), ('non-current trade and other payables', 43), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 40), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 34), (' abandonment and decommissioning costs', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 62), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' derivative contracts - at fair value', 42), (' total non-current employee benefits', 41), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 39), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' abandonment and decommissioning costs', 35), (' trade payables - related parties', 33), (' employee benefits - payroll', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [(' provision for associate funding', 67), (' provisions - non-current', 64), (' non-current - liability for long-service leave', 59), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 44), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 56), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 39), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [(' make good provisions', 77), (' provisions - non-current', 64), (' provision for associate funding', 64), (' electricity derivatives at fair value through oci', 45), (' non-current - liability for long-service leave', 41), ('non-current trade and other payables', 40), (' derivative contracts - at fair value', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' trade payables - related parties', 33), (' contract liabilites - non-current', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - non current', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('non-current trade and other payables', 54), (' employee benefits - non current', 54), (' non-current - liability for long-service leave', 54), (' employee benefits - payroll', 46), (' total non-current employee benefits', 46), (' electricity derivatives at fair value through oci', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' provisions - non-current', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('minority interest', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('minority interest', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term liabilities', 47)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term liabilities', 47)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('account receivables', 30), ('trade receivables', 30), ('government subsidies receivable', 30), ('trade and other receivables', 30), ('receivable', 17), ('billed', 0), ('unbilled', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('account receivables', 100), ('trade receivables', 100), ('government subsidies receivable', 100), ('receivable', 100), ('trade and other receivables', 100), ('billed', 25), ('unbilled', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other receivables', 100), ('government subsidies receivable', 60), ('account receivables', 40), ('trade receivables', 40), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 4620173.0, 'line_item_label': ['Receivables', 'Other'], 'note_numbers': ['7', '9'], 'line_item_value': [4086305.0, 533868.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('account receivables', 30), ('trade receivables', 30), ('government subsidies receivable', 30), ('trade and other receivables', 30), ('receivable', 17), ('billed', 0), ('unbilled', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('account receivables', 100), ('trade receivables', 100), ('government subsidies receivable', 100), ('receivable', 100), ('trade and other receivables', 100), ('billed', 25), ('unbilled', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other receivables', 100), ('government subsidies receivable', 60), ('account receivables', 40), ('trade receivables', 40), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 7158730.0, 'line_item_label': ['Receivables', 'Other'], 'note_numbers': ['7', '9'], 'line_item_value': [6841934.0, 316796.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = none charges paid in advance , res_fuzz_match = [(' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 42), (' share of joint venture receivables', 41), (' other debtors', 33), ('current', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = none financial asset , res_fuzz_match = [(' net trade debtors', 44), (' share of joint venture receivables', 39), (' related party receivables', 34), ('trade receivables', 33), ('current', 29), (' other debtors', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors', 50), (' other debtors', 40), (' share of joint venture receivables', 40), (' related party receivables', 30), ('current', 29), ('trade receivables', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = none charges paid in advance , res_fuzz_match = [(' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 42), (' share of joint venture receivables', 41), (' other debtors', 33), ('current', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = none financial asset , res_fuzz_match = [(' net trade debtors', 44), (' share of joint venture receivables', 39), (' related party receivables', 34), ('trade receivables', 33), ('current', 29), (' other debtors', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors', 50), (' other debtors', 40), (' share of joint venture receivables', 40), (' related party receivables', 30), ('current', 29), ('trade receivables', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 14:19:25+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 14:19:25+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('revenue from contracts with customers', 63), ('Revenue from contract with customers', 63), ('revenue from operations', 54), ('from trading business', 45), (' Revenue', 39), ('transmission and distribution business', 34), (' Sales revenue', 33), ('net sales', 24), (' Sale of coal', 24), ('sale of products', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Sale of coal', 43), ('sale of products', 38), ('net sales', 36), ('from trading business', 34), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), (' Sales revenue', 24), (' Revenue', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('sale of products', 32), (' Revenue', 31), ('net sales', 27), ('revenue from operations', 26), (' Sales revenue', 22), ('from trading business', 18), ('transmission and distribution business', 17), ('revenue from contracts with customers', 15), ('Revenue from contract with customers', 15), (' Sale of coal', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('revenue from operations', 29), ('sale of products', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('from trading business', 22), ('net sales', 20), ('transmission and distribution business', 20), (' Sale of coal', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('from trading business', 49), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('revenue from operations', 43), ('transmission and distribution business', 37), ('sale of products', 32), (' Sales revenue', 32), ('net sales', 24), (' Sale of coal', 23), (' Revenue', 19)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('transmission and distribution business', 18), (' Revenue', 18), ('net sales', 15), (' Sale of coal', 14), (' Sales revenue', 12), ('revenue from operations', 10), ('from trading business', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('revenue from contracts with customers', 53), ('Revenue from contract with customers', 53), ('from trading business', 40), ('transmission and distribution business', 38), ('revenue from operations', 34), ('sale of products', 22), (' Sales revenue', 22), (' Revenue', 19), ('net sales', 18), (' Sale of coal', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 37), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27), (' Sale of coal', 26), ('sale of products', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('from trading business', 41), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 34), ('net sales', 31), ('transmission and distribution business', 31), ('revenue from operations', 30), ('sale of products', 28), (' Revenue', 27), (' Sale of coal', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('net sales', 33), (' Sales revenue', 27), ('revenue from operations', 20), (' Revenue', 20), (' Sale of coal', 15), ('sale of products', 12), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('revenue from operations', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 35), ('transmission and distribution business', 34), ('sale of products', 28), ('net sales', 21), (' Sale of coal', 20), (' Sales revenue', 19), (' Revenue', 16)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('net sales', 36), ('sale of products', 27), ('from trading business', 22), (' Sale of coal', 17), (' Sales revenue', 14), ('transmission and distribution business', 13), ('revenue from contracts with customers', 11), ('Revenue from contract with customers', 11), ('revenue from operations', 0), (' Revenue', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('revenue from contracts with customers', 63), ('Revenue from contract with customers', 63), ('revenue from operations', 54), ('from trading business', 45), (' Revenue', 39), ('transmission and distribution business', 34), (' Sales revenue', 33), ('net sales', 24), (' Sale of coal', 24), ('sale of products', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Sale of coal', 43), ('sale of products', 38), ('net sales', 36), ('from trading business', 34), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), (' Sales revenue', 24), (' Revenue', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('sale of products', 32), (' Revenue', 31), ('net sales', 27), ('revenue from operations', 26), (' Sales revenue', 22), ('from trading business', 18), ('transmission and distribution business', 17), ('revenue from contracts with customers', 15), ('Revenue from contract with customers', 15), (' Sale of coal', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('revenue from operations', 29), ('sale of products', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('from trading business', 22), ('net sales', 20), ('transmission and distribution business', 20), (' Sale of coal', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('from trading business', 49), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('revenue from operations', 43), ('transmission and distribution business', 37), ('sale of products', 32), (' Sales revenue', 32), ('net sales', 24), (' Sale of coal', 23), (' Revenue', 19)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('transmission and distribution business', 18), (' Revenue', 18), ('net sales', 15), (' Sale of coal', 14), (' Sales revenue', 12), ('revenue from operations', 10), ('from trading business', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('revenue from contracts with customers', 53), ('Revenue from contract with customers', 53), ('from trading business', 40), ('transmission and distribution business', 38), ('revenue from operations', 34), ('sale of products', 22), (' Sales revenue', 22), (' Revenue', 19), ('net sales', 18), (' Sale of coal', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 37), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27), (' Sale of coal', 26), ('sale of products', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('from trading business', 41), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 34), ('net sales', 31), ('transmission and distribution business', 31), ('revenue from operations', 30), ('sale of products', 28), (' Revenue', 27), (' Sale of coal', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('net sales', 33), (' Sales revenue', 27), ('revenue from operations', 20), (' Revenue', 20), (' Sale of coal', 15), ('sale of products', 12), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('revenue from operations', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 35), ('transmission and distribution business', 34), ('sale of products', 28), ('net sales', 21), (' Sale of coal', 20), (' Sales revenue', 19), (' Revenue', 16)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('net sales', 36), ('sale of products', 27), ('from trading business', 22), (' Sale of coal', 17), (' Sales revenue', 14), ('transmission and distribution business', 13), ('revenue from contracts with customers', 11), ('Revenue from contract with customers', 11), ('revenue from operations', 0), (' Revenue', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' cost of coal sold', 36), (' Personnel costs', 36), (' Cost of product sold', 33), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), ('total expenditure', 24), ('expenditure', 23), ('expense', 19), ('total expenses', 16)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Cost of product sold', 77), (' Cost of goods and services sold', 72), (' Cost of inventory sold', 67), (' cost of coal sold', 64), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), ('purchase of stock-in-trade', 36), ('total expenses', 31), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('expenditure', 47), ('expense', 46), ('total expenditure', 35), ('total expenses', 32), ('purchase of stock-in-trade', 31), (' Personnel costs', 29), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 23), ('cost of sales', 12), ('Cost of sales', 12), (' cost of coal sold', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), ('cost of sales', 19), ('Cost of sales', 19)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('total expenditure', 52), ('expenditure', 50), ('total expenses', 47), (' Cost of goods and services sold', 39), ('expense', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Cost of product sold', 33), (' Personnel costs', 30), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Cost of inventory sold', 33), (' cost of coal sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), (' Personnel costs', 21), (' Cost of product sold', 18), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 10), ('expense', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 27), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 23), ('total expenses', 22), ('expense', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('expenditure', 44), ('expense', 43), ('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), (' cost of coal sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of product sold', 26), (' Cost of goods and services sold', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 37), (' Personnel costs', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' Cost of product sold', 29), (' Cost of goods and services sold', 29), (' cost of coal sold', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('expenditure', 29), ('total expenses', 25), (' Personnel costs', 22), ('expense', 20), ('total expenditure', 20), ('purchase of stock-in-trade', 17), (' Cost of inventory sold', 17), ('cost of sales', 15), ('Cost of sales', 15), (' Cost of goods and services sold', 14), (' cost of coal sold', 11), (' Cost of product sold', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), (' Personnel costs', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 28), ('total expenses', 28), (' cost of coal sold', 27), ('cost of sales', 25), ('Cost of sales', 25), ('expenditure', 24), ('expense', 16)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 27), ('expense', 22), ('total expenditure', 21), ('purchase of stock-in-trade', 18), ('expenditure', 15), (' cost of coal sold', 12), (' Personnel costs', 12), (' Cost of product sold', 10), (' Cost of inventory sold', 9), (' Cost of goods and services sold', 7)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' cost of coal sold', 36), (' Personnel costs', 36), (' Cost of product sold', 33), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), ('total expenditure', 24), ('expenditure', 23), ('expense', 19), ('total expenses', 16)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Cost of product sold', 77), (' Cost of goods and services sold', 72), (' Cost of inventory sold', 67), (' cost of coal sold', 64), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), ('purchase of stock-in-trade', 36), ('total expenses', 31), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('expenditure', 47), ('expense', 46), ('total expenditure', 35), ('total expenses', 32), ('purchase of stock-in-trade', 31), (' Personnel costs', 29), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 23), ('cost of sales', 12), ('Cost of sales', 12), (' cost of coal sold', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), ('cost of sales', 19), ('Cost of sales', 19)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('total expenditure', 52), ('expenditure', 50), ('total expenses', 47), (' Cost of goods and services sold', 39), ('expense', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Cost of product sold', 33), (' Personnel costs', 30), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Cost of inventory sold', 33), (' cost of coal sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), (' Personnel costs', 21), (' Cost of product sold', 18), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 10), ('expense', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 27), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 23), ('total expenses', 22), ('expense', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('expenditure', 44), ('expense', 43), ('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), (' cost of coal sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of product sold', 26), (' Cost of goods and services sold', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 37), (' Personnel costs', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' Cost of product sold', 29), (' Cost of goods and services sold', 29), (' cost of coal sold', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('expenditure', 29), ('total expenses', 25), (' Personnel costs', 22), ('expense', 20), ('total expenditure', 20), ('purchase of stock-in-trade', 17), (' Cost of inventory sold', 17), ('cost of sales', 15), ('Cost of sales', 15), (' Cost of goods and services sold', 14), (' cost of coal sold', 11), (' Cost of product sold', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), (' Personnel costs', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 28), ('total expenses', 28), (' cost of coal sold', 27), ('cost of sales', 25), ('Cost of sales', 25), ('expenditure', 24), ('expense', 16)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 27), ('expense', 22), ('total expenditure', 21), ('purchase of stock-in-trade', 18), ('expenditure', 15), (' cost of coal sold', 12), (' Personnel costs', 12), (' Cost of product sold', 10), (' Cost of inventory sold', 9), (' Cost of goods and services sold', 7)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administrative expenses', 44), (' Administration expenses', 44), (' Amortisation expenses', 41), (' Advertising expenses', 40), ('Distribution expenses', 39), (' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), (' Sales and marketing', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Logistics and distribution', 31), (' Marketing expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' depreciation', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administrative and other expenses', 35), (' Selling & distribution expenses', 34), (' Selling Expenses', 32), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Management expenses', 23), (' Other expenses', 23), (' Depreciation expenses', 21), (' Advertising expenses', 21), (' Depreciation expenses', 21), (' Marketing expenses', 15), (' Occupancy ', 11), (' depreciation', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' depreciation', 100), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Occupancy expenses', 42), (' Marketing expenses', 40), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' Lease expenses', 33), (' Selling Expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 27), (' Administrative and other expenses', 24), (' Logistics and distribution', 22), (' Occupancy ', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 25), (' Sales and marketing', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other expenses', 63), (' Other expenses', 63), (' Other expenses', 63), (' Marketing expenses', 56), (' Management expenses', 53), (' Administrative and other expenses', 46), (' Lease expenses', 43), (' Selling Expenses', 43), (' Occupancy expenses', 42), (' Logistics and distribution', 39), (' Selling & distribution expenses', 34), (' Sales and marketing', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' depreciation', 24), (' Occupancy ', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' depreciation', 33), (' Amortisation expenses', 32), (' Advertising expenses', 30), (' Logistics and distribution', 24), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Selling & distribution expenses', 15), (' Administrative and other expenses', 13), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Selling Expenses', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Logistics and distribution', 40), (' Administrative and other expenses', 35), (' Administrative expenses', 34), (' Administration expenses', 34), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Occupancy ', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' depreciation', 19), (' Management expenses', 16), (' Lease expenses', 11), (' Selling Expenses', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 51), (' Depreciation expenses', 50), (' Depreciation expenses', 50), (' Amortisation expenses', 50), (' Advertising expenses', 49), (' Lease expenses', 48), (' Occupancy expenses', 47), (' Administrative and other expenses', 46), ('Distribution expenses', 42), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Administration expenses', 42), (' Selling Expenses', 42), (' depreciation', 28), (' Sales and marketing', 27), (' Logistics and distribution', 24), (' Occupancy ', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Administrative and other expenses', 48), (' Depreciation expenses', 47), (' Depreciation expenses', 47), (' Amortisation expenses', 47), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Administrative expenses', 45), (' Administration expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' depreciation', 36), (' Marketing expenses', 35), (' Lease expenses', 27), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 17), (' Administrative and other expenses', 13), (' Selling Expenses', 13), (' Occupancy expenses', 12), ('Distribution expenses', 10), (' Selling & distribution expenses', 8), (' Occupancy ', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administrative and other expenses', 42), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 31), (' Selling & distribution expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), (' Logistics and distribution', 31), ('Distribution expenses', 30), (' Advertising expenses', 30), (' Sales and marketing', 30), (' Lease expenses', 29), (' Marketing expenses', 27), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Occupancy ', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Amortisation expenses', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), ('Distribution expenses', 21), (' Administrative expenses', 21), (' Administrative and other expenses', 21), (' Administration expenses', 21), (' Selling & distribution expenses', 17), (' Lease expenses', 14), (' Selling Expenses', 14), ('other expenses', 13), (' Occupancy expenses', 13), (' Other expenses', 13), (' Management expenses', 13), (' Other expenses', 13), (' Marketing expenses', 12), (' Depreciation expenses', 12), (' Depreciation expenses', 12), (' Logistics and distribution', 9), (' depreciation', 0), (' Occupancy ', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 107567.0, 'line_item_label': ['DEPRECIATION', 'OCCUPANCY EXPENSES'], 'note_numbers': [nan, nan], 'line_item_value': [4281.0, 103286.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administrative expenses', 44), (' Administration expenses', 44), (' Amortisation expenses', 41), (' Advertising expenses', 40), ('Distribution expenses', 39), (' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), (' Sales and marketing', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Logistics and distribution', 31), (' Marketing expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' depreciation', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administrative and other expenses', 35), (' Selling & distribution expenses', 34), (' Selling Expenses', 32), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Management expenses', 23), (' Other expenses', 23), (' Depreciation expenses', 21), (' Advertising expenses', 21), (' Depreciation expenses', 21), (' Marketing expenses', 15), (' Occupancy ', 11), (' depreciation', 10)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' depreciation', 100), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Occupancy expenses', 42), (' Marketing expenses', 40), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' Lease expenses', 33), (' Selling Expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 27), (' Administrative and other expenses', 24), (' Logistics and distribution', 22), (' Occupancy ', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 25), (' Sales and marketing', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other expenses', 63), (' Other expenses', 63), (' Other expenses', 63), (' Marketing expenses', 56), (' Management expenses', 53), (' Administrative and other expenses', 46), (' Lease expenses', 43), (' Selling Expenses', 43), (' Occupancy expenses', 42), (' Logistics and distribution', 39), (' Selling & distribution expenses', 34), (' Sales and marketing', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' depreciation', 24), (' Occupancy ', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' depreciation', 33), (' Amortisation expenses', 32), (' Advertising expenses', 30), (' Logistics and distribution', 24), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Selling & distribution expenses', 15), (' Administrative and other expenses', 13), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Selling Expenses', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Logistics and distribution', 40), (' Administrative and other expenses', 35), (' Administrative expenses', 34), (' Administration expenses', 34), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Occupancy ', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' depreciation', 19), (' Management expenses', 16), (' Lease expenses', 11), (' Selling Expenses', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 51), (' Depreciation expenses', 50), (' Depreciation expenses', 50), (' Amortisation expenses', 50), (' Advertising expenses', 49), (' Lease expenses', 48), (' Occupancy expenses', 47), (' Administrative and other expenses', 46), ('Distribution expenses', 42), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Administration expenses', 42), (' Selling Expenses', 42), (' depreciation', 28), (' Sales and marketing', 27), (' Logistics and distribution', 24), (' Occupancy ', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Administrative and other expenses', 48), (' Depreciation expenses', 47), (' Depreciation expenses', 47), (' Amortisation expenses', 47), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Administrative expenses', 45), (' Administration expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' depreciation', 36), (' Marketing expenses', 35), (' Lease expenses', 27), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 17), (' Administrative and other expenses', 13), (' Selling Expenses', 13), (' Occupancy expenses', 12), ('Distribution expenses', 10), (' Selling & distribution expenses', 8), (' Occupancy ', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administrative and other expenses', 42), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 31), (' Selling & distribution expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), (' Logistics and distribution', 31), ('Distribution expenses', 30), (' Advertising expenses', 30), (' Sales and marketing', 30), (' Lease expenses', 29), (' Marketing expenses', 27), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Occupancy ', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Amortisation expenses', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), ('Distribution expenses', 21), (' Administrative expenses', 21), (' Administrative and other expenses', 21), (' Administration expenses', 21), (' Selling & distribution expenses', 17), (' Lease expenses', 14), (' Selling Expenses', 14), ('other expenses', 13), (' Occupancy expenses', 13), (' Other expenses', 13), (' Management expenses', 13), (' Other expenses', 13), (' Marketing expenses', 12), (' Depreciation expenses', 12), (' Depreciation expenses', 12), (' Logistics and distribution', 9), (' depreciation', 0), (' Occupancy ', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 116878.0, 'line_item_label': ['DEPRECIATION', 'OCCUPANCY EXPENSES'], 'note_numbers': [nan, nan], 'line_item_value': [5786.0, 111092.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administration expenses', 44), (' Rental expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administration expenses', 27), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Occupancy expenses', 42), (' Rental expenses', 40), ('Rent', 36), (' Administration expenses', 35), (' Occupancy', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' Rental expenses', 51), (' Occupancy expenses', 42), (' Administration expenses', 29), ('Rent', 20), (' Occupancy', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('Rent', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12), (' Rental expenses', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Administration expenses', 34), (' Occupancy', 27), (' Occupancy expenses', 22), (' Rental expenses', 21), ('Rent', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Rental expenses', 57), (' Occupancy expenses', 47), (' Administration expenses', 42), ('Rent', 31), (' Occupancy', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 45), (' Occupancy expenses', 44), ('Rent', 29), (' Occupancy', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('Rent', 25), (' Rental expenses', 24), (' Administration expenses', 20), (' Occupancy expenses', 12), (' Occupancy', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 27), (' Occupancy expenses', 23), ('Rent', 17), (' Occupancy', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('Rent', 29), (' Rental expenses', 25), (' Administration expenses', 21), (' Occupancy expenses', 13), (' Occupancy', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 103286.0, 'line_item_label': ['OCCUPANCY EXPENSES'], 'note_numbers': [nan], 'line_item_value': [103286.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administration expenses', 44), (' Rental expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administration expenses', 27), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Occupancy expenses', 42), (' Rental expenses', 40), ('Rent', 36), (' Administration expenses', 35), (' Occupancy', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' Rental expenses', 51), (' Occupancy expenses', 42), (' Administration expenses', 29), ('Rent', 20), (' Occupancy', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('Rent', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12), (' Rental expenses', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Administration expenses', 34), (' Occupancy', 27), (' Occupancy expenses', 22), (' Rental expenses', 21), ('Rent', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Rental expenses', 57), (' Occupancy expenses', 47), (' Administration expenses', 42), ('Rent', 31), (' Occupancy', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 45), (' Occupancy expenses', 44), ('Rent', 29), (' Occupancy', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('Rent', 25), (' Rental expenses', 24), (' Administration expenses', 20), (' Occupancy expenses', 12), (' Occupancy', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 27), (' Occupancy expenses', 23), ('Rent', 17), (' Occupancy', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('Rent', 29), (' Rental expenses', 25), (' Administration expenses', 21), (' Occupancy expenses', 13), (' Occupancy', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 111092.0, 'line_item_label': ['OCCUPANCY EXPENSES'], 'note_numbers': [nan], 'line_item_value': [111092.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('Other revenue', 54), (' Other income', 33), ('other operating', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Other income', 32), ('other operating', 25), ('Other revenue', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other operating', 50), (' Other income', 49), ('Other revenue', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Other income', 25), ('Other revenue', 24), ('other operating', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Other income', 39), ('other operating', 29), ('Other revenue', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 35)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other operating', 29), (' Other income', 27), ('Other revenue', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Other income', 52), ('other operating', 39), ('Other revenue', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('other operating', 15), (' Other income', 14), ('Other revenue', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('Other revenue', 54), (' Other income', 33), ('other operating', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Other income', 32), ('other operating', 25), ('Other revenue', 23)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other operating', 50), (' Other income', 49), ('Other revenue', 26)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Other income', 25), ('Other revenue', 24), ('other operating', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Other income', 39), ('other operating', 29), ('Other revenue', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 35)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other operating', 29), (' Other income', 27), ('Other revenue', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Other income', 52), ('other operating', 39), ('Other revenue', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('other operating', 15), (' Other income', 14), ('Other revenue', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Interest revenue', 55), (' Finance income and costs', 43), (' Finance income and finance costs', 42), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), ('other income', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Net finance costs', 41), (' Finance income and costs', 40), (' Finance income and finance costs', 33), ('other income', 32), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Interest revenue', 27), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Finance income and costs', 21), (' Net finance costs', 18), (' Finance income and finance costs', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other income', 49), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance income', 35), ('Finance income', 35), (' Finance income and costs', 31), (' Net finance costs', 30), ('other income', 25), (' Finance income and finance costs', 24), (' Interest revenue', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Finance income and costs', 43), (' Finance income and finance costs', 42), ('other income', 39), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), (' Interest revenue', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('finance income', 47), ('Finance income', 47), (' Net finance costs', 43), ('other income', 42), (' Finance income and costs', 42), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('finance income', 44), ('Finance income', 44), (' Finance income and costs', 44), (' Net finance costs', 41), ('other income', 40), (' Finance income and finance costs', 38), (' Interest revenue', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other income', 27), (' Interest revenue', 21), ('finance income', 12), ('Finance income', 12), (' Net finance costs', 11), (' Finance income and costs', 8), (' Finance income and finance costs', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('other income', 52), (' Finance income and costs', 38), (' Finance income and finance costs', 37), (' Net finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Net finance costs', 22), (' Finance income and costs', 17), ('other income', 14), ('finance income', 13), ('Finance income', 13), (' Finance income and finance costs', 13), (' Interest revenue', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 85, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Interest revenue', 55), (' Finance income and costs', 43), (' Finance income and finance costs', 42), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), ('other income', 33)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Net finance costs', 41), (' Finance income and costs', 40), (' Finance income and finance costs', 33), ('other income', 32), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Interest revenue', 27), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Finance income and costs', 21), (' Net finance costs', 18), (' Finance income and finance costs', 17)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other income', 49), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 29)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance income', 35), ('Finance income', 35), (' Finance income and costs', 31), (' Net finance costs', 30), ('other income', 25), (' Finance income and finance costs', 24), (' Interest revenue', 20)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Finance income and costs', 43), (' Finance income and finance costs', 42), ('other income', 39), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), (' Interest revenue', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('finance income', 47), ('Finance income', 47), (' Net finance costs', 43), ('other income', 42), (' Finance income and costs', 42), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('finance income', 44), ('Finance income', 44), (' Finance income and costs', 44), (' Net finance costs', 41), ('other income', 40), (' Finance income and finance costs', 38), (' Interest revenue', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other income', 27), (' Interest revenue', 21), ('finance income', 12), ('Finance income', 12), (' Net finance costs', 11), (' Finance income and costs', 8), (' Finance income and finance costs', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('other income', 52), (' Finance income and costs', 38), (' Finance income and finance costs', 37), (' Net finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Net finance costs', 22), (' Finance income and costs', 17), ('other income', 14), ('finance income', 13), ('Finance income', 13), (' Finance income and finance costs', 13), (' Interest revenue', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 85, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:25+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:25+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-26 14:19:25+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:25+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-26 14:19:25+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:26+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 39), ('amount transferred to retained earnings', 38), ('current tax', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), ('provision for taxation previous year', 30), ('prior year ', 29), (' income tax expense', 29), (' income tax', 29), (' tax (expense)/benefit', 28), ('earlier year', 27), ('deferred tax', 18)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' income tax expense', 27), (' income tax', 26), (' income tax benefit', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17), ('earlier year', 8)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('deferred tax', 38), ('prior year ', 35), (' income tax expense', 35), ('earlier year', 32), (' income tax benefit/(expense)', 26), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('current tax', 22), ('provision for taxation previous year', 22), ('minimum alternate tax credit entitlement', 21), (' income tax', 12)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' income tax expense', 52), (' income tax benefit/(expense)', 44), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 40), ('prior year ', 39), ('earlier year', 37), (' income tax benefit', 37), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax', 29), ('current tax', 27)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' income tax', 29), ('current tax', 25), ('earlier year', 24), ('minimum alternate tax credit entitlement', 22), ('amount transferred to retained earnings', 19), (' income tax expense', 19), (' income tax benefit', 18), ('deferred tax', 14), (' income tax benefit/(expense)', 14), ('prior year ', 13), ('provision for taxation previous year', 12), (' tax (expense)/benefit', 9)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 38), (' income tax benefit', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' income tax', 35), (' income tax expense', 34), ('prior year ', 29), ('current tax', 28), ('earlier year', 27), ('deferred tax', 24), (' tax (expense)/benefit', 23)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 87), (' income tax expense', 84), (' tax (expense)/benefit', 70), (' income tax benefit', 67), (' income tax', 58), ('minimum alternate tax credit entitlement', 52), ('provision for taxation previous year', 47), ('deferred tax', 45), ('current tax', 42), ('amount transferred to retained earnings', 41), ('prior year ', 31), ('earlier year', 29)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' income tax benefit/(expense)', 83), (' income tax expense', 80), (' tax (expense)/benefit', 67), ('current tax', 63), (' income tax benefit', 63), (' income tax', 55), ('minimum alternate tax credit entitlement', 54), ('amount transferred to retained earnings', 47), ('provision for taxation previous year', 38), ('deferred tax', 36), ('prior year ', 29), ('earlier year', 28)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior year ', 57), ('earlier year', 50), ('deferred tax', 31), ('current tax', 27), ('provision for taxation previous year', 24), (' income tax expense', 20), ('amount transferred to retained earnings', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 18), (' income tax', 15), (' income tax benefit/(expense)', 14), ('minimum alternate tax credit entitlement', 11)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('provision for taxation previous year', 60), (' income tax benefit', 46), ('amount transferred to retained earnings', 45), ('prior year ', 44), (' income tax benefit/(expense)', 44), (' income tax expense', 43), ('earlier year', 42), ('minimum alternate tax credit entitlement', 41), (' income tax', 40), (' tax (expense)/benefit', 37), ('current tax', 33), ('deferred tax', 30)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('deferred tax', 50), (' income tax', 50), ('current tax', 43), (' income tax expense', 32), (' income tax benefit', 30), (' tax (expense)/benefit', 29), (' income tax benefit/(expense)', 22), ('provision for taxation previous year', 19), ('minimum alternate tax credit entitlement', 17), ('prior year ', 15), ('amount transferred to retained earnings', 13), ('earlier year', 13)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 83, 'value': 491215.0, 'line_item_label': ['BEFORE INCOME TAX EXPENSE', 'INCOME TAX EXPENSES - CURRENT'], 'note_numbers': [nan, nan], 'line_item_value': [491215.0, 0.0]}
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:26+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 39), ('amount transferred to retained earnings', 38), ('current tax', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), ('provision for taxation previous year', 30), ('prior year ', 29), (' income tax expense', 29), (' income tax', 29), (' tax (expense)/benefit', 28), ('earlier year', 27), ('deferred tax', 18)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' income tax expense', 27), (' income tax', 26), (' income tax benefit', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17), ('earlier year', 8)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('deferred tax', 38), ('prior year ', 35), (' income tax expense', 35), ('earlier year', 32), (' income tax benefit/(expense)', 26), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('current tax', 22), ('provision for taxation previous year', 22), ('minimum alternate tax credit entitlement', 21), (' income tax', 12)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' income tax expense', 52), (' income tax benefit/(expense)', 44), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 40), ('prior year ', 39), ('earlier year', 37), (' income tax benefit', 37), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax', 29), ('current tax', 27)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' income tax', 29), ('current tax', 25), ('earlier year', 24), ('minimum alternate tax credit entitlement', 22), ('amount transferred to retained earnings', 19), (' income tax expense', 19), (' income tax benefit', 18), ('deferred tax', 14), (' income tax benefit/(expense)', 14), ('prior year ', 13), ('provision for taxation previous year', 12), (' tax (expense)/benefit', 9)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 38), (' income tax benefit', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' income tax', 35), (' income tax expense', 34), ('prior year ', 29), ('current tax', 28), ('earlier year', 27), ('deferred tax', 24), (' tax (expense)/benefit', 23)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 87), (' income tax expense', 84), (' tax (expense)/benefit', 70), (' income tax benefit', 67), (' income tax', 58), ('minimum alternate tax credit entitlement', 52), ('provision for taxation previous year', 47), ('deferred tax', 45), ('current tax', 42), ('amount transferred to retained earnings', 41), ('prior year ', 31), ('earlier year', 29)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' income tax benefit/(expense)', 83), (' income tax expense', 80), (' tax (expense)/benefit', 67), ('current tax', 63), (' income tax benefit', 63), (' income tax', 55), ('minimum alternate tax credit entitlement', 54), ('amount transferred to retained earnings', 47), ('provision for taxation previous year', 38), ('deferred tax', 36), ('prior year ', 29), ('earlier year', 28)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior year ', 57), ('earlier year', 50), ('deferred tax', 31), ('current tax', 27), ('provision for taxation previous year', 24), (' income tax expense', 20), ('amount transferred to retained earnings', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 18), (' income tax', 15), (' income tax benefit/(expense)', 14), ('minimum alternate tax credit entitlement', 11)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('provision for taxation previous year', 60), (' income tax benefit', 46), ('amount transferred to retained earnings', 45), ('prior year ', 44), (' income tax benefit/(expense)', 44), (' income tax expense', 43), ('earlier year', 42), ('minimum alternate tax credit entitlement', 41), (' income tax', 40), (' tax (expense)/benefit', 37), ('current tax', 33), ('deferred tax', 30)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('deferred tax', 50), (' income tax', 50), ('current tax', 43), (' income tax expense', 32), (' income tax benefit', 30), (' tax (expense)/benefit', 29), (' income tax benefit/(expense)', 22), ('provision for taxation previous year', 19), ('minimum alternate tax credit entitlement', 17), ('prior year ', 15), ('amount transferred to retained earnings', 13), ('earlier year', 13)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 83, 'value': 643396.0, 'line_item_label': ['BEFORE INCOME TAX EXPENSE', 'INCOME TAX EXPENSES - CURRENT'], 'note_numbers': [nan, nan], 'line_item_value': [643396.0, 0.0]}
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:26+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-26 14:19:26+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:26+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-26 14:19:26+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:26+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-26 14:19:26+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:26+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:26+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:26+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-26 14:19:26+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:26+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-26 14:19:26+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:26+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-26 14:19:26+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:26+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 13)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('prior period', 42), ('exceptional', 31)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('prior period', 47), ('exceptional', 25)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('exceptional', 36), ('prior period', 12)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('prior period', 35), ('exceptional', 29)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('prior period', 28), ('exceptional', 27)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior period', 25), ('exceptional', 20)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('prior period', 42), ('exceptional', 22)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('exceptional', 22), ('prior period', 0)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:26+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 13)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('prior period', 42), ('exceptional', 31)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('prior period', 47), ('exceptional', 25)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('exceptional', 36), ('prior period', 12)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('prior period', 35), ('exceptional', 29)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('prior period', 28), ('exceptional', 27)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior period', 25), ('exceptional', 20)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('prior period', 42), ('exceptional', 22)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('exceptional', 22), ('prior period', 0)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 14:19:26+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-26 14:19:26+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 14:19:26+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-26 14:19:26+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 14:19:26+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-26 14:19:26+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:26+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 14:19:26+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 14:19:26+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 14:19:26+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:54+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-26 15:04:54+0530 - sLogger - DEBUG - process_main_pages started
2023-07-26 15:04:54+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-26 15:04:54+0530 - sLogger - DEBUG - start_refactoring started
2023-07-26 15:04:54+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-26 15:04:54+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-26 15:04:54+0530 - sLogger - DEBUG - start_refactoring started
2023-07-26 15:04:54+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-26 15:04:54+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-26 15:04:54+0530 - sLogger - DEBUG - start_refactoring started
2023-07-26 15:04:54+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-26 15:04:54+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-26 15:04:54+0530 - sLogger - DEBUG - set_section_details started
2023-07-26 15:04:55+0530 - sLogger - DEBUG - CurrentAssets | [('current liabilities', 62), ('assets', 59), ('current assets', 56), ('noncurrent assets', 40), ('noncurrent liabilities', 31), ('equity liabilities', 24), ('equity', 22), ('equity and liabilities', 21), ('liabilities', 11)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Cash and bank balances | [('equity and liabilities', 38), ('noncurrent liabilities', 35), ('noncurrent assets', 30), ('current liabilities', 29), ('current assets', 24), ('equity liabilities', 24), ('liabilities', 23), ('assets', 16), ('equity', 0)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Prepayments | [('current liabilities', 30), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Current Tax Asset | [('current assets', 87), ('noncurrent assets', 67), ('current liabilities', 58), ('assets', 45), ('noncurrent liabilities', 39), ('equity and liabilities', 35), ('equity liabilities', 33), ('equity', 26), ('liabilities', 9)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Total CurrentAssets | [('current liabilities', 62), ('current assets', 45), ('noncurrent assets', 45), ('assets', 43), ('equity and liabilities', 34), ('equity liabilities', 32), ('noncurrent liabilities', 25), ('liabilities', 17), ('equity', 17)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - NonCurrent Assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD current assets | score 90
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD current liabilities | score 61
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrent assets | score 100
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrent liabilities | score 72
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD non current assets | score 97
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD non current liabilities | score 70
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD equity and liabilities | score 31
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Plant and equipment | [('equity and liabilities', 69), ('equity liabilities', 50), ('equity', 48), ('current assets', 36), ('assets', 30), ('noncurrent assets', 29), ('liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD current assets | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD current liabilities | score 40
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrent assets | score 33
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrent liabilities | score 29
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD non current assets | score 41
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD non current liabilities | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD equity and liabilities | score 60
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD equity | score 60
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Investment property | [('current assets', 43), ('noncurrent assets', 36), ('equity and liabilities', 31), ('assets', 30), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('liabilities', 19)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD current assets | score 40
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD current liabilities | score 26
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrent assets | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrent liabilities | score 32
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD non current assets | score 38
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD non current liabilities | score 29
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD equity and liabilities | score 24
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD equity | score 45
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('equity', 33), ('noncurrent liabilities', 31), ('liabilities', 22)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('liabilities', 19)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('liabilities', 10)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Total NonCurrent Assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD current assets | score 90
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD current liabilities | score 52
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrent assets | score 95
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrent liabilities | score 62
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD non current assets | score 83
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD non current liabilities | score 61
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD equity and liabilities | score 31
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Total Assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD current assets | score 64
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD current liabilities | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrent assets | score 64
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrent liabilities | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD non current assets | score 86
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD non current liabilities | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equity and liabilities | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Current Liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD current assets | score 67
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD current liabilities | score 100
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrent assets | score 61
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrent liabilities | score 93
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD non current assets | score 59
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD non current liabilities | score 95
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD equity and liabilities | score 69
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Current tax liability | [('current liabilities', 88), ('equity liabilities', 58), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD current assets | score 86
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD current liabilities | score 80
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrent assets | score 53
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrent liabilities | score 74
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD non current assets | score 53
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD non current liabilities | score 73
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equity and liabilities | score 60
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equity | score 45
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Contract liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrent liabilities', 41), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current assets | score 41
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current liabilities | score 77
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent assets | score 43
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent liabilities | score 76
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current assets | score 42
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current liabilities | score 74
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity and liabilities | score 67
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Total Current Liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD current assets | score 86
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD current liabilities | score 95
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrent assets | score 57
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrent liabilities | score 85
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD non current assets | score 60
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD non current liabilities | score 88
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equity and liabilities | score 64
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - NonCurrent Liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD current assets | score 61
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD current liabilities | score 93
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrent assets | score 72
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrent liabilities | score 100
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD non current assets | score 70
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD non current liabilities | score 98
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD equity and liabilities | score 65
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Contract liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrent liabilities', 41), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current assets | score 41
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current liabilities | score 77
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent assets | score 43
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent liabilities | score 76
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current assets | score 42
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current liabilities | score 74
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity and liabilities | score 67
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Total NonCurrent Liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD current assets | score 61
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD current liabilities | score 81
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrent assets | score 86
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrent liabilities | score 95
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD non current assets | score 61
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD non current liabilities | score 86
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD equity and liabilities | score 64
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Total Liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD current assets | score 32
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD current liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrent assets | score 35
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD non current assets | score 34
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD non current liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equity and liabilities | score 75
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - NetAssets | [('assets', 77), ('current assets', 48), ('noncurrent assets', 48), ('equity and liabilities', 32), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 27), ('liabilities', 14), ('noncurrent liabilities', 9)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD current assets | score 80
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD current liabilities | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrent assets | score 80
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrent liabilities | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD non current assets | score 80
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD non current liabilities | score 38
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD equity and liabilities | score 32
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('liabilities', 25)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('current liabilities', 48), ('current assets', 42), ('assets', 38), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-07-26 15:04:55+0530 - sLogger - DEBUG - Total Equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD current assets | score 31
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD current liabilities | score 38
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrent assets | score 34
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrent liabilities | score 38
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD non current assets | score 33
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD non current liabilities | score 38
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equity and liabilities | score 86
2023-07-26 15:04:55+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equity | score 90
2023-07-26 15:04:55+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-26 15:04:55+0530 - sLogger - DEBUG - set_section_details started
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating Activities | working capital adjustments
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest and other costs of finance paid | operating profit before changes in assets and liabilities
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax paid | changes in working capital
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax refunded | movements in working capital
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from operating activities | operating cash flow before working capital changes
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing Activities | movements in working capital
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for plant and equipment | adiustments for movements in working capital
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for intangible assets (Note 13) | operating profit before changes in assets and liabilities
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in investing activities | adjustments for increase decrease in operating liabilities
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing Activities | changes in working capital
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of principal portion oflease liabilities | movements in working capital
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of dividends | movements in working capital
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Idecrease/increase in Cash and Cash Equivalents | adjustments for increase decrease in operating assets
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the beginning ofthe | changes in operating assets and liabilities
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- year | changes in working capital
2023-07-26 15:04:55+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the end of the year | changes in operating assets and liabilities
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: 'value'
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: 'year'
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: 'year'
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: 'value'
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: 'year'
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: 'value'
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: 'value'
2023-07-26 15:04:58+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('right of use', 22), ('right to use', 22), ('work in progress', 15), ('rightofuse', 11), ('righttouse', 11)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('capital work-in-progress', 47), ('capital workinprogress', 47), ('capital work in progress', 47), ('work in progress', 38), ('right of use', 33), ('right to use', 33), ('tangible', 29), ('rightofuse', 22), ('righttouse', 22)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 25), ('work in progress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 11551.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['12'], 'line_item_value': [11551.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('right of use', 22), ('right to use', 22), ('work in progress', 15), ('rightofuse', 11), ('righttouse', 11)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('capital work-in-progress', 47), ('capital workinprogress', 47), ('capital work in progress', 47), ('work in progress', 38), ('right of use', 33), ('right to use', 33), ('tangible', 29), ('rightofuse', 22), ('righttouse', 22)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 25), ('work in progress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('rightofuse', 100), ('righttouse', 89), ('right of use', 78), ('right to use', 78), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 9563.0, 'line_item_label': ['Right-of-use assets'], 'note_numbers': ['12'], 'line_item_value': [9563.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('tangible assets', 36)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 80, 'value': 2547.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [2547.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('tangible assets', 36)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 80, 'value': 1866.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [1866.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('goodwill on consolidatio', 40), ('goodwill', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('goodwill on consolidatio', 40), ('goodwill', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('intangible', 50), ('intangible under development', 40), ('intangible assets under development', 40)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 2547.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [2547.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('intangible', 50), ('intangible under development', 40), ('intangible assets under development', 40)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets under development', 53), ('intangible', 33), ('intangible under development', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 1866.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [1866.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('donations', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('donations', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('investment', 100), (' investment in associate', 62), (' investment in joint venture', 60), (' investments accounted for using the equity method', 60), ('derivative financial instruments', 48), ('joint ventures and associates', 40)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 11775.0, 'line_item_label': ['Investment property'], 'note_numbers': ['11'], 'line_item_value': [11775.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('investment', 100), (' investment in associate', 62), (' investment in joint venture', 60), (' investments accounted for using the equity method', 60), ('derivative financial instruments', 48), ('joint ventures and associates', 40)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 11556.0, 'line_item_label': ['Investment property'], 'note_numbers': ['11'], 'line_item_value': [11556.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('investment in joint venture', 38), (' investment in associate', 38), (' carrying amount at the end of the financial year', 38)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reclassification from ppe at31 march 2022 , res_fuzz_match = [(' investment in associate', 38), ('investment in joint venture', 37), (' carrying amount at the end of the financial year', 37)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [(' carrying amount at the end of the financial year', 39), (' investment in associate', 31), ('investment in joint venture', 26)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' carrying amount at the end of the financial year', 41), ('investment in joint venture', 37), (' investment in associate', 31)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 42), (' investment in associate', 38), ('investment in joint venture', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 april 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 58), (' investment in associate', 38), ('investment in joint venture', 32)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification from ppe , res_fuzz_match = [(' carrying amount at the end of the financial year', 45), (' investment in associate', 38), ('investment in joint venture', 37)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [(' carrying amount at the end of the financial year', 58), (' investment in associate', 38), ('investment in joint venture', 32)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 42), (' investment in associate', 38), ('investment in joint venture', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' carrying amount at the end of the financial year', 41), ('investment in joint venture', 37), (' investment in associate', 31)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' carrying amount at the end of the financial year', 42), (' investment in associate', 38), ('investment in joint venture', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('deferred tax assets', 40), ('deferred tax', 33), ('deferred charges', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 44553.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [44553.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('deferred tax assets', 40), ('deferred tax', 33), ('deferred charges', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 60999.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [60999.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: total , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: total , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: accounting profit before tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: non-deductible expenses for tax purposes , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: income tax expense at effective tax rate , res_fuzz_match = [('deferred tax assets', 67), (' deferred tax balances', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: as of the end ofthe period , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: total , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: total , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: accounting profit before tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: non-deductible expenses for tax purposes , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: income tax expense at effective tax rate , res_fuzz_match = [('deferred tax assets', 67), (' deferred tax balances', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: as of the end ofthe period , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 87, 87, 87, 100, 87, 100, 100, 100, 100, 100, 100, 100, 100, 100, 87, 87, 87, 100, 87], 'value': [64.0, 58608.0, 1195.0, -2869.0, 3539.0, 595.0, -120.0, -13.0, 60999.0, 44553.0, 16585.0, -114.0, -25.0, 60999.0, -209.0, 42057.0, 867.0, -3465.0, 4666.0, 652.0, -4.0, -11.0, 44553.0, 26730.0, 17117.0, 1.0, 705.0, 44553.0], 'label': ['Deferred tax assets relate to the following: Unrealised foreign exchange gains', 'Deferred tax assets relate to the following: Provisions', 'Deferred tax assets relate to the following: Business related costs', 'Deferred tax assets relate to the following: Right-of-use assets', 'Deferred tax assets relate to the following: Lease liabilities', 'Deferred tax assets relate to the following: Fit out incentive received', 'Deferred tax assets relate to the following: Interest income not received', 'Deferred tax assets relate to the following: Prepaid insurance', 'Deferred tax assets relate to the following: Total deferred tax assets', 'Reconciliation ofdeferred tax assets: Asofl beginning of the period', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in profit or loss', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in other comprehensive income', 'Reconciliation ofdeferred tax assets: Adjustments in respect deferred tax assets of prior years', 'Reconciliation ofdeferred tax assets: As of the end ofthe period', 'Deferred tax assets relate to the following: Unrealised foreign exchange gains', 'Deferred tax assets relate to the following: Provisions', 'Deferred tax assets relate to the following: Business related costs', 'Deferred tax assets relate to the following: Right-of-use assets', 'Deferred tax assets relate to the following: Lease liabilities', 'Deferred tax assets relate to the following: Fit out incentive received', 'Deferred tax assets relate to the following: Interest income not received', 'Deferred tax assets relate to the following: Prepaid insurance', 'Deferred tax assets relate to the following: Total deferred tax assets', 'Reconciliation ofdeferred tax assets: Asofl beginning of the period', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in profit or loss', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in other comprehensive income', 'Reconciliation ofdeferred tax assets: Adjustments in respect deferred tax assets of prior years', 'Reconciliation ofdeferred tax assets: As of the end ofthe period'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('other assets', 46), (' other assets', 46), (' other non-current assets', 41), (' other non-current assets', 41), (' exploration and evaluation expenditure', 38), (' loan receivables', 38), (' leased assets', 32), (' financial assets', 29), ('non-current', 27), (' leases', 21)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 10], 'score': 80, 'value': 2547.0, 'line_item_label': ['Non-Current Assets', 'Intangible assets'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 2547.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('other assets', 46), (' other assets', 46), (' other non-current assets', 41), (' other non-current assets', 41), (' exploration and evaluation expenditure', 38), (' loan receivables', 38), (' leased assets', 32), (' financial assets', 29), ('non-current', 27), (' leases', 21)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 10], 'score': 80, 'value': 1866.0, 'line_item_label': ['Non-Current Assets', 'Intangible assets'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 1866.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('non-current assets total', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('non-current assets total', 35)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-Current Assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('non-current assets total', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('non-current assets total', 35)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('non-current assets total', 53)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-Current Assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 62), (' loans and borrowings', 33), (' bank overdraft', 28), ('short term debt', 27), ('short-term debt', 21), ('shortterm debt', 21), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': 5181.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [5181.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 62), (' loans and borrowings', 33), (' bank overdraft', 28), ('short term debt', 27), ('short-term debt', 21), ('shortterm debt', 21), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [17], 'score': 100, 'value': 3000.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [3000.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('note payable(debt)', 41)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('note payable(debt)', 41)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('accounts payable', 50), ('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40), ('outstanding dues of creditors other than', 40), ('other than micro and small enterprises', 37), ('small enterprises', 36), ('micro enterprises and small enterprises', 34), ('outstanding dues of micro enterprises and small enterprises', 33), ('outstanding dues of creditors other than micro enterprises and small enterprises', 33), ('total outstanding due of other creditors other than micro and small', 31), ('micro enterprises', 30)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('accounts payable', 55), ('other trade payables', 42), ('small enterprises', 40), ('trade and other payables', 38), ('micro enterprises', 33), ('micro enterprises and small enterprises', 32), ('other than micro and small enterprises', 31), ('trade payable', 30), ('outstanding dues of creditors other than', 30), ('outstanding dues of micro enterprises and small enterprises', 25), ('outstanding dues of creditors other than micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 24)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [16], 'score': 100, 'value': 219685.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [219685.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('accounts payable', 50), ('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40), ('outstanding dues of creditors other than', 40), ('other than micro and small enterprises', 37), ('small enterprises', 36), ('micro enterprises and small enterprises', 34), ('outstanding dues of micro enterprises and small enterprises', 33), ('outstanding dues of creditors other than micro enterprises and small enterprises', 33), ('total outstanding due of other creditors other than micro and small', 31), ('micro enterprises', 30)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('accounts payable', 55), ('other trade payables', 42), ('small enterprises', 40), ('trade and other payables', 38), ('micro enterprises', 33), ('micro enterprises and small enterprises', 32), ('other than micro and small enterprises', 31), ('trade payable', 30), ('outstanding dues of creditors other than', 30), ('outstanding dues of micro enterprises and small enterprises', 25), ('outstanding dues of creditors other than micro enterprises and small enterprises', 24), ('total outstanding due of other creditors other than micro and small', 24)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [16], 'score': 100, 'value': 175701.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [175701.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' amounts payable to controlling entity', 50), (' other trade payables', 50), ('trade creditors', 40), (' trade and other payables', 40), (' trade payables', 40), (' trade payables - other parties', 40), (' trade payables', 40), (' related party payables', 30), (' trade payables - related parties', 30), ('current', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' amounts payable to controlling entity', 50), (' other trade payables', 50), ('trade creditors', 40), (' trade and other payables', 40), (' trade payables', 40), (' trade payables - other parties', 40), (' trade payables', 40), (' related party payables', 30), (' trade payables - related parties', 30), ('current', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' trade payables - other parties', 88), (' trade payables - related parties', 83), (' other trade payables', 83), (' trade and other payables', 64), (' related party payables', 56), (' amounts payable to controlling entity', 54), ('trade creditors', 50), ('current', 43)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 83), (' related party payables', 63), (' amounts payable to controlling entity', 57), (' trade and other payables', 55), ('trade creditors', 50), ('current', 43)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 83), (' related party payables', 72), ('current', 57), (' trade and other payables', 55), (' amounts payable to controlling entity', 54), ('trade creditors', 50)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' related party payables', 56), (' other trade payables', 56), (' trade and other payables', 55), ('trade creditors', 43), (' trade payables - related parties', 42), (' trade payables - other parties', 42), (' amounts payable to controlling entity', 36), ('current', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('trade creditors', 79), ('current', 57), (' trade payables - other parties', 51), (' other trade payables', 50), (' trade and other payables', 44), (' amounts payable to controlling entity', 43), (' trade payables - related parties', 37), (' related party payables', 29), (' trade payables', 25), (' trade payables', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 67), (' other trade payables', 67), (' related party payables', 61), (' trade payables - related parties', 58), ('trade creditors', 57), (' amounts payable to controlling entity', 57), ('current', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' amounts payable to controlling entity', 50), (' other trade payables', 50), ('trade creditors', 40), (' trade and other payables', 40), (' trade payables', 40), (' trade payables - other parties', 40), (' trade payables', 40), (' related party payables', 30), (' trade payables - related parties', 30), ('current', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' amounts payable to controlling entity', 50), (' other trade payables', 50), ('trade creditors', 40), (' trade and other payables', 40), (' trade payables', 40), (' trade payables - other parties', 40), (' trade payables', 40), (' related party payables', 30), (' trade payables - related parties', 30), ('current', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' trade payables - other parties', 88), (' trade payables - related parties', 83), (' other trade payables', 83), (' trade and other payables', 64), (' related party payables', 56), (' amounts payable to controlling entity', 54), ('trade creditors', 50), ('current', 43)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 83), (' related party payables', 63), (' amounts payable to controlling entity', 57), (' trade and other payables', 55), ('trade creditors', 50), ('current', 43)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 83), (' related party payables', 72), ('current', 57), (' trade and other payables', 55), (' amounts payable to controlling entity', 54), ('trade creditors', 50)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' related party payables', 56), (' other trade payables', 56), (' trade and other payables', 55), ('trade creditors', 43), (' trade payables - related parties', 42), (' trade payables - other parties', 42), (' amounts payable to controlling entity', 36), ('current', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('trade creditors', 79), ('current', 57), (' trade payables - other parties', 51), (' other trade payables', 50), (' trade and other payables', 44), (' amounts payable to controlling entity', 43), (' trade payables - related parties', 37), (' related party payables', 29), (' trade payables', 25), (' trade payables', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 67), (' other trade payables', 67), (' related party payables', 61), (' trade payables - related parties', 58), ('trade creditors', 57), (' amounts payable to controlling entity', 57), ('current', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 3, 4, 7, 10, 11, 12, 15], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [50854.0, 2270.0, 109601.0, 175701.0, 40768.0, 1126.0, 169387.0, 219685.0], 'label': ['None Trade payables external parties', 'None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Total trade and other payables at amortised cost', 'None Trade payables external parties', 'None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Total trade and other payables at amortised cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 45)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other current liabilities', 57), ('other financial liabilities', 57), ('other current financial liabilities', 56), ('other liabilities', 44), ('trade and other payables', 38)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 16, 18], 'score': 84, 'value': 239022.0, 'line_item_label': ['Current Liabilities', 'Trade and other payables', 'Current tax liability'], 'note_numbers': [nan, '14', nan], 'line_item_value': [0.0, 219685.0, 19337.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 45)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other current liabilities', 57), ('other financial liabilities', 57), ('other current financial liabilities', 56), ('other liabilities', 44), ('trade and other payables', 38)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 16, 18], 'score': 84, 'value': 175701.0, 'line_item_label': ['Current Liabilities', 'Trade and other payables', 'Current tax liability'], 'note_numbers': [nan, '14', nan], 'line_item_value': [0.0, 175701.0, 0.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('interest accrued', 40), ('accrued expenses', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('interest accrued', 40), ('accrued expenses', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [('accrued expenses', 50), ('interest accrued', 43)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('interest accrued', 40), ('accrued expenses', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [('interest accrued', 40), ('accrued expenses', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [('accrued expenses', 50), ('interest accrued', 43)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities', 67), ('tax', 67), (' income tax payable', 55)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 19337.0, 'line_item_label': ['Current tax liability'], 'note_numbers': [nan], 'line_item_value': [19337.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities', 67), ('tax', 67), (' income tax payable', 55)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 0.0, 'line_item_label': ['Current tax liability'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 16, 18, 19], 'score': 100, 'value': 354772.0, 'line_item_label': ['Current Liabilities', 'Trade and other payables', 'Current tax liability', 'Provisions'], 'note_numbers': [nan, '14', nan, '15'], 'line_item_value': [0.0, 219685.0, 19337.0, 115750.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 16, 18, 19], 'score': 100, 'value': 333478.0, 'line_item_label': ['Current Liabilities', 'Trade and other payables', 'Current tax liability', 'Provisions'], 'note_numbers': [nan, '14', nan, '15'], 'line_item_value': [0.0, 175701.0, 0.0, 157777.0]}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), ('current', 29), (' warranty', 25), (' provisions - current', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), ('current', 29), (' warranty', 25), (' provisions - current', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' gst payables', 70), (' other', 60), (' loan payable to relayed party under tax funding agreement', 57), (' gst payable and accruals', 55), (' other related parties', 53), (' warranty', 50), (' loans from related party', 48), (' contract liabilites - current', 48), (' employee benefits - payroll', 47), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' share of joint venture payables', 41), (' current - liability for annual and long service leave', 40), (' gst liabilities', 40), (' rebates', 40), (' employee benefits - current', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 32), (' restructuring', 30), (' provisions - current', 29), (' provision for associate funding', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' rebates', 80), (' other related parties', 71), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 69), (' loans from related party', 62), (' gst payable and accruals', 55), (' contract liabilites - current', 52), (' warranty', 50), (' ultimate parent entity', 47), (' employee benefits - payroll', 47), ('current', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' employee benefits - current', 41), (' share of joint venture payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 28), (' provision for associate funding', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' rebates', 80), (' ultimate parent entity', 74), (' other related parties', 71), (' gst payables', 70), (' gst payable and accruals', 64), (' loans from related party', 62), (' loan payable to relayed party under tax funding agreement', 61), ('current', 57), (' contract liabilites - current', 52), (' secured long-term bank loans', 50), (' provisions - current', 50), (' gst liabilities', 50), (' warranty', 50), (' derivative contracts - at fair value', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' restructuring', 40), (' other', 40), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' gst payables', 100), (' gst liabilities', 70), (' make good provisions', 56), (' share of joint venture payables', 52), (' arising from service contracts', 52), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' other related parties', 47), (' abandonment and decommissioning costs', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' provisions - current', 36), (' employee benefits - current', 35), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' total current employee benefits', 31), ('current', 29), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' ultimate parent entity', 26), (' warranty', 25), (' rebates', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [(' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), ('other creditors and accruals', 74), (' other related parties', 65), (' rebates', 60), ('current', 57), (' restructuring', 50), (' loans from related party', 47), (' employee benefits - current', 47), (' provisions - current', 43), (' total current employee benefits', 43), (' derivative contracts - at fair value', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' arising from service contracts', 42), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 37), (' secured long-term bank loans', 37), (' contract liabilites - current', 37), (' abandonment and decommissioning costs', 37), (' provision for associate funding', 37), (' forward exchange contracts', 37), (' gst', 33), (' ultimate parent entity', 32), (' gst payable and accruals', 21), (' gst payables', 20), (' gst liabilities', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' gst', 67), (' share of joint venture payables', 60), (' other related parties', 59), (' gst payable and accruals', 50), (' warranty', 50), (' total current employee benefits', 48), ('other creditors and accruals', 46), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' contract liabilites - current', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' current - liability for annual and long service leave', 40), (' rebates', 40), (' restructuring', 40), (' make good provisions', 38), (' ultimate parent entity', 37), (' arising from service contracts', 36), (' employee benefits - current', 35), (' provision for associate funding', 32), (' gst liabilities', 30), ('current', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), ('current', 29), (' warranty', 25), (' provisions - current', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' loan payable to relayed party under tax funding agreement', 50), (' contract liabilites - current', 50), (' abandonment and decommissioning costs', 50), (' forward exchange contracts', 50), ('other creditors and accruals', 40), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' provision for associate funding', 40), (' arising from service contracts', 40), (' rebates', 40), (' other', 40), (' gst', 33), (' gst payables', 32), (' other creditors', 30), (' other creditors', 30), (' employee benefits - current', 30), (' make good provisions', 30), (' gst liabilities', 30), (' other creditors', 30), (' restructuring', 30), (' total current employee benefits', 30), ('current', 29), (' warranty', 25), (' provisions - current', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' gst payables', 70), (' other', 60), (' loan payable to relayed party under tax funding agreement', 57), (' gst payable and accruals', 55), (' other related parties', 53), (' warranty', 50), (' loans from related party', 48), (' contract liabilites - current', 48), (' employee benefits - payroll', 47), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' share of joint venture payables', 41), (' current - liability for annual and long service leave', 40), (' gst liabilities', 40), (' rebates', 40), (' employee benefits - current', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 32), (' restructuring', 30), (' provisions - current', 29), (' provision for associate funding', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' rebates', 80), (' other related parties', 71), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 69), (' loans from related party', 62), (' gst payable and accruals', 55), (' contract liabilites - current', 52), (' warranty', 50), (' ultimate parent entity', 47), (' employee benefits - payroll', 47), ('current', 43), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' employee benefits - current', 41), (' share of joint venture payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 28), (' provision for associate funding', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' rebates', 80), (' ultimate parent entity', 74), (' other related parties', 71), (' gst payables', 70), (' gst payable and accruals', 64), (' loans from related party', 62), (' loan payable to relayed party under tax funding agreement', 61), ('current', 57), (' contract liabilites - current', 52), (' secured long-term bank loans', 50), (' provisions - current', 50), (' gst liabilities', 50), (' warranty', 50), (' derivative contracts - at fair value', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' restructuring', 40), (' other', 40), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' gst payables', 100), (' gst liabilities', 70), (' make good provisions', 56), (' share of joint venture payables', 52), (' arising from service contracts', 52), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' other related parties', 47), (' abandonment and decommissioning costs', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' provisions - current', 36), (' employee benefits - current', 35), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' total current employee benefits', 31), ('current', 29), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' ultimate parent entity', 26), (' warranty', 25), (' rebates', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [(' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), ('other creditors and accruals', 74), (' other related parties', 65), (' rebates', 60), ('current', 57), (' restructuring', 50), (' loans from related party', 47), (' employee benefits - current', 47), (' provisions - current', 43), (' total current employee benefits', 43), (' derivative contracts - at fair value', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' arising from service contracts', 42), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 37), (' secured long-term bank loans', 37), (' contract liabilites - current', 37), (' abandonment and decommissioning costs', 37), (' provision for associate funding', 37), (' forward exchange contracts', 37), (' gst', 33), (' ultimate parent entity', 32), (' gst payable and accruals', 21), (' gst payables', 20), (' gst liabilities', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' gst', 67), (' share of joint venture payables', 60), (' other related parties', 59), (' gst payable and accruals', 50), (' warranty', 50), (' total current employee benefits', 48), ('other creditors and accruals', 46), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' contract liabilites - current', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' current - liability for annual and long service leave', 40), (' rebates', 40), (' restructuring', 40), (' make good provisions', 38), (' ultimate parent entity', 37), (' arising from service contracts', 36), (' employee benefits - current', 35), (' provision for associate funding', 32), (' gst liabilities', 30), ('current', 29)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4, 5, 6, 7, 11, 12, 13, 14, 15], 'score': [80, 80, 100, 100, 100, 80, 80, 100, 100, 100], 'value': [2270.0, 109601.0, 10374.0, 2602.0, 175701.0, 1126.0, 169387.0, 6085.0, 2319.0, 219685.0], 'label': ['None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Goods and services tax (GST) payable', 'None Other creditors', 'None Total trade and other payables at amortised cost', 'None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Goods and services tax (GST) payable', 'None Other creditors', 'None Total trade and other payables at amortised cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:58+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), ('current', 29), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), ('current', 29), (' warranty', 25), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('current', 100), (' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), ('current', 57), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), ('current', 29), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), ('current', 29), (' warranty', 25), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('current', 100), (' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), ('current', 57), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 62), (' rebates', 60), ('current', 57), (' employee benefits - current', 53), (' provisions - current', 53), (' ultimate parent entity', 50), (' other related parties', 50), (' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' contract liabilites - current', 50), (' total current employee benefits', 50), ('other creditors and accruals', 38), (' other creditors', 38), (' secured long-term bank loans', 38), (' other creditors', 38), (' gst payable and accruals', 38), (' share of joint venture payables', 38), (' provision for associate funding', 38), (' arising from service contracts', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payables', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' gst liabilities', 25), (' restructuring', 25), (' other', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), ('current', 29), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), ('current', 29), (' warranty', 25), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('current', 100), (' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), ('current', 57), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), ('current', 29), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), ('current', 29), (' warranty', 25), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('current', 100), (' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), ('current', 57), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' current - liability for annual and long service leave', 88), (' gst', 67), (' arising from service contracts', 50), (' secured long-term bank loans', 47), (' make good provisions', 44), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' other related parties', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' provisions - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 36), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' restructuring', 30), ('current', 29), ('other creditors and accruals', 27), (' warranty', 25)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), ('current', 29), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), ('current', 29), (' warranty', 25), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('current', 100), (' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), ('current', 57), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), ('current', 29), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), ('current', 29), (' warranty', 25), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('current', 100), (' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), ('current', 57), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - current', 54), (' share of joint venture payables', 54), (' loan payable to relayed party under tax funding agreement', 46), (' current - liability for annual and long service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' arising from service contracts', 46), (' other', 40), ('other creditors and accruals', 38), (' ultimate parent entity', 38), (' other related parties', 38), (' loans from related party', 38), (' employee benefits - current', 38), (' employee benefits - payroll', 38), (' total current employee benefits', 38), (' gst', 33), (' other creditors', 31), (' derivative contracts - at fair value', 31), (' secured long-term bank loans', 31), (' other creditors', 31), (' gst payable and accruals', 31), (' contract liabilites - current', 31), (' other creditors', 31), (' warranty', 25), (' forward exchange contracts', 23), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), ('current', 14)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), ('current', 29), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), ('current', 29), (' warranty', 25), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('current', 100), (' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), ('current', 57), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), ('current', 29), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 27)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), ('current', 29), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), ('current', 29), (' warranty', 25), (' provisions - current', 23)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('current', 100), (' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), ('current', 57), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total current employee benefits', 100), ('other creditors and accruals', 60), (' derivative contracts - at fair value', 60), (' contract liabilites - current', 60), (' arising from service contracts', 60), (' forward exchange contracts', 60), (' other', 44), (' ultimate parent entity', 40), (' other related parties', 40), (' other creditors', 40), (' loan payable to relayed party under tax funding agreement', 40), (' secured long-term bank loans', 40), (' loans from related party', 40), (' other creditors', 40), (' gst payable and accruals', 40), (' current - liability for annual and long service leave', 40), (' share of joint venture payables', 40), (' gst payables', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' gst liabilities', 40), (' other creditors', 40), (' restructuring', 40), (' gst', 33), ('current', 20), (' employee benefits - current', 20), (' provisions - current', 20), (' make good provisions', 20), (' rebates', 20), (' warranty', 20)]
2023-07-26 15:04:58+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 16, 17, 18, 19, 20, 21, 22, 22, 23, 28, 34, 36, 37, 38, 39, 40, 40, 41, 42, 43, 44, 45, 46, 46, 47], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 88, 88, 88, 88, 100, 88, 88, 88, 88, 88, 88, 100, 88, 88, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [19230.0, 27947.0, -12290.0, 34887.0, 12517.0, 12517.0, 22370.0, 15722.0, 16942.0, -13434.0, 19230.0, 9113.0, 9113.0, 10117.0, 4873.0, 1953.0, -1703.0, 5123.0, 4426.0, 4426.0, 697.0, 4265.0, 1802.0, -1194.0, 4873.0, 4294.0, 4294.0, 579.0, 140834.0, 102343.0, 126446.0, 325226.0, -270828.0, 180844.0, 157777.0, 157777.0, 23067.0, 70642.0, 266892.0, -211088.0, 126446.0, 115750.0, 115750.0, 10696.0], 'label': ['Warranties $000', 'Warranties $000', 'Warranties $000', 'Warranties $000', 'None Current:', 'Warranties $000', 'Warranties $000', 'Warranties $000', 'Warranties $000', 'Warranties $000', 'Warranties $000', 'None Current:', 'Warranties $000', 'Warranties $000', 'Annual Leave & Long Service Leave S000', 'Annual Leave & Long Service Leave S000', 'Annual Leave & Long Service Leave S000', 'Annual Leave & Long Service Leave S000', 'None Current:', 'Annual Leave & Long Service Leave S000', 'Annual Leave & Long Service Leave S000', 'Annual Leave & Long Service Leave S000', 'Annual Leave & Long Service Leave S000', 'Annual Leave & Long Service Leave S000', 'Annual Leave & Long Service Leave S000', 'None Current:', 'Annual Leave & Long Service Leave S000', 'Annual Leave & Long Service Leave S000', 'None Current:', 'None Current:', 'Total $000', 'Total $000', 'Total $000', 'Total $000', 'None Current:', 'Total $000', 'Total $000', 'Total $000', 'Total $000', 'Total $000', 'Total $000', 'None Current:', 'Total $000', 'Total $000'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'rows', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns']}
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:58+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-26 15:04:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current liabilities', 88)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current liabilities', 69)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 18], 'score': 88, 'value': 19337.0, 'line_item_label': ['Current Liabilities', 'Current tax liability'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 19337.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current liabilities', 88)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current liabilities', 69)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 18], 'score': 88, 'value': 0.0, 'line_item_label': ['Current Liabilities', 'Current tax liability'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 0.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term debt', 28)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('long term debt', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term debt', 28)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('long term debt', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 47), (' borrowings', 33), (' loans and borrowings', 33)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 50), (' lease liabilities', 38), (' lease liability', 38), (' loans and borrowings', 25), (' borrowings', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 10374.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [10374.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 47), (' borrowings', 33), (' loans and borrowings', 33)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 50), (' lease liabilities', 38), (' lease liability', 38), (' loans and borrowings', 25), (' borrowings', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 8796.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [8796.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 27), ('(bond)', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 27), ('(bond)', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 47)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 50), ('lease liabilities', 38)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 10374.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [10374.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 47)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 50), ('lease liabilities', 38)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [23], 'score': 100, 'value': 8796.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [8796.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' other financial liabilities', 57), ('trade and other payables', 38), (' other non-current liabilities', 34), ('other long term liabilities', 32), (' employee benefits', 27), (' provision for associate funding', 27), (' provisions', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [(' employee benefits', 35), ('trade and other payables', 33), ('other long term liabilities', 27), (' other financial liabilities', 21), (' other non-current liabilities', 21), (' provision for associate funding', 20), (' financial liabilities', 18), (' provisions', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [22, 24], 'score': 100, 'value': 10695.0, 'line_item_label': ['Non-Current Liabilities', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 10695.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' other financial liabilities', 57), ('trade and other payables', 38), (' other non-current liabilities', 34), ('other long term liabilities', 32), (' employee benefits', 27), (' provision for associate funding', 27), (' provisions', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [(' employee benefits', 35), ('trade and other payables', 33), ('other long term liabilities', 27), (' other financial liabilities', 21), (' other non-current liabilities', 21), (' provision for associate funding', 20), (' financial liabilities', 18), (' provisions', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [22, 24], 'score': 100, 'value': 23067.0, 'line_item_label': ['Non-Current Liabilities', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 23067.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = warranties $000 , res_fuzz_match = [(' employee benefits - non current', 53), (' derivative contracts - at fair value', 50), (' contract liabilites - non-current', 50), (' trade payables - related parties', 50), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' provision for associate funding', 38), (' provisions - non-current', 25), (' employee benefits - payroll', 25), (' abandonment and decommissioning costs', 25), (' make good provisions', 25), (' total non-current employee benefits', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 67), (' make good provisions', 44), (' derivative contracts - at fair value', 42), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 35), (' employee benefits - non current', 34), (' electricity derivatives at fair value through oci', 33), (' trade payables - related parties', 33), (' provision for associate funding', 32), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = sales provisions s000 , res_fuzz_match = [(' make good provisions', 62), (' provisions - non-current', 54), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' provision for associate funding', 46), (' trade payables - related parties', 46), (' employee benefits - non current', 38), (' employee benefits - payroll', 38), (' total non-current employee benefits', 38), ('non-current trade and other payables', 31), (' derivative contracts - at fair value', 31), (' contract liabilites - non-current', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = total $000 , res_fuzz_match = [(' total non-current employee benefits', 100), (' derivative contracts - at fair value', 60), (' contract liabilites - non-current', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' employee benefits - payroll', 40), (' abandonment and decommissioning costs', 40), (' provision for associate funding', 40), (' trade payables - related parties', 40), (' provisions - non-current', 20), (' make good provisions', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10, 16, 22, 28, 34, 36, 37, 38, 39, 40, 40, 41, 42, 43, 44, 45, 46, 46, 47], 'score': [92, 92, 92, 92, 92, 92, 100, 100, 100, 100, 92, 100, 100, 100, 100, 100, 100, 92, 100, 100], 'value': [12517.0, 9113.0, 4426.0, 4294.0, 140834.0, 102343.0, 126446.0, 325226.0, -270828.0, 180844.0, 157777.0, 157777.0, 23067.0, 70642.0, 266892.0, -211088.0, 126446.0, 115750.0, 115750.0, 10696.0], 'label': ['None Current:', 'None Current:', 'None Current:', 'None Current:', 'None Current:', 'None Current:', 'Total $000', 'Total $000', 'Total $000', 'Total $000', 'None Current:', 'Total $000', 'Total $000', 'Total $000', 'Total $000', 'Total $000', 'Total $000', 'None Current:', 'Total $000', 'Total $000'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns']}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('minority interest', 41)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('minority interest', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('minority interest', 41)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('minority interest', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term liabilities', 39)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('long term liabilities', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term liabilities', 39)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('long term liabilities', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital', 100), ('share capital', 67), (' share capital ', 67), ('equity share capital', 57), ('contributed equity', 38), ('contributed equity', 38), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [30], 'score': 100, 'value': 57000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['16'], 'line_item_value': [57000.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital', 100), ('share capital', 67), (' share capital ', 67), ('equity share capital', 57), ('contributed equity', 38), ('contributed equity', 38), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [30], 'score': 100, 'value': 57000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['16'], 'line_item_value': [57000.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none 10,000,000 fully paid ordinary shares (2022: 10,000,000) , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 100), (' ordinary shares fully paid', 56), (' issued and paid-up share capital', 48), (' retained profits', 38), (' total issued capital', 38)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none 37,000,000 fully paid preference shares (2022: 37,000,000) , res_fuzz_match = [(' fully paid ordinary shares', 79), ('ordinary shares', 57), (' ordinary shares fully paid', 56), (' issued and paid-up share capital', 49), (' retained profits', 46), (' total issued capital', 38)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none profits capitalised on the redemption of preference shares , res_fuzz_match = [('ordinary shares', 57), (' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 44), (' ordinary shares fully paid', 40)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 40), ('ordinary shares', 30), (' fully paid ordinary shares', 30), (' issued and paid-up share capital', 30), (' ordinary shares fully paid', 30)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none 10,000,000 fully paid ordinary shares (2022: 10,000,000) , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 100), (' ordinary shares fully paid', 56), (' issued and paid-up share capital', 48), (' retained profits', 38), (' total issued capital', 38)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2022 $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none 37,000,000 fully paid preference shares (2022: 37,000,000) , res_fuzz_match = [(' fully paid ordinary shares', 79), ('ordinary shares', 57), (' ordinary shares fully paid', 56), (' issued and paid-up share capital', 49), (' retained profits', 46), (' total issued capital', 38)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2022 $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none profits capitalised on the redemption of preference shares , res_fuzz_match = [('ordinary shares', 57), (' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 44), (' ordinary shares fully paid', 40)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2022 $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 40), ('ordinary shares', 30), (' fully paid ordinary shares', 30), (' issued and paid-up share capital', 30), (' ordinary shares fully paid', 30)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2022 $'000 , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [10000.0, 10000.0], 'label': ['None 10,000,000 fully paid ordinary shares (2022: 10,000,000)', 'None 10,000,000 fully paid ordinary shares (2022: 10,000,000)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' reserves', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' reserves', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [31], 'score': 100, 'value': 135725.0, 'line_item_label': ['Retained earnings'], 'note_numbers': ['17'], 'line_item_value': [135725.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [31], 'score': 100, 'value': 127623.0, 'line_item_label': ['Retained earnings'], 'note_numbers': ['17'], 'line_item_value': [127623.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none balance at the beginning of the financial year , res_fuzz_match = [('retained earnings', 55), ('retained earnings and dividends on equity instruments', 39), ('general reserves', 33), ('accumulated losses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none net profit for the year , res_fuzz_match = [('retained earnings', 57), ('general reserves', 42), ('retained earnings and dividends on equity instruments', 33), ('accumulated losses', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none other comprehensive income , res_fuzz_match = [('general reserves', 42), ('retained earnings', 36), ('retained earnings and dividends on equity instruments', 33), ('accumulated losses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none dividend paid , res_fuzz_match = [('retained earnings and dividends on equity instruments', 67), ('retained earnings', 36), ('general reserves', 33), ('accumulated losses', 8)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none balance at the end of the financial year , res_fuzz_match = [('retained earnings', 57), ('retained earnings and dividends on equity instruments', 42), ('general reserves', 33), ('accumulated losses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none balance at the beginning of the financial year , res_fuzz_match = [('retained earnings', 55), ('retained earnings and dividends on equity instruments', 39), ('general reserves', 33), ('accumulated losses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none net profit for the year , res_fuzz_match = [('retained earnings', 57), ('general reserves', 42), ('retained earnings and dividends on equity instruments', 33), ('accumulated losses', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none other comprehensive income , res_fuzz_match = [('general reserves', 42), ('retained earnings', 36), ('retained earnings and dividends on equity instruments', 33), ('accumulated losses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none dividend paid , res_fuzz_match = [('retained earnings and dividends on equity instruments', 67), ('retained earnings', 36), ('general reserves', 33), ('accumulated losses', 8)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = none balance at the end of the financial year , res_fuzz_match = [('retained earnings', 57), ('retained earnings and dividends on equity instruments', 42), ('general reserves', 33), ('accumulated losses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:04:59+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:04:59+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('sale of products', 33), ('net sales', 30), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('net sales', 53), (' Sales revenue', 48), ('sale of products', 47), ('transmission and distribution business', 40), (' Sale of coal', 39), ('revenue from operations', 37), ('from trading business', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Revenue', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 45), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('revenue from operations', 38), ('transmission and distribution business', 36), ('net sales', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sale of coal', 24), (' Sales revenue', 22), (' Revenue', 9)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), ('sale of products', 30), ('revenue from operations', 28), ('from trading business', 25), ('net sales', 24), (' Sales revenue', 23), (' Sale of coal', 20), (' Revenue', 9)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 33), ('from trading business', 30), ('revenue from operations', 27), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 20), ('sale of products', 19), (' Revenue', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 33), ('from trading business', 30), ('revenue from operations', 27), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 20), ('sale of products', 19), (' Revenue', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('revenue from operations', 30), ('from trading business', 30), ('transmission and distribution business', 26), ('sale of products', 23), (' Sales revenue', 23), ('net sales', 18), (' Sale of coal', 18), (' Revenue', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('revenue from operations', 30), ('from trading business', 30), ('transmission and distribution business', 26), ('sale of products', 23), (' Sales revenue', 23), ('net sales', 18), (' Sale of coal', 18), (' Revenue', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('revenue from operations', 44), ('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('from trading business', 33), ('sale of products', 30), ('net sales', 29), ('transmission and distribution business', 29), (' Sale of coal', 28), (' Sales revenue', 27), (' Revenue', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 1033845.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': [nan], 'line_item_value': [1033845.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('sale of products', 33), ('net sales', 30), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('net sales', 53), (' Sales revenue', 48), ('sale of products', 47), ('transmission and distribution business', 40), (' Sale of coal', 39), ('revenue from operations', 37), ('from trading business', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Revenue', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 45), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('revenue from operations', 38), ('transmission and distribution business', 36), ('net sales', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sale of coal', 24), (' Sales revenue', 22), (' Revenue', 9)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), ('sale of products', 30), ('revenue from operations', 28), ('from trading business', 25), ('net sales', 24), (' Sales revenue', 23), (' Sale of coal', 20), (' Revenue', 9)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 33), ('from trading business', 30), ('revenue from operations', 27), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 20), ('sale of products', 19), (' Revenue', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 33), ('from trading business', 30), ('revenue from operations', 27), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 20), ('sale of products', 19), (' Revenue', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('revenue from operations', 30), ('from trading business', 30), ('transmission and distribution business', 26), ('sale of products', 23), (' Sales revenue', 23), ('net sales', 18), (' Sale of coal', 18), (' Revenue', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('revenue from operations', 30), ('from trading business', 30), ('transmission and distribution business', 26), ('sale of products', 23), (' Sales revenue', 23), ('net sales', 18), (' Sale of coal', 18), (' Revenue', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('revenue from operations', 44), ('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('from trading business', 33), ('sale of products', 30), ('net sales', 29), ('transmission and distribution business', 29), (' Sale of coal', 28), (' Sales revenue', 27), (' Revenue', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 1267172.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': [nan], 'line_item_value': [1267172.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), ('purchase of stock-in-trade', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('cost of sales', 45), ('Cost of sales', 45), ('expense', 43), (' Cost of goods and services sold', 43), (' cost of coal sold', 39), ('expenditure', 38), (' Cost of product sold', 36), (' Cost of inventory sold', 34), (' Personnel costs', 33), ('purchase of stock-in-trade', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('purchase of stock-in-trade', 30), ('total expenses', 30), ('cost of sales', 28), ('Cost of sales', 28), (' cost of coal sold', 25), ('expenditure', 20), ('expense', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 33), ('Cost of sales', 33), (' cost of coal sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('total expenses', 30), (' Cost of product sold', 27), ('expense', 25), ('expenditure', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -901584.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-901584.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), ('purchase of stock-in-trade', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('cost of sales', 45), ('Cost of sales', 45), ('expense', 43), (' Cost of goods and services sold', 43), (' cost of coal sold', 39), ('expenditure', 38), (' Cost of product sold', 36), (' Cost of inventory sold', 34), (' Personnel costs', 33), ('purchase of stock-in-trade', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('purchase of stock-in-trade', 30), ('total expenses', 30), ('cost of sales', 28), ('Cost of sales', 28), (' cost of coal sold', 25), ('expenditure', 20), ('expense', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 33), ('Cost of sales', 33), (' cost of coal sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('total expenses', 30), (' Cost of product sold', 27), ('expense', 25), ('expenditure', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -1122249.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-1122249.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Administrative and other expenses', 32), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Occupancy ', 24), (' Logistics and distribution', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Sales and marketing', 81), (' Marketing expenses', 74), (' Management expenses', 59), (' Lease expenses', 55), (' Selling Expenses', 55), (' Administrative and other expenses', 54), ('other expenses', 53), (' Other expenses', 53), (' Other expenses', 53), (' Selling & distribution expenses', 51), (' Advertising expenses', 49), (' Administrative expenses', 47), (' Administration expenses', 47), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Logistics and distribution', 43), ('Distribution expenses', 42), (' Occupancy expenses', 41), (' depreciation', 34), (' Occupancy ', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 27), (' Administrative expenses', 25), (' Administration expenses', 25), (' Administrative and other expenses', 24), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Occupancy ', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 39), (' Administrative and other expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Sales and marketing', 29), (' Selling Expenses', 27), ('other expenses', 26), (' Marketing expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' depreciation', 25), (' Administrative expenses', 25), (' Depreciation expenses', 25), (' Administration expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Lease expenses', 23), (' Management expenses', 23), (' Advertising expenses', 21), (' Occupancy expenses', 19), (' Occupancy ', 9)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administrative and other expenses', 39), (' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Sales and marketing', 27), (' Lease expenses', 26), ('other expenses', 25), (' Marketing expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 25), (' Other expenses', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Selling Expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Management expenses', 22), (' Occupancy expenses', 19), (' depreciation', 14), (' Occupancy ', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administrative and other expenses', 39), (' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Sales and marketing', 27), (' Lease expenses', 26), ('other expenses', 25), (' Marketing expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 25), (' Other expenses', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Selling Expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Management expenses', 22), (' Occupancy expenses', 19), (' depreciation', 14), (' Occupancy ', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses', 36), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Marketing expenses', 23), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' Logistics and distribution', 23), ('Distribution expenses', 22), (' Advertising expenses', 22), (' Sales and marketing', 22), (' depreciation', 15), (' Occupancy ', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses', 36), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Marketing expenses', 23), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' Logistics and distribution', 23), ('Distribution expenses', 22), (' Advertising expenses', 22), (' Sales and marketing', 22), (' depreciation', 15), (' Occupancy ', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Administrative and other expenses', 40), (' Amortisation expenses', 38), (' Selling & distribution expenses', 36), (' Lease expenses', 36), ('other expenses', 35), (' Other expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Advertising expenses', 33), (' Depreciation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Selling Expenses', 31), (' Management expenses', 30), (' Sales and marketing', 29), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Occupancy ', 21), (' depreciation', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 8], 'score': 100, 'value': -83441.0, 'line_item_label': ['Sales and marketing expenses', 'Administration expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-35443.0, -47684.0, -314.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Administrative and other expenses', 32), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Occupancy ', 24), (' Logistics and distribution', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Sales and marketing', 81), (' Marketing expenses', 74), (' Management expenses', 59), (' Lease expenses', 55), (' Selling Expenses', 55), (' Administrative and other expenses', 54), ('other expenses', 53), (' Other expenses', 53), (' Other expenses', 53), (' Selling & distribution expenses', 51), (' Advertising expenses', 49), (' Administrative expenses', 47), (' Administration expenses', 47), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Logistics and distribution', 43), ('Distribution expenses', 42), (' Occupancy expenses', 41), (' depreciation', 34), (' Occupancy ', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 27), (' Administrative expenses', 25), (' Administration expenses', 25), (' Administrative and other expenses', 24), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Occupancy ', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 39), (' Administrative and other expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Sales and marketing', 29), (' Selling Expenses', 27), ('other expenses', 26), (' Marketing expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' depreciation', 25), (' Administrative expenses', 25), (' Depreciation expenses', 25), (' Administration expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Lease expenses', 23), (' Management expenses', 23), (' Advertising expenses', 21), (' Occupancy expenses', 19), (' Occupancy ', 9)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administrative and other expenses', 39), (' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Sales and marketing', 27), (' Lease expenses', 26), ('other expenses', 25), (' Marketing expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 25), (' Other expenses', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Selling Expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Management expenses', 22), (' Occupancy expenses', 19), (' depreciation', 14), (' Occupancy ', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administrative and other expenses', 39), (' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Sales and marketing', 27), (' Lease expenses', 26), ('other expenses', 25), (' Marketing expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 25), (' Other expenses', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Selling Expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Management expenses', 22), (' Occupancy expenses', 19), (' depreciation', 14), (' Occupancy ', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses', 36), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Marketing expenses', 23), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' Logistics and distribution', 23), ('Distribution expenses', 22), (' Advertising expenses', 22), (' Sales and marketing', 22), (' depreciation', 15), (' Occupancy ', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses', 36), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Marketing expenses', 23), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' Logistics and distribution', 23), ('Distribution expenses', 22), (' Advertising expenses', 22), (' Sales and marketing', 22), (' depreciation', 15), (' Occupancy ', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Administrative and other expenses', 40), (' Amortisation expenses', 38), (' Selling & distribution expenses', 36), (' Lease expenses', 36), ('other expenses', 35), (' Other expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Advertising expenses', 33), (' Depreciation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Selling Expenses', 31), (' Management expenses', 30), (' Sales and marketing', 29), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Occupancy ', 21), (' depreciation', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 8], 'score': 100, 'value': -110280.0, 'line_item_label': ['Sales and marketing expenses', 'Administration expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-55764.0, -54291.0, -225.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Rental expenses', 69), (' Administration expenses', 47), (' Occupancy expenses', 41), ('Rent', 23), (' Occupancy', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 25), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 30), (' Administration expenses', 25), (' Occupancy expenses', 19), ('Rent', 13), (' Occupancy', 9)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 27), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 27), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 24), (' Occupancy expenses', 23), ('Rent', 13), (' Occupancy', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 24), (' Occupancy expenses', 23), ('Rent', 13), (' Occupancy', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 26), (' Occupancy', 21), ('Rent', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -47684.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-47684.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Rental expenses', 69), (' Administration expenses', 47), (' Occupancy expenses', 41), ('Rent', 23), (' Occupancy', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 25), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 30), (' Administration expenses', 25), (' Occupancy expenses', 19), ('Rent', 13), (' Occupancy', 9)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 27), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 27), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 7)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 24), (' Occupancy expenses', 23), ('Rent', 13), (' Occupancy', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 24), (' Occupancy expenses', 23), ('Rent', 13), (' Occupancy', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 26), (' Occupancy', 21), ('Rent', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -54291.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-54291.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('other operating', 31), ('Other revenue', 29), (' Other income', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Other income', 27), ('other operating', 24), ('Other revenue', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Other income', 49), ('Other revenue', 39), ('other operating', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 4518.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['6', '6'], 'line_item_value': [1882.0, 2636.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('other operating', 31), ('Other revenue', 29), (' Other income', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Other income', 27), ('other operating', 24), ('Other revenue', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Other income', 49), ('Other revenue', 39), ('other operating', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 6593.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['6', '6'], 'line_item_value': [5366.0, 1227.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Finance income and costs', 37), (' Finance income and finance costs', 36), (' Net finance costs', 32), ('finance income', 29), ('Finance income', 29), ('other income', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21), ('Finance income', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 38), (' Finance income and costs', 32), (' Net finance costs', 32), (' Interest revenue', 29), ('other income', 27), ('finance income', 19), ('Finance income', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('other income', 49), (' Interest revenue', 37), ('finance income', 35), ('Finance income', 35), (' Finance income and costs', 33), (' Net finance costs', 33), (' Finance income and finance costs', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 85, 'value': 1731.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [2636.0, -905.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Finance income and costs', 37), (' Finance income and finance costs', 36), (' Net finance costs', 32), ('finance income', 29), ('Finance income', 29), ('other income', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21), ('Finance income', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 38), (' Finance income and costs', 32), (' Net finance costs', 32), (' Interest revenue', 29), ('other income', 27), ('finance income', 19), ('Finance income', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('other income', 49), (' Interest revenue', 37), ('finance income', 35), ('Finance income', 35), (' Finance income and costs', 33), (' Net finance costs', 33), (' Finance income and finance costs', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 85, 'value': 694.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [1227.0, -533.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -905.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-905.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -533.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-533.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -905.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-905.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -533.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-533.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax expense', 53), (' income tax benefit/(expense)', 52), ('amount transferred to retained earnings', 49), ('deferred tax', 39), ('minimum alternate tax credit entitlement', 37), ('provision for taxation previous year', 35), ('earlier year', 35), (' income tax benefit', 31), ('current tax', 30), (' income tax', 26), ('prior year ', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 40), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax benefit', 34), (' income tax expense', 28), ('deferred tax', 24), ('prior year ', 24), (' income tax', 24), ('current tax', 23), ('earlier year', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('provision for taxation previous year', 48), ('prior year ', 41), ('amount transferred to retained earnings', 39), ('earlier year', 39), (' income tax benefit', 39), (' tax (expense)/benefit', 38), (' income tax', 37), ('minimum alternate tax credit entitlement', 36), (' income tax expense', 36), (' income tax benefit/(expense)', 34), ('current tax', 27), ('deferred tax', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -15776.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['5'], 'line_item_value': [-15776.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax expense', 53), (' income tax benefit/(expense)', 52), ('amount transferred to retained earnings', 49), ('deferred tax', 39), ('minimum alternate tax credit entitlement', 37), ('provision for taxation previous year', 35), ('earlier year', 35), (' income tax benefit', 31), ('current tax', 30), (' income tax', 26), ('prior year ', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 40), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax benefit', 34), (' income tax expense', 28), ('deferred tax', 24), ('prior year ', 24), (' income tax', 24), ('current tax', 23), ('earlier year', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('provision for taxation previous year', 48), ('prior year ', 41), ('amount transferred to retained earnings', 39), ('earlier year', 39), (' income tax benefit', 39), (' tax (expense)/benefit', 38), (' income tax', 37), ('minimum alternate tax credit entitlement', 36), (' income tax expense', 36), (' income tax benefit/(expense)', 34), ('current tax', 27), ('deferred tax', 23)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -12413.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['5'], 'line_item_value': [-12413.0]}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: total , res_fuzz_match = [('income tax expense', 44), (' current income tax', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: total , res_fuzz_match = [('income tax expense', 44), (' current income tax', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: accounting profit before tax , res_fuzz_match = [(' current income tax', 47), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 43), (' income tax expense on continuing operations', 42), ('income tax expense', 38)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' income tax expense on continuing operations', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' total income tax expense / (benefit)', 54), (' income tax expense on continuing operations', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' total tax (expense)/benefit in income statement', 48)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: non-deductible expenses for tax purposes , res_fuzz_match = [('income tax expense', 56), (' income tax expense on continuing operations', 55), (' current income tax', 53), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 46)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: income tax expense at effective tax rate , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 69), (' total tax (expense)/benefit in income statement', 58), (' current income tax', 47)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), ('income tax expense', 44), (' current income tax', 41), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 35)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), ('income tax expense', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense / (benefit)', 34), (' current income tax', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 38)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [(' deferred income tax', 67), (' current income tax', 65), ('income tax expense', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense / (benefit)', 47), (' income tax expense on continuing operations', 45)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33), (' current income tax', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('income tax expense', 50), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 44)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 50), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: as of the end ofthe period , res_fuzz_match = [(' income tax expense on continuing operations', 52), ('income tax expense', 50), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' current income tax', 47), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 40)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: total , res_fuzz_match = [('income tax expense', 44), (' current income tax', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: total , res_fuzz_match = [('income tax expense', 44), (' current income tax', 44), (' deferred income tax', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 44)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: accounting profit before tax , res_fuzz_match = [(' current income tax', 47), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total income tax expense / (benefit)', 43), (' total tax (expense)/benefit in income statement', 43), (' income tax expense on continuing operations', 42), ('income tax expense', 38)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' income tax expense on continuing operations', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' total income tax expense / (benefit)', 54), (' income tax expense on continuing operations', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' total tax (expense)/benefit in income statement', 48)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: non-deductible expenses for tax purposes , res_fuzz_match = [('income tax expense', 56), (' income tax expense on continuing operations', 55), (' current income tax', 53), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 46)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = 2023 and 2022: income tax expense at effective tax rate , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 69), (' total tax (expense)/benefit in income statement', 58), (' current income tax', 47)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), ('income tax expense', 44), (' current income tax', 41), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 35)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), ('income tax expense', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense / (benefit)', 34), (' current income tax', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 38)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [(' deferred income tax', 67), (' current income tax', 65), ('income tax expense', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense / (benefit)', 47), (' income tax expense on continuing operations', 45)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33), (' current income tax', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('income tax expense', 50), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 44)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 50), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: as of the end ofthe period , res_fuzz_match = [(' income tax expense on continuing operations', 52), ('income tax expense', 50), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' current income tax', 47), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 40)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6, 25, 27], 'score': [100, 100, 100, 100], 'value': [0.0, 12413.0, 10.0, 15776.0], 'label': ['2023 and 2022: Adjustments in respect of current income tax of prior year', '2023 and 2022: Income tax expense at effective tax rate', '2023 and 2022: Adjustments in respect of current income tax of prior year', '2023 and 2022: Income tax expense at effective tax rate'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 48)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' total tax (expense)/benefit in income statement', 52)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 100), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), (' total tax (expense)/benefit in income statement', 40)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 100), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' current income tax', 71), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 48)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' total tax (expense)/benefit in income statement', 52)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 100), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), (' total tax (expense)/benefit in income statement', 40)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 100), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' current income tax', 71), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [28995.0, 0.0, -16585.0, 12413.0, 32883.0, 10.0, -17117.0, 15776.0], 'label': ['Current income tax Current income tax charge', 'Current income tax Adjustments in respect of current income tax of prior year', 'Deferred income tax Relating to origination and reversal of temporary differences', 'Deferred income tax Income tax expenses reported in the statement of profit or loss', 'Current income tax Current income tax charge', 'Current income tax Adjustments in respect of current income tax of prior year', 'Deferred income tax Relating to origination and reversal of temporary differences', 'Deferred income tax Income tax expenses reported in the statement of profit or loss'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('prior period', 27), ('exceptional', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('exceptional', 29), ('prior period', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('prior period', 26), ('exceptional', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('prior period', 26), ('exceptional', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('prior period', 26), ('exceptional', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('prior period', 30), ('exceptional', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('prior period', 27), ('exceptional', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('exceptional', 29), ('prior period', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 27)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('prior period', 26), ('exceptional', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 14)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('prior period', 26), ('exceptional', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('prior period', 26), ('exceptional', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('prior period', 30), ('exceptional', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:04:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-26 15:04:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:04:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:04:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:04:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:46+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-07-26 15:29:46+0530 - sLogger - DEBUG - process_main_pages started
2023-07-26 15:29:46+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-26 15:29:46+0530 - sLogger - DEBUG - start_refactoring started
2023-07-26 15:29:46+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_without_notes
2023-07-26 15:29:46+0530 - sLogger - ERROR - error occured: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
2023-07-26 15:29:46+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-26 15:29:46+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-26 15:29:46+0530 - sLogger - DEBUG - start_refactoring started
2023-07-26 15:29:46+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-26 15:29:46+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-07-26 15:29:46+0530 - sLogger - DEBUG - start_refactoring started
2023-07-26 15:29:46+0530 - sLogger - DEBUG - start_refactoring completed
2023-07-26 15:29:46+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-07-26 15:29:46+0530 - sLogger - DEBUG - set_section_details started
2023-07-26 15:29:46+0530 - sLogger - DEBUG - CURRENT ASSETS | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current assets | score 100
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current liabilities | score 67
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent assets | score 90
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 61
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current assets | score 95
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current liabilities | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Cash assets | [('assets', 67), ('current assets', 61), ('noncurrent assets', 61), ('equity and liabilities', 37), ('equity liabilities', 35), ('current liabilities', 33), ('equity', 25), ('noncurrent liabilities', 25), ('liabilities', 12)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD current assets | score 67
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD current liabilities | score 33
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrent assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD noncurrent liabilities | score 31
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD non current assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD non current liabilities | score 31
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD equity and liabilities | score 31
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Cash assets | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Receivables | [('equity', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity and liabilities', 17), ('noncurrent liabilities', 10)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD current assets | score 40
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD current liabilities | score 53
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrent assets | score 40
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD noncurrent liabilities | score 50
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD non current assets | score 40
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD non current liabilities | score 50
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD equity and liabilities | score 50
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Receivables | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Inventory | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD current assets | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD current liabilities | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrent assets | score 40
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD noncurrent liabilities | score 40
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD non current assets | score 38
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD non current liabilities | score 38
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD equity and liabilities | score 38
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Inventory | MATCH WORD equity | score 45
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Other | [('current assets', 22), ('noncurrent assets', 22), ('noncurrent liabilities', 21), ('assets', 20), ('equity', 18), ('current liabilities', 11), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current assets | score 21
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent assets | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current assets | score 26
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity and liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity | score 18
2023-07-26 15:29:46+0530 - sLogger - DEBUG - TOTAL CURRENT ASSETS | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current assets | score 95
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current liabilities | score 56
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent assets | score 81
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 57
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current assets | score 84
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current liabilities | score 60
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - NONCURRENT ASSETS | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current liabilities | score 61
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 100
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 72
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current assets | score 97
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current liabilities | score 70
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Plant and Equipment | [('equity and liabilities', 69), ('equity liabilities', 50), ('equity', 48), ('current assets', 36), ('assets', 30), ('noncurrent assets', 29), ('liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD current assets | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD current liabilities | score 40
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrent assets | score 33
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD noncurrent liabilities | score 29
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD non current assets | score 41
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD non current liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD equity and liabilities | score 60
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Plant and Equipment | MATCH WORD equity | score 60
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Investments | [('assets', 36), ('equity', 33), ('equity and liabilities', 26), ('current assets', 21), ('noncurrent assets', 21), ('equity liabilities', 21), ('current liabilities', 20), ('noncurrent liabilities', 20), ('liabilities', 17)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current assets | score 40
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current liabilities | score 32
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent assets | score 43
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent liabilities | score 32
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current assets | score 41
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current liabilities | score 32
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity and liabilities | score 32
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Advance Payments and Deposits | [('equity and liabilities', 42), ('current assets', 36), ('assets', 26), ('noncurrent assets', 26), ('equity liabilities', 26), ('current liabilities', 25), ('noncurrent liabilities', 25), ('equity', 19), ('liabilities', 12)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD current assets | score 45
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD current liabilities | score 38
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrent assets | score 43
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD noncurrent liabilities | score 39
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD non current assets | score 43
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD non current liabilities | score 38
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD equity and liabilities | score 41
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Advance Payments and Deposits | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Right of Use Assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('liabilities', 19)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD current assets | score 57
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD current liabilities | score 32
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrent assets | score 56
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD noncurrent liabilities | score 34
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD non current assets | score 59
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD non current liabilities | score 38
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equity and liabilities | score 34
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Right of Use Assets | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - TOTAL NONCURRENT ASSETS | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current liabilities | score 52
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 95
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 62
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current assets | score 83
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current liabilities | score 61
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - TOTAL ASSETS | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current assets | score 64
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent assets | score 64
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity and liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - CURRENT LIABILITIES | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current assets | score 67
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current liabilities | score 100
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 61
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 93
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current assets | score 59
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current liabilities | score 95
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 69
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Payables | [('liabilities', 50), ('equity and liabilities', 35), ('equity liabilities', 32), ('current liabilities', 30), ('noncurrent liabilities', 30), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('equity', 0)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD current assets | score 34
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD current liabilities | score 45
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrent assets | score 34
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD noncurrent liabilities | score 45
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD non current assets | score 34
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD non current liabilities | score 45
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD equity and liabilities | score 45
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Payables | MATCH WORD equity | score 14
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Interest Bearing Liabilities | [('current liabilities', 65), ('equity liabilities', 61), ('equity and liabilities', 59), ('liabilities', 46), ('noncurrent liabilities', 35), ('equity', 31), ('current assets', 30), ('assets', 24), ('noncurrent assets', 24)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD current assets | score 33
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD current liabilities | score 69
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD noncurrent assets | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD noncurrent liabilities | score 65
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD non current assets | score 35
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD non current liabilities | score 63
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD equity and liabilities | score 68
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Interest Bearing Liabilities | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Other | [('current assets', 22), ('noncurrent assets', 22), ('noncurrent liabilities', 21), ('assets', 20), ('equity', 18), ('current liabilities', 11), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current assets | score 21
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD current liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent assets | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD noncurrent liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current assets | score 26
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD non current liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity and liabilities | score 36
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Other | MATCH WORD equity | score 18
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Lease Liabilities Right of Use Assets | [('equity and liabilities', 45), ('equity liabilities', 45), ('current liabilities', 44), ('current assets', 40), ('noncurrent liabilities', 39), ('liabilities', 36), ('noncurrent assets', 35), ('assets', 31), ('equity', 18)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current liabilities | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent liabilities | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current liabilities | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity and liabilities | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - TOTAL CURRENT LIABILITIES | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current liabilities | score 95
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 57
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 85
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current assets | score 60
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current liabilities | score 88
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - NONCURRENT LIABILITIES | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 93
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 72
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 100
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current assets | score 70
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 98
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 65
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-07-26 15:29:46+0530 - sLogger - DEBUG - Lease Liabilities Right of Use Assets | [('equity and liabilities', 45), ('equity liabilities', 45), ('current liabilities', 44), ('current assets', 40), ('noncurrent liabilities', 39), ('liabilities', 36), ('noncurrent assets', 35), ('assets', 31), ('equity', 18)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD current liabilities | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD noncurrent liabilities | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD non current liabilities | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity and liabilities | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text Lease Liabilities Right of Use Assets | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - TOTAL NONCURRENT LIABILITIES | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 81
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 95
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current assets | score 61
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - TOTAL LIABILITIES | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current assets | score 32
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current liabilities | score 75
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent assets | score 35
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent liabilities | score 75
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current assets | score 34
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current liabilities | score 75
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity and liabilities | score 75
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - NET ASSETS | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current assets | score 75
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current liabilities | score 41
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent liabilities | score 44
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current assets | score 86
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current liabilities | score 42
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity and liabilities | score 38
2023-07-26 15:29:46+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity | score 30
2023-07-26 15:29:46+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-07-26 15:29:46+0530 - sLogger - DEBUG - set_section_details started
2023-07-26 15:29:46+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Activities 5 | working capital adjustments
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: 'year'
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: 'value'
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: 'value'
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: 'year'
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: 'value'
2023-07-26 15:29:48+0530 - sLogger - DEBUG - process_main_pages completed
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('cash and cash equivalents', 45), (' cash and cash equivalents', 45), ('cash and bank balances', 40), ('cash and short term deposits', 38), ('other bank balances', 30), ('bank balances other than above', 27), ('bank balances other than cash and cash equivalents', 26)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('cash and short term deposits', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('bank balances other than above', 12), ('cash and bank balances', 8)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other bank balances', 45), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('bank balances other than cash and cash equivalents', 20), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('cash and bank balances', 8)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('cash and cash equivalents', 45), (' cash and cash equivalents', 45), ('cash and bank balances', 40), ('cash and short term deposits', 38), ('other bank balances', 30), ('bank balances other than above', 27), ('bank balances other than cash and cash equivalents', 26)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('cash and short term deposits', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('bank balances other than above', 12), ('cash and bank balances', 8)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other bank balances', 45), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('bank balances other than cash and cash equivalents', 20), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('cash and bank balances', 8)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('inventories', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('inventories', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('inventories', 100)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('inventories', 40)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 4700378.0, 'line_item_label': ['Inventory'], 'note_numbers': ['8'], 'line_item_value': [4700378.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('inventories', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('inventories', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('inventories', 100)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('inventories', 40)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 3923249.0, 'line_item_label': ['Inventory'], 'note_numbers': ['8'], 'line_item_value': [3923249.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), ('other current assets', 55), ('other financial assets', 55), ('other current financial assets', 49), ('prepayments', 25)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('prepayments', 33), ('other current assets', 24), ('other financial assets', 24), ('other current financial assets', 24), ('other assets', 24)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), ('other current assets', 55), ('other financial assets', 55), ('other current financial assets', 49), ('prepayments', 25)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('prepayments', 33), ('other current assets', 24), ('other financial assets', 24), ('other current financial assets', 24), ('other assets', 24)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), (' financial assets', 61), ('other current assets', 55), (' other current assets', 55), (' biological assets', 55), (' other financial assets', 55), (' trade and other receivables', 31), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [(' trade and other receivables', 43), (' financial assets', 32), (' income tax receivable from related parties', 31), (' deferred operating expenditure', 30), ('other current assets', 24), ('other assets', 24), (' other current assets', 24), (' other financial assets', 24), (' biological assets', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 37), (' deferred operating expenditure', 23), (' income tax receivable from related parties', 21), (' biological assets', 12), (' financial assets', 11)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('other assets', 67), (' financial assets', 61), ('other current assets', 55), (' other current assets', 55), (' biological assets', 55), (' other financial assets', 55), (' trade and other receivables', 31), (' income tax receivable from related parties', 23), (' deferred operating expenditure', 19)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [(' trade and other receivables', 43), (' financial assets', 32), (' income tax receivable from related parties', 31), (' deferred operating expenditure', 30), ('other current assets', 24), ('other assets', 24), (' other current assets', 24), (' other financial assets', 24), (' biological assets', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other assets', 62), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 37), (' deferred operating expenditure', 23), (' income tax receivable from related parties', 21), (' biological assets', 12), (' financial assets', 11)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 81, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('current assets', 61)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('current assets', 32)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('current assets', 27)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current assets', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('current assets', 61)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('current assets', 32)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('current assets', 27)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current assets', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('right of use', 22), ('right to use', 22), ('work in progress', 15), ('rightofuse', 11), ('righttouse', 11)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('rightofuse', 33), ('righttouse', 33), ('right of use', 33), ('right to use', 33), ('work in progress', 33), ('tangible', 17)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 40), ('capital workinprogress', 40), ('capital work in progress', 37), ('work in progress', 31), ('rightofuse', 22), ('righttouse', 22), ('right of use', 22), ('right to use', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('right of use', 100), ('right to use', 100), ('rightofuse', 78), ('righttouse', 78), ('capital work-in-progress', 40), ('capital workinprogress', 40), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 463799.0, 'line_item_label': ['Right of Use Assets'], 'note_numbers': ['13'], 'line_item_value': [463799.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('right of use', 22), ('right to use', 22), ('work in progress', 15), ('rightofuse', 11), ('righttouse', 11)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('capital work-in-progress', 33), ('capital workinprogress', 33), ('capital work in progress', 33), ('rightofuse', 33), ('righttouse', 33), ('right of use', 33), ('right to use', 33), ('work in progress', 33), ('tangible', 17)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 40), ('capital workinprogress', 40), ('capital work in progress', 37), ('work in progress', 31), ('rightofuse', 22), ('righttouse', 22), ('right of use', 22), ('right to use', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('right of use', 100), ('right to use', 100), ('rightofuse', 78), ('righttouse', 78), ('capital work-in-progress', 40), ('capital workinprogress', 40), ('capital work in progress', 33), ('work in progress', 31), ('tangible', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 358221.0, 'line_item_label': ['Right of Use Assets'], 'note_numbers': ['13'], 'line_item_value': [358221.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible assets', 31)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('tangible assets', 21)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('tangible assets', 31)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('tangible assets', 50)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 17)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 14)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 17)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 14)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible', 50), ('intangible under development', 50), ('intangible assets under development', 50)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('intangible', 67), ('intangible assets under development', 52), ('intangible under development', 50)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets under development', 47), ('intangible under development', 40), ('intangible', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('intangible', 50), ('intangible under development', 50), ('intangible assets under development', 50)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('intangible', 67), ('intangible assets under development', 52), ('intangible under development', 50)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('intangible assets under development', 47), ('intangible under development', 40), ('intangible', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('donations', 26)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('donations', 36)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('donations', 26)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('donations', 20)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('joint ventures and associates', 53), ('investment', 50), (' investment in associate', 46), ('derivative financial instruments', 42), (' investments accounted for using the equity method', 38), (' investment in joint venture', 37)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 330001.0, 'line_item_label': ['Investments'], 'note_numbers': ['11'], 'line_item_value': [330001.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('investment', 100), (' investment in joint venture', 100), (' investment in associate', 100), (' investments accounted for using the equity method', 100), ('joint ventures and associates', 67), ('derivative financial instruments', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('joint ventures and associates', 53), ('investment', 50), (' investment in associate', 46), ('derivative financial instruments', 42), (' investments accounted for using the equity method', 38), (' investment in joint venture', 37)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [(' investments accounted for using the equity method', 53), (' investment in associate', 46), ('joint ventures and associates', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': 330001.0, 'line_item_label': ['Investments'], 'note_numbers': ['11'], 'line_item_value': [330001.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_rows = none investments in unlisted companies , res_fuzz_match = [(' investment in associate', 62), ('investment in joint venture', 53), (' carrying amount at the end of the financial year', 42)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [('investment in joint venture', 67), (' carrying amount at the end of the financial year', 67), (' investment in associate', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_rows = at cost total , res_fuzz_match = [('investment in joint venture', 50), (' investment in associate', 40), (' carrying amount at the end of the financial year', 40)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [('investment in joint venture', 67), (' carrying amount at the end of the financial year', 67), (' investment in associate', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_rows = none investments in unlisted companies , res_fuzz_match = [(' investment in associate', 62), ('investment in joint venture', 53), (' carrying amount at the end of the financial year', 42)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [('investment in joint venture', 67), (' carrying amount at the end of the financial year', 67), (' investment in associate', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_rows = at cost total , res_fuzz_match = [('investment in joint venture', 50), (' investment in associate', 40), (' carrying amount at the end of the financial year', 40)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [('investment in joint venture', 67), (' carrying amount at the end of the financial year', 67), (' investment in associate', 22)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('deferred charges', 32), ('deferred tax assets', 29), ('deferred tax', 23)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('deferred tax', 27), ('deferred tax assets', 19), ('deferred charges', 12)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('deferred charges', 32), ('deferred tax assets', 29), ('deferred tax', 23)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 38), ('deferred tax', 25)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), ('other assets', 24), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' financial assets', 31), (' other non-current assets', 31), (' other non-current assets', 31), (' leased assets', 28), ('other assets', 27), (' other assets', 27), (' loan receivables', 27), ('non-current', 18), (' leases', 13)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('other assets', 62), (' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' leases', 40), (' leased assets', 25), ('other assets', 24), (' exploration and evaluation expenditure', 24), (' other assets', 24), (' loan receivables', 24), (' financial assets', 21), (' other non-current assets', 16), (' other non-current assets', 16), ('non-current', 15)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [(' exploration and evaluation expenditure', 42), (' financial assets', 31), (' other non-current assets', 31), (' other non-current assets', 31), (' leased assets', 28), ('other assets', 27), (' other assets', 27), (' loan receivables', 27), ('non-current', 18), (' leases', 13)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('other assets', 62), (' other assets', 62), (' leased assets', 56), (' other non-current assets', 53), (' other non-current assets', 53), (' financial assets', 50), (' exploration and evaluation expenditure', 33), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('non-current assets total', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('non-current assets total', 16)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('non-current assets total', 31)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('non-current assets total', 47)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('non-current assets total', 29)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('non-current assets total', 16)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('non-current assets total', 31)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('non-current assets total', 47)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 81, 'value': 0.0, 'line_item_label': ['NON-CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('lease liabilities', 47), (' loans and borrowings', 29), (' bank overdraft', 20), (' leases', 20), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), ('shortterm borrowings', 9)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('lease liabilities', 65), (' bank overdraft', 35), ('short term debt', 34), (' loans and borrowings', 34), ('shortterm borrowings', 33), ('short-term debt', 29), ('shortterm debt', 29), (' leases', 25), ('borrowings', 23)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('short-term debt', 42), ('shortterm debt', 42), ('short term debt', 40), ('shortterm borrowings', 38), ('borrowings', 36), (' bank overdraft', 32), (' leases', 22), (' loans and borrowings', 20), ('lease liabilities', 12)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 58), ('short term debt', 38), ('short-term debt', 34), ('shortterm debt', 34), (' leases', 26), (' loans and borrowings', 24), (' bank overdraft', 24), ('shortterm borrowings', 23), ('borrowings', 12)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('lease liabilities', 47), (' loans and borrowings', 29), (' bank overdraft', 20), (' leases', 20), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), ('shortterm borrowings', 9)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('lease liabilities', 65), (' bank overdraft', 35), ('short term debt', 34), (' loans and borrowings', 34), ('shortterm borrowings', 33), ('short-term debt', 29), ('shortterm debt', 29), (' leases', 25), ('borrowings', 23)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('short-term debt', 42), ('shortterm debt', 42), ('short term debt', 40), ('shortterm borrowings', 38), ('borrowings', 36), (' bank overdraft', 32), (' leases', 22), (' loans and borrowings', 20), ('lease liabilities', 12)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 58), ('short term debt', 38), ('short-term debt', 34), ('shortterm debt', 34), (' leases', 26), (' loans and borrowings', 24), (' bank overdraft', 24), ('shortterm borrowings', 23), ('borrowings', 12)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:48+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-26 15:29:48+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:48+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:48+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:48+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-07-26 15:29:48+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('note payable(debt)', 55)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('note payable(debt)', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('note payable(debt)', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('note payable(debt)', 55)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('note payable(debt)', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('note payable(debt)', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade payable', 67), ('accounts payable', 60), ('other trade payables', 50), ('trade and other payables', 43), ('small enterprises', 29), ('micro enterprises and small enterprises', 15), ('outstanding dues of micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('micro enterprises', 10), ('total outstanding due of other creditors other than micro and small', 9)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('small enterprises', 51), ('micro enterprises', 46), ('micro enterprises and small enterprises', 44), ('trade and other payables', 43), ('accounts payable', 41), ('other than micro and small enterprises', 39), ('outstanding dues of creditors other than', 38), ('other trade payables', 37), ('outstanding dues of micro enterprises and small enterprises', 35), ('total outstanding due of other creditors other than micro and small', 35), ('outstanding dues of creditors other than micro enterprises and small enterprises', 32), ('trade payable', 31)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other trade payables', 43), ('trade and other payables', 37), ('micro enterprises', 30), ('small enterprises', 30), ('outstanding dues of creditors other than', 27), ('trade payable', 24), ('other than micro and small enterprises', 24), ('accounts payable', 21), ('micro enterprises and small enterprises', 15), ('total outstanding due of other creditors other than micro and small', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41), ('other trade payables', 40), ('trade payable', 36), ('micro enterprises and small enterprises', 35), ('other than micro and small enterprises', 35), ('accounts payable', 34), ('micro enterprises', 33), ('small enterprises', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('outstanding dues of creditors other than', 31), ('total outstanding due of other creditors other than micro and small', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade payable', 67), ('accounts payable', 60), ('other trade payables', 50), ('trade and other payables', 43), ('small enterprises', 29), ('micro enterprises and small enterprises', 15), ('outstanding dues of micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('micro enterprises', 10), ('total outstanding due of other creditors other than micro and small', 9)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('small enterprises', 51), ('micro enterprises', 46), ('micro enterprises and small enterprises', 44), ('trade and other payables', 43), ('accounts payable', 41), ('other than micro and small enterprises', 39), ('outstanding dues of creditors other than', 38), ('other trade payables', 37), ('outstanding dues of micro enterprises and small enterprises', 35), ('total outstanding due of other creditors other than micro and small', 35), ('outstanding dues of creditors other than micro enterprises and small enterprises', 32), ('trade payable', 31)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other trade payables', 43), ('trade and other payables', 37), ('micro enterprises', 30), ('small enterprises', 30), ('outstanding dues of creditors other than', 27), ('trade payable', 24), ('other than micro and small enterprises', 24), ('accounts payable', 21), ('micro enterprises and small enterprises', 15), ('total outstanding due of other creditors other than micro and small', 15), ('outstanding dues of creditors other than micro enterprises and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('trade and other payables', 41), ('other trade payables', 40), ('trade payable', 36), ('micro enterprises and small enterprises', 35), ('other than micro and small enterprises', 35), ('accounts payable', 34), ('micro enterprises', 33), ('small enterprises', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('outstanding dues of creditors other than', 31), ('total outstanding due of other creditors other than micro and small', 30), ('outstanding dues of creditors other than micro enterprises and small enterprises', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade and other payables', 43), ('other liabilities', 33), ('other financial liabilities', 31), ('other current financial liabilities', 24), ('other current liabilities', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('other current liabilities', 55), ('other current financial liabilities', 46), ('other financial liabilities', 45), ('trade and other payables', 43), ('other liabilities', 38)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other liabilities', 59), ('other current liabilities', 40), ('other financial liabilities', 40), ('trade and other payables', 37), ('other current financial liabilities', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), ('other current financial liabilities', 51), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 41)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 82, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('trade and other payables', 43), ('other liabilities', 33), ('other financial liabilities', 31), ('other current financial liabilities', 24), ('other current liabilities', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('other current liabilities', 55), ('other current financial liabilities', 46), ('other financial liabilities', 45), ('trade and other payables', 43), ('other liabilities', 38)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other liabilities', 59), ('other current liabilities', 40), ('other financial liabilities', 40), ('trade and other payables', 37), ('other current financial liabilities', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), ('other current financial liabilities', 51), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 41)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 82, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' income tax payable', 100), ('current tax liabilities', 50), ('tax', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 38), ('tax', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' income tax payable', 40), ('tax', 33), ('current tax liabilities', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('tax', 33), ('current tax liabilities', 29), (' income tax payable', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 1526885.0, 'line_item_label': ['Payables'], 'note_numbers': ['14'], 'line_item_value': [1526885.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' income tax payable', 100), ('current tax liabilities', 50), ('tax', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 38), ('tax', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [(' income tax payable', 40), ('tax', 33), ('current tax liabilities', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('tax', 33), ('current tax liabilities', 29), (' income tax payable', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 1726142.0, 'line_item_label': ['Payables'], 'note_numbers': ['14'], 'line_item_value': [1726142.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' trade and other payables', 43), (' financial liabilities', 40), (' other financial liabilities', 31), ('other current liabilities', 23), (' other current liabilities', 23), (' foreign exchange contract liability', 22), (' employee benefits', 19), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('other current liabilities', 55), (' other current liabilities', 55), (' financial liabilities', 53), (' foreign exchange contract liability', 47), (' other financial liabilities', 45), (' trade and other payables', 43), (' employee benefits', 40), (' deferred revenue', 31), (' customer deposits', 24), ('provisions', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 40), (' trade and other payables', 37), (' deferred revenue', 24), (' foreign exchange contract liability', 22), (' customer deposits', 21), (' employee benefits', 20), ('provisions', 18), (' financial liabilities', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), (' other current liabilities', 51), (' other financial liabilities', 47), (' trade and other payables', 41), (' foreign exchange contract liability', 41), (' financial liabilities', 39), (' customer deposits', 34), (' employee benefits', 29), (' deferred revenue', 26), ('provisions', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 16], 'score': 100, 'value': 63080.0, 'line_item_label': ['CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 63080.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [(' trade and other payables', 43), (' financial liabilities', 40), (' other financial liabilities', 31), ('other current liabilities', 23), (' other current liabilities', 23), (' foreign exchange contract liability', 22), (' employee benefits', 19), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('other current liabilities', 55), (' other current liabilities', 55), (' financial liabilities', 53), (' foreign exchange contract liability', 47), (' other financial liabilities', 45), (' trade and other payables', 43), (' employee benefits', 40), (' deferred revenue', 31), (' customer deposits', 24), ('provisions', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('other current liabilities', 40), (' other current liabilities', 40), (' other financial liabilities', 40), (' trade and other payables', 37), (' deferred revenue', 24), (' foreign exchange contract liability', 22), (' customer deposits', 21), (' employee benefits', 20), ('provisions', 18), (' financial liabilities', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('other current liabilities', 51), (' other current liabilities', 51), (' other financial liabilities', 47), (' trade and other payables', 41), (' foreign exchange contract liability', 41), (' financial liabilities', 39), (' customer deposits', 34), (' employee benefits', 29), (' deferred revenue', 26), ('provisions', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [13, 16], 'score': 100, 'value': 134131.0, 'line_item_label': ['CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 134131.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 73), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 59), (' make good provisions', 50), (' warranty', 50), ('other creditors and accruals', 46), (' total current employee benefits', 45), (' share of joint venture payables', 44), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' restructuring', 40), (' loans from related party', 39), (' ultimate parent entity', 37), (' other related parties', 36), (' employee benefits - payroll', 36), (' gst', 33), (' forward exchange contracts', 33), (' contract liabilites - current', 32), (' employee benefits - current', 30), (' gst liabilities', 30), (' abandonment and decommissioning costs', 27), (' other', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [('current', 100), (' provisions - current', 64), (' provision for associate funding', 62), (' current - liability for annual and long service leave', 61), (' rebates', 60), (' total current employee benefits', 55), (' arising from service contracts', 50), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), ('other creditors and accruals', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' forward exchange contracts', 38), (' share of joint venture payables', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [('current', 100), (' gst', 100), (' provision for associate funding', 67), (' current - liability for annual and long service leave', 64), (' provisions - current', 64), (' rebates', 60), (' total current employee benefits', 55), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 45), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' arising from service contracts', 41), (' loans from related party', 40), (' restructuring', 40), (' other', 40), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 36), (' secured long-term bank loans', 36), (' share of joint venture payables', 36), (' forward exchange contracts', 36), ('other creditors and accruals', 32), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30), (' gst payable and accruals', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 64), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 56), (' total current employee benefits', 55), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' share of joint venture payables', 41), (' arising from service contracts', 41), (' loans from related party', 40), (' restructuring', 40), (' other', 40), (' abandonment and decommissioning costs', 39), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 36), (' secured long-term bank loans', 36), (' forward exchange contracts', 36), (' gst', 33), ('other creditors and accruals', 32), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30), (' gst payable and accruals', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [('current', 100), (' make good provisions', 77), (' provision for associate funding', 64), (' rebates', 60), (' current - liability for annual and long service leave', 59), (' provisions - current', 57), (' warranty', 50), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' loan payable to relayed party under tax funding agreement', 41), (' total current employee benefits', 41), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' restructuring', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' ultimate parent entity', 37), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' other related parties', 35), (' gst', 33), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' other', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 73), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 59), (' make good provisions', 50), (' warranty', 50), ('other creditors and accruals', 46), (' total current employee benefits', 45), (' share of joint venture payables', 44), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' other creditors', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' restructuring', 40), (' loans from related party', 39), (' ultimate parent entity', 37), (' other related parties', 36), (' employee benefits - payroll', 36), (' gst', 33), (' forward exchange contracts', 33), (' contract liabilites - current', 32), (' employee benefits - current', 30), (' gst liabilities', 30), (' abandonment and decommissioning costs', 27), (' other', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [('current', 100), (' provisions - current', 64), (' provision for associate funding', 62), (' current - liability for annual and long service leave', 61), (' rebates', 60), (' total current employee benefits', 55), (' arising from service contracts', 50), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' other creditors', 43), (' loan payable to relayed party under tax funding agreement', 43), (' loans from related party', 43), (' other creditors', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), ('other creditors and accruals', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' forward exchange contracts', 38), (' share of joint venture payables', 36), (' employee benefits - current', 35), (' abandonment and decommissioning costs', 35), (' gst', 33), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [('current', 100), (' gst', 100), (' provision for associate funding', 67), (' current - liability for annual and long service leave', 64), (' provisions - current', 64), (' rebates', 60), (' total current employee benefits', 55), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 45), (' abandonment and decommissioning costs', 44), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' arising from service contracts', 41), (' loans from related party', 40), (' restructuring', 40), (' other', 40), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 36), (' secured long-term bank loans', 36), (' share of joint venture payables', 36), (' forward exchange contracts', 36), ('other creditors and accruals', 32), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30), (' gst payable and accruals', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 64), (' provisions - current', 64), (' rebates', 60), (' provision for associate funding', 56), (' total current employee benefits', 55), (' make good provisions', 50), (' warranty', 50), (' other related parties', 47), (' loan payable to relayed party under tax funding agreement', 45), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' share of joint venture payables', 41), (' arising from service contracts', 41), (' loans from related party', 40), (' restructuring', 40), (' other', 40), (' abandonment and decommissioning costs', 39), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 36), (' secured long-term bank loans', 36), (' forward exchange contracts', 36), (' gst', 33), ('other creditors and accruals', 32), (' employee benefits - current', 32), (' contract liabilites - current', 32), (' employee benefits - payroll', 32), (' gst payables', 30), (' gst liabilities', 30), (' gst payable and accruals', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [('current', 100), (' make good provisions', 77), (' provision for associate funding', 64), (' rebates', 60), (' current - liability for annual and long service leave', 59), (' provisions - current', 57), (' warranty', 50), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' secured long-term bank loans', 42), (' loan payable to relayed party under tax funding agreement', 41), (' total current employee benefits', 41), (' gst payables', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' restructuring', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' ultimate parent entity', 37), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' other related parties', 35), (' gst', 33), (' forward exchange contracts', 33), (' gst payable and accruals', 32), (' contract liabilites - current', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - current', 30), (' other', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('current', 100), (' current - liability for annual and long service leave', 69), (' total current employee benefits', 69), (' rebates', 60), (' ultimate parent entity', 54), (' employee benefits - current', 54), (' provisions - current', 54), (' contract liabilites - current', 54), (' warranty', 50), ('other creditors and accruals', 46), (' other related parties', 46), (' secured long-term bank loans', 46), (' share of joint venture payables', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' gst payables', 42), (' gst liabilities', 42), (' restructuring', 40), (' other', 40), (' other creditors', 38), (' derivative contracts - at fair value', 38), (' loan payable to relayed party under tax funding agreement', 38), (' loans from related party', 38), (' other creditors', 38), (' arising from service contracts', 38), (' other creditors', 38), (' gst', 33), (' gst payable and accruals', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [54407.0, 51952.0, -4372.0, 1874.0, 30270.0, 134131.0, 46231.0, 27392.0, -44011.0, 4447.0, 29022.0, 63080.0], 'label': ['Current Provision for Annual Leave', 'Current Provision for Income Tax', 'Current Provision for GST', 'Current Provision for FBT', 'Current Provision for Make Good Obligation', 'Current Total', 'Current Provision for Annual Leave', 'Current Provision for Income Tax', 'Current Provision for GST', 'Current Provision for FBT', 'Current Provision for Make Good Obligation', 'Current Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('current liabilities', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('current liabilities', 65)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current liabilities', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('current liabilities', 44)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = payables , res_fuzz_match = [('current liabilities', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = interest bearing liabilities , res_fuzz_match = [('current liabilities', 65)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('current liabilities', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('current liabilities', 44)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [13], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term debt', 34)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term debt', 34)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), (' loans and borrowings', 40), (' borrowings', 33), ('interest bearing loans and borrowings', 31)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [22], 'score': 100, 'value': 359790.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [359790.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), (' loans and borrowings', 40), (' borrowings', 33), ('interest bearing loans and borrowings', 31)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [22], 'score': 100, 'value': 265356.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [265356.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 31)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [22], 'score': 100, 'value': 359790.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [359790.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 31)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [22], 'score': 100, 'value': 265356.0, 'line_item_label': ['Lease Liabilities Right of Use Assets'], 'note_numbers': ['20'], 'line_item_value': [265356.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' other financial liabilities', 47), ('other long term liabilities', 45), (' other non-current liabilities', 43), ('trade and other payables', 41), (' financial liabilities', 39), (' provision for associate funding', 37), (' employee benefits', 29), (' provisions', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21], 'score': 100, 'value': 49640.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 49640.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [(' other financial liabilities', 47), ('other long term liabilities', 45), (' other non-current liabilities', 43), ('trade and other payables', 41), (' financial liabilities', 39), (' provision for associate funding', 37), (' employee benefits', 29), (' provisions', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [20, 21], 'score': 100, 'value': 54716.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Provisions'], 'note_numbers': [nan, '16'], 'line_item_value': [0.0, 54716.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 59), (' non-current - liability for long-service leave', 53), (' make good provisions', 50), ('non-current trade and other payables', 43), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 40), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 34), (' abandonment and decommissioning costs', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 62), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' derivative contracts - at fair value', 42), (' total non-current employee benefits', 41), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 39), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' abandonment and decommissioning costs', 35), (' trade payables - related parties', 33), (' employee benefits - payroll', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [(' provision for associate funding', 67), (' provisions - non-current', 64), (' non-current - liability for long-service leave', 59), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 44), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 56), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 39), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [(' make good provisions', 77), (' provisions - non-current', 64), (' provision for associate funding', 64), (' electricity derivatives at fair value through oci', 45), (' non-current - liability for long-service leave', 41), ('non-current trade and other payables', 40), (' derivative contracts - at fair value', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' trade payables - related parties', 33), (' contract liabilites - non-current', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - non current', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('non-current trade and other payables', 54), (' employee benefits - non current', 54), (' non-current - liability for long-service leave', 54), (' employee benefits - payroll', 46), (' total non-current employee benefits', 46), (' electricity derivatives at fair value through oci', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' provisions - non-current', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for annual leave , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 59), (' non-current - liability for long-service leave', 53), (' make good provisions', 50), ('non-current trade and other payables', 43), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 40), (' trade payables - related parties', 38), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' employee benefits - payroll', 36), (' total non-current employee benefits', 34), (' abandonment and decommissioning costs', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for income tax , res_fuzz_match = [(' provisions - non-current', 71), (' provision for associate funding', 62), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' derivative contracts - at fair value', 42), (' total non-current employee benefits', 41), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 39), (' employee benefits - non current', 37), (' contract liabilites - non-current', 36), (' abandonment and decommissioning costs', 35), (' trade payables - related parties', 33), (' employee benefits - payroll', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for gst , res_fuzz_match = [(' provision for associate funding', 67), (' provisions - non-current', 64), (' non-current - liability for long-service leave', 59), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 44), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for fbt , res_fuzz_match = [(' provisions - non-current', 64), (' provision for associate funding', 56), (' non-current - liability for long-service leave', 50), (' make good provisions', 50), (' total non-current employee benefits', 48), ('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' abandonment and decommissioning costs', 39), (' derivative contracts - at fair value', 36), (' employee benefits - non current', 36), (' trade payables - related parties', 36), (' contract liabilites - non-current', 32), (' employee benefits - payroll', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current provision for make good obligation , res_fuzz_match = [(' make good provisions', 77), (' provisions - non-current', 64), (' provision for associate funding', 64), (' electricity derivatives at fair value through oci', 45), (' non-current - liability for long-service leave', 41), ('non-current trade and other payables', 40), (' derivative contracts - at fair value', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' trade payables - related parties', 33), (' contract liabilites - non-current', 32), (' abandonment and decommissioning costs', 31), (' employee benefits - non current', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = current total , res_fuzz_match = [('non-current trade and other payables', 54), (' employee benefits - non current', 54), (' non-current - liability for long-service leave', 54), (' employee benefits - payroll', 46), (' total non-current employee benefits', 46), (' electricity derivatives at fair value through oci', 38), (' derivative contracts - at fair value', 38), (' contract liabilites - non-current', 38), (' trade payables - related parties', 38), (' provisions - non-current', 31), (' abandonment and decommissioning costs', 31), (' provision for associate funding', 31), (' make good provisions', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('minority interest', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('minority interest', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term liabilities', 47)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = lease liabilities right of use assets , res_fuzz_match = [('long term liabilities', 47)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('plant property equipment', 31), ('property plant equipment', 31)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = advance payments and deposits , res_fuzz_match = [('plant property equipment', 39), ('property plant equipment', 39)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = right of use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('account receivables', 30), ('trade receivables', 30), ('government subsidies receivable', 30), ('trade and other receivables', 30), ('receivable', 17), ('billed', 0), ('unbilled', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('account receivables', 100), ('trade receivables', 100), ('government subsidies receivable', 100), ('receivable', 100), ('trade and other receivables', 100), ('billed', 25), ('unbilled', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other receivables', 100), ('government subsidies receivable', 60), ('account receivables', 40), ('trade receivables', 40), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 4620173.0, 'line_item_label': ['Receivables', 'Other'], 'note_numbers': ['7', '9'], 'line_item_value': [4086305.0, 533868.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cash assets , res_fuzz_match = [('account receivables', 30), ('trade receivables', 30), ('government subsidies receivable', 30), ('trade and other receivables', 30), ('receivable', 17), ('billed', 0), ('unbilled', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = receivables , res_fuzz_match = [('account receivables', 100), ('trade receivables', 100), ('government subsidies receivable', 100), ('receivable', 100), ('trade and other receivables', 100), ('billed', 25), ('unbilled', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = inventory , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other , res_fuzz_match = [('trade and other receivables', 100), ('government subsidies receivable', 60), ('account receivables', 40), ('trade receivables', 40), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4], 'score': 100, 'value': 7158730.0, 'line_item_label': ['Receivables', 'Other'], 'note_numbers': ['7', '9'], 'line_item_value': [6841934.0, 316796.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = none charges paid in advance , res_fuzz_match = [(' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 42), (' share of joint venture receivables', 41), (' other debtors', 33), ('current', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = none financial asset , res_fuzz_match = [(' net trade debtors', 44), (' share of joint venture receivables', 39), (' related party receivables', 34), ('trade receivables', 33), ('current', 29), (' other debtors', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors', 50), (' other debtors', 40), (' share of joint venture receivables', 40), (' related party receivables', 30), ('current', 29), ('trade receivables', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = none charges paid in advance , res_fuzz_match = [(' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 42), (' share of joint venture receivables', 41), (' other debtors', 33), ('current', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = none financial asset , res_fuzz_match = [(' net trade debtors', 44), (' share of joint venture receivables', 39), (' related party receivables', 34), ('trade receivables', 33), ('current', 29), (' other debtors', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' net trade debtors', 50), (' other debtors', 40), (' share of joint venture receivables', 40), (' related party receivables', 30), ('current', 29), ('trade receivables', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_rows = 12 months ended $ , res_fuzz_match = [(' share of joint venture receivables', 67), (' other debtors', 56), ('trade receivables', 33), (' related party receivables', 33), (' net trade debtors', 33), ('current', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: get_cdm_item_data_buckets
2023-07-26 15:29:49+0530 - sLogger - ERROR - error occured: cannot concatenate object of type '<class 'list'>'; only Series and DataFrame objs are valid
2023-07-26 15:29:49+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('revenue from contracts with customers', 63), ('Revenue from contract with customers', 63), ('revenue from operations', 54), ('from trading business', 45), (' Revenue', 39), ('transmission and distribution business', 34), (' Sales revenue', 33), ('net sales', 24), (' Sale of coal', 24), ('sale of products', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Sale of coal', 43), ('sale of products', 38), ('net sales', 36), ('from trading business', 34), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), (' Sales revenue', 24), (' Revenue', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('sale of products', 32), (' Revenue', 31), ('net sales', 27), ('revenue from operations', 26), (' Sales revenue', 22), ('from trading business', 18), ('transmission and distribution business', 17), ('revenue from contracts with customers', 15), ('Revenue from contract with customers', 15), (' Sale of coal', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('revenue from operations', 29), ('sale of products', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('from trading business', 22), ('net sales', 20), ('transmission and distribution business', 20), (' Sale of coal', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('from trading business', 49), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('revenue from operations', 43), ('transmission and distribution business', 37), ('sale of products', 32), (' Sales revenue', 32), ('net sales', 24), (' Sale of coal', 23), (' Revenue', 19)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('transmission and distribution business', 18), (' Revenue', 18), ('net sales', 15), (' Sale of coal', 14), (' Sales revenue', 12), ('revenue from operations', 10), ('from trading business', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('revenue from contracts with customers', 53), ('Revenue from contract with customers', 53), ('from trading business', 40), ('transmission and distribution business', 38), ('revenue from operations', 34), ('sale of products', 22), (' Sales revenue', 22), (' Revenue', 19), ('net sales', 18), (' Sale of coal', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 37), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27), (' Sale of coal', 26), ('sale of products', 24)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('from trading business', 41), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 34), ('net sales', 31), ('transmission and distribution business', 31), ('revenue from operations', 30), ('sale of products', 28), (' Revenue', 27), (' Sale of coal', 24)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('net sales', 33), (' Sales revenue', 27), ('revenue from operations', 20), (' Revenue', 20), (' Sale of coal', 15), ('sale of products', 12), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('revenue from operations', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 35), ('transmission and distribution business', 34), ('sale of products', 28), ('net sales', 21), (' Sale of coal', 20), (' Sales revenue', 19), (' Revenue', 16)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('net sales', 36), ('sale of products', 27), ('from trading business', 22), (' Sale of coal', 17), (' Sales revenue', 14), ('transmission and distribution business', 13), ('revenue from contracts with customers', 11), ('Revenue from contract with customers', 11), ('revenue from operations', 0), (' Revenue', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('revenue from contracts with customers', 63), ('Revenue from contract with customers', 63), ('revenue from operations', 54), ('from trading business', 45), (' Revenue', 39), ('transmission and distribution business', 34), (' Sales revenue', 33), ('net sales', 24), (' Sale of coal', 24), ('sale of products', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Sale of coal', 43), ('sale of products', 38), ('net sales', 36), ('from trading business', 34), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), ('revenue from operations', 27), ('transmission and distribution business', 24), (' Sales revenue', 24), (' Revenue', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('sale of products', 32), (' Revenue', 31), ('net sales', 27), ('revenue from operations', 26), (' Sales revenue', 22), ('from trading business', 18), ('transmission and distribution business', 17), ('revenue from contracts with customers', 15), ('Revenue from contract with customers', 15), (' Sale of coal', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('revenue from operations', 29), ('sale of products', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('from trading business', 22), ('net sales', 20), ('transmission and distribution business', 20), (' Sale of coal', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('from trading business', 49), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('revenue from operations', 43), ('transmission and distribution business', 37), ('sale of products', 32), (' Sales revenue', 32), ('net sales', 24), (' Sale of coal', 23), (' Revenue', 19)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), ('transmission and distribution business', 18), (' Revenue', 18), ('net sales', 15), (' Sale of coal', 14), (' Sales revenue', 12), ('revenue from operations', 10), ('from trading business', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('revenue from contracts with customers', 53), ('Revenue from contract with customers', 53), ('from trading business', 40), ('transmission and distribution business', 38), ('revenue from operations', 34), ('sale of products', 22), (' Sales revenue', 22), (' Revenue', 19), ('net sales', 18), (' Sale of coal', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 37), (' Sales revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27), (' Sale of coal', 26), ('sale of products', 24)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('from trading business', 41), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 34), ('net sales', 31), ('transmission and distribution business', 31), ('revenue from operations', 30), ('sale of products', 28), (' Revenue', 27), (' Sale of coal', 24)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('net sales', 33), (' Sales revenue', 27), ('revenue from operations', 20), (' Revenue', 20), (' Sale of coal', 15), ('sale of products', 12), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('revenue from operations', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 35), ('transmission and distribution business', 34), ('sale of products', 28), ('net sales', 21), (' Sale of coal', 20), (' Sales revenue', 19), (' Revenue', 16)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('net sales', 36), ('sale of products', 27), ('from trading business', 22), (' Sale of coal', 17), (' Sales revenue', 14), ('transmission and distribution business', 13), ('revenue from contracts with customers', 11), ('Revenue from contract with customers', 11), ('revenue from operations', 0), (' Revenue', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' cost of coal sold', 36), (' Personnel costs', 36), (' Cost of product sold', 33), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), ('total expenditure', 24), ('expenditure', 23), ('expense', 19), ('total expenses', 16)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Cost of product sold', 77), (' Cost of goods and services sold', 72), (' Cost of inventory sold', 67), (' cost of coal sold', 64), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), ('purchase of stock-in-trade', 36), ('total expenses', 31), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('expenditure', 47), ('expense', 46), ('total expenditure', 35), ('total expenses', 32), ('purchase of stock-in-trade', 31), (' Personnel costs', 29), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 23), ('cost of sales', 12), ('Cost of sales', 12), (' cost of coal sold', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), ('cost of sales', 19), ('Cost of sales', 19)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('total expenditure', 52), ('expenditure', 50), ('total expenses', 47), (' Cost of goods and services sold', 39), ('expense', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Cost of product sold', 33), (' Personnel costs', 30), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Cost of inventory sold', 33), (' cost of coal sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), (' Personnel costs', 21), (' Cost of product sold', 18), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 10), ('expense', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 27), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 23), ('total expenses', 22), ('expense', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('expenditure', 44), ('expense', 43), ('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), (' cost of coal sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of product sold', 26), (' Cost of goods and services sold', 26)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 37), (' Personnel costs', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' Cost of product sold', 29), (' Cost of goods and services sold', 29), (' cost of coal sold', 26)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('expenditure', 29), ('total expenses', 25), (' Personnel costs', 22), ('expense', 20), ('total expenditure', 20), ('purchase of stock-in-trade', 17), (' Cost of inventory sold', 17), ('cost of sales', 15), ('Cost of sales', 15), (' Cost of goods and services sold', 14), (' cost of coal sold', 11), (' Cost of product sold', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), (' Personnel costs', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 28), ('total expenses', 28), (' cost of coal sold', 27), ('cost of sales', 25), ('Cost of sales', 25), ('expenditure', 24), ('expense', 16)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 27), ('expense', 22), ('total expenditure', 21), ('purchase of stock-in-trade', 18), ('expenditure', 15), (' cost of coal sold', 12), (' Personnel costs', 12), (' Cost of product sold', 10), (' Cost of inventory sold', 9), (' Cost of goods and services sold', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' cost of coal sold', 36), (' Personnel costs', 36), (' Cost of product sold', 33), ('cost of sales', 29), ('Cost of sales', 29), ('purchase of stock-in-trade', 27), ('total expenditure', 24), ('expenditure', 23), ('expense', 19), ('total expenses', 16)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Cost of product sold', 77), (' Cost of goods and services sold', 72), (' Cost of inventory sold', 67), (' cost of coal sold', 64), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), ('purchase of stock-in-trade', 36), ('total expenses', 31), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('expenditure', 47), ('expense', 46), ('total expenditure', 35), ('total expenses', 32), ('purchase of stock-in-trade', 31), (' Personnel costs', 29), (' Cost of product sold', 25), (' Cost of goods and services sold', 25), (' Cost of inventory sold', 23), ('cost of sales', 12), ('Cost of sales', 12), (' cost of coal sold', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), ('cost of sales', 19), ('Cost of sales', 19)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('total expenditure', 52), ('expenditure', 50), ('total expenses', 47), (' Cost of goods and services sold', 39), ('expense', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), (' Cost of product sold', 33), (' Personnel costs', 30), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Cost of inventory sold', 33), (' cost of coal sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of goods and services sold', 27), ('purchase of stock-in-trade', 25), (' Personnel costs', 21), (' Cost of product sold', 18), ('expenditure', 13), ('total expenses', 12), ('total expenditure', 10), ('expense', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Cost of inventory sold', 41), (' Cost of goods and services sold', 40), (' Cost of product sold', 38), (' cost of coal sold', 36), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 27), ('cost of sales', 24), ('Cost of sales', 24), ('expenditure', 23), ('total expenses', 22), ('expense', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('expenditure', 44), ('expense', 43), ('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Personnel costs', 33), (' cost of coal sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' Cost of product sold', 26), (' Cost of goods and services sold', 26)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('total expenses', 56), ('total expenditure', 45), ('expenditure', 41), ('expense', 40), ('purchase of stock-in-trade', 37), (' Personnel costs', 37), (' Cost of inventory sold', 33), ('cost of sales', 30), ('Cost of sales', 30), (' Cost of product sold', 29), (' Cost of goods and services sold', 29), (' cost of coal sold', 26)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('expenditure', 29), ('total expenses', 25), (' Personnel costs', 22), ('expense', 20), ('total expenditure', 20), ('purchase of stock-in-trade', 17), (' Cost of inventory sold', 17), ('cost of sales', 15), ('Cost of sales', 15), (' Cost of goods and services sold', 14), (' cost of coal sold', 11), (' Cost of product sold', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Cost of product sold', 33), (' Cost of goods and services sold', 32), (' Cost of inventory sold', 32), (' Personnel costs', 31), ('total expenditure', 30), ('purchase of stock-in-trade', 28), ('total expenses', 28), (' cost of coal sold', 27), ('cost of sales', 25), ('Cost of sales', 25), ('expenditure', 24), ('expense', 16)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 27), ('expense', 22), ('total expenditure', 21), ('purchase of stock-in-trade', 18), ('expenditure', 15), (' cost of coal sold', 12), (' Personnel costs', 12), (' Cost of product sold', 10), (' Cost of inventory sold', 9), (' Cost of goods and services sold', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administrative expenses', 44), (' Administration expenses', 44), (' Amortisation expenses', 41), (' Advertising expenses', 40), ('Distribution expenses', 39), (' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), (' Sales and marketing', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Logistics and distribution', 31), (' Marketing expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' depreciation', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administrative and other expenses', 35), (' Selling & distribution expenses', 34), (' Selling Expenses', 32), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Management expenses', 23), (' Other expenses', 23), (' Depreciation expenses', 21), (' Advertising expenses', 21), (' Depreciation expenses', 21), (' Marketing expenses', 15), (' Occupancy ', 11), (' depreciation', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' depreciation', 100), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Occupancy expenses', 42), (' Marketing expenses', 40), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' Lease expenses', 33), (' Selling Expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 27), (' Administrative and other expenses', 24), (' Logistics and distribution', 22), (' Occupancy ', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 25), (' Sales and marketing', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other expenses', 63), (' Other expenses', 63), (' Other expenses', 63), (' Marketing expenses', 56), (' Management expenses', 53), (' Administrative and other expenses', 46), (' Lease expenses', 43), (' Selling Expenses', 43), (' Occupancy expenses', 42), (' Logistics and distribution', 39), (' Selling & distribution expenses', 34), (' Sales and marketing', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' depreciation', 24), (' Occupancy ', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' depreciation', 33), (' Amortisation expenses', 32), (' Advertising expenses', 30), (' Logistics and distribution', 24), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Selling & distribution expenses', 15), (' Administrative and other expenses', 13), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Selling Expenses', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Logistics and distribution', 40), (' Administrative and other expenses', 35), (' Administrative expenses', 34), (' Administration expenses', 34), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Occupancy ', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' depreciation', 19), (' Management expenses', 16), (' Lease expenses', 11), (' Selling Expenses', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 51), (' Depreciation expenses', 50), (' Depreciation expenses', 50), (' Amortisation expenses', 50), (' Advertising expenses', 49), (' Lease expenses', 48), (' Occupancy expenses', 47), (' Administrative and other expenses', 46), ('Distribution expenses', 42), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Administration expenses', 42), (' Selling Expenses', 42), (' depreciation', 28), (' Sales and marketing', 27), (' Logistics and distribution', 24), (' Occupancy ', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Administrative and other expenses', 48), (' Depreciation expenses', 47), (' Depreciation expenses', 47), (' Amortisation expenses', 47), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Administrative expenses', 45), (' Administration expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' depreciation', 36), (' Marketing expenses', 35), (' Lease expenses', 27), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 17), (' Administrative and other expenses', 13), (' Selling Expenses', 13), (' Occupancy expenses', 12), ('Distribution expenses', 10), (' Selling & distribution expenses', 8), (' Occupancy ', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administrative and other expenses', 42), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 31), (' Selling & distribution expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), (' Logistics and distribution', 31), ('Distribution expenses', 30), (' Advertising expenses', 30), (' Sales and marketing', 30), (' Lease expenses', 29), (' Marketing expenses', 27), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Occupancy ', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Amortisation expenses', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), ('Distribution expenses', 21), (' Administrative expenses', 21), (' Administrative and other expenses', 21), (' Administration expenses', 21), (' Selling & distribution expenses', 17), (' Lease expenses', 14), (' Selling Expenses', 14), ('other expenses', 13), (' Occupancy expenses', 13), (' Other expenses', 13), (' Management expenses', 13), (' Other expenses', 13), (' Marketing expenses', 12), (' Depreciation expenses', 12), (' Depreciation expenses', 12), (' Logistics and distribution', 9), (' depreciation', 0), (' Occupancy ', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 107567.0, 'line_item_label': ['DEPRECIATION', 'OCCUPANCY EXPENSES'], 'note_numbers': [nan, nan], 'line_item_value': [4281.0, 103286.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administrative expenses', 44), (' Administration expenses', 44), (' Amortisation expenses', 41), (' Advertising expenses', 40), ('Distribution expenses', 39), (' Selling & distribution expenses', 35), (' Administrative and other expenses', 35), (' Sales and marketing', 35), (' Depreciation expenses', 31), (' Depreciation expenses', 31), (' Logistics and distribution', 31), (' Marketing expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Management expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' Lease expenses', 17), (' Selling Expenses', 17), (' depreciation', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administrative and other expenses', 35), (' Selling & distribution expenses', 34), (' Selling Expenses', 32), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Sales and marketing', 28), ('Distribution expenses', 27), (' Administrative expenses', 27), (' Administration expenses', 27), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Management expenses', 23), (' Other expenses', 23), (' Depreciation expenses', 21), (' Advertising expenses', 21), (' Depreciation expenses', 21), (' Marketing expenses', 15), (' Occupancy ', 11), (' depreciation', 10)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' depreciation', 100), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Occupancy expenses', 42), (' Marketing expenses', 40), (' Advertising expenses', 36), ('Distribution expenses', 35), (' Administrative expenses', 35), (' Administration expenses', 35), (' Lease expenses', 33), (' Selling Expenses', 33), ('other expenses', 32), (' Other expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Selling & distribution expenses', 29), (' Amortisation expenses', 29), (' Sales and marketing', 27), (' Administrative and other expenses', 24), (' Logistics and distribution', 22), (' Occupancy ', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 25), (' Sales and marketing', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other expenses', 63), (' Other expenses', 63), (' Other expenses', 63), (' Marketing expenses', 56), (' Management expenses', 53), (' Administrative and other expenses', 46), (' Lease expenses', 43), (' Selling Expenses', 43), (' Occupancy expenses', 42), (' Logistics and distribution', 39), (' Selling & distribution expenses', 34), (' Sales and marketing', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' depreciation', 24), (' Occupancy ', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' depreciation', 33), (' Amortisation expenses', 32), (' Advertising expenses', 30), (' Logistics and distribution', 24), (' Marketing expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' Occupancy ', 20), (' Sales and marketing', 20), ('Distribution expenses', 19), (' Administrative expenses', 19), (' Administration expenses', 19), (' Selling & distribution expenses', 15), (' Administrative and other expenses', 13), ('other expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Lease expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Selling Expenses', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Logistics and distribution', 40), (' Administrative and other expenses', 35), (' Administrative expenses', 34), (' Administration expenses', 34), (' Amortisation expenses', 31), (' Advertising expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Occupancy ', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Depreciation expenses', 21), (' Depreciation expenses', 21), (' depreciation', 19), (' Management expenses', 16), (' Lease expenses', 11), (' Selling Expenses', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('other expenses', 53), (' Other expenses', 53), (' Management expenses', 53), (' Other expenses', 53), (' Marketing expenses', 51), (' Depreciation expenses', 50), (' Depreciation expenses', 50), (' Amortisation expenses', 50), (' Advertising expenses', 49), (' Lease expenses', 48), (' Occupancy expenses', 47), (' Administrative and other expenses', 46), ('Distribution expenses', 42), (' Administrative expenses', 42), (' Selling & distribution expenses', 42), (' Administration expenses', 42), (' Selling Expenses', 42), (' depreciation', 28), (' Sales and marketing', 27), (' Logistics and distribution', 24), (' Occupancy ', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Management expenses', 50), (' Other expenses', 50), (' Marketing expenses', 49), (' Administrative and other expenses', 48), (' Depreciation expenses', 47), (' Depreciation expenses', 47), (' Amortisation expenses', 47), (' Lease expenses', 46), (' Advertising expenses', 46), ('Distribution expenses', 45), (' Administrative expenses', 45), (' Administration expenses', 45), (' Occupancy expenses', 44), (' Selling & distribution expenses', 44), (' Selling Expenses', 40), (' Sales and marketing', 31), (' Logistics and distribution', 27), (' depreciation', 26), (' Occupancy ', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' depreciation', 36), (' Marketing expenses', 35), (' Lease expenses', 27), ('other expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Amortisation expenses', 22), (' Advertising expenses', 21), (' Sales and marketing', 21), (' Administrative expenses', 20), (' Administration expenses', 20), (' Logistics and distribution', 17), (' Administrative and other expenses', 13), (' Selling Expenses', 13), (' Occupancy expenses', 12), ('Distribution expenses', 10), (' Selling & distribution expenses', 8), (' Occupancy ', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administrative and other expenses', 42), ('other expenses', 37), (' Other expenses', 37), (' Other expenses', 37), (' Administrative expenses', 34), (' Administration expenses', 34), (' Depreciation expenses', 31), (' Selling & distribution expenses', 31), (' Depreciation expenses', 31), (' Amortisation expenses', 31), (' Logistics and distribution', 31), ('Distribution expenses', 30), (' Advertising expenses', 30), (' Sales and marketing', 30), (' Lease expenses', 29), (' Marketing expenses', 27), (' Selling Expenses', 24), (' Occupancy expenses', 23), (' Management expenses', 23), (' depreciation', 21), (' Occupancy ', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Amortisation expenses', 24), (' Advertising expenses', 22), (' Sales and marketing', 22), ('Distribution expenses', 21), (' Administrative expenses', 21), (' Administrative and other expenses', 21), (' Administration expenses', 21), (' Selling & distribution expenses', 17), (' Lease expenses', 14), (' Selling Expenses', 14), ('other expenses', 13), (' Occupancy expenses', 13), (' Other expenses', 13), (' Management expenses', 13), (' Other expenses', 13), (' Marketing expenses', 12), (' Depreciation expenses', 12), (' Depreciation expenses', 12), (' Logistics and distribution', 9), (' depreciation', 0), (' Occupancy ', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 116878.0, 'line_item_label': ['DEPRECIATION', 'OCCUPANCY EXPENSES'], 'note_numbers': [nan, nan], 'line_item_value': [5786.0, 111092.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administration expenses', 44), (' Rental expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administration expenses', 27), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Occupancy expenses', 42), (' Rental expenses', 40), ('Rent', 36), (' Administration expenses', 35), (' Occupancy', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' Rental expenses', 51), (' Occupancy expenses', 42), (' Administration expenses', 29), ('Rent', 20), (' Occupancy', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('Rent', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12), (' Rental expenses', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Administration expenses', 34), (' Occupancy', 27), (' Occupancy expenses', 22), (' Rental expenses', 21), ('Rent', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Rental expenses', 57), (' Occupancy expenses', 47), (' Administration expenses', 42), ('Rent', 31), (' Occupancy', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 45), (' Occupancy expenses', 44), ('Rent', 29), (' Occupancy', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('Rent', 25), (' Rental expenses', 24), (' Administration expenses', 20), (' Occupancy expenses', 12), (' Occupancy', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 27), (' Occupancy expenses', 23), ('Rent', 17), (' Occupancy', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('Rent', 29), (' Rental expenses', 25), (' Administration expenses', 21), (' Occupancy expenses', 13), (' Occupancy', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 103286.0, 'line_item_label': ['OCCUPANCY EXPENSES'], 'note_numbers': [nan], 'line_item_value': [103286.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Administration expenses', 44), (' Rental expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Administration expenses', 27), (' Occupancy expenses', 23), (' Rental expenses', 22), ('Rent', 11), (' Occupancy', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Occupancy expenses', 42), (' Rental expenses', 40), ('Rent', 36), (' Administration expenses', 35), (' Occupancy', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' Rental expenses', 51), (' Occupancy expenses', 42), (' Administration expenses', 29), ('Rent', 20), (' Occupancy', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('Rent', 22), (' Occupancy', 20), (' Administration expenses', 19), (' Occupancy expenses', 12), (' Rental expenses', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Administration expenses', 34), (' Occupancy', 27), (' Occupancy expenses', 22), (' Rental expenses', 21), ('Rent', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Rental expenses', 57), (' Occupancy expenses', 47), (' Administration expenses', 42), ('Rent', 31), (' Occupancy', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Rental expenses', 54), (' Administration expenses', 45), (' Occupancy expenses', 44), ('Rent', 29), (' Occupancy', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('Rent', 25), (' Rental expenses', 24), (' Administration expenses', 20), (' Occupancy expenses', 12), (' Occupancy', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 27), (' Occupancy expenses', 23), ('Rent', 17), (' Occupancy', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('Rent', 29), (' Rental expenses', 25), (' Administration expenses', 21), (' Occupancy expenses', 13), (' Occupancy', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 111092.0, 'line_item_label': ['OCCUPANCY EXPENSES'], 'note_numbers': [nan], 'line_item_value': [111092.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('Other revenue', 54), (' Other income', 33), ('other operating', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Other income', 32), ('other operating', 25), ('Other revenue', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other operating', 50), (' Other income', 49), ('Other revenue', 26)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Other income', 25), ('Other revenue', 24), ('other operating', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Other income', 39), ('other operating', 29), ('Other revenue', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 35)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other operating', 29), (' Other income', 27), ('Other revenue', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Other income', 52), ('other operating', 39), ('Other revenue', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('other operating', 15), (' Other income', 14), ('Other revenue', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('Other revenue', 54), (' Other income', 33), ('other operating', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Other income', 32), ('other operating', 25), ('Other revenue', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other operating', 50), (' Other income', 49), ('Other revenue', 26)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' Other income', 25), ('Other revenue', 24), ('other operating', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Other income', 39), ('other operating', 29), ('Other revenue', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' Other income', 42), ('other operating', 38), ('Other revenue', 35)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' Other income', 40), ('other operating', 29), ('Other revenue', 28)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other operating', 29), (' Other income', 27), ('Other revenue', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' Other income', 52), ('other operating', 39), ('Other revenue', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('other operating', 15), (' Other income', 14), ('Other revenue', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Interest revenue', 55), (' Finance income and costs', 43), (' Finance income and finance costs', 42), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), ('other income', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Net finance costs', 41), (' Finance income and costs', 40), (' Finance income and finance costs', 33), ('other income', 32), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Interest revenue', 27), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Finance income and costs', 21), (' Net finance costs', 18), (' Finance income and finance costs', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other income', 49), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance income', 35), ('Finance income', 35), (' Finance income and costs', 31), (' Net finance costs', 30), ('other income', 25), (' Finance income and finance costs', 24), (' Interest revenue', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Finance income and costs', 43), (' Finance income and finance costs', 42), ('other income', 39), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), (' Interest revenue', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('finance income', 47), ('Finance income', 47), (' Net finance costs', 43), ('other income', 42), (' Finance income and costs', 42), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('finance income', 44), ('Finance income', 44), (' Finance income and costs', 44), (' Net finance costs', 41), ('other income', 40), (' Finance income and finance costs', 38), (' Interest revenue', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other income', 27), (' Interest revenue', 21), ('finance income', 12), ('Finance income', 12), (' Net finance costs', 11), (' Finance income and costs', 8), (' Finance income and finance costs', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('other income', 52), (' Finance income and costs', 38), (' Finance income and finance costs', 37), (' Net finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Net finance costs', 22), (' Finance income and costs', 17), ('other income', 14), ('finance income', 13), ('Finance income', 13), (' Finance income and finance costs', 13), (' Interest revenue', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 85, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' Interest revenue', 55), (' Finance income and costs', 43), (' Finance income and finance costs', 42), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), ('other income', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' Net finance costs', 41), (' Finance income and costs', 40), (' Finance income and finance costs', 33), ('other income', 32), ('finance income', 23), ('Finance income', 23), (' Interest revenue', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' Interest revenue', 27), ('other income', 22), ('finance income', 21), ('Finance income', 21), (' Finance income and costs', 21), (' Net finance costs', 18), (' Finance income and finance costs', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('other income', 49), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance income', 35), ('Finance income', 35), (' Finance income and costs', 31), (' Net finance costs', 30), ('other income', 25), (' Finance income and finance costs', 24), (' Interest revenue', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' Finance income and costs', 43), (' Finance income and finance costs', 42), ('other income', 39), ('finance income', 38), ('Finance income', 38), (' Net finance costs', 35), (' Interest revenue', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('finance income', 47), ('Finance income', 47), (' Net finance costs', 43), ('other income', 42), (' Finance income and costs', 42), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('finance income', 44), ('Finance income', 44), (' Finance income and costs', 44), (' Net finance costs', 41), ('other income', 40), (' Finance income and finance costs', 38), (' Interest revenue', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('other income', 27), (' Interest revenue', 21), ('finance income', 12), ('Finance income', 12), (' Net finance costs', 11), (' Finance income and costs', 8), (' Finance income and finance costs', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('other income', 52), (' Finance income and costs', 38), (' Finance income and finance costs', 37), (' Net finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [(' Net finance costs', 22), (' Finance income and costs', 17), ('other income', 14), ('finance income', 13), ('Finance income', 13), (' Finance income and finance costs', 13), (' Interest revenue', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 85, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 15195.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [15195.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' net finance costs ', 41), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [(' finance expenses', 40), ('finance cost', 22), ('finance costs', 22), (' net finance costs ', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('finance cost', 38), ('finance costs', 38), (' net finance costs ', 30), (' finance expenses', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' finance expenses', 57), (' net finance costs ', 43), ('finance cost', 36), ('finance costs', 36)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' finance expenses', 54), (' net finance costs ', 41), ('finance cost', 34), ('finance costs', 34)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [(' finance expenses', 24), ('finance cost', 13), ('finance costs', 13), (' net finance costs ', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 29), ('finance costs', 29), (' finance expenses', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('finance cost', 29), ('finance costs', 29), (' net finance costs ', 22), (' finance expenses', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 27034.0, 'line_item_label': ['FINANCE COSTS'], 'note_numbers': [nan], 'line_item_value': [27034.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 39), ('amount transferred to retained earnings', 38), ('current tax', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), ('provision for taxation previous year', 30), ('prior year ', 29), (' income tax expense', 29), (' income tax', 29), (' tax (expense)/benefit', 28), ('earlier year', 27), ('deferred tax', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' income tax expense', 27), (' income tax', 26), (' income tax benefit', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17), ('earlier year', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('deferred tax', 38), ('prior year ', 35), (' income tax expense', 35), ('earlier year', 32), (' income tax benefit/(expense)', 26), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('current tax', 22), ('provision for taxation previous year', 22), ('minimum alternate tax credit entitlement', 21), (' income tax', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' income tax expense', 52), (' income tax benefit/(expense)', 44), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 40), ('prior year ', 39), ('earlier year', 37), (' income tax benefit', 37), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax', 29), ('current tax', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' income tax', 29), ('current tax', 25), ('earlier year', 24), ('minimum alternate tax credit entitlement', 22), ('amount transferred to retained earnings', 19), (' income tax expense', 19), (' income tax benefit', 18), ('deferred tax', 14), (' income tax benefit/(expense)', 14), ('prior year ', 13), ('provision for taxation previous year', 12), (' tax (expense)/benefit', 9)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 38), (' income tax benefit', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' income tax', 35), (' income tax expense', 34), ('prior year ', 29), ('current tax', 28), ('earlier year', 27), ('deferred tax', 24), (' tax (expense)/benefit', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 87), (' income tax expense', 84), (' tax (expense)/benefit', 70), (' income tax benefit', 67), (' income tax', 58), ('minimum alternate tax credit entitlement', 52), ('provision for taxation previous year', 47), ('deferred tax', 45), ('current tax', 42), ('amount transferred to retained earnings', 41), ('prior year ', 31), ('earlier year', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' income tax benefit/(expense)', 83), (' income tax expense', 80), (' tax (expense)/benefit', 67), ('current tax', 63), (' income tax benefit', 63), (' income tax', 55), ('minimum alternate tax credit entitlement', 54), ('amount transferred to retained earnings', 47), ('provision for taxation previous year', 38), ('deferred tax', 36), ('prior year ', 29), ('earlier year', 28)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior year ', 57), ('earlier year', 50), ('deferred tax', 31), ('current tax', 27), ('provision for taxation previous year', 24), (' income tax expense', 20), ('amount transferred to retained earnings', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 18), (' income tax', 15), (' income tax benefit/(expense)', 14), ('minimum alternate tax credit entitlement', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('provision for taxation previous year', 60), (' income tax benefit', 46), ('amount transferred to retained earnings', 45), ('prior year ', 44), (' income tax benefit/(expense)', 44), (' income tax expense', 43), ('earlier year', 42), ('minimum alternate tax credit entitlement', 41), (' income tax', 40), (' tax (expense)/benefit', 37), ('current tax', 33), ('deferred tax', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('deferred tax', 50), (' income tax', 50), ('current tax', 43), (' income tax expense', 32), (' income tax benefit', 30), (' tax (expense)/benefit', 29), (' income tax benefit/(expense)', 22), ('provision for taxation previous year', 19), ('minimum alternate tax credit entitlement', 17), ('prior year ', 15), ('amount transferred to retained earnings', 13), ('earlier year', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 83, 'value': 491215.0, 'line_item_label': ['BEFORE INCOME TAX EXPENSE', 'INCOME TAX EXPENSES - CURRENT'], 'note_numbers': [nan, nan], 'line_item_value': [491215.0, 0.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 39), ('amount transferred to retained earnings', 38), ('current tax', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), ('provision for taxation previous year', 30), ('prior year ', 29), (' income tax expense', 29), (' income tax', 29), (' tax (expense)/benefit', 28), ('earlier year', 27), ('deferred tax', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [(' income tax expense', 27), (' income tax', 26), (' income tax benefit', 26), ('current tax', 24), ('amount transferred to retained earnings', 24), ('provision for taxation previous year', 23), ('minimum alternate tax credit entitlement', 22), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17), ('earlier year', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('deferred tax', 38), ('prior year ', 35), (' income tax expense', 35), ('earlier year', 32), (' income tax benefit/(expense)', 26), (' income tax benefit', 25), ('amount transferred to retained earnings', 24), (' tax (expense)/benefit', 24), ('current tax', 22), ('provision for taxation previous year', 22), ('minimum alternate tax credit entitlement', 21), (' income tax', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [(' income tax expense', 52), (' income tax benefit/(expense)', 44), ('amount transferred to retained earnings', 42), ('provision for taxation previous year', 40), ('prior year ', 39), ('earlier year', 37), (' income tax benefit', 37), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax', 29), ('current tax', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [(' income tax', 29), ('current tax', 25), ('earlier year', 24), ('minimum alternate tax credit entitlement', 22), ('amount transferred to retained earnings', 19), (' income tax expense', 19), (' income tax benefit', 18), ('deferred tax', 14), (' income tax benefit/(expense)', 14), ('prior year ', 13), ('provision for taxation previous year', 12), (' tax (expense)/benefit', 9)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 38), (' income tax benefit', 38), ('provision for taxation previous year', 37), (' income tax benefit/(expense)', 37), (' income tax', 35), (' income tax expense', 34), ('prior year ', 29), ('current tax', 28), ('earlier year', 27), ('deferred tax', 24), (' tax (expense)/benefit', 23)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 87), (' income tax expense', 84), (' tax (expense)/benefit', 70), (' income tax benefit', 67), (' income tax', 58), ('minimum alternate tax credit entitlement', 52), ('provision for taxation previous year', 47), ('deferred tax', 45), ('current tax', 42), ('amount transferred to retained earnings', 41), ('prior year ', 31), ('earlier year', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [(' income tax benefit/(expense)', 83), (' income tax expense', 80), (' tax (expense)/benefit', 67), ('current tax', 63), (' income tax benefit', 63), (' income tax', 55), ('minimum alternate tax credit entitlement', 54), ('amount transferred to retained earnings', 47), ('provision for taxation previous year', 38), ('deferred tax', 36), ('prior year ', 29), ('earlier year', 28)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior year ', 57), ('earlier year', 50), ('deferred tax', 31), ('current tax', 27), ('provision for taxation previous year', 24), (' income tax expense', 20), ('amount transferred to retained earnings', 19), (' income tax benefit', 19), (' tax (expense)/benefit', 18), (' income tax', 15), (' income tax benefit/(expense)', 14), ('minimum alternate tax credit entitlement', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('provision for taxation previous year', 60), (' income tax benefit', 46), ('amount transferred to retained earnings', 45), ('prior year ', 44), (' income tax benefit/(expense)', 44), (' income tax expense', 43), ('earlier year', 42), ('minimum alternate tax credit entitlement', 41), (' income tax', 40), (' tax (expense)/benefit', 37), ('current tax', 33), ('deferred tax', 30)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('deferred tax', 50), (' income tax', 50), ('current tax', 43), (' income tax expense', 32), (' income tax benefit', 30), (' tax (expense)/benefit', 29), (' income tax benefit/(expense)', 22), ('provision for taxation previous year', 19), ('minimum alternate tax credit entitlement', 17), ('prior year ', 15), ('amount transferred to retained earnings', 13), ('earlier year', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 83, 'value': 643396.0, 'line_item_label': ['BEFORE INCOME TAX EXPENSE', 'INCOME TAX EXPENSES - CURRENT'], 'note_numbers': [nan, nan], 'line_item_value': [643396.0, 0.0]}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('share of', 33), ('share in', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('prior period', 42), ('exceptional', 31)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('prior period', 47), ('exceptional', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('exceptional', 36), ('prior period', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('prior period', 35), ('exceptional', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('prior period', 28), ('exceptional', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior period', 25), ('exceptional', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('prior period', 42), ('exceptional', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('exceptional', 22), ('prior period', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('prior period', 31), ('exceptional', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('prior period', 42), ('exceptional', 31)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('prior period', 47), ('exceptional', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('exceptional', 36), ('prior period', 12)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('prior period', 32), ('exceptional', 19)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('prior period', 35), ('exceptional', 29)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('prior period', 28), ('exceptional', 27)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('prior period', 25), ('exceptional', 20)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('prior period', 42), ('exceptional', 22)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('exceptional', 22), ('prior period', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-07-26 15:29:49+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-07-26 15:29:49+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-07-26 15:29:49+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-07-26 15:29:49+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = revenue from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = cost of goods sold , res_fuzz_match = [('NULL', 11)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = depreciation , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = other expenses from ordinary , res_fuzz_match = [('NULL', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = activities , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit from continuing activities , res_fuzz_match = [('NULL', 14)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = before income tax expense , res_fuzz_match = [('NULL', 8)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = income tax expenses - current , res_fuzz_match = [('NULL', 7)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = year , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = profit for the year after income , res_fuzz_match = [('NULL', 6)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - txt_particular = tax , res_fuzz_match = [('NULL', 0)]
2023-07-26 15:29:49+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

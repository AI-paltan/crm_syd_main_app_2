2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-09 17:06:06+0530 - sLogger - DEBUG - process_main_pages started
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:06:06+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:06:06+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:06:06+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-09 17:06:06+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-08-09 17:06:06+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-09 17:06:06+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: get_standardize_main_pages CBS
2023-08-09 17:06:06+0530 - sLogger - ERROR - error occured: 'year_list'
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:06:06+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-09 17:06:06+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-08-09 17:06:06+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-09 17:06:06+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CBS
2023-08-09 17:06:06+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-08-09 17:06:06+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CBS notes_number_processing
2023-08-09 17:06:06+0530 - sLogger - ERROR - error occured: local variable 'cbs_header' referenced before assignment
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-08-09 17:06:06+0530 - sLogger - ERROR - error occured: local variable 'cpl_header' referenced before assignment
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:06:06+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:06:06+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:06:06+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-09 17:06:06+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Operating Activities | operating cash flow before working capital changes
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash generated from operating activities | adjustments for increase decrease in operating assets
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax received/(paid) | adiustments for movements in working capital
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated/(utilised) by operating activities | adjustments for increase decrease in operating assets
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Investing Activitles | operating cash flow before working capital changes
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from cancellation of shares | operating profit before working capital changes
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loans to related parties | operating profit before working capital changes
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated/(utlised) by investing activities | adjustments for increase decrease in operating assets
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Financing Actlvities | operating cash flow before working capital changes
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest pald | movements in working capital
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loans and borrowings | operating profit before changes in assets and liabilities
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated by financing activities | operating cash flow before working capital changes
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase/(decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash held in foreign currencies Cash and cash equivalents at the end of year | adjustments for increase decrease in operating assets
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash held in foreign currencies Cash and cash equivalents at the end of year | adjustments for increase decrease in operating assets
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Reconciliation of cash and cash equivalents at year end | changes in operating assets and liabilities
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash at bank and in hand 9 | changes in operating assets and liabilities
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash equivalent - group pooling scheme 9 | changes in operating assets and liabilities
2023-08-09 17:06:06+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash overdraft group pooling scheme 9 | operating profit before working capital changes
2023-08-09 17:06:07+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-09 17:07:08+0530 - sLogger - DEBUG - process_main_pages started
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:07:08+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:07:08+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:07:08+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-09 17:07:08+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:07:08+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-09 17:07:08+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: get_standardize_main_pages CBS
2023-08-09 17:07:08+0530 - sLogger - ERROR - error occured: 'year_list'
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:07:08+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-09 17:07:08+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:07:08+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-09 17:07:08+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CBS
2023-08-09 17:07:08+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-08-09 17:07:08+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CBS notes_number_processing
2023-08-09 17:07:08+0530 - sLogger - ERROR - error occured: local variable 'cbs_header' referenced before assignment
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-08-09 17:07:08+0530 - sLogger - ERROR - error occured: local variable 'cpl_header' referenced before assignment
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:07:08+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:07:08+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:07:08+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-09 17:07:08+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Operating Activities | operating cash flow before working capital changes
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash generated from operating activities | adjustments for increase decrease in operating assets
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax received/(paid) | adiustments for movements in working capital
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated/(utilised) by operating activities | adjustments for increase decrease in operating assets
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Investing Activitles | operating cash flow before working capital changes
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from cancellation of shares | operating profit before working capital changes
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loans to related parties | operating profit before working capital changes
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated/(utlised) by investing activities | adjustments for increase decrease in operating assets
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Financing Actlvities | operating cash flow before working capital changes
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest pald | movements in working capital
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loans and borrowings | operating profit before changes in assets and liabilities
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated by financing activities | operating cash flow before working capital changes
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase/(decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash held in foreign currencies Cash and cash equivalents at the end of year | adjustments for increase decrease in operating assets
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash held in foreign currencies Cash and cash equivalents at the end of year | adjustments for increase decrease in operating assets
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Reconciliation of cash and cash equivalents at year end | changes in operating assets and liabilities
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash at bank and in hand 9 | changes in operating assets and liabilities
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash equivalent - group pooling scheme 9 | changes in operating assets and liabilities
2023-08-09 17:07:08+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash overdraft group pooling scheme 9 | operating profit before working capital changes
2023-08-09 17:07:09+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-09 17:08:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-09 17:08:14+0530 - sLogger - DEBUG - process_main_pages started
2023-08-09 17:08:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:08:14+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:08:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:08:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:08:14+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:08:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:08:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:08:14+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:08:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:08:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:08:14+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:08:14+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:08:14+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-08-09 17:08:14+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-09 17:08:14+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-08-09 17:08:14+0530 - sLogger - ERROR - error occured: local variable 'cpl_header' referenced before assignment
2023-08-09 17:08:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:08:14+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Assets | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current assets | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentassets | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD current liabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD currentliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent assets | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrent liabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current assets | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD non current liabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentassets | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD noncurrentliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity and liabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equity | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Assets | MATCH WORD equityandliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Prepayments | [('currentassets', 33), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equityandliabilities', 24), ('noncurrentliabilities', 22), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentassets | score 50
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentliabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equityandliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('currentassets', 43), ('noncurrentassets', 38), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('equityliabilities', 21), ('currentliabilities', 20), ('equityandliabilities', 18), ('noncurrentliabilities', 17), ('liabilities', 12)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentassets | score 56
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD currentliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrentliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equityandliabilities | score 25
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Liabilities | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current assets | score 24
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentassets | score 25
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD current liabilities | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD currentliabilities | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent assets | score 24
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrent liabilities | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current assets | score 24
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD non current liabilities | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentassets | score 22
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity and liabilities | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Liabilities | MATCH WORD equityandliabilities | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Loans and borrowings | [('equity and liabilities', 44), ('noncurrentliabilities', 37), ('current assets', 36), ('noncurrent assets', 36), ('current liabilities', 34), ('noncurrent liabilities', 34), ('noncurrentassets', 33), ('equityandliabilities', 31), ('liabilities', 29), ('currentliabilities', 25), ('currentassets', 22), ('equity liabilities', 21), ('assets', 10), ('equityliabilities', 9), ('equity', 0)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD current assets | score 28
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD currentassets | score 28
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD current liabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD currentliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrent assets | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentassets | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrent liabilities | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD non current assets | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD non current liabilities | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentassets | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equity and liabilities | score 41
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equity | score 15
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Loans and borrowings | MATCH WORD equityandliabilities | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentassets | score 56
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD currentliabilities | score 88
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 55
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentassets | score 51
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrentliabilities | score 82
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equityandliabilities | score 65
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentassets | score 56
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD currentliabilities | score 84
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentassets | score 54
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equityandliabilities | score 62
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('equityliabilities', 35), ('current liabilities', 34), ('currentliabilities', 33), ('equityandliabilities', 31), ('currentassets', 30), ('noncurrentliabilities', 30), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('assets', 20)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentassets | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD currentliabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equityandliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Share capital | [('current assets', 42), ('assets', 38), ('equity and liabilities', 36), ('currentassets', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('current liabilities', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('equityandliabilities', 27), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('equityliabilities', 21)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current assets | score 37
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD current liabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD currentliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent assets | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrent liabilities | score 41
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current assets | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD non current liabilities | score 41
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentassets | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD noncurrentliabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity and liabilities | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equity | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Share capital | MATCH WORD equityandliabilities | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-09 17:08:14+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-09 17:08:14+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-09 17:08:14+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-09 17:08:14+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash receipts from customers | adiustments for movements in working capital
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash paid to suppliers and employees | changes in operating assets and liabilities
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash used in from operations | operating cash flow before working capital changes
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Borrowing costs paid | operating profit before working capital changes
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid on lease liabilities | adjustments for increase decrease in operating liabilities
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax refund received/(paid) | operating profit before working capital changes
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in operating activities | operating cash flow before working capital changes
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of property, plant and equipment | changes in operating assets and liabilities
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Acquisition of intangible assets | adjustments for increase decrease in operating assets
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividends paid | changes in assets liabilities
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from new borrowings | operating profit before working capital changes
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of borrowings | operating profit before working capital changes
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of lease liabilities | changes in operating assets and liabilities
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from financing activities | operating cash flow before working capital changes
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at beginning of year | changes in operating assets and liabilities
2023-08-09 17:08:14+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at end of year | changes in operating assets and liabilities
2023-08-09 17:08:15+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-09 17:08:15+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-09 17:08:15+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-09 17:08:24+0530 - sLogger - DEBUG - process_main_pages started
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:08:24+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:08:24+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:08:24+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-09 17:08:24+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:08:24+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-09 17:08:24+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: get_standardize_main_pages CBS
2023-08-09 17:08:24+0530 - sLogger - ERROR - error occured: 'year_list'
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:08:24+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-09 17:08:24+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:08:24+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-09 17:08:24+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CBS
2023-08-09 17:08:24+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-08-09 17:08:24+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CBS notes_number_processing
2023-08-09 17:08:24+0530 - sLogger - ERROR - error occured: local variable 'cbs_header' referenced before assignment
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-08-09 17:08:24+0530 - sLogger - ERROR - error occured: local variable 'cpl_header' referenced before assignment
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:08:24+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:08:24+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:08:24+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-09 17:08:24+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Operating Activities | operating cash flow before working capital changes
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash generated from operating activities | adjustments for increase decrease in operating assets
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax received/(paid) | adiustments for movements in working capital
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated/(utilised) by operating activities | adjustments for increase decrease in operating assets
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Investing Activitles | operating cash flow before working capital changes
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from cancellation of shares | operating profit before working capital changes
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loans to related parties | operating profit before working capital changes
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated/(utlised) by investing activities | adjustments for increase decrease in operating assets
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Financing Actlvities | operating cash flow before working capital changes
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest pald | movements in working capital
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loans and borrowings | operating profit before changes in assets and liabilities
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated by financing activities | operating cash flow before working capital changes
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase/(decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash held in foreign currencies Cash and cash equivalents at the end of year | adjustments for increase decrease in operating assets
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash held in foreign currencies Cash and cash equivalents at the end of year | adjustments for increase decrease in operating assets
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Reconciliation of cash and cash equivalents at year end | changes in operating assets and liabilities
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash at bank and in hand 9 | changes in operating assets and liabilities
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash equivalent - group pooling scheme 9 | changes in operating assets and liabilities
2023-08-09 17:08:24+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash overdraft group pooling scheme 9 | operating profit before working capital changes
2023-08-09 17:08:24+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-09 17:19:32+0530 - sLogger - DEBUG - process_main_pages started
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:19:32+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:19:32+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:19:32+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-09 17:19:32+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-08-09 17:19:32+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-09 17:19:32+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: get_standardize_main_pages CBS
2023-08-09 17:19:32+0530 - sLogger - ERROR - error occured: 'year_list'
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:19:32+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: main_page_processing_service , File:utils.py,  function: get_data_chunk_span_with_notes
2023-08-09 17:19:32+0530 - sLogger - ERROR - error occured: zero-size array to reduction operation maximum which has no identity
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: ideal_format_processing
2023-08-09 17:19:32+0530 - sLogger - ERROR - error occured: list index out of range
2023-08-09 17:19:32+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CBS
2023-08-09 17:19:32+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL
2023-08-09 17:19:32+0530 - sLogger - ERROR - error occured: 'headers'
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CBS notes_number_processing
2023-08-09 17:19:32+0530 - sLogger - ERROR - error occured: local variable 'cbs_header' referenced before assignment
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: main_page_processing_service , File:process_core.py,  function: notes_number_processing_cls CPL notes_number_processing
2023-08-09 17:19:32+0530 - sLogger - ERROR - error occured: local variable 'cpl_header' referenced before assignment
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:19:32+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:19:32+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:19:32+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-09 17:19:32+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Operating Activities | operating cash flow before working capital changes
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash generated from operating activities | adjustments for increase decrease in operating assets
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax received/(paid) | adiustments for movements in working capital
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated/(utilised) by operating activities | adjustments for increase decrease in operating assets
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Investing Activitles | operating cash flow before working capital changes
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from cancellation of shares | operating profit before working capital changes
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loans to related parties | operating profit before working capital changes
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated/(utlised) by investing activities | adjustments for increase decrease in operating assets
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Financing Actlvities | operating cash flow before working capital changes
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest pald | movements in working capital
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loans and borrowings | operating profit before changes in assets and liabilities
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated by financing activities | operating cash flow before working capital changes
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase/(decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash held in foreign currencies Cash and cash equivalents at the end of year | adjustments for increase decrease in operating assets
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash held in foreign currencies Cash and cash equivalents at the end of year | adjustments for increase decrease in operating assets
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Reconciliation of cash and cash equivalents at year end | changes in operating assets and liabilities
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash at bank and in hand 9 | changes in operating assets and liabilities
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash equivalent - group pooling scheme 9 | changes in operating assets and liabilities
2023-08-09 17:19:32+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash overdraft group pooling scheme 9 | operating profit before working capital changes
2023-08-09 17:19:32+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-09 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-09 17:24:00+0530 - sLogger - DEBUG - process_main_pages started
2023-08-09 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:24:00+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:24:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:24:00+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:24:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:24:00+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:24:00+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:24:00+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:24:00+0530 - sLogger - DEBUG - ASSETS | [('assets', 100), ('currentassets', 59), ('current assets', 56), ('noncurrent assets', 56), ('noncurrentassets', 50), ('equity', 36), ('equityliabilities', 31), ('currentliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('noncurrentliabilities', 24), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current assets | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD currentassets | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current liabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD currentliabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent assets | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentassets | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent liabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current assets | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current liabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentliabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentassets | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrentliabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity and liabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity | score 33
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equityandliabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('currentliabilities', 64), ('assets', 56), ('currentassets', 56), ('noncurrentliabilities', 56), ('current liabilities', 52), ('noncurrentassets', 50), ('noncurrent liabilities', 44), ('equity', 32), ('equityliabilities', 29), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('liabilities', 11)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentassets | score 96
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD currentliabilities | score 62
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentassets | score 87
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrentliabilities | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equityandliabilities | score 29
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equityandliabilities', 38), ('equity liabilities', 35), ('equityliabilities', 34), ('noncurrentassets', 33), ('assets', 31), ('currentassets', 30), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrentliabilities', 24), ('noncurrent liabilities', 23), ('liabilities', 22), ('currentliabilities', 20)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentassets | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD currentliabilities | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentassets | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equityandliabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Investments | [('noncurrentassets', 38), ('assets', 36), ('currentassets', 33), ('equity', 33), ('noncurrentliabilities', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('equity and liabilities', 26), ('equityandliabilities', 24), ('current assets', 21), ('noncurrent assets', 21), ('equity liabilities', 21), ('current liabilities', 20), ('noncurrent liabilities', 20), ('liabilities', 17)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current assets | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentassets | score 42
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD current liabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD currentliabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent assets | score 43
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrent liabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current assets | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD non current liabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentassets | score 44
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity and liabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Investments | MATCH WORD equityandliabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Current tax receivables | [('current liabilities', 62), ('currentassets', 60), ('currentliabilities', 59), ('noncurrentassets', 55), ('noncurrentliabilities', 53), ('current assets', 45), ('equity and liabilities', 34), ('equity liabilities', 32), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('noncurrent liabilities', 25), ('equityliabilities', 23), ('assets', 17), ('liabilities', 17)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD current assets | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD currentassets | score 56
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD current liabilities | score 67
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD currentliabilities | score 63
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrent assets | score 55
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrentassets | score 51
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrent liabilities | score 62
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD non current assets | score 56
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD non current liabilities | score 62
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrentliabilities | score 59
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrentassets | score 51
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrentliabilities | score 59
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD equity and liabilities | score 49
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD equityandliabilities | score 42
2023-08-09 17:24:00+0530 - sLogger - DEBUG - GSTreceivable | [('current assets', 36), ('currentliabilities', 33), ('assets', 29), ('currentassets', 29), ('noncurrentliabilities', 29), ('noncurrent assets', 27), ('equity', 27), ('current liabilities', 26), ('noncurrentassets', 25), ('equityliabilities', 24), ('equityandliabilities', 20), ('equity liabilities', 18), ('equity and liabilities', 15), ('liabilities', 13), ('noncurrent liabilities', 9)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD current assets | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD currentassets | score 31
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD current liabilities | score 44
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD currentliabilities | score 45
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD noncurrent assets | score 27
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD noncurrentassets | score 28
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD noncurrent liabilities | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD non current assets | score 26
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD non current liabilities | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD noncurrentliabilities | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD noncurrentassets | score 28
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD noncurrentliabilities | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD equity and liabilities | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text GSTreceivable | MATCH WORD equityandliabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('currentliabilities', 57), ('currentassets', 52), ('noncurrentliabilities', 52), ('noncurrentassets', 47), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equityandliabilities', 33), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentassets | score 83
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD currentliabilities | score 53
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentassets | score 78
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrentliabilities | score 54
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equityandliabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentassets | score 87
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD currentliabilities | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentassets | score 97
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrentliabilities | score 68
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equityandliabilities | score 27
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('equityandliabilities', 40), ('current assets', 38), ('equityliabilities', 38), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('noncurrentassets', 31), ('currentliabilities', 30), ('currentassets', 28), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentassets | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD currentliabilities | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentassets | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrentliabilities | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equityandliabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentassets | score 83
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD currentliabilities | score 49
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentassets | score 82
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrentliabilities | score 59
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equityandliabilities | score 28
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentassets | score 56
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD currentliabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equityandliabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - LIABILITIES | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equityandliabilities', 35), ('equity', 33), ('equityliabilities', 29), ('currentliabilities', 27), ('noncurrentliabilities', 22), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11), ('currentassets', 11), ('noncurrentassets', 10)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current assets | score 24
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD currentassets | score 25
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current liabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD currentliabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent assets | score 24
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentassets | score 22
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent liabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current assets | score 24
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current liabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentassets | score 22
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrentliabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity and liabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equityandliabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentassets | score 62
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD currentliabilities | score 97
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentassets | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equityandliabilities | score 67
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Cash overdraft | [('current assets', 44), ('noncurrent assets', 44), ('assets', 42), ('currentassets', 38), ('noncurrent liabilities', 36), ('currentliabilities', 35), ('noncurrentassets', 34), ('noncurrentliabilities', 31), ('current liabilities', 29), ('equity and liabilities', 26), ('equity', 20), ('equityliabilities', 18), ('equityandliabilities', 16), ('equity liabilities', 15), ('liabilities', 10)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD current assets | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD currentassets | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD current liabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD currentliabilities | score 31
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD noncurrent assets | score 43
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD noncurrentassets | score 33
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD noncurrent liabilities | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD non current assets | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD non current liabilities | score 27
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD noncurrentliabilities | score 29
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD noncurrentassets | score 33
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD noncurrentliabilities | score 29
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD equity and liabilities | score 26
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD equity | score 20
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Cash overdraft | MATCH WORD equityandliabilities | score 24
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-09 17:24:00+0530 - sLogger - DEBUG - nan | [('equityandliabilities', 29), ('currentassets', 27), ('noncurrentliabilities', 27), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('current liabilities', 24), ('noncurrent liabilities', 24), ('noncurrentassets', 22), ('liabilities', 22), ('equity and liabilities', 20), ('currentliabilities', 17), ('equity liabilities', 12), ('equity', 0), ('equityliabilities', 0)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD current assets | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD currentassets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD current liabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD currentliabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrent assets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentassets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrent liabilities | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD non current assets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD non current liabilities | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentliabilities | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentassets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentliabilities | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equity and liabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equity | score 0
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equityandliabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrentliabilities', 33), ('noncurrent assets', 32), ('noncurrentassets', 29), ('currentliabilities', 27), ('currentassets', 22), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0), ('equityandliabilities', 0), ('equityliabilities', 0)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentassets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD currentliabilities | score 29
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentassets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrentliabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equityandliabilities | score 27
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Total current liabllitles | [('current liabilities', 76), ('currentliabilities', 56), ('currentassets', 51), ('noncurrentliabilities', 51), ('equity liabilities', 50), ('noncurrentassets', 47), ('equity and liabilities', 45), ('noncurrent liabilities', 43), ('liabilities', 41), ('current assets', 39), ('equityandliabilities', 29), ('equityliabilities', 26), ('noncurrent assets', 22), ('equity', 21), ('assets', 14)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD current assets | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD currentassets | score 56
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD current liabilities | score 77
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD currentliabilities | score 74
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD noncurrent assets | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD noncurrentassets | score 54
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD noncurrent liabilities | score 77
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD non current assets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD non current liabilities | score 79
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD noncurrentliabilities | score 74
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD noncurrentassets | score 54
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD noncurrentliabilities | score 74
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD equity and liabilities | score 55
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total current liabllitles | MATCH WORD equityandliabilities | score 53
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentassets | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD currentliabilities | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentassets | score 68
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equityandliabilities | score 62
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Deferred tax liabilities | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equityandliabilities', 30), ('equity', 27), ('equityliabilities', 25), ('currentliabilities', 24), ('current assets', 21), ('currentassets', 21), ('noncurrentliabilities', 21), ('assets', 19), ('noncurrentassets', 19), ('noncurrent assets', 14)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current assets | score 42
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD currentassets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD current liabilities | score 74
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD currentliabilities | score 71
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent assets | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrentassets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrent liabilities | score 70
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current assets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD non current liabilities | score 68
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrentliabilities | score 67
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrentassets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD noncurrentliabilities | score 67
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity and liabilities | score 65
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Deferred tax liabilities | MATCH WORD equityandliabilities | score 64
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentassets | score 56
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD currentliabilities | score 85
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentassets | score 62
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equityandliabilities | score 58
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentassets | score 27
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD currentliabilities | score 69
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentassets | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equityandliabilities | score 70
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('currentassets', 48), ('noncurrentassets', 42), ('currentliabilities', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('noncurrentliabilities', 29), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equityliabilities', 24), ('liabilities', 13)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentassets | score 70
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD currentliabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentassets | score 72
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrentliabilities | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equityandliabilities | score 33
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Contributed equity | [('equity', 55), ('equityliabilities', 50), ('equity and liabilities', 48), ('equityandliabilities', 44), ('noncurrentliabilities', 43), ('equity liabilities', 41), ('current liabilities', 40), ('currentliabilities', 40), ('noncurrentassets', 39), ('currentassets', 36), ('current assets', 28), ('liabilities', 27), ('noncurrent liabilities', 27), ('noncurrent assets', 21), ('assets', 19)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current assets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD currentassets | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD current liabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD currentliabilities | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent assets | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentassets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrent liabilities | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current assets | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD non current liabilities | score 37
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentliabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentassets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD noncurrentliabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity and liabilities | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equity | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Contributed equity | MATCH WORD equityandliabilities | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-09 17:24:00+0530 - sLogger - DEBUG - nan | [('equityandliabilities', 29), ('currentassets', 27), ('noncurrentliabilities', 27), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('current liabilities', 24), ('noncurrent liabilities', 24), ('noncurrentassets', 22), ('liabilities', 22), ('equity and liabilities', 20), ('currentliabilities', 17), ('equity liabilities', 12), ('equity', 0), ('equityliabilities', 0)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD current assets | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD currentassets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD current liabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD currentliabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrent assets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentassets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrent liabilities | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD non current assets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD non current liabilities | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentliabilities | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentassets | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD noncurrentliabilities | score 60
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equity and liabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equity | score 0
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text nan | MATCH WORD equityandliabilities | score 30
2023-08-09 17:24:00+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentassets | score 32
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD currentliabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentassets | score 36
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-08-09 17:24:00+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equityandliabilities | score 57
2023-08-09 17:24:00+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-09 17:24:00+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Operating Activities | operating cash flow before working capital changes
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash generated from operating activities | adjustments for increase decrease in operating assets
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax received/(paid) | adiustments for movements in working capital
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated/(utilised) by operating activities | adjustments for increase decrease in operating assets
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Investing Activitles | operating cash flow before working capital changes
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Purchase of property, plant and equipment | changes in operating assets and liabilities
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from cancellation of shares | operating profit before working capital changes
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loans to related parties | operating profit before working capital changes
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated/(utlised) by investing activities | adjustments for increase decrease in operating assets
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- nan | changes in working capital
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash Flows from Financing Actlvities | operating cash flow before working capital changes
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest pald | movements in working capital
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from loans and borrowings | operating profit before changes in assets and liabilities
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash generated by financing activities | operating cash flow before working capital changes
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase/(decrease) in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash held in foreign currencies Cash and cash equivalents at the end of year | adjustments for increase decrease in operating assets
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on cash held in foreign currencies Cash and cash equivalents at the end of year | adjustments for increase decrease in operating assets
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Reconciliation of cash and cash equivalents at year end | changes in operating assets and liabilities
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash at bank and in hand 9 | changes in operating assets and liabilities
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash equivalent - group pooling scheme 9 | changes in operating assets and liabilities
2023-08-09 17:24:00+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash overdraft group pooling scheme 9 | operating profit before working capital changes
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-09 17:24:01+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-09 17:24:01+0530 - sLogger - ERROR - error occured: 'year'
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-09 17:24:01+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-09 17:24:01+0530 - sLogger - ERROR - error occured: 'year'
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-09 17:24:01+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-09 17:24:01+0530 - sLogger - ERROR - error occured: 'year'
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-09 17:24:01+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-09 17:24:01+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-09 17:24:01+0530 - sLogger - ERROR - error occured: 'year'
2023-08-09 17:24:01+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 24), ('Cash and short term deposits', 24), ('bank balances other than above', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('cash and cash equivalents', 15), ('cash and bank balances', 15), (' cash and cash equivalents', 15)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('cash asset', 36), ('cash asset', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('cash and bank balances', 26), ('other bank balances', 23)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = gstreceivable , res_fuzz_match = [('cash and cash equivalents', 33), (' cash and cash equivalents', 33), ('cash asset', 32), ('cash asset', 32), ('cash and short term deposits', 22), ('Cash and short term deposits', 22), ('bank balances other than cash and cash equivalents', 19), ('other bank balances', 15), ('bank balances other than above', 11), ('cash and bank balances', 7)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 6777556.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': [9.0], 'line_item_value': [6777556.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash asset', 67), ('cash asset', 67), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('Cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash asset', 61), ('cash asset', 61), ('cash and short term deposits', 35), ('Cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('Cash and short term deposits', 54), ('cash asset', 45), ('cash asset', 45), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 24), ('Cash and short term deposits', 24), ('bank balances other than above', 18), ('other bank balances', 17), ('bank balances other than cash and cash equivalents', 16), ('cash and cash equivalents', 15), ('cash and bank balances', 15), (' cash and cash equivalents', 15)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('cash asset', 36), ('cash asset', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('Cash and short term deposits', 31), ('cash and bank balances', 26), ('other bank balances', 23)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = gstreceivable , res_fuzz_match = [('cash and cash equivalents', 33), (' cash and cash equivalents', 33), ('cash asset', 32), ('cash asset', 32), ('cash and short term deposits', 22), ('Cash and short term deposits', 22), ('bank balances other than cash and cash equivalents', 19), ('other bank balances', 15), ('bank balances other than above', 11), ('cash and bank balances', 7)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 4146312.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': [9.0], 'line_item_value': [4146312.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('inventories', 83)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = gstreceivable , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 83, 'value': 10323543.0, 'line_item_label': ['Inventories', 'Investments'], 'note_numbers': [11.0, 22.0], 'line_item_value': [10250443.0, 73100.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('inventories', 83)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = gstreceivable , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 83, 'value': 10693831.0, 'line_item_label': ['Inventories', 'Investments'], 'note_numbers': [11.0, 22.0], 'line_item_value': [10643831.0, 50000.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('other financial assets', 24), ('other assets', 24), ('other current financial assets', 18), ('prepayments', 17), ('other current assets', 16)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('other current financial assets', 53), ('other current assets', 49), ('other financial assets', 38), ('other assets', 28), ('prepayments', 25)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = gstreceivable , res_fuzz_match = [('other current assets', 36), ('other current financial assets', 33), ('other assets', 30), ('other financial assets', 29), ('prepayments', 27)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 81, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('other financial assets', 24), ('other assets', 24), ('other current financial assets', 18), ('prepayments', 17), ('other current assets', 16)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('other current financial assets', 53), ('other current assets', 49), ('other financial assets', 38), ('other assets', 28), ('prepayments', 25)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = gstreceivable , res_fuzz_match = [('other current assets', 36), ('other current financial assets', 33), ('other assets', 30), ('other financial assets', 29), ('prepayments', 27)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 81, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' income tax receivable from related parties', 26), ('other assets', 24), (' other financial assets', 24), (' biological assets', 22), (' financial assets', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' deferred operating expenditure', 15)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [(' trade and other receivables', 60), (' income tax receivable from related parties', 55), ('other current assets', 49), (' other current assets', 49), (' other financial assets', 38), (' financial assets', 32), (' deferred operating expenditure', 31), ('other assets', 28), (' biological assets', 27)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = gstreceivable , res_fuzz_match = [(' trade and other receivables', 45), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' income tax receivable from related parties', 33), ('other assets', 30), (' biological assets', 29), (' other financial assets', 29), (' deferred operating expenditure', 27)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 5577196.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, 10.0], 'line_item_value': [0.0, 5577196.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [(' income tax receivable from related parties', 26), ('other assets', 24), (' other financial assets', 24), (' biological assets', 22), (' financial assets', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' deferred operating expenditure', 15)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [(' trade and other receivables', 60), (' income tax receivable from related parties', 55), ('other current assets', 49), (' other current assets', 49), (' other financial assets', 38), (' financial assets', 32), (' deferred operating expenditure', 31), ('other assets', 28), (' biological assets', 27)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = gstreceivable , res_fuzz_match = [(' trade and other receivables', 45), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' income tax receivable from related parties', 33), ('other assets', 30), (' biological assets', 29), (' other financial assets', 29), (' deferred operating expenditure', 27)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 5569621.0, 'line_item_label': ['Current assets', 'Trade and other receivables'], 'note_numbers': [nan, 10.0], 'line_item_value': [0.0, 5569621.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment', 77)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 29568424.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [12.0], 'line_item_value': [29568424.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment', 77)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 37229968.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [12.0], 'line_item_value': [37229968.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 29568424.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [12.0], 'line_item_value': [29568424.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 37229968.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [12.0], 'line_item_value': [37229968.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 80, 'value': 62136.0, 'line_item_label': ['Intangible assets'], 'note_numbers': [14.0], 'line_item_value': [62136.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 80, 'value': 55297.0, 'line_item_label': ['Intangible assets'], 'note_numbers': [14.0], 'line_item_value': [55297.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets', 'intangible under development', 'intangible assets under development']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible assets', 58), ('intangible under development', 38)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets', 58), ('intangible assets under development', 53), ('intangible under development', 27)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets', 70), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 62136.0, 'line_item_label': ['Intangible assets'], 'note_numbers': [14.0], 'line_item_value': [62136.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible assets', 58), ('intangible under development', 38)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets', 58), ('intangible assets under development', 53), ('intangible under development', 27)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets', 70), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 55297.0, 'line_item_label': ['Intangible assets'], 'note_numbers': [14.0], 'line_item_value': [55297.0]}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:31+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-09 17:27:31+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:31+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:31+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-09 17:27:31+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 1816616.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': [13.0], 'line_item_value': [1816616.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 0.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': [13.0], 'line_item_value': [0.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 80, 'value': 62136.0, 'line_item_label': ['Non-current assets', 'Intangible assets'], 'note_numbers': [nan, 14.0], 'line_item_value': [0.0, 62136.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 80, 'value': 55297.0, 'line_item_label': ['Non-current assets', 'Intangible assets'], 'note_numbers': [nan, 14.0], 'line_item_value': [0.0, 55297.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' interest bearing liabilites', 61), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [(' bank overdraft', 79), (' loans and borrowings', 41), ('short-term debt', 36), ('shortterm debt', 36), ('short term debt', 34), ('shortterm borrowings', 33), (' interest bearing liabilites', 33), ('lease liabilities', 32), ('borrowings', 30), (' leases', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' loans and borrowings', 33), (' leases', 29), (' bank overdraft', 24), (' interest bearing liabilites', 16), ('lease liabilities', 14), ('short term debt', 0), ('short-term debt', 0), ('borrowings', 0), ('shortterm debt', 0), ('shortterm borrowings', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), (' interest bearing liabilites', 21), ('lease liabilities', 12), (' leases', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6], 'score': 100, 'value': 12339500.0, 'line_item_label': ['Lease liabilities', 'Borrowings'], 'note_numbers': [20.0, 23.0], 'line_item_value': [0.0, 12339500.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' interest bearing liabilites', 43), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' interest bearing liabilites', 61), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [(' bank overdraft', 79), (' loans and borrowings', 41), ('short-term debt', 36), ('shortterm debt', 36), ('short term debt', 34), ('shortterm borrowings', 33), (' interest bearing liabilites', 33), ('lease liabilities', 32), ('borrowings', 30), (' leases', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' loans and borrowings', 33), (' leases', 29), (' bank overdraft', 24), (' interest bearing liabilites', 16), ('lease liabilities', 14), ('short term debt', 0), ('short-term debt', 0), ('borrowings', 0), ('shortterm debt', 0), ('shortterm borrowings', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), (' interest bearing liabilites', 21), ('lease liabilities', 12), (' leases', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 6], 'score': 100, 'value': 19817731.0, 'line_item_label': ['Lease liabilities', 'Borrowings'], 'note_numbers': [20.0, 23.0], 'line_item_value': [60331.0, 19757400.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [('trade and other payables', 39), ('trade payable', 31), ('other trade payables', 31)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16), ('trade payable', 13), ('other trade payables', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5719767.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': [15.0], 'line_item_value': [5719767.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('other trade payables', 25), ('trade and other payables', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [('trade and other payables', 39), ('trade payable', 31), ('other trade payables', 31)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16), ('trade payable', 13), ('other trade payables', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5555273.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': [15.0], 'line_item_value': [5555273.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [('trade and other payables', 39)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5719767.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': [15.0], 'line_item_value': [5719767.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade and other payables', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [('trade and other payables', 39)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('trade and other payables', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('trade and other payables', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 5555273.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': [15.0], 'line_item_value': [5555273.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33), ('provision', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 29), (' income tax payable', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 33), ('tax', 33), ('provision', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), ('provision', 33), (' income tax payable', 17), ('tax', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33), ('provision', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33), ('provision', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [('tax', 33), ('provision', 33), ('current tax liabilities', 29), (' income tax payable', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 33), ('tax', 33), ('provision', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), ('provision', 33), (' income tax payable', 17), ('tax', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['LIABILITIES'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [(' trade and other payables', 39), (' customer deposits', 36), ('other current liabilities', 35), (' other current liabilities', 35), (' other financial liabilities', 35), (' foreign exchange contract liability', 31), (' deferred revenue', 23), (' financial liabilities', 21), (' employee benefits', 21), ('provisions', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' financial liabilities', 35), (' other financial liabilities', 26), (' foreign exchange contract liability', 18), ('other current liabilities', 17), (' other current liabilities', 17), (' trade and other payables', 16), (' deferred revenue', 13), (' employee benefits', 11), ('provisions', 0), (' customer deposits', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 5719767.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, 15.0], 'line_item_value': [0.0, 5719767.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash overdraft , res_fuzz_match = [(' trade and other payables', 39), (' customer deposits', 36), ('other current liabilities', 35), (' other current liabilities', 35), (' other financial liabilities', 35), (' foreign exchange contract liability', 31), (' deferred revenue', 23), (' financial liabilities', 21), (' employee benefits', 21), ('provisions', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' financial liabilities', 35), (' other financial liabilities', 26), (' foreign exchange contract liability', 18), ('other current liabilities', 17), (' other current liabilities', 17), (' trade and other payables', 16), (' deferred revenue', 13), (' employee benefits', 11), ('provisions', 0), (' customer deposits', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 5555273.0, 'line_item_label': ['Current liabilities', 'Trade and other payables'], 'note_numbers': [nan, 15.0], 'line_item_value': [0.0, 5555273.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_liabilities
2023-08-09 17:27:32+0530 - sLogger - ERROR - error occured: 2021
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('long term debt', 40)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 27), (' borrowings', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 0.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [20.0], 'line_item_value': [0.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 27), (' borrowings', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 72629.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': [20.0], 'line_item_value': [72629.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('deferred tax liabilities', 57), ('deferred taxes', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('deferred taxes', 100), ('deferred tax liabilities', 100)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('deferred tax liabilities', 73), ('deferred taxes', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 17398.0, 'line_item_label': ['Deferred tax liabilities'], 'note_numbers': [13.0], 'line_item_value': [17398.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('deferred tax liabilities', 57), ('deferred taxes', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('deferred taxes', 100), ('deferred tax liabilities', 100)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('deferred tax liabilities', 73), ('deferred taxes', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('deferred taxes', 33), ('deferred tax liabilities', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['Deferred tax liabilities'], 'note_numbers': [13.0], 'line_item_value': [0.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' other financial liabilities', 56), ('trade and other payables', 53), (' financial liabilities', 53), (' other non-current liabilities', 44), ('other long term liabilities', 42), (' employee benefits', 26), (' provision for associate funding', 21), (' provisions', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 82, 'value': 0.0, 'line_item_label': ['Non-current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [(' other financial liabilities', 56), ('trade and other payables', 53), (' financial liabilities', 53), (' other non-current liabilities', 44), ('other long term liabilities', 42), (' employee benefits', 26), (' provision for associate funding', 21), (' provisions', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 82, 'value': 0.0, 'line_item_label': ['Non-current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('contributed equity', 100), ('contributed equity', 100), ('equity share capital', 59), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 37), (' share capital ', 37), ('common stock', 36)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' issued capital', 15), ('share capital', 14), ('perpetual equity instrument', 14), (' share capital ', 14), ('common stock', 13), ('contributed equity', 11), ('contributed equity', 11), ('equity share capital', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 34977001.0, 'line_item_label': ['Contributed equity'], 'note_numbers': [17.0], 'line_item_value': [34977001.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('contributed equity', 100), ('contributed equity', 100), ('equity share capital', 59), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 37), (' share capital ', 37), ('common stock', 36)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [(' issued capital', 15), ('share capital', 14), ('perpetual equity instrument', 14), (' share capital ', 14), ('common stock', 13), ('contributed equity', 11), ('contributed equity', 11), ('equity share capital', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 34977001.0, 'line_item_label': ['Contributed equity'], 'note_numbers': [17.0], 'line_item_value': [34977001.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('retained earnings', 37), ('reserves surplus', 21), (' accumulated losses', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('retained earnings', 43), (' accumulated losses', 13), ('other equity', 0), ('reserves surplus', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 1004163.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [1004163.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other equity', 43), ('retained earnings', 37), ('reserves surplus', 21), (' accumulated losses', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('retained earnings', 43), (' accumulated losses', 13), ('other equity', 0), ('reserves surplus', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -2876771.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [-2876771.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('non controlling interest', 50), ('minority interest', 40), ('minority interest', 40), ('noncontrolling interest', 34), (' non-controlling interest', 34)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('minority interest', 24), ('minority interest', 24), ('noncontrolling interest', 18), (' non-controlling interest', 18), ('non controlling interest', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('non controlling interest', 50), ('minority interest', 40), ('minority interest', 40), ('noncontrolling interest', 34), (' non-controlling interest', 34)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('minority interest', 24), ('minority interest', 24), ('noncontrolling interest', 18), (' non-controlling interest', 18), ('non controlling interest', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('shareholders equity(a)', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('shareholders equity(a)', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves ', 36), (' reserves', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('other reserves ', 0), (' reserves', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = contributed equity , res_fuzz_match = [('other reserves ', 36), (' reserves', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = nan , res_fuzz_match = [('other reserves ', 0), (' reserves', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment', 77)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 29568424.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [12.0], 'line_item_value': [29568424.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91), ('plant and equipment', 77)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 91, 'value': 37229968.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': [12.0], 'line_item_value': [37229968.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('unbilled', 20), ('billed', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 75), ('account receivables', 64), ('trade and other receivables', 61), ('government subsidies receivable', 56), ('unbilled', 40), ('billed', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = gstreceivable , res_fuzz_match = [('receivable', 100), ('account receivables', 78), ('trade receivables', 67), ('government subsidies receivable', 67), ('trade and other receivables', 67), ('billed', 25), ('unbilled', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6, 7], 'score': 100, 'value': 6192224.0, 'line_item_label': ['Trade and other receivables', 'Current tax receivables', 'GSTreceivable'], 'note_numbers': [10.0, 8.0, nan], 'line_item_value': [5577196.0, 832.0, 614196.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = investments , res_fuzz_match = [('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('unbilled', 20), ('billed', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 75), ('account receivables', 64), ('trade and other receivables', 61), ('government subsidies receivable', 56), ('unbilled', 40), ('billed', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = gstreceivable , res_fuzz_match = [('receivable', 100), ('account receivables', 78), ('trade receivables', 67), ('government subsidies receivable', 67), ('trade and other receivables', 67), ('billed', 25), ('unbilled', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 6, 7], 'score': 100, 'value': 6233146.0, 'line_item_label': ['Trade and other receivables', 'Current tax receivables', 'GSTreceivable'], 'note_numbers': [10.0, 8.0, nan], 'line_item_value': [5569621.0, 12262.0, 651263.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), (' revenue from continuing activities', 39), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('transmission and distribution business', 38), ('net sales', 37), (' Sale of coal', 36), (' revenue from continuing activities', 36), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('revenue from operations', 29), ('from trading business', 29), (' Sales revenue', 27), ('sale of products', 26), (' Revenue', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('transmission and distribution business', 35), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), (' revenue from continuing activities', 30), ('revenue from operations', 22), ('from trading business', 22), ('net sales', 17), (' Sale of coal', 17), ('sale of products', 16), (' Sales revenue', 16), (' Revenue', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('transmission and distribution business', 35), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), (' revenue from continuing activities', 30), ('revenue from operations', 22), ('from trading business', 22), ('net sales', 17), (' Sale of coal', 17), ('sale of products', 16), (' Sales revenue', 16), (' Revenue', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), (' revenue from continuing activities', 34), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' revenue from continuing activities', 43), ('revenue from operations', 38), ('transmission and distribution business', 37), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), (' Sales revenue', 27), ('sale of products', 26), (' Revenue', 25), ('net sales', 24), ('from trading business', 24), (' Sale of coal', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' Sales revenue', 52), ('sale of products', 42), ('net sales', 40), ('from trading business', 37), (' Revenue', 33), ('transmission and distribution business', 30), (' Sale of coal', 29), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('revenue from operations', 21), (' revenue from continuing activities', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Sales revenue', 42), (' Revenue', 32), ('net sales', 29), ('transmission and distribution business', 29), ('from trading business', 29), ('revenue from operations', 28), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), (' revenue from continuing activities', 21), (' Sale of coal', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' Sale of coal', 42), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 37), ('net sales', 35), (' revenue from continuing activities', 35), ('from trading business', 33), ('revenue from operations', 26), ('transmission and distribution business', 23), (' Sales revenue', 23), (' Revenue', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 42), ('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('transmission and distribution business', 36), ('sale of products', 35), (' revenue from continuing activities', 30), ('net sales', 27), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('from trading business', 50), (' Sale of coal', 44), ('net sales', 35), (' Sales revenue', 30), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), (' revenue from continuing activities', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), (' revenue from continuing activities', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('transmission and distribution business', 43), ('from trading business', 42), ('revenue from operations', 36), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), (' revenue from continuing activities', 33), ('net sales', 32), ('sale of products', 29), (' Revenue', 28), (' Sale of coal', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('from trading business', 34), ('sale of products', 33), (' revenue from continuing activities', 32), ('revenue from operations', 31), (' Sales revenue', 30), ('net sales', 27), (' Sale of coal', 27), ('transmission and distribution business', 25), (' Revenue', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' revenue from continuing activities', 43), ('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('from trading business', 41), ('transmission and distribution business', 33), ('sale of products', 32), ('revenue from operations', 30), (' Sales revenue', 29), ('net sales', 23), (' Sale of coal', 23), (' Revenue', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('transmission and distribution business', 37), ('from trading business', 34), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('revenue from operations', 29), ('net sales', 29), (' Sale of coal', 29), (' Sales revenue', 27), (' revenue from continuing activities', 27), ('sale of products', 26), (' Revenue', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 32596412.0, 'line_item_label': ['Revenue'], 'note_numbers': [4.0], 'line_item_value': [32596412.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), (' revenue from continuing activities', 39), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('transmission and distribution business', 38), ('net sales', 37), (' Sale of coal', 36), (' revenue from continuing activities', 36), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('revenue from operations', 29), ('from trading business', 29), (' Sales revenue', 27), ('sale of products', 26), (' Revenue', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('transmission and distribution business', 35), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), (' revenue from continuing activities', 30), ('revenue from operations', 22), ('from trading business', 22), ('net sales', 17), (' Sale of coal', 17), ('sale of products', 16), (' Sales revenue', 16), (' Revenue', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('transmission and distribution business', 35), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), (' revenue from continuing activities', 30), ('revenue from operations', 22), ('from trading business', 22), ('net sales', 17), (' Sale of coal', 17), ('sale of products', 16), (' Sales revenue', 16), (' Revenue', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('revenue from operations', 42), ('net sales', 40), (' revenue from continuing activities', 34), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('from trading business', 32), (' Sales revenue', 30), ('sale of products', 24), ('transmission and distribution business', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' revenue from continuing activities', 43), ('revenue from operations', 38), ('transmission and distribution business', 37), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), (' Sales revenue', 27), ('sale of products', 26), (' Revenue', 25), ('net sales', 24), ('from trading business', 24), (' Sale of coal', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' Sales revenue', 52), ('sale of products', 42), ('net sales', 40), ('from trading business', 37), (' Revenue', 33), ('transmission and distribution business', 30), (' Sale of coal', 29), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('revenue from operations', 21), (' revenue from continuing activities', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Sales revenue', 42), (' Revenue', 32), ('net sales', 29), ('transmission and distribution business', 29), ('from trading business', 29), ('revenue from operations', 28), ('sale of products', 24), ('revenue from contracts with customers', 22), ('Revenue from contract with customers', 22), (' revenue from continuing activities', 21), (' Sale of coal', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' revenue from continuing activities', 38), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' Sale of coal', 42), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 37), ('net sales', 35), (' revenue from continuing activities', 35), ('from trading business', 33), ('revenue from operations', 26), ('transmission and distribution business', 23), (' Sales revenue', 23), (' Revenue', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 42), ('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('transmission and distribution business', 36), ('sale of products', 35), (' revenue from continuing activities', 30), ('net sales', 27), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('from trading business', 50), (' Sale of coal', 44), ('net sales', 35), (' Sales revenue', 30), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), (' revenue from continuing activities', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), (' revenue from continuing activities', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('transmission and distribution business', 43), ('from trading business', 42), ('revenue from operations', 36), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), (' revenue from continuing activities', 33), ('net sales', 32), ('sale of products', 29), (' Revenue', 28), (' Sale of coal', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('from trading business', 34), ('sale of products', 33), (' revenue from continuing activities', 32), ('revenue from operations', 31), (' Sales revenue', 30), ('net sales', 27), (' Sale of coal', 27), ('transmission and distribution business', 25), (' Revenue', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' revenue from continuing activities', 43), ('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), ('from trading business', 41), ('transmission and distribution business', 33), ('sale of products', 32), ('revenue from operations', 30), (' Sales revenue', 29), ('net sales', 23), (' Sale of coal', 23), (' Revenue', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('transmission and distribution business', 37), ('from trading business', 34), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('revenue from operations', 29), ('net sales', 29), (' Sale of coal', 29), (' Sales revenue', 27), (' revenue from continuing activities', 27), ('sale of products', 26), (' Revenue', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 36697978.0, 'line_item_label': ['Revenue'], 'note_numbers': [4.0], 'line_item_value': [36697978.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [(' cost of coal sold', 48), (' Cost of goods and services sold', 45), (' Cost of inventory sold', 42), ('total expenses', 39), ('purchase of stock-in-trade', 37), ('cost of sales', 36), ('Cost of sales', 36), (' Personnel costs', 36), (' Cost of product sold', 33), (' cost of goods sold', 30), ('total expenditure', 29), ('expenditure', 21), ('expense', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 34), ('purchase of stock-in-trade', 26), (' cost of goods sold', 25), (' Cost of product sold', 24), (' cost of coal sold', 22), (' Personnel costs', 22), ('total expenditure', 20), ('cost of sales', 19), ('Cost of sales', 19), ('total expenses', 16), ('expenditure', 14), ('expense', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 34), ('purchase of stock-in-trade', 26), (' cost of goods sold', 25), (' Cost of product sold', 24), (' cost of coal sold', 22), (' Personnel costs', 22), ('total expenditure', 20), ('cost of sales', 19), ('Cost of sales', 19), ('total expenses', 16), ('expenditure', 14), ('expense', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Cost of goods and services sold', 43), (' Cost of inventory sold', 40), ('expense', 38), (' Cost of product sold', 37), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), (' cost of goods sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenditure', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('total expenses', 100), ('total expenditure', 79), ('expense', 67), ('expenditure', 55), ('purchase of stock-in-trade', 45), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' Cost of product sold', 34), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold', 31), (' Cost of goods and services sold', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' Cost of inventory sold', 31), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of goods and services sold', 26), (' Cost of product sold', 20), (' cost of coal sold', 15), (' cost of goods sold', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' cost of goods sold', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 30), (' cost of goods sold', 28), ('expenditure', 25), ('expense', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('cost of sales', 44), ('Cost of sales', 44), ('total expenses', 38), (' cost of coal sold', 35), ('total expenditure', 32), (' Cost of product sold', 31), ('purchase of stock-in-trade', 29), (' Cost of inventory sold', 29), (' Personnel costs', 26), (' cost of goods sold', 26), (' Cost of goods and services sold', 24), ('expenditure', 21), ('expense', 13)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold', 24), ('expense', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('total expenditure', 46), ('purchase of stock-in-trade', 38), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 38), ('expenditure', 36), ('total expenses', 34), (' Personnel costs', 32), (' cost of goods sold', 32), (' Cost of product sold', 30), ('expense', 28), (' cost of coal sold', 27), ('cost of sales', 25), ('Cost of sales', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('total expenditure', 37), ('total expenses', 36), (' Cost of inventory sold', 35), (' Personnel costs', 35), (' Cost of product sold', 33), ('purchase of stock-in-trade', 32), (' cost of coal sold', 32), (' Cost of goods and services sold', 32), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 23), ('expense', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' Cost of goods and services sold', 38), ('total expenditure', 37), ('total expenses', 36), (' Cost of product sold', 33), ('purchase of stock-in-trade', 32), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Personnel costs', 31), (' cost of goods sold', 31), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 22), ('expense', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' Cost of goods and services sold', 35), ('total expenditure', 33), (' Cost of product sold', 33), (' Cost of inventory sold', 31), (' cost of coal sold', 30), (' Personnel costs', 30), (' cost of goods sold', 30), ('purchase of stock-in-trade', 27), ('total expenses', 26), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 22), ('expense', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -37084854.0, 'line_item_label': ['Total expenses'], 'note_numbers': [nan], 'line_item_value': [-37084854.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0), (' cost of goods sold', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [(' cost of coal sold', 48), (' Cost of goods and services sold', 45), (' Cost of inventory sold', 42), ('total expenses', 39), ('purchase of stock-in-trade', 37), ('cost of sales', 36), ('Cost of sales', 36), (' Personnel costs', 36), (' Cost of product sold', 33), (' cost of goods sold', 30), ('total expenditure', 29), ('expenditure', 21), ('expense', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 34), ('purchase of stock-in-trade', 26), (' cost of goods sold', 25), (' Cost of product sold', 24), (' cost of coal sold', 22), (' Personnel costs', 22), ('total expenditure', 20), ('cost of sales', 19), ('Cost of sales', 19), ('total expenses', 16), ('expenditure', 14), ('expense', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 34), ('purchase of stock-in-trade', 26), (' cost of goods sold', 25), (' Cost of product sold', 24), (' cost of coal sold', 22), (' Personnel costs', 22), ('total expenditure', 20), ('cost of sales', 19), ('Cost of sales', 19), ('total expenses', 16), ('expenditure', 14), ('expense', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('expense', 43), ('total expenses', 35), ('total expenditure', 32), ('expenditure', 31), (' Cost of product sold', 31), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' cost of goods sold', 28), ('cost of sales', 26), ('Cost of sales', 26), (' cost of coal sold', 22), ('purchase of stock-in-trade', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Cost of goods and services sold', 43), (' Cost of inventory sold', 40), ('expense', 38), (' Cost of product sold', 37), ('total expenses', 32), (' cost of coal sold', 30), (' Personnel costs', 30), (' cost of goods sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('purchase of stock-in-trade', 27), ('total expenditure', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('total expenses', 100), ('total expenditure', 79), ('expense', 67), ('expenditure', 55), ('purchase of stock-in-trade', 45), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' Cost of product sold', 34), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold', 31), (' Cost of goods and services sold', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('purchase of stock-in-trade', 38), (' Personnel costs', 37), (' Cost of inventory sold', 31), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of goods and services sold', 26), (' Cost of product sold', 20), (' cost of coal sold', 15), (' cost of goods sold', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), (' cost of goods sold', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' cost of goods sold', 41), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 30), (' cost of goods sold', 28), ('expenditure', 25), ('expense', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('cost of sales', 44), ('Cost of sales', 44), ('total expenses', 38), (' cost of coal sold', 35), ('total expenditure', 32), (' Cost of product sold', 31), ('purchase of stock-in-trade', 29), (' Cost of inventory sold', 29), (' Personnel costs', 26), (' cost of goods sold', 26), (' Cost of goods and services sold', 24), ('expenditure', 21), ('expense', 13)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold', 24), ('expense', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('total expenditure', 46), ('purchase of stock-in-trade', 38), (' Cost of goods and services sold', 38), (' Cost of inventory sold', 38), ('expenditure', 36), ('total expenses', 34), (' Personnel costs', 32), (' cost of goods sold', 32), (' Cost of product sold', 30), ('expense', 28), (' cost of coal sold', 27), ('cost of sales', 25), ('Cost of sales', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('total expenditure', 37), ('total expenses', 36), (' Cost of inventory sold', 35), (' Personnel costs', 35), (' Cost of product sold', 33), ('purchase of stock-in-trade', 32), (' cost of coal sold', 32), (' Cost of goods and services sold', 32), (' cost of goods sold', 32), ('cost of sales', 31), ('Cost of sales', 31), ('expenditure', 23), ('expense', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' Cost of goods and services sold', 38), ('total expenditure', 37), ('total expenses', 36), (' Cost of product sold', 33), ('purchase of stock-in-trade', 32), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Personnel costs', 31), (' cost of goods sold', 31), ('cost of sales', 30), ('Cost of sales', 30), ('expenditure', 22), ('expense', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' Cost of goods and services sold', 35), ('total expenditure', 33), (' Cost of product sold', 33), (' Cost of inventory sold', 31), (' cost of coal sold', 30), (' Personnel costs', 30), (' cost of goods sold', 30), ('purchase of stock-in-trade', 27), ('total expenses', 26), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 22), ('expense', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -38840232.0, 'line_item_label': ['Total expenses'], 'note_numbers': [nan], 'line_item_value': [-38840232.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [(' Administrative and other expenses', 53), ('other expenses', 52), (' Other expenses', 52), (' Other expenses', 52), (' Logistics and distribution', 41), (' Sales and marketing', 41), (' Amortisation expenses', 36), (' Administrative expenses', 34), (' Administration expenses', 34), (' Marketing expenses', 31), (' Advertising expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Management expenses', 26), (' Selling & distribution expenses', 25), ('Distribution expenses', 23), (' Depreciation expenses', 18), (' Depreciation expenses', 18), (' depreciation', 15), (' Occupancy ', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Administrative and other expenses', 36), (' Logistics and distribution', 32), (' Administrative expenses', 31), (' Administration expenses', 31), (' Selling & distribution expenses', 29), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Sales and marketing', 24), (' Amortisation expenses', 22), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Marketing expenses', 18), ('other expenses', 16), (' Other expenses', 16), (' Lease expenses', 16), (' Selling Expenses', 16), (' Other expenses', 16), (' Occupancy expenses', 14), (' Management expenses', 14), (' depreciation', 12), (' Occupancy ', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Administrative and other expenses', 36), (' Logistics and distribution', 32), (' Administrative expenses', 31), (' Administration expenses', 31), (' Selling & distribution expenses', 29), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Sales and marketing', 24), (' Amortisation expenses', 22), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Marketing expenses', 18), ('other expenses', 16), (' Other expenses', 16), (' Lease expenses', 16), (' Selling Expenses', 16), (' Other expenses', 16), (' Occupancy expenses', 14), (' Management expenses', 14), (' depreciation', 12), (' Occupancy ', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Depreciation expenses', 70), (' Depreciation expenses', 70), (' Amortisation expenses', 70), (' Advertising expenses', 59), (' Administrative and other expenses', 58), (' Administrative expenses', 57), (' Administration expenses', 57), ('Distribution expenses', 52), (' Selling & distribution expenses', 47), (' depreciation', 42), (' Logistics and distribution', 39), (' Sales and marketing', 39), ('other expenses', 32), (' Occupancy expenses', 32), (' Other expenses', 32), (' Lease expenses', 32), (' Selling Expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' Occupancy ', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other expenses', 75), (' Other expenses', 75), (' Other expenses', 75), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Management expenses', 67), (' Marketing expenses', 64), (' Selling & distribution expenses', 48), (' Administrative and other expenses', 47), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' Sales and marketing', 37), (' depreciation', 32), (' Logistics and distribution', 31), (' Occupancy ', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Management expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Selling Expenses', 58), ('other expenses', 56), (' Other expenses', 56), (' Other expenses', 56), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Administrative and other expenses', 36), (' Logistics and distribution', 24), (' Sales and marketing', 21), (' Occupancy ', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' Administrative and other expenses', 39), (' Marketing expenses', 36), (' Amortisation expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), ('Distribution expenses', 32), (' Management expenses', 30), (' Logistics and distribution', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Lease expenses', 23), (' Selling Expenses', 23), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' depreciation', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Other expenses', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Advertising expenses', 27), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Management expenses', 24), (' Occupancy ', 22), (' Selling Expenses', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Sales and marketing', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Amortisation expenses', 26), (' Advertising expenses', 25), ('Distribution expenses', 24), (' Logistics and distribution', 21), (' Selling & distribution expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [(' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Logistics and distribution', 37), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Administrative and other expenses', 33), (' Selling & distribution expenses', 32), (' Advertising expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), ('other expenses', 29), (' Other expenses', 29), (' Selling Expenses', 29), (' Other expenses', 29), (' depreciation', 27), (' Amortisation expenses', 27), (' Occupancy expenses', 23), (' Occupancy ', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Administrative and other expenses', 43), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Marketing expenses', 32), (' Sales and marketing', 31), (' Lease expenses', 30), (' Management expenses', 29), (' Depreciation expenses', 28), (' Selling & distribution expenses', 28), (' Depreciation expenses', 28), (' Amortisation expenses', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Logistics and distribution', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' depreciation', 16), (' Occupancy ', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 43), (' Administrative and other expenses', 40), ('Distribution expenses', 37), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Logistics and distribution', 34), (' Sales and marketing', 34), (' Lease expenses', 29), (' Management expenses', 29), (' Marketing expenses', 28), (' Amortisation expenses', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Advertising expenses', 27), (' Occupancy expenses', 25), (' Selling Expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 16), (' Occupancy ', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' Administrative and other expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' depreciation', 30), ('Distribution expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Lease expenses', 27), (' Selling Expenses', 27), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Management expenses', 21), (' Occupancy expenses', 16), (' Occupancy ', 6)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -15177596.0, 'line_item_label': ['Other expenses'], 'note_numbers': [nan], 'line_item_value': [-15177596.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [(' Administrative and other expenses', 53), ('other expenses', 52), (' Other expenses', 52), (' Other expenses', 52), (' Logistics and distribution', 41), (' Sales and marketing', 41), (' Amortisation expenses', 36), (' Administrative expenses', 34), (' Administration expenses', 34), (' Marketing expenses', 31), (' Advertising expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Management expenses', 26), (' Selling & distribution expenses', 25), ('Distribution expenses', 23), (' Depreciation expenses', 18), (' Depreciation expenses', 18), (' depreciation', 15), (' Occupancy ', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Administrative and other expenses', 36), (' Logistics and distribution', 32), (' Administrative expenses', 31), (' Administration expenses', 31), (' Selling & distribution expenses', 29), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Sales and marketing', 24), (' Amortisation expenses', 22), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Marketing expenses', 18), ('other expenses', 16), (' Other expenses', 16), (' Lease expenses', 16), (' Selling Expenses', 16), (' Other expenses', 16), (' Occupancy expenses', 14), (' Management expenses', 14), (' depreciation', 12), (' Occupancy ', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Administrative and other expenses', 36), (' Logistics and distribution', 32), (' Administrative expenses', 31), (' Administration expenses', 31), (' Selling & distribution expenses', 29), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Sales and marketing', 24), (' Amortisation expenses', 22), (' Depreciation expenses', 20), (' Depreciation expenses', 20), (' Marketing expenses', 18), ('other expenses', 16), (' Other expenses', 16), (' Lease expenses', 16), (' Selling Expenses', 16), (' Other expenses', 16), (' Occupancy expenses', 14), (' Management expenses', 14), (' depreciation', 12), (' Occupancy ', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Depreciation expenses', 56), (' Depreciation expenses', 56), (' Administrative expenses', 53), (' Administration expenses', 53), (' Amortisation expenses', 50), (' Advertising expenses', 49), ('Distribution expenses', 47), (' Administrative and other expenses', 46), (' Selling & distribution expenses', 42), (' Lease expenses', 36), (' Selling Expenses', 36), ('other expenses', 35), (' Occupancy expenses', 35), (' Other expenses', 35), (' Management expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Logistics and distribution', 33), (' Sales and marketing', 32), (' depreciation', 21), (' Occupancy ', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Depreciation expenses', 70), (' Depreciation expenses', 70), (' Amortisation expenses', 70), (' Advertising expenses', 59), (' Administrative and other expenses', 58), (' Administrative expenses', 57), (' Administration expenses', 57), ('Distribution expenses', 52), (' Selling & distribution expenses', 47), (' depreciation', 42), (' Logistics and distribution', 39), (' Sales and marketing', 39), ('other expenses', 32), (' Occupancy expenses', 32), (' Other expenses', 32), (' Lease expenses', 32), (' Selling Expenses', 32), (' Management expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' Occupancy ', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other expenses', 75), (' Other expenses', 75), (' Other expenses', 75), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Management expenses', 67), (' Marketing expenses', 64), (' Selling & distribution expenses', 48), (' Administrative and other expenses', 47), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' Sales and marketing', 37), (' depreciation', 32), (' Logistics and distribution', 31), (' Occupancy ', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Management expenses', 72), (' Lease expenses', 67), (' Occupancy expenses', 64), (' Marketing expenses', 62), (' Selling Expenses', 58), ('other expenses', 56), (' Other expenses', 56), (' Other expenses', 56), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Administrative and other expenses', 36), (' Logistics and distribution', 24), (' Sales and marketing', 21), (' Occupancy ', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' Administrative and other expenses', 39), (' Marketing expenses', 36), (' Amortisation expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), ('Distribution expenses', 32), (' Management expenses', 30), (' Logistics and distribution', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Lease expenses', 23), (' Selling Expenses', 23), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' depreciation', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Other expenses', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Advertising expenses', 27), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Management expenses', 24), (' Occupancy ', 22), (' Selling Expenses', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Sales and marketing', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Amortisation expenses', 26), (' Advertising expenses', 25), ('Distribution expenses', 24), (' Logistics and distribution', 21), (' Selling & distribution expenses', 20), (' Selling Expenses', 20), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [(' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Logistics and distribution', 37), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Administrative and other expenses', 33), (' Selling & distribution expenses', 32), (' Advertising expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Administrative expenses', 31), (' Administration expenses', 31), ('other expenses', 29), (' Other expenses', 29), (' Selling Expenses', 29), (' Other expenses', 29), (' depreciation', 27), (' Amortisation expenses', 27), (' Occupancy expenses', 23), (' Occupancy ', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Administrative and other expenses', 43), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Marketing expenses', 32), (' Sales and marketing', 31), (' Lease expenses', 30), (' Management expenses', 29), (' Depreciation expenses', 28), (' Selling & distribution expenses', 28), (' Depreciation expenses', 28), (' Amortisation expenses', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Selling Expenses', 26), (' Occupancy expenses', 25), (' Logistics and distribution', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' depreciation', 16), (' Occupancy ', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' Selling & distribution expenses', 43), (' Administrative and other expenses', 40), ('Distribution expenses', 37), ('other expenses', 36), (' Other expenses', 36), (' Other expenses', 36), (' Logistics and distribution', 34), (' Sales and marketing', 34), (' Lease expenses', 29), (' Management expenses', 29), (' Marketing expenses', 28), (' Amortisation expenses', 28), (' Administrative expenses', 27), (' Administration expenses', 27), (' Advertising expenses', 27), (' Occupancy expenses', 25), (' Selling Expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 16), (' Occupancy ', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' Administrative and other expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('other expenses', 32), (' Other expenses', 32), (' Other expenses', 32), (' Marketing expenses', 31), (' depreciation', 30), ('Distribution expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Lease expenses', 27), (' Selling Expenses', 27), (' Depreciation expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Management expenses', 21), (' Occupancy expenses', 16), (' Occupancy ', 6)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -16552679.0, 'line_item_label': ['Other expenses'], 'note_numbers': [nan], 'line_item_value': [-16552679.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 31), (' Occupancy expenses', 26), ('Rent', 17), (' Occupancy', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 16), (' Occupancy expenses', 14), (' Occupancy', 10), ('Rent', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 16), (' Occupancy expenses', 14), (' Occupancy', 10), ('Rent', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Administration expenses', 57), (' Occupancy expenses', 32), (' Rental expenses', 31), ('Rent', 20), (' Occupancy', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' Rental expenses', 80), (' Occupancy expenses', 67), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 64), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' Rental expenses', 29), (' Administration expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), ('Rent', 31), (' Occupancy expenses', 19), (' Occupancy', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [(' Rental expenses', 39), (' Administration expenses', 31), ('Rent', 30), (' Occupancy expenses', 23), (' Occupancy', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' Rental expenses', 26), (' Administration expenses', 24), ('Rent', 20), (' Occupancy expenses', 16), (' Occupancy', 6)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 80, 'value': -37084854.0, 'line_item_label': ['Total expenses'], 'note_numbers': [nan], 'line_item_value': [-37084854.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [(' Administration expenses', 34), (' Rental expenses', 31), (' Occupancy expenses', 26), ('Rent', 17), (' Occupancy', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 16), (' Occupancy expenses', 14), (' Occupancy', 10), ('Rent', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Administration expenses', 31), (' Rental expenses', 16), (' Occupancy expenses', 14), (' Occupancy', 10), ('Rent', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Administration expenses', 53), (' Occupancy expenses', 35), (' Rental expenses', 34), ('Rent', 23), (' Occupancy', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Administration expenses', 57), (' Occupancy expenses', 32), (' Rental expenses', 31), ('Rent', 20), (' Occupancy', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' Rental expenses', 80), (' Occupancy expenses', 67), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 64), (' Administration expenses', 41), ('Rent', 24), (' Occupancy', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' Rental expenses', 29), (' Administration expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), ('Rent', 31), (' Occupancy expenses', 19), (' Occupancy', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [(' Rental expenses', 39), (' Administration expenses', 31), ('Rent', 30), (' Occupancy expenses', 23), (' Occupancy', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' Rental expenses', 35), (' Administration expenses', 27), (' Occupancy expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' Rental expenses', 26), (' Administration expenses', 24), ('Rent', 20), (' Occupancy expenses', 16), (' Occupancy', 6)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 80, 'value': -38840232.0, 'line_item_label': ['Total expenses'], 'note_numbers': [nan], 'line_item_value': [-38840232.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('other operating', 55), (' Other income', 53), ('Other revenue', 32)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Other income', 21), ('Other revenue', 18), ('other operating', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Other income', 21), ('Other revenue', 18), ('other operating', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('Other revenue', 42), ('other operating', 28), (' Other income', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Other income', 70), ('other operating', 32), ('Other revenue', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('other operating', 30), ('Other revenue', 29), (' Other income', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('other operating', 38), (' Other income', 37), ('Other revenue', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('other operating', 39), ('Other revenue', 32), (' Other income', 32)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('other operating', 55), (' Other income', 53), ('Other revenue', 32)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Other income', 21), ('Other revenue', 18), ('other operating', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Other income', 21), ('Other revenue', 18), ('other operating', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('Other revenue', 35), ('other operating', 25), (' Other income', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('Other revenue', 42), ('other operating', 28), (' Other income', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' Other income', 70), ('other operating', 32), ('Other revenue', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('other operating', 30), ('Other revenue', 29), (' Other income', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('other operating', 38), (' Other income', 37), ('Other revenue', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('other operating', 39), ('Other revenue', 32), (' Other income', 32)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('other income', 53), (' Finance income and costs', 45), (' Finance income and finance costs', 38), (' Net finance costs', 35), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Finance income and finance costs', 35), (' Finance income and costs', 33), (' Net finance costs', 24), (' Interest revenue', 22), ('other income', 21), ('finance income', 21), ('Finance income', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Finance income and finance costs', 35), (' Finance income and costs', 33), (' Net finance costs', 24), (' Interest revenue', 22), ('other income', 21), ('finance income', 21), ('Finance income', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), ('other income', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Net finance costs', 57), (' Finance income and costs', 53), ('finance income', 48), ('Finance income', 48), (' Finance income and finance costs', 44), (' Interest revenue', 36), ('other income', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Net finance costs', 38), (' Finance income and finance costs', 36), (' Finance income and costs', 33), (' Interest revenue', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('other income', 70), ('finance income', 48), ('Finance income', 48), (' Net finance costs', 42), (' Finance income and costs', 33), (' Finance income and finance costs', 27), (' Interest revenue', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [(' Interest revenue', 32), (' Net finance costs', 32), ('other income', 29), ('finance income', 29), ('Finance income', 29), (' Finance income and costs', 27), (' Finance income and finance costs', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Net finance costs', 41), ('other income', 37), (' Finance income and finance costs', 37), (' Finance income and costs', 34), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' Finance income and costs', 40), (' Net finance costs', 37), ('other income', 36), (' Finance income and finance costs', 36), (' Interest revenue', 31), ('finance income', 29), ('Finance income', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('other income', 32), (' Finance income and costs', 30), (' Interest revenue', 29), ('finance income', 26), ('Finance income', 26), (' Finance income and finance costs', 26), (' Net finance costs', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 100, 'value': -65070.0, 'line_item_label': ['Finance income', 'Finance costs net'], 'note_numbers': [7.0, 7.0], 'line_item_value': [546.0, -65616.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('other income', 53), (' Finance income and costs', 45), (' Finance income and finance costs', 38), (' Net finance costs', 35), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Finance income and finance costs', 35), (' Finance income and costs', 33), (' Net finance costs', 24), (' Interest revenue', 22), ('other income', 21), ('finance income', 21), ('Finance income', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' Finance income and finance costs', 35), (' Finance income and costs', 33), (' Net finance costs', 24), (' Interest revenue', 22), ('other income', 21), ('finance income', 21), ('Finance income', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' Interest revenue', 43), ('other income', 24), ('finance income', 24), ('Finance income', 24), (' Finance income and finance costs', 24), (' Finance income and costs', 23), (' Net finance costs', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 39), (' Finance income and costs', 38), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32), ('other income', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' Net finance costs', 57), (' Finance income and costs', 53), ('finance income', 48), ('Finance income', 48), (' Finance income and finance costs', 44), (' Interest revenue', 36), ('other income', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Net finance costs', 38), (' Finance income and finance costs', 36), (' Finance income and costs', 33), (' Interest revenue', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('other income', 70), ('finance income', 48), ('Finance income', 48), (' Net finance costs', 42), (' Finance income and costs', 33), (' Finance income and finance costs', 27), (' Interest revenue', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [(' Interest revenue', 32), (' Net finance costs', 32), ('other income', 29), ('finance income', 29), ('Finance income', 29), (' Finance income and costs', 27), (' Finance income and finance costs', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' Net finance costs', 41), ('other income', 37), (' Finance income and finance costs', 37), (' Finance income and costs', 34), ('finance income', 25), ('Finance income', 25), (' Interest revenue', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' Finance income and costs', 40), (' Net finance costs', 37), ('other income', 36), (' Finance income and finance costs', 36), (' Interest revenue', 31), ('finance income', 29), ('Finance income', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('other income', 32), (' Finance income and costs', 30), (' Interest revenue', 29), ('finance income', 26), ('Finance income', 26), (' Finance income and finance costs', 26), (' Net finance costs', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 10], 'score': 100, 'value': -14262.0, 'line_item_label': ['Finance income', 'Finance costs net'], 'note_numbers': [7.0, 7.0], 'line_item_value': [20355.0, -34617.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 22), ('finance costs', 22), (' finance expenses', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 10], 'score': 100, 'value': -131778.0, 'line_item_label': ['Finance expenses', 'Finance costs net'], 'note_numbers': [7.0, 7.0], 'line_item_value': [-66162.0, -65616.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 22), ('finance costs', 22), (' finance expenses', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 10], 'score': 100, 'value': -89589.0, 'line_item_label': ['Finance expenses', 'Finance costs net'], 'note_numbers': [7.0, 7.0], 'line_item_value': [-54972.0, -34617.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 22), ('finance costs', 22), (' finance expenses', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 10], 'score': 100, 'value': -131778.0, 'line_item_label': ['Finance expenses', 'Finance costs net'], 'note_numbers': [7.0, 7.0], 'line_item_value': [-66162.0, -65616.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 19), ('finance costs', 19), (' finance expenses', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' finance expenses', 34), (' net finance costs ', 22), ('finance cost', 18), ('finance costs', 18)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 32), ('finance costs', 32), (' finance expenses', 31)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' finance expenses', 100), ('finance cost', 67), ('finance costs', 67), (' net finance costs ', 57)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [(' finance expenses', 33), (' net finance costs ', 32), ('finance cost', 29), ('finance costs', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [(' net finance costs ', 41), (' finance expenses', 32), ('finance cost', 30), ('finance costs', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' net finance costs ', 37), (' finance expenses', 32), ('finance cost', 29), ('finance costs', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' net finance costs ', 24), ('finance cost', 22), ('finance costs', 22), (' finance expenses', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [8, 10], 'score': 100, 'value': -89589.0, 'line_item_label': ['Finance expenses', 'Finance costs net'], 'note_numbers': [7.0, 7.0], 'line_item_value': [-54972.0, -34617.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('NULL', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('NULL', 5)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('NULL', 5)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('NULL', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('NULL', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('NULL', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('NULL', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('NULL', 5)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('NULL', 5)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('NULL', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('NULL', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('NULL', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('amount transferred to retained earnings', 43), ('earlier year', 39), ('minimum alternate tax credit entitlement', 35), (' income tax expense', 34), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax', 29), ('prior year ', 28), ('current tax', 27), (' tax (expense)/benefit', 27), ('deferred tax', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('amount transferred to retained earnings', 33), ('provision for taxation previous year', 31), ('minimum alternate tax credit entitlement', 28), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 24), (' income tax benefit', 22), ('earlier year', 21), (' income tax expense', 20), ('current tax', 19), ('deferred tax', 17), (' income tax', 17), ('prior year ', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('amount transferred to retained earnings', 33), ('provision for taxation previous year', 31), ('minimum alternate tax credit entitlement', 28), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 24), (' income tax benefit', 22), ('earlier year', 21), (' income tax expense', 20), ('current tax', 19), ('deferred tax', 17), (' income tax', 17), ('prior year ', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('amount transferred to retained earnings', 53), (' tax (expense)/benefit', 45), (' income tax benefit/(expense)', 40), ('earlier year', 37), ('provision for taxation previous year', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('prior year ', 28), (' income tax benefit', 28), ('current tax', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' income tax expense', 71), (' tax (expense)/benefit', 60), (' income tax benefit/(expense)', 56), ('deferred tax', 48), ('current tax', 43), (' income tax benefit', 41), (' income tax', 38), ('provision for taxation previous year', 34), ('earlier year', 33), ('amount transferred to retained earnings', 31), ('minimum alternate tax credit entitlement', 27), ('prior year ', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('deferred tax', 36), ('amount transferred to retained earnings', 35), ('current tax', 33), ('earlier year', 32), ('minimum alternate tax credit entitlement', 31), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 35)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' income tax', 100), (' income tax expense', 72), (' income tax benefit', 69), (' income tax benefit/(expense)', 55), ('current tax', 50), ('deferred tax', 44), (' tax (expense)/benefit', 44), ('prior year ', 42), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 32), ('earlier year', 29), ('amount transferred to retained earnings', 28)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('current tax', 53), ('deferred tax', 44), ('amount transferred to retained earnings', 44), ('provision for taxation previous year', 38), (' income tax expense', 36), (' income tax benefit', 35), ('earlier year', 34), (' tax (expense)/benefit', 34), ('minimum alternate tax credit entitlement', 33), (' income tax', 31), ('prior year ', 30), (' income tax benefit/(expense)', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('provision for taxation previous year', 47), (' income tax expense', 47), (' income tax benefit', 43), (' income tax benefit/(expense)', 42), ('amount transferred to retained earnings', 40), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('prior year ', 34), ('current tax', 33), ('earlier year', 33), ('deferred tax', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' income tax benefit/(expense)', 47), ('provision for taxation previous year', 44), (' income tax expense', 43), (' income tax benefit', 43), ('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 42), ('earlier year', 36), ('prior year ', 33), (' tax (expense)/benefit', 32), (' income tax', 30), ('current tax', 29), ('deferred tax', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 38), ('earlier year', 37), (' tax (expense)/benefit', 36), ('deferred tax', 34), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 33), ('prior year ', 33), (' income tax benefit', 33), (' income tax expense', 29), ('current tax', 27), (' income tax', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 1246265.0, 'line_item_label': ['Income tax'], 'note_numbers': [8.0], 'line_item_value': [1246265.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('amount transferred to retained earnings', 43), ('earlier year', 39), ('minimum alternate tax credit entitlement', 35), (' income tax expense', 34), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax', 29), ('prior year ', 28), ('current tax', 27), (' tax (expense)/benefit', 27), ('deferred tax', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('amount transferred to retained earnings', 33), ('provision for taxation previous year', 31), ('minimum alternate tax credit entitlement', 28), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 24), (' income tax benefit', 22), ('earlier year', 21), (' income tax expense', 20), ('current tax', 19), ('deferred tax', 17), (' income tax', 17), ('prior year ', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('amount transferred to retained earnings', 33), ('provision for taxation previous year', 31), ('minimum alternate tax credit entitlement', 28), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 24), (' income tax benefit', 22), ('earlier year', 21), (' income tax expense', 20), ('current tax', 19), ('deferred tax', 17), (' income tax', 17), ('prior year ', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [(' tax (expense)/benefit', 70), (' income tax benefit/(expense)', 61), (' income tax benefit', 56), ('minimum alternate tax credit entitlement', 37), ('amount transferred to retained earnings', 33), ('deferred tax', 32), (' income tax expense', 32), ('provision for taxation previous year', 31), ('current tax', 30), ('earlier year', 29), (' income tax', 26), ('prior year ', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('amount transferred to retained earnings', 53), (' tax (expense)/benefit', 45), (' income tax benefit/(expense)', 40), ('earlier year', 37), ('provision for taxation previous year', 36), ('minimum alternate tax credit entitlement', 34), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('prior year ', 28), (' income tax benefit', 28), ('current tax', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [(' income tax expense', 71), (' tax (expense)/benefit', 60), (' income tax benefit/(expense)', 56), ('deferred tax', 48), ('current tax', 43), (' income tax benefit', 41), (' income tax', 38), ('provision for taxation previous year', 34), ('earlier year', 33), ('amount transferred to retained earnings', 31), ('minimum alternate tax credit entitlement', 27), ('prior year ', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [(' income tax expense', 69), (' income tax benefit/(expense)', 54), (' tax (expense)/benefit', 52), (' income tax benefit', 40), ('deferred tax', 36), ('amount transferred to retained earnings', 35), ('current tax', 33), ('earlier year', 32), ('minimum alternate tax credit entitlement', 31), (' income tax', 27), ('prior year ', 26), ('provision for taxation previous year', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 35)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [(' income tax', 100), (' income tax expense', 72), (' income tax benefit', 69), (' income tax benefit/(expense)', 55), ('current tax', 50), ('deferred tax', 44), (' tax (expense)/benefit', 44), ('prior year ', 42), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 32), ('earlier year', 29), ('amount transferred to retained earnings', 28)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('current tax', 53), ('deferred tax', 44), ('amount transferred to retained earnings', 44), ('provision for taxation previous year', 38), (' income tax expense', 36), (' income tax benefit', 35), ('earlier year', 34), (' tax (expense)/benefit', 34), ('minimum alternate tax credit entitlement', 33), (' income tax', 31), ('prior year ', 30), (' income tax benefit/(expense)', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('provision for taxation previous year', 47), (' income tax expense', 47), (' income tax benefit', 43), (' income tax benefit/(expense)', 42), ('amount transferred to retained earnings', 40), (' tax (expense)/benefit', 36), ('minimum alternate tax credit entitlement', 35), (' income tax', 35), ('prior year ', 34), ('current tax', 33), ('earlier year', 33), ('deferred tax', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [(' income tax benefit/(expense)', 47), ('provision for taxation previous year', 44), (' income tax expense', 43), (' income tax benefit', 43), ('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 42), ('earlier year', 36), ('prior year ', 33), (' tax (expense)/benefit', 32), (' income tax', 30), ('current tax', 29), ('deferred tax', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [(' income tax benefit/(expense)', 40), ('amount transferred to retained earnings', 38), ('earlier year', 37), (' tax (expense)/benefit', 36), ('deferred tax', 34), ('minimum alternate tax credit entitlement', 34), ('provision for taxation previous year', 33), ('prior year ', 33), (' income tax benefit', 33), (' income tax expense', 29), ('current tax', 27), (' income tax', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': -1814535.0, 'line_item_label': ['Income tax'], 'note_numbers': [8.0], 'line_item_value': [-1814535.0]}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('share of', 17), ('share in', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('prior period', 26), ('exceptional', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('prior period', 18), ('exceptional', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('prior period', 18), ('exceptional', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('prior period', 37), ('exceptional', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('exceptional', 32), ('prior period', 32)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [('exceptional', 29), ('prior period', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('prior period', 29), ('exceptional', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('exceptional', 28), ('prior period', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('prior period', 29), ('exceptional', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [('prior period', 29), ('exceptional', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('prior period', 37), ('exceptional', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('prior period', 26), ('exceptional', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('prior period', 18), ('exceptional', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('prior period', 18), ('exceptional', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('prior period', 29), ('exceptional', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('prior period', 37), ('exceptional', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('exceptional', 32), ('prior period', 32)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [('exceptional', 29), ('prior period', 22)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 29)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('prior period', 29), ('exceptional', 27)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('exceptional', 28), ('prior period', 23)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('prior period', 29), ('exceptional', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [('prior period', 29), ('exceptional', 16)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('prior period', 37), ('exceptional', 19)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:27:32+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-09 17:27:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('NULL', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('NULL', 5)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('NULL', 5)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('NULL', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('NULL', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('NULL', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:27:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:27:32+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other galns/(losses) net , res_fuzz_match = [('NULL', 17)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('NULL', 5)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = changes in inventories of finished goods and work in progress and raw materials and consumables used , res_fuzz_match = [('NULL', 5)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = employee benefits expense , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = depreciation and amortisation expense , res_fuzz_match = [('NULL', 7)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total expenses , res_fuzz_match = [('NULL', 25)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = finance costs net , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = income tax , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = currency translation differences , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year, net of tax , res_fuzz_match = [('NULL', 9)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year is attributable to: , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - txt_particular = equity holders of lawter (n.z.) limited , res_fuzz_match = [('NULL', 20)]
2023-08-09 17:27:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-09 17:52:53+0530 - sLogger - DEBUG - process_main_pages started
2023-08-09 17:52:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:52:53+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:52:53+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:52:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:52:53+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:52:53+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:52:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-09 17:52:53+0530 - sLogger - DEBUG - start_refactoring started
2023-08-09 17:52:53+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-09 17:52:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-09 17:52:53+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:52:53+0530 - sLogger - DEBUG - CurrentAssets | [('currentassets', 100), ('noncurrentassets', 89), ('currentliabilities', 67), ('current liabilities', 62), ('assets', 59), ('noncurrentliabilities', 58), ('current assets', 56), ('noncurrent assets', 40), ('noncurrent liabilities', 31), ('equityandliabilities', 26), ('equity liabilities', 24), ('equity', 22), ('equity and liabilities', 21), ('equityliabilities', 20), ('liabilities', 11)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD current assets | score 96
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD currentassets | score 100
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD current liabilities | score 62
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD currentliabilities | score 65
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrent assets | score 87
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrentassets | score 90
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrent liabilities | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD non current assets | score 84
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD non current liabilities | score 56
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrentliabilities | score 59
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrentassets | score 90
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrentliabilities | score 59
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD equity and liabilities | score 29
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD equityandliabilities | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Cash and bank balances | [('equity and liabilities', 38), ('noncurrent liabilities', 35), ('noncurrentassets', 34), ('noncurrent assets', 30), ('current liabilities', 29), ('equityandliabilities', 26), ('currentassets', 25), ('noncurrentliabilities', 25), ('current assets', 24), ('equity liabilities', 24), ('liabilities', 23), ('assets', 16), ('currentliabilities', 14), ('equityliabilities', 7), ('equity', 0)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD current assets | score 33
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD currentassets | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD current liabilities | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD currentliabilities | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrent assets | score 31
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrentassets | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD non current assets | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD non current liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrentliabilities | score 33
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrentassets | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrentliabilities | score 33
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD equity and liabilities | score 45
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD equity | score 15
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD equityandliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Prepayments | [('currentassets', 33), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equityandliabilities', 24), ('noncurrentliabilities', 22), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentassets | score 50
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentliabilities | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equityandliabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Current Tax Asset | [('current assets', 87), ('noncurrent assets', 67), ('current liabilities', 58), ('currentassets', 55), ('currentliabilities', 54), ('noncurrentassets', 50), ('noncurrentliabilities', 48), ('assets', 45), ('noncurrent liabilities', 39), ('equity and liabilities', 35), ('equity liabilities', 33), ('equityandliabilities', 29), ('equity', 26), ('equityliabilities', 24), ('liabilities', 9)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD current assets | score 84
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD currentassets | score 80
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD current liabilities | score 56
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD currentliabilities | score 51
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrent assets | score 76
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrentassets | score 73
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrent liabilities | score 51
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD non current assets | score 76
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD non current liabilities | score 55
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrentliabilities | score 47
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrentassets | score 73
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrentliabilities | score 47
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD equity and liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD equityandliabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Total CurrentAssets | [('currentassets', 80), ('noncurrentassets', 73), ('current liabilities', 62), ('currentliabilities', 59), ('noncurrentliabilities', 53), ('current assets', 45), ('noncurrent assets', 45), ('assets', 43), ('equity and liabilities', 34), ('equity liabilities', 32), ('equityandliabilities', 28), ('noncurrent liabilities', 25), ('equityliabilities', 23), ('liabilities', 17), ('equity', 17)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD current assets | score 79
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD currentassets | score 95
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD current liabilities | score 53
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD currentliabilities | score 54
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrent assets | score 78
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrentassets | score 80
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrent liabilities | score 54
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD non current assets | score 81
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD non current liabilities | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrentliabilities | score 55
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrentassets | score 80
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrentliabilities | score 55
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD equity and liabilities | score 29
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD equityandliabilities | score 31
2023-08-09 17:52:53+0530 - sLogger - DEBUG - NonCurrent Assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD current assets | score 90
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD currentassets | score 87
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD current liabilities | score 61
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD currentliabilities | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrent assets | score 100
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrentassets | score 97
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrent liabilities | score 72
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD non current assets | score 97
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD non current liabilities | score 70
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrentliabilities | score 68
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrentassets | score 97
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrentliabilities | score 68
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD equity and liabilities | score 31
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD equityandliabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Plant and equipment | [('equity and liabilities', 69), ('equity liabilities', 50), ('equity', 48), ('equityandliabilities', 46), ('equityliabilities', 43), ('current assets', 36), ('assets', 30), ('noncurrentliabilities', 30), ('noncurrent assets', 29), ('liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('currentliabilities', 25), ('currentassets', 22)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD current assets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD currentassets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD current liabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD currentliabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrent assets | score 33
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrentassets | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrent liabilities | score 29
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD non current assets | score 41
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD non current liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrentassets | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD equity and liabilities | score 60
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD equity | score 60
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD equityandliabilities | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Investment property | [('current assets', 43), ('noncurrentliabilities', 37), ('noncurrent assets', 36), ('noncurrentassets', 33), ('currentliabilities', 33), ('equity and liabilities', 31), ('assets', 30), ('currentassets', 30), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('equityandliabilities', 23), ('liabilities', 19)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD current assets | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD currentassets | score 31
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD current liabilities | score 26
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD currentliabilities | score 22
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrent assets | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrentassets | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrent liabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD non current assets | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD non current liabilities | score 29
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrentliabilities | score 25
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrentassets | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrentliabilities | score 25
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD equity and liabilities | score 24
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD equity | score 45
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD equityandliabilities | score 26
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Total NonCurrent Assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD current assets | score 90
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD currentassets | score 83
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD current liabilities | score 52
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD currentliabilities | score 49
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrent assets | score 95
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrentassets | score 82
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrent liabilities | score 62
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD non current assets | score 83
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD non current liabilities | score 61
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrentliabilities | score 59
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrentassets | score 82
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrentliabilities | score 59
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD equity and liabilities | score 31
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD equityandliabilities | score 28
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Total Assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD current assets | score 64
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD currentassets | score 56
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD current liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD currentliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrent assets | score 64
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD non current assets | score 86
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD non current liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentassets | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equity and liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equityandliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Current Liabilities | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD current assets | score 67
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD currentassets | score 62
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD current liabilities | score 100
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD currentliabilities | score 97
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrent assets | score 61
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrentassets | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrent liabilities | score 93
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD non current assets | score 59
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD non current liabilities | score 95
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrentassets | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD equity and liabilities | score 69
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD equityandliabilities | score 67
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Current tax liability | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD current assets | score 86
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD currentassets | score 56
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD current liabilities | score 80
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD currentliabilities | score 77
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrent assets | score 53
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentassets | score 49
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrent liabilities | score 74
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD non current assets | score 53
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD non current liabilities | score 73
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentliabilities | score 71
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentassets | score 49
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentliabilities | score 71
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equity and liabilities | score 60
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equity | score 45
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equityandliabilities | score 54
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Contract liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrentliabilities', 44), ('currentliabilities', 42), ('noncurrent liabilities', 41), ('currentassets', 37), ('noncurrentassets', 33), ('equityandliabilities', 31), ('equityliabilities', 26), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current assets | score 41
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentassets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current liabilities | score 77
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentliabilities | score 74
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent assets | score 43
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent liabilities | score 76
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current assets | score 42
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current liabilities | score 74
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity and liabilities | score 67
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equityandliabilities | score 65
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Total Current Liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD current assets | score 86
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD currentassets | score 56
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD current liabilities | score 95
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD currentliabilities | score 84
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrent assets | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentassets | score 54
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD non current assets | score 60
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD non current liabilities | score 88
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentassets | score 54
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equity and liabilities | score 64
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equityandliabilities | score 62
2023-08-09 17:52:53+0530 - sLogger - DEBUG - NonCurrent Liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD current assets | score 61
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD currentassets | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD current liabilities | score 93
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD currentliabilities | score 90
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrent assets | score 72
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrentassets | score 68
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrent liabilities | score 100
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD non current assets | score 70
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD non current liabilities | score 98
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrentassets | score 68
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD equity and liabilities | score 65
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD equityandliabilities | score 62
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Contract liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrentliabilities', 44), ('currentliabilities', 42), ('noncurrent liabilities', 41), ('currentassets', 37), ('noncurrentassets', 33), ('equityandliabilities', 31), ('equityliabilities', 26), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current assets | score 41
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentassets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current liabilities | score 77
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentliabilities | score 74
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent assets | score 43
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent liabilities | score 76
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current assets | score 42
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current liabilities | score 74
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity and liabilities | score 67
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equityandliabilities | score 65
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Total NonCurrent Liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD current assets | score 61
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD currentassets | score 56
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD current liabilities | score 81
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD currentliabilities | score 85
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrent assets | score 86
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrentassets | score 62
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD non current assets | score 61
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD non current liabilities | score 86
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrentassets | score 62
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD equity and liabilities | score 64
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD equityandliabilities | score 58
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Total Liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD current assets | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD currentassets | score 27
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD current liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD currentliabilities | score 69
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrent assets | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentassets | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD non current assets | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD non current liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentassets | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equity and liabilities | score 75
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equityandliabilities | score 70
2023-08-09 17:52:53+0530 - sLogger - DEBUG - NetAssets | [('assets', 77), ('currentassets', 70), ('noncurrentassets', 70), ('current assets', 48), ('noncurrent assets', 48), ('equity and liabilities', 32), ('equityandliabilities', 32), ('noncurrentliabilities', 30), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 27), ('equityliabilities', 25), ('currentliabilities', 24), ('liabilities', 14), ('noncurrent liabilities', 9)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD current assets | score 80
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD currentassets | score 73
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD current liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD currentliabilities | score 37
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrent assets | score 80
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrentassets | score 80
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrent liabilities | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD non current assets | score 80
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD non current liabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrentassets | score 80
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD equity and liabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD equityandliabilities | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('currentassets', 36), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('liabilities', 25)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentassets | score 42
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentliabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equityandliabilities | score 33
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-09 17:52:53+0530 - sLogger - DEBUG - Total Equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD current assets | score 31
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD currentassets | score 32
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD current liabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD currentliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrent assets | score 34
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentassets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrent liabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD non current assets | score 33
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD non current liabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentassets | score 36
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentliabilities | score 38
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equity and liabilities | score 86
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equity | score 90
2023-08-09 17:52:53+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equityandliabilities | score 57
2023-08-09 17:52:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-09 17:52:53+0530 - sLogger - DEBUG - set_section_details started
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating Activities | working capital adjustments
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest and other costs of finance paid | operating profit before changes in assets and liabilities
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax paid | changes in working capital
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax refunded | movements in working capital
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from operating activities | operating cash flow before working capital changes
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing Activities | movements in working capital
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for plant and equipment | adiustments for movements in working capital
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for intangible assets (Note 13) | operating profit before changes in assets and liabilities
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing Activities | changes in working capital
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of principal portion oflease liabilities | movements in working capital
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of dividends | movements in working capital
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Idecrease/increase in Cash and Cash Equivalents | adjustments for increase decrease in operating assets
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the beginning ofthe | changes in operating assets and liabilities
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- year | changes in working capital
2023-08-09 17:52:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the end of the year | changes in operating assets and liabilities
2023-08-09 17:52:54+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-09 17:52:54+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-09 17:52:54+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-09 17:52:54+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-09 17:52:54+0530 - sLogger - ERROR - error occured: 'value'
2023-08-09 17:52:55+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-09 17:52:57+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset']
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-09 17:52:57+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-09 17:52:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:57+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('cash asset', 45), ('cash asset', 45), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('other bank balances', 28), ('bank balances other than above', 26), ('cash and short term deposits', 26), ('Cash and short term deposits', 26), ('bank balances other than cash and cash equivalents', 25), ('cash and bank balances', 25)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('cash and bank balances', 100), ('other bank balances', 70), ('bank balances other than above', 64), ('bank balances other than cash and cash equivalents', 62), ('cash and cash equivalents', 54), (' cash and cash equivalents', 54), ('cash asset', 40), ('cash asset', 40), ('cash and short term deposits', 38), ('Cash and short term deposits', 38)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('cash asset', 59), ('cash asset', 59), ('cash and short term deposits', 41), ('Cash and short term deposits', 41), ('bank balances other than above', 36), ('cash and cash equivalents', 32), ('cash and bank balances', 32), (' cash and cash equivalents', 32), ('bank balances other than cash and cash equivalents', 30), ('other bank balances', 29)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('cash asset', 50), ('cash asset', 50), ('cash and cash equivalents', 36), ('cash and short term deposits', 36), (' cash and cash equivalents', 36), ('Cash and short term deposits', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('other bank balances', 29), ('cash and bank balances', 21)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 231379.0, 'line_item_label': ['Cash and bank balances'], 'note_numbers': ['20(a)'], 'line_item_value': [231379.0]}
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:57+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents', 'cash asset', 'Cash and short term deposits', 'cash asset'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('cash asset', 45), ('cash asset', 45), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('other bank balances', 28), ('bank balances other than above', 26), ('cash and short term deposits', 26), ('Cash and short term deposits', 26), ('bank balances other than cash and cash equivalents', 25), ('cash and bank balances', 25)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('cash and bank balances', 100), ('other bank balances', 70), ('bank balances other than above', 64), ('bank balances other than cash and cash equivalents', 62), ('cash and cash equivalents', 54), (' cash and cash equivalents', 54), ('cash asset', 40), ('cash asset', 40), ('cash and short term deposits', 38), ('Cash and short term deposits', 38)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31), ('cash asset', 31)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash asset', 21), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('cash asset', 59), ('cash asset', 59), ('cash and short term deposits', 41), ('Cash and short term deposits', 41), ('bank balances other than above', 36), ('cash and cash equivalents', 32), ('cash and bank balances', 32), (' cash and cash equivalents', 32), ('bank balances other than cash and cash equivalents', 30), ('other bank balances', 29)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('cash asset', 50), ('cash asset', 50), ('cash and cash equivalents', 36), ('cash and short term deposits', 36), (' cash and cash equivalents', 36), ('Cash and short term deposits', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('other bank balances', 29), ('cash and bank balances', 21)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 187655.0, 'line_item_label': ['Cash and bank balances'], 'note_numbers': ['20(a)'], 'line_item_value': [187655.0]}
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-09 17:52:57+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-09 17:52:57+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-09 17:52:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:57+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('inventories', 22)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 255028.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [255028.0]}
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:57+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('inventories', 22)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('inventories', 33)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 237402.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [237402.0]}
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:57+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = total finished goods (at cost) , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' goods in transit', 58), (' stores and other consumables at cost', 45), (' provision for inventory obsolescence', 41), (' inventories', 33), (' work in progress', 31), (' cranes - in transit', 31), ('raw materials', 30), (' raw materials', 30), (' cranes', 20), (' spare parts', 20)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = total parts and accessories (at cost) , res_fuzz_match = [(' stores and other consumables at cost', 52), ('raw materials', 50), (' raw materials', 50), (' spare parts', 50), (' cranes - in transit', 46), (' finished goods at cost', 44), (' inventories', 44), (' goods in transit', 42), (' provision for inventory obsolescence', 41), (' cranes', 40), (' work in progress', 38), (' finished goods', 27), (' finished goods', 27)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' stores and other consumables at cost', 55), (' provision for inventory obsolescence', 45), (' finished goods at cost', 36), (' goods in transit', 36), (' cranes - in transit', 36), ('raw materials', 32), (' raw materials', 32), (' spare parts', 30), (' work in progress', 27), (' inventories', 22), (' cranes', 20), (' finished goods', 18), (' finished goods', 18)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = total finished goods (at cost) , res_fuzz_match = [(' finished goods', 100), (' finished goods at cost', 100), (' finished goods', 100), (' goods in transit', 58), (' stores and other consumables at cost', 45), (' provision for inventory obsolescence', 41), (' inventories', 33), (' work in progress', 31), (' cranes - in transit', 31), ('raw materials', 30), (' raw materials', 30), (' cranes', 20), (' spare parts', 20)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = total parts and accessories (at cost) , res_fuzz_match = [(' stores and other consumables at cost', 52), ('raw materials', 50), (' raw materials', 50), (' spare parts', 50), (' cranes - in transit', 46), (' finished goods at cost', 44), (' inventories', 44), (' goods in transit', 42), (' provision for inventory obsolescence', 41), (' cranes', 40), (' work in progress', 38), (' finished goods', 27), (' finished goods', 27)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' stores and other consumables at cost', 55), (' provision for inventory obsolescence', 45), (' finished goods at cost', 36), (' goods in transit', 36), (' cranes - in transit', 36), ('raw materials', 32), (' raw materials', 32), (' spare parts', 30), (' work in progress', 27), (' inventories', 22), (' cranes', 20), (' finished goods', 18), (' finished goods', 18)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [160160.0, 198827.0], 'label': ['Total Finished goods (at cost)', 'Total Finished goods (at cost)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-09 17:52:57+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-09 17:52:57+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-09 17:52:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:57+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('other current assets', 52), ('other current financial assets', 46), ('other assets', 43), ('prepayments', 33), ('other financial assets', 32)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('other financial assets', 36), ('other current financial assets', 34), ('other current assets', 31), ('other assets', 19), ('prepayments', 8)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('other current assets', 83), ('other current financial assets', 68), ('other financial assets', 50), ('other assets', 50), ('prepayments', 26)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('other assets', 55), ('other current assets', 54), ('other current financial assets', 49), ('other financial assets', 43), ('prepayments', 25)]
2023-08-09 17:52:57+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 83, 'value': 3207.0, 'line_item_label': ['Prepayments', 'Current Tax Asset'], 'note_numbers': [nan, nan], 'line_item_value': [3207.0, 0.0]}
2023-08-09 17:52:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:57+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('other current assets', 52), ('other current financial assets', 46), ('other assets', 43), ('prepayments', 33), ('other financial assets', 32)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('other financial assets', 36), ('other current financial assets', 34), ('other current assets', 31), ('other assets', 19), ('prepayments', 8)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('other current assets', 83), ('other current financial assets', 68), ('other financial assets', 50), ('other assets', 50), ('prepayments', 26)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('other assets', 55), ('other current assets', 54), ('other current financial assets', 49), ('other financial assets', 43), ('prepayments', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5], 'score': 83, 'value': 10721.0, 'line_item_label': ['Prepayments', 'Current Tax Asset'], 'note_numbers': [nan, nan], 'line_item_value': [3684.0, 7037.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('other current assets', 52), (' other current assets', 52), ('other assets', 43), (' biological assets', 42), (' financial assets', 40), (' trade and other receivables', 35), (' other financial assets', 32), (' deferred operating expenditure', 30), (' income tax receivable from related parties', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [(' financial assets', 36), (' other financial assets', 36), (' trade and other receivables', 33), ('other current assets', 31), (' other current assets', 31), (' income tax receivable from related parties', 30), (' biological assets', 25), (' deferred operating expenditure', 20), ('other assets', 19)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('other current assets', 83), (' other current assets', 83), (' financial assets', 53), ('other assets', 50), (' other financial assets', 50), (' income tax receivable from related parties', 44), (' biological assets', 41), (' trade and other receivables', 41), (' deferred operating expenditure', 32)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('other assets', 55), ('other current assets', 54), (' other current assets', 54), (' biological assets', 53), (' financial assets', 45), (' other financial assets', 43), (' income tax receivable from related parties', 35), (' trade and other receivables', 35), (' deferred operating expenditure', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 83, 'value': 22375.0, 'line_item_label': ['Trade and other receivables', 'Current Tax Asset'], 'note_numbers': ['8', nan], 'line_item_value': [22375.0, 0.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('other current assets', 52), (' other current assets', 52), ('other assets', 43), (' biological assets', 42), (' financial assets', 40), (' trade and other receivables', 35), (' other financial assets', 32), (' deferred operating expenditure', 30), (' income tax receivable from related parties', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [(' financial assets', 36), (' other financial assets', 36), (' trade and other receivables', 33), ('other current assets', 31), (' other current assets', 31), (' income tax receivable from related parties', 30), (' biological assets', 25), (' deferred operating expenditure', 20), ('other assets', 19)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('other current assets', 83), (' other current assets', 83), (' financial assets', 53), ('other assets', 50), (' other financial assets', 50), (' income tax receivable from related parties', 44), (' biological assets', 41), (' trade and other receivables', 41), (' deferred operating expenditure', 32)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('other assets', 55), ('other current assets', 54), (' other current assets', 54), (' biological assets', 53), (' financial assets', 45), (' other financial assets', 43), (' income tax receivable from related parties', 35), (' trade and other receivables', 35), (' deferred operating expenditure', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 83, 'value': 49685.0, 'line_item_label': ['Trade and other receivables', 'Current Tax Asset'], 'note_numbers': ['8', nan], 'line_item_value': [42648.0, 7037.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' interest receivable', 73), (' income tax receivable from related parties', 71), (' other deposits receivable - related party', 65), (' long service leave receivable', 59), (' other receivables - related party', 59), (' amount receivable from controlling entity', 59), (' related party receivable', 59), (' other debtors and prepayments', 48), ('foreign exchange derivatives at fair value', 47), (' electricity derivatives at fair value', 47), (' derivative contracts - fair value', 47), ('other assets', 45), (' condensate', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' forward exchange contracts', 41), (' other', 40), (' bank guarantee', 38), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' lng', 33), ('current', 29), (' related party disclosures', 29), (' deposits', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none allowance for expected credit losses , res_fuzz_match = [('current', 57), (' related party disclosures', 49), (' interest receivable', 47), (' forward exchange contracts', 46), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' other receivables - related party', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' electricity derivatives at fair value', 41), (' other deposits receivable - related party', 41), (' foreign exchange forward contracts', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' amount receivable from controlling entity', 39), (' derivative contracts - fair value', 38), (' other debtors and prepayments', 35), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none 41636 , res_fuzz_match = [(' condensate', 75), ('other assets', 50), ('foreign exchange derivatives at fair value', 50), (' accrued interest', 50), (' other', 50), (' income tax receivable from related parties', 50), (' derivative contracts - fair value', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' bank guarantee', 50), (' rental bond', 50), (' current investments', 50), (' foreign exchange forward contracts', 50), (' forward exchange contracts', 50), (' lng', 33), ('current', 25), (' electricity derivatives at fair value', 25), (' related party disclosures', 25), (' other deposits receivable - related party', 25), (' deposits', 25), (' related party receivable', 25), (' share of jv prepayments', 25), (' accrued rebates', 25), (' other debtors and prepayments', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total related party receivables - ultimate parent company , res_fuzz_match = [(' related party receivable', 100), (' related party disclosures', 67), (' other receivables - related party', 67), (' interest receivable', 67), (' other deposits receivable - related party', 59), ('current', 57), (' income tax receivable from related parties', 55), (' rental bond', 55), (' accrued rebates', 55), (' long service leave receivable', 52), (' amount receivable from controlling entity', 52), (' share of jv prepayments', 50), (' bank guarantee', 46), ('other assets', 45), (' electricity derivatives at fair value', 45), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' derivative contracts - fair value', 42), (' other', 40), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' accrued interest', 36), (' lng', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 67), (' interest receivable', 67), ('other assets', 64), (' income tax receivable from related parties', 56), (' other deposits receivable - related party', 56), (' related party receivable', 56), (' long service leave receivable', 50), (' amount receivable from controlling entity', 50), (' rental bond', 45), (' accrued rebates', 45), ('current', 43), (' accrued interest', 43), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 39), (' electricity derivatives at fair value', 39), (' derivative contracts - fair value', 39), (' foreign exchange forward contracts', 39), (' other debtors and prepayments', 39), (' current investments', 36), (' lng', 33), (' forward exchange contracts', 33), (' bank guarantee', 31), (' deposits', 29), (' condensate', 29), (' related party disclosures', 28)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total 2023 trade and other receivables, including related parties , res_fuzz_match = [(' other', 100), (' other deposits receivable - related party', 75), (' interest receivable', 73), (' other receivables - related party', 71), (' income tax receivable from related parties', 67), ('other assets', 64), (' accrued rebates', 64), (' related party receivable', 61), (' other debtors and prepayments', 57), (' related party disclosures', 52), (' amount receivable from controlling entity', 52), (' long service leave receivable', 48), (' derivative contracts - fair value', 46), (' forward exchange contracts', 46), ('foreign exchange derivatives at fair value', 45), (' electricity derivatives at fair value', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' current investments', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' lng', 33), (' condensate', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 3, 4, 4, 5, 5], 'score': [80, 80, 80, 100, 80, 100, 80, 100, 80], 'value': [41763.0, -127.0, 21783.0, 387.0, 387.0, 625.0, 625.0, 42648.0, 42648.0], 'label': ['Trade', 'Trade', 'Trade', 'Total Related party receivables - ultimate parent company', 'Trade', 'Total Other receivables', 'Trade', 'Total 2023 Trade and other receivables, including related parties', 'Trade'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns']}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none allowance for expected credit losses , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none 41636 , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total related party receivables - ultimate parent company , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total other receivables , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total 2023 trade and other receivables, including related parties , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_assets
2023-08-09 17:52:58+0530 - sLogger - ERROR - error occured: 2023
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69), ('plant and equipment', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 4935.0, 'line_item_label': ['Plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [4935.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69), ('plant and equipment', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5664.0, 'line_item_label': ['Plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [5664.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9, 10, 20, 21, 22, 23, 33, 34, 35, 36, 46, 47, 48, 49, 59, 60, 61, 62, 72, 73, 74, 75, 85, 86, 87, 88, 98, 99, 100, 101, 111, 112, 113, 114, 124, 125, 126, 127], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [-12.0, -7.0, 0.0, -19.0, -19.0, -9.0, 0.0, -28.0, -3610.0, -717.0, 52.0, -4275.0, -4275.0, -733.0, 49.0, -4959.0, -722.0, -100.0, 0.0, -822.0, -822.0, -120.0, 0.0, -942.0, 0.0, 0.0, 0.0, 0.0, -5116.0, 0.0, 0.0, 0.0, -4344.0, -824.0, 52.0, -5116.0, -5116.0, -862.0, 49.0, -5929.0], 'label': ['Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60), ('net value', 50), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('net value', 25), ('net book value', 24), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 50), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60), ('net value', 50), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('net value', 25), ('net book value', 24), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 50), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60), ('net value', 50), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('net value', 25), ('net book value', 24), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 50), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60), ('net value', 50), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('net value', 25), ('net book value', 24), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 50), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60), ('net value', 50), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('net value', 25), ('net book value', 24), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 50), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 26, 27, 28, 29, 30, 31, 32, 52, 53, 54, 55, 56, 57, 58, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100, 100, 100], 'value': [106.0, 0.0, 91.0, 0.0, 0.0, 0.0, 197.0, 7515.0, 0.0, 716.0, 0.0, -52.0, 0.0, 8179.0, 960.0, 0.0, 42.0, 0.0, 0.0, 0.0, 1002.0, 523.0, 523.0, 2645.0, 2645.0, -849.0, -849.0, -1624.0, -1624.0, 0.0, 0.0, -22.0, -22.0, 673.0, 673.0, 0.0, 0.0, 0.0, 0.0, 673.0, 523.0, 673.0, 2011.0, -1711.0, -403.0, 0.0, -5.0, 565.0, -5116.0, 0.0, 0.0, 0.0, 565.0, 673.0, 9104.0, 2645.0, 0.0, -1624.0, -52.0, -22.0, 10051.0], 'label': ['Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Cost At1 April 2021', "Capital work in progress $'000", 'Cost Additions', "Capital work in progress $'000", 'Cost Reclassification to PPE', "Capital work in progress $'000", 'Cost Reclassification to Investment Property & Intangible assets', "Capital work in progress $'000", 'Cost Disposals', "Capital work in progress $'000", 'Cost Write-offs', "Capital work in progress $'000", 'Cost At31 March 2022', "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = [''] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('tangible assets', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 80, 'value': 2547.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [2547.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('tangible assets', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 80, 'value': 1866.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [1866.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('goodwill on consolidatio', 40), ('goodwill', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('goodwill on consolidatio', 40), ('goodwill', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('goodwill on consolidatio', 33), ('goodwill', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets', 'intangible under development', 'intangible assets under development']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible assets', 58), ('intangible under development', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('intangible assets', 42), ('intangible under development', 40), ('intangible assets under development', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets', 58), ('intangible assets under development', 53), ('intangible under development', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets', 70), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 2547.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [2547.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['intangible assets', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible assets', 58), ('intangible under development', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('intangible assets', 50), ('intangible under development', 47), ('intangible assets under development', 47)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('intangible assets', 42), ('intangible under development', 40), ('intangible assets under development', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets', 58), ('intangible assets under development', 53), ('intangible under development', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets', 70), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1866.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [1866.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('donations', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('donations', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('investment', 100), (' investment in associate', 62), (' investment in joint venture', 60), (' investments accounted for using the equity method', 60), ('derivative financial instruments', 48), ('joint ventures and associates', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 11775.0, 'line_item_label': ['Investment property'], 'note_numbers': ['11'], 'line_item_value': [11775.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('investment', 100), (' investment in associate', 62), (' investment in joint venture', 60), (' investments accounted for using the equity method', 60), ('derivative financial instruments', 48), ('joint ventures and associates', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 11556.0, 'line_item_label': ['Investment property'], 'note_numbers': ['11'], 'line_item_value': [11556.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('investment in joint venture', 38), (' investment in associate', 38), (' carrying amount at the end of the financial year', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reclassification from ppe at31 march 2022 , res_fuzz_match = [(' investment in associate', 38), ('investment in joint venture', 37), (' carrying amount at the end of the financial year', 37)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [(' carrying amount at the end of the financial year', 39), (' investment in associate', 31), ('investment in joint venture', 26)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' carrying amount at the end of the financial year', 41), ('investment in joint venture', 37), (' investment in associate', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 42), (' investment in associate', 38), ('investment in joint venture', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 april 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 58), (' investment in associate', 38), ('investment in joint venture', 32)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification from ppe , res_fuzz_match = [(' carrying amount at the end of the financial year', 45), (' investment in associate', 38), ('investment in joint venture', 37)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [(' carrying amount at the end of the financial year', 58), (' investment in associate', 38), ('investment in joint venture', 32)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 42), (' investment in associate', 38), ('investment in joint venture', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' carrying amount at the end of the financial year', 41), ('investment in joint venture', 37), (' investment in associate', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' carrying amount at the end of the financial year', 42), (' investment in associate', 38), ('investment in joint venture', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('deferred tax assets', 40), ('deferred tax', 33), ('deferred charges', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 44553.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [44553.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('deferred tax assets', 40), ('deferred tax', 33), ('deferred charges', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 60999.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [60999.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: net (gain)/loss on actuarial gains and losses , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: total , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: net (gain)/loss on actuarial gains and losses , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: total , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 10, 11], 'score': [80, 80, 80, 80], 'value': [114.0, 114.0, -1.0, -1.0], 'label': ['Deferred tax related to items recognised in OCI during the year: Net (gain)/loss on actuarial gains and losses', 'Deferred tax related to items recognised in OCI during the year: Total', 'Deferred tax related to items recognised in OCI during the year: Net (gain)/loss on actuarial gains and losses', 'Deferred tax related to items recognised in OCI during the year: Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none accounting profit before tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses for tax purposes , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none income tax expense at effective tax rate , res_fuzz_match = [('deferred tax assets', 67), (' deferred tax balances', 56)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none accounting profit before tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses for tax purposes , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none income tax expense at effective tax rate , res_fuzz_match = [('deferred tax assets', 67), (' deferred tax balances', 56)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 87, 87, 87, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 87, 87, 87, 100, 100], 'value': [64.0, 58608.0, 1195.0, -2869.0, 3539.0, 595.0, -120.0, -13.0, 60999.0, 44553.0, 16585.0, -114.0, -25.0, 60999.0, -209.0, 42057.0, 867.0, -3465.0, 4666.0, 652.0, -4.0, -11.0, 44553.0, 26730.0, 17117.0, 1.0, 705.0, 44553.0], 'label': ['Deferred tax assets relate to the following: Unrealised foreign exchange gains', 'Deferred tax assets relate to the following: Provisions', 'Deferred tax assets relate to the following: Business related costs', 'Deferred tax assets relate to the following: Right-of-use assets', 'Deferred tax assets relate to the following: Lease liabilities', 'Deferred tax assets relate to the following: Fit out incentive received', 'Deferred tax assets relate to the following: Interest income not received', 'Deferred tax assets relate to the following: Prepaid insurance', 'Deferred tax assets relate to the following: Total deferred tax assets', 'Reconciliation ofdeferred tax assets: Asofl beginning of the period', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in profit or loss', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in other comprehensive income', 'Reconciliation ofdeferred tax assets: Adjustments in respect deferred tax assets of prior years As of the end ofthe period', 'Reconciliation ofdeferred tax assets: Adjustments in respect deferred tax assets of prior years As of the end ofthe period', 'Deferred tax assets relate to the following: Unrealised foreign exchange gains', 'Deferred tax assets relate to the following: Provisions', 'Deferred tax assets relate to the following: Business related costs', 'Deferred tax assets relate to the following: Right-of-use assets', 'Deferred tax assets relate to the following: Lease liabilities', 'Deferred tax assets relate to the following: Fit out incentive received', 'Deferred tax assets relate to the following: Interest income not received', 'Deferred tax assets relate to the following: Prepaid insurance', 'Deferred tax assets relate to the following: Total deferred tax assets', 'Reconciliation ofdeferred tax assets: Asofl beginning of the period', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in profit or loss', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in other comprehensive income', 'Reconciliation ofdeferred tax assets: Adjustments in respect deferred tax assets of prior years As of the end ofthe period', 'Reconciliation ofdeferred tax assets: Adjustments in respect deferred tax assets of prior years As of the end ofthe period'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('other assets', 46), (' other assets', 46), (' other non-current assets', 41), (' other non-current assets', 41), (' exploration and evaluation expenditure', 38), (' loan receivables', 38), (' leased assets', 32), (' financial assets', 29), ('non-current', 27), (' leases', 21)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 80, 'value': 2547.0, 'line_item_label': ['Non-Current Assets', 'Intangible assets'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 2547.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('other assets', 46), (' other assets', 46), (' other non-current assets', 41), (' other non-current assets', 41), (' exploration and evaluation expenditure', 38), (' loan receivables', 38), (' leased assets', 32), (' financial assets', 29), ('non-current', 27), (' leases', 21)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 80, 'value': 1866.0, 'line_item_label': ['Non-Current Assets', 'Intangible assets'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 1866.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' allowance for expected credit losses', 50), (' motor vehicles', 43), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' total properties', 42), (' warehouse and office equipment', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), (' total properties', 43), (' electricity derivatives at fair value', 41), (' right-of-use-assets', 40), (' allowance for expected credit losses', 35), (' warehouse and office equipment', 35), (' defined benefit plans', 33), ('finance receivables', 31), (' exploration and evaluation expenditure', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' warehouse and office equipment', 46), (' allowance for expected credit losses', 38), (' electricity derivatives at fair value', 38), (' exploration and evaluation expenditure', 38), (' total properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' defined benefit plans', 31), (' right-of-use-assets', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' total properties', 43), (' right-of-use-assets', 40), (' electricity derivatives at fair value', 37), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' warehouse and office equipment', 33), (' exploration and evaluation expenditure', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 47), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' warehouse and office equipment', 35), (' motor vehicles', 33), (' defined benefit plans', 30), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' allowance for expected credit losses', 50), (' motor vehicles', 43), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' total properties', 42), (' warehouse and office equipment', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), (' total properties', 43), (' electricity derivatives at fair value', 41), (' right-of-use-assets', 40), (' allowance for expected credit losses', 35), (' warehouse and office equipment', 35), (' defined benefit plans', 33), ('finance receivables', 31), (' exploration and evaluation expenditure', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' warehouse and office equipment', 46), (' allowance for expected credit losses', 38), (' electricity derivatives at fair value', 38), (' exploration and evaluation expenditure', 38), (' total properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' defined benefit plans', 31), (' right-of-use-assets', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' total properties', 43), (' right-of-use-assets', 40), (' electricity derivatives at fair value', 37), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' warehouse and office equipment', 33), (' exploration and evaluation expenditure', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 47), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' warehouse and office equipment', 35), (' motor vehicles', 33), (' defined benefit plans', 30), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' allowance for expected credit losses', 50), (' motor vehicles', 43), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' total properties', 42), (' warehouse and office equipment', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), (' total properties', 43), (' electricity derivatives at fair value', 41), (' right-of-use-assets', 40), (' allowance for expected credit losses', 35), (' warehouse and office equipment', 35), (' defined benefit plans', 33), ('finance receivables', 31), (' exploration and evaluation expenditure', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' warehouse and office equipment', 46), (' allowance for expected credit losses', 38), (' electricity derivatives at fair value', 38), (' exploration and evaluation expenditure', 38), (' total properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' defined benefit plans', 31), (' right-of-use-assets', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' total properties', 43), (' right-of-use-assets', 40), (' electricity derivatives at fair value', 37), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' warehouse and office equipment', 33), (' exploration and evaluation expenditure', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 47), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' warehouse and office equipment', 35), (' motor vehicles', 33), (' defined benefit plans', 30), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' allowance for expected credit losses', 50), (' motor vehicles', 43), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' total properties', 42), (' warehouse and office equipment', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), (' total properties', 43), (' electricity derivatives at fair value', 41), (' right-of-use-assets', 40), (' allowance for expected credit losses', 35), (' warehouse and office equipment', 35), (' defined benefit plans', 33), ('finance receivables', 31), (' exploration and evaluation expenditure', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' warehouse and office equipment', 46), (' allowance for expected credit losses', 38), (' electricity derivatives at fair value', 38), (' exploration and evaluation expenditure', 38), (' total properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' defined benefit plans', 31), (' right-of-use-assets', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' total properties', 43), (' right-of-use-assets', 40), (' electricity derivatives at fair value', 37), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' warehouse and office equipment', 33), (' exploration and evaluation expenditure', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 47), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' warehouse and office equipment', 35), (' motor vehicles', 33), (' defined benefit plans', 30), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [15764.0, 1624.0, 17388.0, -13924.0, -917.0, -14841.0, 2547.0, 1840.0, 384.0, 17772.0, -14841.0, -1065.0, -15906.0, 1866.0, 2547.0], 'label': ["Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' not later than one year', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' interest bearing liabilites', 61), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [(' interest bearing liabilites', 60), ('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 62), (' interest bearing liabilites', 59), (' loans and borrowings', 33), (' bank overdraft', 28), ('short term debt', 27), ('short-term debt', 21), ('shortterm debt', 21), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 5181.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [5181.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases', ' interest bearing liabilites'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' interest bearing liabilites', 61), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' interest bearing liabilites', 45), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' interest bearing liabilites', 61), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [(' interest bearing liabilites', 60), ('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' interest bearing liabilites', 21), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('lease liabilities', 62), (' interest bearing liabilites', 59), (' loans and borrowings', 33), (' bank overdraft', 28), ('short term debt', 27), ('short-term debt', 21), ('shortterm debt', 21), (' leases', 21), ('borrowings', 19), ('shortterm borrowings', 19)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 3000.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [3000.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other trade payables', 42), ('trade and other payables', 38), ('trade payable', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 219685.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [219685.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other trade payables', 42), ('trade and other payables', 38), ('trade payable', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 175701.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [175701.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['trade creditors', ' trade and other payables', ' trade payables', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' trade payables - other parties', 88), (' other trade payables', 83), (' trade and other payables', 64), (' amounts payable to controlling entity', 54), ('trade creditors', 50)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 83), (' amounts payable to controlling entity', 57), (' trade and other payables', 55), ('trade creditors', 50)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 83), (' trade and other payables', 55), (' amounts payable to controlling entity', 54), ('trade creditors', 50)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), ('trade creditors', 43), (' trade payables - other parties', 42), (' amounts payable to controlling entity', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('trade creditors', 79), (' trade payables - other parties', 51), (' other trade payables', 50), (' trade and other payables', 44), (' amounts payable to controlling entity', 43), (' trade payables', 25), (' trade payables', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 67), (' other trade payables', 67), ('trade creditors', 57), (' amounts payable to controlling entity', 57)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' trade payables - other parties', 88), (' other trade payables', 83), (' trade and other payables', 64), (' amounts payable to controlling entity', 54), ('trade creditors', 50)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 83), (' amounts payable to controlling entity', 57), (' trade and other payables', 55), ('trade creditors', 50)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' trade payables', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 83), (' trade and other payables', 55), (' amounts payable to controlling entity', 54), ('trade creditors', 50)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' trade payables', 67), (' trade payables', 67), (' other trade payables', 56), (' trade and other payables', 55), ('trade creditors', 43), (' trade payables - other parties', 42), (' amounts payable to controlling entity', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('trade creditors', 79), (' trade payables - other parties', 51), (' other trade payables', 50), (' trade and other payables', 44), (' amounts payable to controlling entity', 43), (' trade payables', 25), (' trade payables', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' trade and other payables', 100), (' trade payables', 75), (' trade payables', 75), (' trade payables - other parties', 67), (' other trade payables', 67), ('trade creditors', 57), (' amounts payable to controlling entity', 57)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors', 0), (' trade and other payables', 0), (' trade payables', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 5, 6, 7, 8, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [50854.0, 2270.0, 109601.0, 175701.0, 40768.0, 1126.0, 169387.0, 219685.0], 'label': ['None Trade payables external parties', 'None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Total trade and other payables at amortised cost', 'None Trade payables external parties', 'None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Total trade and other payables at amortised cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('trade and other payables', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 219685.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [219685.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('trade and other payables', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 175701.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [175701.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [('accrued expenses', 50), ('interest accrued', 43)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [('accrued expenses', 50), ('interest accrued', 43)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 25)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33), ('provision', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56), ('provision', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities', 67), ('tax', 67), (' income tax payable', 55), ('provision', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 135087.0, 'line_item_label': ['Current tax liability', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [19337.0, 115750.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax', 'provision'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33), ('provision', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44), ('provision', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33), ('provision', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56), ('provision', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provision', 100), ('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities', 67), ('tax', 67), (' income tax payable', 55), ('provision', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 157777.0, 'line_item_label': ['Current tax liability', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 157777.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 41)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 41)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 41)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 41)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 39)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 41)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 41)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [('income tax (refundable)/payable ', 35), (' provision for income tax', 35)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 41)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax', 41)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax', 36)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax', 38)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax', 42), ('income tax (refundable)/payable ', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' provision for income tax', 40), ('income tax (refundable)/payable ', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:58+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-09 17:52:58+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': 100, 'value': 354772.0, 'line_item_label': ['Current Liabilities', 'Trade and other payables', 'Current tax liability', 'Provisions'], 'note_numbers': [nan, '14', nan, '15'], 'line_item_value': [0.0, 219685.0, 19337.0, 115750.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': 100, 'value': 333478.0, 'line_item_label': ['Current Liabilities', 'Trade and other payables', 'Current tax liability', 'Provisions'], 'note_numbers': [nan, '14', nan, '15'], 'line_item_value': [0.0, 175701.0, 0.0, 157777.0]}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' gst payables', 70), (' other', 60), (' loan payable to relayed party under tax funding agreement', 57), (' gst payable and accruals', 55), (' other related parties', 53), (' warranty', 50), (' loans from related party', 48), (' contract liabilites - current', 48), (' employee benefits - payroll', 47), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' share of joint venture payables', 41), (' current - liability for annual and long service leave', 40), (' gst liabilities', 40), (' rebates', 40), (' employee benefits - current', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 32), (' restructuring', 30), (' provisions - current', 29), (' provision for associate funding', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' rebates', 80), (' other related parties', 71), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 69), (' loans from related party', 62), (' gst payable and accruals', 55), (' contract liabilites - current', 52), (' warranty', 50), (' ultimate parent entity', 47), (' employee benefits - payroll', 47), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' employee benefits - current', 41), (' share of joint venture payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 28), (' provision for associate funding', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' rebates', 80), (' ultimate parent entity', 74), (' other related parties', 71), (' gst payables', 70), (' gst payable and accruals', 64), (' loans from related party', 62), (' loan payable to relayed party under tax funding agreement', 61), (' contract liabilites - current', 52), (' secured long-term bank loans', 50), (' provisions - current', 50), (' gst liabilities', 50), (' warranty', 50), (' derivative contracts - at fair value', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' restructuring', 40), (' other', 40), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' gst payables', 100), (' gst liabilities', 70), (' make good provisions', 56), (' share of joint venture payables', 52), (' arising from service contracts', 52), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' other related parties', 47), (' abandonment and decommissioning costs', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' provisions - current', 36), (' employee benefits - current', 35), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' total current employee benefits', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' ultimate parent entity', 26), (' warranty', 25), (' rebates', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [(' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), ('other creditors and accruals', 74), (' other related parties', 65), (' rebates', 60), (' restructuring', 50), (' loans from related party', 47), (' employee benefits - current', 47), (' provisions - current', 43), (' total current employee benefits', 43), (' derivative contracts - at fair value', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' arising from service contracts', 42), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 37), (' secured long-term bank loans', 37), (' contract liabilites - current', 37), (' abandonment and decommissioning costs', 37), (' provision for associate funding', 37), (' forward exchange contracts', 37), (' gst', 33), (' ultimate parent entity', 32), (' gst payable and accruals', 21), (' gst payables', 20), (' gst liabilities', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' gst', 67), (' share of joint venture payables', 60), (' other related parties', 59), (' gst payable and accruals', 50), (' warranty', 50), (' total current employee benefits', 48), ('other creditors and accruals', 46), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' contract liabilites - current', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' current - liability for annual and long service leave', 40), (' rebates', 40), (' restructuring', 40), (' make good provisions', 38), (' ultimate parent entity', 37), (' arising from service contracts', 36), (' employee benefits - current', 35), (' provision for associate funding', 32), (' gst liabilities', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' gst payables', 70), (' other', 60), (' loan payable to relayed party under tax funding agreement', 57), (' gst payable and accruals', 55), (' other related parties', 53), (' warranty', 50), (' loans from related party', 48), (' contract liabilites - current', 48), (' employee benefits - payroll', 47), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' share of joint venture payables', 41), (' current - liability for annual and long service leave', 40), (' gst liabilities', 40), (' rebates', 40), (' employee benefits - current', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 32), (' restructuring', 30), (' provisions - current', 29), (' provision for associate funding', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' rebates', 80), (' other related parties', 71), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 69), (' loans from related party', 62), (' gst payable and accruals', 55), (' contract liabilites - current', 52), (' warranty', 50), (' ultimate parent entity', 47), (' employee benefits - payroll', 47), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' employee benefits - current', 41), (' share of joint venture payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 28), (' provision for associate funding', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' rebates', 80), (' ultimate parent entity', 74), (' other related parties', 71), (' gst payables', 70), (' gst payable and accruals', 64), (' loans from related party', 62), (' loan payable to relayed party under tax funding agreement', 61), (' contract liabilites - current', 52), (' secured long-term bank loans', 50), (' provisions - current', 50), (' gst liabilities', 50), (' warranty', 50), (' derivative contracts - at fair value', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' restructuring', 40), (' other', 40), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' gst payables', 100), (' gst liabilities', 70), (' make good provisions', 56), (' share of joint venture payables', 52), (' arising from service contracts', 52), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' other related parties', 47), (' abandonment and decommissioning costs', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' provisions - current', 36), (' employee benefits - current', 35), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' total current employee benefits', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' ultimate parent entity', 26), (' warranty', 25), (' rebates', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [(' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), ('other creditors and accruals', 74), (' other related parties', 65), (' rebates', 60), (' restructuring', 50), (' loans from related party', 47), (' employee benefits - current', 47), (' provisions - current', 43), (' total current employee benefits', 43), (' derivative contracts - at fair value', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' arising from service contracts', 42), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 37), (' secured long-term bank loans', 37), (' contract liabilites - current', 37), (' abandonment and decommissioning costs', 37), (' provision for associate funding', 37), (' forward exchange contracts', 37), (' gst', 33), (' ultimate parent entity', 32), (' gst payable and accruals', 21), (' gst payables', 20), (' gst liabilities', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' gst', 67), (' share of joint venture payables', 60), (' other related parties', 59), (' gst payable and accruals', 50), (' warranty', 50), (' total current employee benefits', 48), ('other creditors and accruals', 46), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' contract liabilites - current', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' current - liability for annual and long service leave', 40), (' rebates', 40), (' restructuring', 40), (' make good provisions', 38), (' ultimate parent entity', 37), (' arising from service contracts', 36), (' employee benefits - current', 35), (' provision for associate funding', 32), (' gst liabilities', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 4, 5, 7, 8, 9, 10, 11], 'score': [80, 80, 100, 100, 100, 80, 80, 100, 100, 100], 'value': [2270.0, 109601.0, 10374.0, 2602.0, 175701.0, 1126.0, 169387.0, 6085.0, 2319.0, 219685.0], 'label': ['None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Goods and services tax (GST) payable', 'None Other creditors', 'None Total trade and other payables at amortised cost', 'None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Goods and services tax (GST) payable', 'None Other creditors', 'None Total trade and other payables at amortised cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 17:52:58+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:58+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-09 17:52:58+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82], 'value': [19230.0, 27947.0, -12290.0, 34887.0, 12517.0, 22370.0, 15722.0, 16942.0, -13434.0, 19230.0, 9113.0, 10117.0, 126446.0, 325226.0, -270828.0, 180844.0, 157777.0, 23067.0, 70642.0, 266892.0, -211088.0, 126446.0, 115750.0, 10696.0], 'label': ['Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term debt', 28)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('long term debt', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term debt', 28)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('long term debt', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 47), (' borrowings', 33), (' loans and borrowings', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 50), (' lease liabilities', 38), (' lease liability', 38), (' loans and borrowings', 25), (' borrowings', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 10374.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [10374.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 47), (' borrowings', 33), (' loans and borrowings', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 50), (' lease liabilities', 38), (' lease liability', 38), (' loans and borrowings', 25), (' borrowings', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 8796.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [8796.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 27), ('(bond)', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 27), ('(bond)', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('deferred tax liabilities', 57), ('deferred taxes', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('deferred tax liabilities', 73), ('deferred taxes', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes', 17), ('deferred tax liabilities', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('deferred tax liabilities', 60), ('deferred taxes', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('deferred taxes', 38), ('deferred tax liabilities', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('deferred tax liabilities', 57), ('deferred taxes', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('deferred tax liabilities', 73), ('deferred taxes', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes', 17), ('deferred tax liabilities', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('deferred tax liabilities', 60), ('deferred taxes', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('deferred taxes', 38), ('deferred tax liabilities', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' other financial liabilities', 57), ('trade and other payables', 38), (' other non-current liabilities', 34), ('other long term liabilities', 32), (' employee benefits', 27), (' provision for associate funding', 27), (' provisions', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [(' employee benefits', 35), ('trade and other payables', 33), ('other long term liabilities', 27), (' other financial liabilities', 21), (' other non-current liabilities', 21), (' provision for associate funding', 20), (' financial liabilities', 18), (' provisions', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 10695.0, 'line_item_label': ['Non-Current Liabilities', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 10695.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' other financial liabilities', 57), ('trade and other payables', 38), (' other non-current liabilities', 34), ('other long term liabilities', 32), (' employee benefits', 27), (' provision for associate funding', 27), (' provisions', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [(' employee benefits', 35), ('trade and other payables', 33), ('other long term liabilities', 27), (' other financial liabilities', 21), (' other non-current liabilities', 21), (' provision for associate funding', 20), (' financial liabilities', 18), (' provisions', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 23067.0, 'line_item_label': ['Non-Current Liabilities', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 23067.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 44), (' provisions - non-current', 43), (' derivative contracts - at fair value', 42), (' trade payables - related parties', 42), (' employee benefits - non current', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' contract liabilites - non-current', 44), (' make good provisions', 44), ('non-current trade and other payables', 43), (' trade payables - related parties', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci', 38), (' abandonment and decommissioning costs', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' make good provisions', 56), (' provisions - non-current', 50), (' derivative contracts - at fair value', 46), (' electricity derivatives at fair value through oci', 44), (' trade payables - related parties', 42), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' contract liabilites - non-current', 40), (' abandonment and decommissioning costs', 38), (' provision for associate funding', 36), (' total non-current employee benefits', 34), (' employee benefits - non current', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' contract liabilites - non-current', 54), (' employee benefits - payroll', 54), (' trade payables - related parties', 54), ('non-current trade and other payables', 46), (' electricity derivatives at fair value through oci', 46), (' non-current - liability for long-service leave', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' total non-current employee benefits', 46), (' employee benefits - non current', 38), (' provisions - non-current', 32), (' provision for associate funding', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables', 52), (' non-current - liability for long-service leave', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci', 39), (' derivative contracts - at fair value', 39), (' abandonment and decommissioning costs', 39), (' trade payables - related parties', 39), (' employee benefits - non current', 36), (' employee benefits - payroll', 36), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - non-current', 30), (' provisions - non-current', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current', 55), (' non-current - liability for long-service leave', 55), ('non-current trade and other payables', 45), (' contract liabilites - non-current', 45), (' provisions - non-current', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' trade payables - related parties', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci', 27), (' derivative contracts - at fair value', 27), (' provision for associate funding', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value', 54), (' abandonment and decommissioning costs', 54), ('non-current trade and other payables', 46), (' contract liabilites - non-current', 46), (' employee benefits - payroll', 46), (' trade payables - related parties', 46), (' electricity derivatives at fair value through oci', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' total non-current employee benefits', 38), (' provisions - non-current', 32), (' provision for associate funding', 31), (' make good provisions', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current', 92), ('non-current trade and other payables', 67), (' provisions - non-current', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave', 58), (' contract liabilites - non-current', 58), (' employee benefits - payroll', 50), (' abandonment and decommissioning costs', 42), (' derivative contracts - at fair value', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' electricity derivatives at fair value through oci', 25), (' make good provisions', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current', 75), (' total non-current employee benefits', 75), (' employee benefits - non current', 67), (' contract liabilites - non-current', 67), ('non-current trade and other payables', 58), (' non-current - liability for long-service leave', 58), (' abandonment and decommissioning costs', 50), (' derivative contracts - at fair value', 42), (' electricity derivatives at fair value through oci', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' make good provisions', 33), (' trade payables - related parties', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave', 65), (' derivative contracts - at fair value', 46), (' make good provisions', 44), (' employee benefits - payroll', 41), ('non-current trade and other payables', 40), (' abandonment and decommissioning costs', 38), (' trade payables - related parties', 38), (' total non-current employee benefits', 38), (' employee benefits - non current', 37), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' electricity derivatives at fair value through oci', 35), (' provision for associate funding', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10, 16, 22, 28, 34, 40, 46], 'score': [92, 92, 92, 92, 92, 92, 92, 92], 'value': [12517.0, 9113.0, 4426.0, 4294.0, 140834.0, 102343.0, 157777.0, 115750.0], 'label': ['None Current:', 'None Current:', 'None Current:', 'None Current:', 'None Current:', 'None Current:', 'None Current:', 'None Current:'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital', 100), ('share capital', 67), (' share capital ', 67), ('equity share capital', 57), ('contributed equity', 38), ('contributed equity', 38), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 57000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['16'], 'line_item_value': [57000.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument', 'contributed equity', ' issued capital', ' share capital ', 'contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('contributed equity', 55), ('contributed equity', 55), ('equity share capital', 50), ('perpetual equity instrument', 39), (' issued capital', 38), ('share capital', 24), (' share capital ', 24), ('common stock', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital', 100), ('share capital', 67), (' share capital ', 67), ('equity share capital', 57), ('contributed equity', 38), ('contributed equity', 38), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('contributed equity', 37), ('contributed equity', 37), ('share capital', 36), (' share capital ', 36), ('equity share capital', 34), (' issued capital', 29), ('common stock', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 57000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['16'], 'line_item_value': [57000.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['ordinary shares', ' fully paid ordinary shares', ' issued and paid-up share capital', ' retained profits', ' ordinary shares fully paid', ' total issued capital'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none 10,000,000 fully paid ordinary shares (2022: 10,000,000) , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 100), (' ordinary shares fully paid', 56), (' issued and paid-up share capital', 48), (' retained profits', 38), (' total issued capital', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none 37,000,000 fully paid preference shares (2022: 37,000,000) , res_fuzz_match = [(' fully paid ordinary shares', 79), ('ordinary shares', 57), (' ordinary shares fully paid', 56), (' issued and paid-up share capital', 49), (' retained profits', 46), (' total issued capital', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none profits capitalised on the redemption of preference shares , res_fuzz_match = [('ordinary shares', 57), (' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 44), (' ordinary shares fully paid', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 40), ('ordinary shares', 30), (' fully paid ordinary shares', 30), (' issued and paid-up share capital', 30), (' ordinary shares fully paid', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none 10,000,000 fully paid ordinary shares (2022: 10,000,000) , res_fuzz_match = [('ordinary shares', 100), (' fully paid ordinary shares', 100), (' ordinary shares fully paid', 56), (' issued and paid-up share capital', 48), (' retained profits', 38), (' total issued capital', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none 37,000,000 fully paid preference shares (2022: 37,000,000) , res_fuzz_match = [(' fully paid ordinary shares', 79), ('ordinary shares', 57), (' ordinary shares fully paid', 56), (' issued and paid-up share capital', 49), (' retained profits', 46), (' total issued capital', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none profits capitalised on the redemption of preference shares , res_fuzz_match = [('ordinary shares', 57), (' total issued capital', 50), (' retained profits', 46), (' fully paid ordinary shares', 44), (' issued and paid-up share capital', 44), (' ordinary shares fully paid', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' total issued capital', 50), (' retained profits', 40), ('ordinary shares', 30), (' fully paid ordinary shares', 30), (' issued and paid-up share capital', 30), (' ordinary shares fully paid', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares', 0), (' fully paid ordinary shares', 0), (' issued and paid-up share capital', 0), (' retained profits', 0), (' ordinary shares fully paid', 0), (' total issued capital', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [10000.0, 10000.0], 'label': ['None 10,000,000 fully paid ordinary shares (2022: 10,000,000)', 'None 10,000,000 fully paid ordinary shares (2022: 10,000,000)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 135725.0, 'line_item_label': ['Retained earnings'], 'note_numbers': ['17'], 'line_item_value': [135725.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 127623.0, 'line_item_label': ['Retained earnings'], 'note_numbers': ['17'], 'line_item_value': [127623.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none balance at the beginning of the financial year , res_fuzz_match = [('retained earnings', 55), ('retained earnings and dividends on equity instruments', 39), ('general reserves', 33), ('accumulated losses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none net profit for the year , res_fuzz_match = [('retained earnings', 57), ('general reserves', 42), ('retained earnings and dividends on equity instruments', 33), ('accumulated losses', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none other comprehensive income , res_fuzz_match = [('general reserves', 42), ('retained earnings', 36), ('retained earnings and dividends on equity instruments', 33), ('accumulated losses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none dividend paid , res_fuzz_match = [('retained earnings and dividends on equity instruments', 67), ('retained earnings', 36), ('general reserves', 33), ('accumulated losses', 8)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none balance at the end of the financial year , res_fuzz_match = [('retained earnings', 57), ('retained earnings and dividends on equity instruments', 42), ('general reserves', 33), ('accumulated losses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none balance at the beginning of the financial year , res_fuzz_match = [('retained earnings', 55), ('retained earnings and dividends on equity instruments', 39), ('general reserves', 33), ('accumulated losses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none net profit for the year , res_fuzz_match = [('retained earnings', 57), ('general reserves', 42), ('retained earnings and dividends on equity instruments', 33), ('accumulated losses', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none other comprehensive income , res_fuzz_match = [('general reserves', 42), ('retained earnings', 36), ('retained earnings and dividends on equity instruments', 33), ('accumulated losses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none dividend paid , res_fuzz_match = [('retained earnings and dividends on equity instruments', 67), ('retained earnings', 36), ('general reserves', 33), ('accumulated losses', 8)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none balance at the end of the financial year , res_fuzz_match = [('retained earnings', 57), ('retained earnings and dividends on equity instruments', 42), ('general reserves', 33), ('accumulated losses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' reserves', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves', 17), ('other reserves ', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' reserves', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' reserves', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69), ('plant and equipment', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 4935.0, 'line_item_label': ['Plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [4935.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69), ('plant and equipment', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5664.0, 'line_item_label': ['Plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [5664.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('gross', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('gross', 40), ('cost', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('cost', 25), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 26, 27, 28, 29, 30, 31, 32, 52, 53, 54, 55, 56, 57, 58, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100, 100, 100], 'value': [106.0, 0.0, 91.0, 0.0, 0.0, 0.0, 197.0, 7515.0, 0.0, 716.0, 0.0, -52.0, 0.0, 8179.0, 960.0, 0.0, 42.0, 0.0, 0.0, 0.0, 1002.0, 523.0, 523.0, 2645.0, 2645.0, -849.0, -849.0, -1624.0, -1624.0, 0.0, 0.0, -22.0, -22.0, 673.0, 673.0, 0.0, 0.0, 0.0, 0.0, 673.0, 523.0, 673.0, 2011.0, -1711.0, -403.0, 0.0, -5.0, 565.0, -5116.0, 0.0, 0.0, 0.0, 565.0, 673.0, 9104.0, 2645.0, 0.0, -1624.0, -52.0, -22.0, 10051.0], 'label': ['Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Cost At1 April 2021', "Capital work in progress $'000", 'Cost Additions', "Capital work in progress $'000", 'Cost Reclassification to PPE', "Capital work in progress $'000", 'Cost Reclassification to Investment Property & Intangible assets', "Capital work in progress $'000", 'Cost Disposals', "Capital work in progress $'000", 'Cost Write-offs', "Capital work in progress $'000", 'Cost At31 March 2022', "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31), ('net value', 25), ('net book value', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31), ('net value', 25), ('net book value', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31), ('net value', 25), ('net book value', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31), ('net value', 25), ('net book value', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31), ('net value', 25), ('net book value', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9, 10, 20, 21, 22, 23, 33, 34, 35, 36, 46, 47, 48, 49, 59, 60, 61, 62, 72, 73, 74, 75, 85, 86, 87, 88, 98, 99, 100, 101, 111, 112, 113, 114, 124, 125, 126, 127], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [-12.0, -7.0, 0.0, -19.0, -19.0, -9.0, 0.0, -28.0, -3610.0, -717.0, 52.0, -4275.0, -4275.0, -733.0, 49.0, -4959.0, -722.0, -100.0, 0.0, -822.0, -822.0, -120.0, 0.0, -942.0, 0.0, 0.0, 0.0, 0.0, -5116.0, 0.0, 0.0, 0.0, -4344.0, -824.0, 52.0, -5116.0, -5116.0, -862.0, 49.0, -5929.0], 'label': ['Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('account receivables', 42), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('billed', 50), ('unbilled', 40), ('trade and other receivables', 40), ('account receivables', 29), ('trade receivables', 25), ('government subsidies receivable', 25), ('receivable', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('unbilled', 40), ('account receivables', 36), ('government subsidies receivable', 35), ('trade and other receivables', 35), ('trade receivables', 33), ('receivable', 33), ('billed', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('account receivables', 43), ('trade receivables', 42), ('unbilled', 40), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 22375.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [22375.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('account receivables', 42), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('billed', 50), ('unbilled', 40), ('trade and other receivables', 40), ('account receivables', 29), ('trade receivables', 25), ('government subsidies receivable', 25), ('receivable', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('unbilled', 40), ('account receivables', 36), ('government subsidies receivable', 35), ('trade and other receivables', 35), ('trade receivables', 33), ('receivable', 33), ('billed', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('account receivables', 43), ('trade receivables', 42), ('unbilled', 40), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 42648.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [42648.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors', 'charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 65), (' net trade debtors', 62), (' related party receivables', 59), (' other debtors', 50), ('charges paid in advance', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables', 100), (' net trade debtors', 100), (' related party receivables', 60), (' other debtors', 60), (' share of joint venture receivables', 40), ('charges paid in advance', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none allowance for expected credit losses , res_fuzz_match = [(' net trade debtors', 50), (' related party receivables', 44), ('trade receivables', 42), (' other debtors', 42), (' share of joint venture receivables', 40), ('charges paid in advance', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables', 100), (' net trade debtors', 100), (' related party receivables', 60), (' other debtors', 60), (' share of joint venture receivables', 40), ('charges paid in advance', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = none 41636 , res_fuzz_match = [(' other debtors', 50), (' share of joint venture receivables', 50), (' net trade debtors', 50), ('trade receivables', 25), (' related party receivables', 25), ('charges paid in advance', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables', 100), (' net trade debtors', 100), (' related party receivables', 60), (' other debtors', 60), (' share of joint venture receivables', 40), ('charges paid in advance', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total related party receivables - ultimate parent company , res_fuzz_match = [(' related party receivables', 100), ('trade receivables', 67), (' share of joint venture receivables', 52), (' net trade debtors', 44), (' other debtors', 42), ('charges paid in advance', 41)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables', 100), (' net trade debtors', 100), (' related party receivables', 60), (' other debtors', 60), (' share of joint venture receivables', 40), ('charges paid in advance', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 67), (' other debtors', 58), (' related party receivables', 56), (' net trade debtors', 38), ('charges paid in advance', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables', 100), (' net trade debtors', 100), (' related party receivables', 60), (' other debtors', 60), (' share of joint venture receivables', 40), ('charges paid in advance', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = total 2023 trade and other receivables, including related parties , res_fuzz_match = [('trade receivables', 75), (' net trade debtors', 62), (' related party receivables', 61), (' other debtors', 58), (' share of joint venture receivables', 56), ('charges paid in advance', 41)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables', 100), (' net trade debtors', 100), (' related party receivables', 60), (' other debtors', 60), (' share of joint venture receivables', 40), ('charges paid in advance', 40)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 2, 3, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [41763.0, 41763.0, -127.0, 21783.0, 387.0, 387.0, 625.0, 42648.0], 'label': ['None Trade receivables', 'Trade', 'Trade', 'Trade', 'Total Related party receivables - ultimate parent company', 'Trade', 'Trade', 'Trade'], 'year': [], 'colname_found': ['rows', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns']}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), (' revenue from continuing activities', 63), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' revenue from continuing activities', 54), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('sale of products', 33), ('net sales', 30), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' revenue from continuing activities', 33), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('net sales', 53), (' Sales revenue', 48), ('sale of products', 47), ('transmission and distribution business', 40), (' Sale of coal', 39), ('revenue from operations', 37), (' revenue from continuing activities', 34), ('from trading business', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Revenue', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 45), (' revenue from continuing activities', 44), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('revenue from operations', 38), ('transmission and distribution business', 36), ('net sales', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sale of coal', 24), (' revenue from continuing activities', 24), (' Sales revenue', 22), (' Revenue', 9)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), (' revenue from continuing activities', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), (' revenue from continuing activities', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), (' revenue from continuing activities', 33), ('sale of products', 30), ('revenue from operations', 28), ('from trading business', 25), ('net sales', 24), (' Sales revenue', 23), (' Sale of coal', 20), (' Revenue', 9)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' revenue from continuing activities', 39), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 33), ('from trading business', 30), ('revenue from operations', 27), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 20), ('sale of products', 19), (' Revenue', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' revenue from continuing activities', 39), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 33), ('from trading business', 30), ('revenue from operations', 27), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 20), ('sale of products', 19), (' Revenue', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' revenue from continuing activities', 34), ('revenue from operations', 30), ('from trading business', 30), ('transmission and distribution business', 26), ('sale of products', 23), (' Sales revenue', 23), ('net sales', 18), (' Sale of coal', 18), (' Revenue', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' revenue from continuing activities', 34), ('revenue from operations', 30), ('from trading business', 30), ('transmission and distribution business', 26), ('sale of products', 23), (' Sales revenue', 23), ('net sales', 18), (' Sale of coal', 18), (' Revenue', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('revenue from operations', 44), ('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), (' revenue from continuing activities', 37), ('from trading business', 33), ('sale of products', 30), ('net sales', 29), ('transmission and distribution business', 29), (' Sale of coal', 28), (' Sales revenue', 27), (' Revenue', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 1033845.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': ['4'], 'line_item_value': [1033845.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('revenue from contracts with customers', 100), ('Revenue from contract with customers', 100), (' revenue from continuing activities', 63), ('revenue from operations', 50), ('from trading business', 43), ('transmission and distribution business', 33), (' Sales revenue', 33), (' Revenue', 32), (' Sale of coal', 29), ('sale of products', 27), ('net sales', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations', 71), (' Revenue', 67), (' revenue from continuing activities', 54), (' Sales revenue', 52), ('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('sale of products', 33), ('net sales', 30), ('from trading business', 30), (' Sale of coal', 29), ('transmission and distribution business', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' revenue from continuing activities', 33), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('net sales', 53), (' Sales revenue', 48), ('sale of products', 47), ('transmission and distribution business', 40), (' Sale of coal', 39), ('revenue from operations', 37), (' revenue from continuing activities', 34), ('from trading business', 32), ('revenue from contracts with customers', 30), ('Revenue from contract with customers', 30), (' Revenue', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 45), (' revenue from continuing activities', 44), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), (' revenue from continuing activities', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' revenue from continuing activities', 22), (' Sale of coal', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('revenue from operations', 38), ('transmission and distribution business', 36), ('net sales', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sale of coal', 24), (' revenue from continuing activities', 24), (' Sales revenue', 22), (' Revenue', 9)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' revenue from continuing activities', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), (' revenue from continuing activities', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), (' revenue from continuing activities', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), (' revenue from continuing activities', 33), ('sale of products', 30), ('revenue from operations', 28), ('from trading business', 25), ('net sales', 24), (' Sales revenue', 23), (' Sale of coal', 20), (' Revenue', 9)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' revenue from continuing activities', 39), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 33), ('from trading business', 30), ('revenue from operations', 27), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 20), ('sale of products', 19), (' Revenue', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' revenue from continuing activities', 39), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 33), ('from trading business', 30), ('revenue from operations', 27), (' Sales revenue', 26), ('net sales', 24), (' Sale of coal', 20), ('sale of products', 19), (' Revenue', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' revenue from continuing activities', 34), ('revenue from operations', 30), ('from trading business', 30), ('transmission and distribution business', 26), ('sale of products', 23), (' Sales revenue', 23), ('net sales', 18), (' Sale of coal', 18), (' Revenue', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), (' revenue from continuing activities', 34), ('revenue from operations', 30), ('from trading business', 30), ('transmission and distribution business', 26), ('sale of products', 23), (' Sales revenue', 23), ('net sales', 18), (' Sale of coal', 18), (' Revenue', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('revenue from operations', 44), ('revenue from contracts with customers', 42), ('Revenue from contract with customers', 42), (' revenue from continuing activities', 37), ('from trading business', 33), ('sale of products', 30), ('net sales', 29), ('transmission and distribution business', 29), (' Sale of coal', 28), (' Sales revenue', 27), (' Revenue', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 1267172.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': ['4'], 'line_item_value': [1267172.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), (' cost of goods sold', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), (' cost of goods sold', 23), ('purchase of stock-in-trade', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold', 32), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('cost of sales', 45), ('Cost of sales', 45), ('expense', 43), (' Cost of goods and services sold', 43), (' cost of coal sold', 39), ('expenditure', 38), (' Cost of product sold', 36), (' Cost of inventory sold', 34), (' Personnel costs', 33), ('purchase of stock-in-trade', 29), (' cost of goods sold', 28)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' cost of goods sold', 27), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold', 27), (' Cost of product sold', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold', 24), ('expense', 16)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('purchase of stock-in-trade', 30), ('total expenses', 30), (' cost of goods sold', 29), ('cost of sales', 28), ('Cost of sales', 28), (' cost of coal sold', 25), ('expenditure', 20), ('expense', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), (' cost of goods sold', 28), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), (' cost of goods sold', 28), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' cost of goods sold', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' cost of goods sold', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 33), ('Cost of sales', 33), (' cost of coal sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('total expenses', 30), (' cost of goods sold', 29), (' Cost of product sold', 27), ('expense', 25), ('expenditure', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -901584.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-901584.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), (' cost of goods sold', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), (' cost of goods sold', 23), ('purchase of stock-in-trade', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold', 32), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('cost of sales', 45), ('Cost of sales', 45), ('expense', 43), (' Cost of goods and services sold', 43), (' cost of coal sold', 39), ('expenditure', 38), (' Cost of product sold', 36), (' Cost of inventory sold', 34), (' Personnel costs', 33), ('purchase of stock-in-trade', 29), (' cost of goods sold', 28)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' cost of goods sold', 27), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold', 27), (' Cost of product sold', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold', 24), ('expense', 16)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('purchase of stock-in-trade', 30), ('total expenses', 30), (' cost of goods sold', 29), ('cost of sales', 28), ('Cost of sales', 28), (' cost of coal sold', 25), ('expenditure', 20), ('expense', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), (' cost of goods sold', 28), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), (' cost of goods sold', 28), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' cost of goods sold', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' cost of goods sold', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 33), ('Cost of sales', 33), (' cost of coal sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('total expenses', 30), (' cost of goods sold', 29), (' Cost of product sold', 27), ('expense', 25), ('expenditure', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -1122249.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-1122249.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Administrative and other expenses', 32), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Occupancy ', 24), (' Logistics and distribution', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Sales and marketing', 81), (' Marketing expenses', 74), (' Management expenses', 59), (' Lease expenses', 55), (' Selling Expenses', 55), (' Administrative and other expenses', 54), ('other expenses', 53), (' Other expenses', 53), (' Other expenses', 53), (' Selling & distribution expenses', 51), (' Advertising expenses', 49), (' Administrative expenses', 47), (' Administration expenses', 47), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Logistics and distribution', 43), ('Distribution expenses', 42), (' Occupancy expenses', 41), (' depreciation', 34), (' Occupancy ', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 27), (' Administrative expenses', 25), (' Administration expenses', 25), (' Administrative and other expenses', 24), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Occupancy ', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 39), (' Administrative and other expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Sales and marketing', 29), (' Selling Expenses', 27), ('other expenses', 26), (' Marketing expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' depreciation', 25), (' Administrative expenses', 25), (' Depreciation expenses', 25), (' Administration expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Lease expenses', 23), (' Management expenses', 23), (' Advertising expenses', 21), (' Occupancy expenses', 19), (' Occupancy ', 9)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administrative and other expenses', 39), (' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Sales and marketing', 27), (' Lease expenses', 26), ('other expenses', 25), (' Marketing expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 25), (' Other expenses', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Selling Expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Management expenses', 22), (' Occupancy expenses', 19), (' depreciation', 14), (' Occupancy ', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administrative and other expenses', 39), (' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Sales and marketing', 27), (' Lease expenses', 26), ('other expenses', 25), (' Marketing expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 25), (' Other expenses', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Selling Expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Management expenses', 22), (' Occupancy expenses', 19), (' depreciation', 14), (' Occupancy ', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses', 36), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Marketing expenses', 23), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' Logistics and distribution', 23), ('Distribution expenses', 22), (' Advertising expenses', 22), (' Sales and marketing', 22), (' depreciation', 15), (' Occupancy ', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses', 36), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Marketing expenses', 23), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' Logistics and distribution', 23), ('Distribution expenses', 22), (' Advertising expenses', 22), (' Sales and marketing', 22), (' depreciation', 15), (' Occupancy ', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Administrative and other expenses', 40), (' Amortisation expenses', 38), (' Selling & distribution expenses', 36), (' Lease expenses', 36), ('other expenses', 35), (' Other expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Advertising expenses', 33), (' Depreciation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Selling Expenses', 31), (' Management expenses', 30), (' Sales and marketing', 29), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Occupancy ', 21), (' depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 8], 'score': 100, 'value': -83441.0, 'line_item_label': ['Sales and marketing expenses', 'Administration expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-35443.0, -47684.0, -314.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses', 38), (' Amortisation expenses', 35), (' Logistics and distribution', 35), (' Selling & distribution expenses', 34), ('Distribution expenses', 33), (' Administrative expenses', 33), (' Administration expenses', 33), (' Marketing expenses', 31), (' Advertising expenses', 30), ('other expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Sales and marketing', 26), (' Occupancy expenses', 23), (' Management expenses', 23), (' Occupancy ', 22), (' Lease expenses', 19), (' Selling Expenses', 19), (' depreciation', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Selling & distribution expenses', 36), (' Occupancy expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Administrative and other expenses', 32), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Management expenses', 25), (' Occupancy ', 24), (' Logistics and distribution', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Sales and marketing', 81), (' Marketing expenses', 74), (' Management expenses', 59), (' Lease expenses', 55), (' Selling Expenses', 55), (' Administrative and other expenses', 54), ('other expenses', 53), (' Other expenses', 53), (' Other expenses', 53), (' Selling & distribution expenses', 51), (' Advertising expenses', 49), (' Administrative expenses', 47), (' Administration expenses', 47), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Logistics and distribution', 43), ('Distribution expenses', 42), (' Occupancy expenses', 41), (' depreciation', 34), (' Occupancy ', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 27), (' Administrative expenses', 25), (' Administration expenses', 25), (' Administrative and other expenses', 24), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Occupancy ', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Selling & distribution expenses', 39), (' Administrative and other expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Sales and marketing', 29), (' Selling Expenses', 27), ('other expenses', 26), (' Marketing expenses', 26), (' Other expenses', 26), (' Other expenses', 26), (' depreciation', 25), (' Administrative expenses', 25), (' Depreciation expenses', 25), (' Administration expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Lease expenses', 23), (' Management expenses', 23), (' Advertising expenses', 21), (' Occupancy expenses', 19), (' Occupancy ', 9)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administrative and other expenses', 39), (' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Sales and marketing', 27), (' Lease expenses', 26), ('other expenses', 25), (' Marketing expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 25), (' Other expenses', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Selling Expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Management expenses', 22), (' Occupancy expenses', 19), (' depreciation', 14), (' Occupancy ', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Administrative and other expenses', 39), (' Logistics and distribution', 34), (' Selling & distribution expenses', 31), (' Administrative expenses', 27), (' Administration expenses', 27), (' Sales and marketing', 27), (' Lease expenses', 26), ('other expenses', 25), (' Marketing expenses', 25), (' Other expenses', 25), (' Amortisation expenses', 25), (' Other expenses', 25), ('Distribution expenses', 24), (' Advertising expenses', 24), (' Selling Expenses', 23), (' Depreciation expenses', 22), (' Depreciation expenses', 22), (' Management expenses', 22), (' Occupancy expenses', 19), (' depreciation', 14), (' Occupancy ', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses', 36), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Marketing expenses', 23), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' Logistics and distribution', 23), ('Distribution expenses', 22), (' Advertising expenses', 22), (' Sales and marketing', 22), (' depreciation', 15), (' Occupancy ', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses', 36), ('other expenses', 29), (' Other expenses', 29), (' Other expenses', 29), (' Depreciation expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 25), (' Amortisation expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Marketing expenses', 23), (' Occupancy expenses', 23), (' Lease expenses', 23), (' Selling Expenses', 23), (' Management expenses', 23), (' Logistics and distribution', 23), ('Distribution expenses', 22), (' Advertising expenses', 22), (' Sales and marketing', 22), (' depreciation', 15), (' Occupancy ', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Administrative and other expenses', 40), (' Amortisation expenses', 38), (' Selling & distribution expenses', 36), (' Lease expenses', 36), ('other expenses', 35), (' Other expenses', 35), (' Other expenses', 35), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Advertising expenses', 33), (' Depreciation expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Selling Expenses', 31), (' Management expenses', 30), (' Sales and marketing', 29), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Occupancy ', 21), (' depreciation', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 8], 'score': 100, 'value': -110280.0, 'line_item_label': ['Sales and marketing expenses', 'Administration expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-55764.0, -54291.0, -225.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Rental expenses', 69), (' Administration expenses', 47), (' Occupancy expenses', 41), ('Rent', 23), (' Occupancy', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 25), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 30), (' Administration expenses', 25), (' Occupancy expenses', 19), ('Rent', 13), (' Occupancy', 9)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 27), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 27), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 24), (' Occupancy expenses', 23), ('Rent', 13), (' Occupancy', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 24), (' Occupancy expenses', 23), ('Rent', 13), (' Occupancy', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 26), (' Occupancy', 21), ('Rent', 16)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -47684.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-47684.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses', 33), (' Rental expenses', 31), (' Occupancy expenses', 23), ('Rent', 22), (' Occupancy', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses', 43), (' Rental expenses', 40), ('Rent', 38), (' Occupancy expenses', 33), (' Occupancy', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Rental expenses', 69), (' Administration expenses', 47), (' Occupancy expenses', 41), ('Rent', 23), (' Occupancy', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 25), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses', 30), (' Administration expenses', 25), (' Occupancy expenses', 19), ('Rent', 13), (' Occupancy', 9)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 27), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 27), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 7)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 24), (' Occupancy expenses', 23), ('Rent', 13), (' Occupancy', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses', 28), (' Administration expenses', 24), (' Occupancy expenses', 23), ('Rent', 13), (' Occupancy', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 26), (' Occupancy', 21), ('Rent', 16)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -54291.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-54291.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('other operating', 31), ('Other revenue', 29), (' Other income', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Other income', 27), ('other operating', 24), ('Other revenue', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Other income', 49), ('Other revenue', 39), ('other operating', 36)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 4518.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['6', '6'], 'line_item_value': [1882.0, 2636.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('other operating', 31), ('Other revenue', 29), (' Other income', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Other income', 27), ('other operating', 24), ('Other revenue', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Other income', 49), ('Other revenue', 39), ('other operating', 36)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 6593.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['6', '6'], 'line_item_value': [5366.0, 1227.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Finance income and costs', 37), (' Finance income and finance costs', 36), (' Net finance costs', 32), ('finance income', 29), ('Finance income', 29), ('other income', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21), ('Finance income', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 38), (' Finance income and costs', 32), (' Net finance costs', 32), (' Interest revenue', 29), ('other income', 27), ('finance income', 19), ('Finance income', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('other income', 49), (' Interest revenue', 37), ('finance income', 35), ('Finance income', 35), (' Finance income and costs', 33), (' Net finance costs', 33), (' Finance income and finance costs', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 85, 'value': 1731.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [2636.0, -905.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Finance income and costs', 37), (' Finance income and finance costs', 36), (' Net finance costs', 32), ('finance income', 29), ('Finance income', 29), ('other income', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21), ('Finance income', 21)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 38), (' Finance income and costs', 32), (' Net finance costs', 32), (' Interest revenue', 29), ('other income', 27), ('finance income', 19), ('Finance income', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('other income', 49), (' Interest revenue', 37), ('finance income', 35), ('Finance income', 35), (' Finance income and costs', 33), (' Net finance costs', 33), (' Finance income and finance costs', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 85, 'value': 694.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [1227.0, -533.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Lease liabilities interest expense']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -905.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-905.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -533.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-533.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -905.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-905.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost', 35), ('finance costs', 35), (' net finance costs ', 30), (' finance expenses', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' net finance costs ', 33), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -533.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-533.0]}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:52:59+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-09 17:52:59+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:52:59+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:52:59+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax expense', 53), (' income tax benefit/(expense)', 52), ('amount transferred to retained earnings', 49), ('deferred tax', 39), ('minimum alternate tax credit entitlement', 37), ('provision for taxation previous year', 35), ('earlier year', 35), (' income tax benefit', 31), ('current tax', 30), (' income tax', 26), ('prior year ', 25)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 40), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax benefit', 34), (' income tax expense', 28), ('deferred tax', 24), ('prior year ', 24), (' income tax', 24), ('current tax', 23), ('earlier year', 23)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-08-09 17:52:59+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('provision for taxation previous year', 48), ('prior year ', 41), ('amount transferred to retained earnings', 39), ('earlier year', 39), (' income tax benefit', 39), (' tax (expense)/benefit', 38), (' income tax', 37), ('minimum alternate tax credit entitlement', 36), (' income tax expense', 36), (' income tax benefit/(expense)', 34), ('current tax', 27), ('deferred tax', 23)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -15776.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['5'], 'line_item_value': [-15776.0]}
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:53:00+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax expense', 53), (' income tax benefit/(expense)', 52), ('amount transferred to retained earnings', 49), ('deferred tax', 39), ('minimum alternate tax credit entitlement', 37), ('provision for taxation previous year', 35), ('earlier year', 35), (' income tax benefit', 31), ('current tax', 30), (' income tax', 26), ('prior year ', 25)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 40), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax benefit', 34), (' income tax expense', 28), ('deferred tax', 24), ('prior year ', 24), (' income tax', 24), ('current tax', 23), ('earlier year', 23)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('provision for taxation previous year', 48), ('prior year ', 41), ('amount transferred to retained earnings', 39), ('earlier year', 39), (' income tax benefit', 39), (' tax (expense)/benefit', 38), (' income tax', 37), ('minimum alternate tax credit entitlement', 36), (' income tax expense', 36), (' income tax benefit/(expense)', 34), ('current tax', 27), ('deferred tax', 23)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -12413.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['5'], 'line_item_value': [-12413.0]}
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:53:00+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 48)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' total tax (expense)/benefit in income statement', 52)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 100), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), (' total tax (expense)/benefit in income statement', 40)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 100), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' current income tax', 71), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: net (gain)/loss on actuarial gains and losses , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' income tax expense on continuing operations', 48), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 38)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: total , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' income tax expense on continuing operations', 48), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 40)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 48)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' total tax (expense)/benefit in income statement', 52)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 100), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), (' total tax (expense)/benefit in income statement', 40)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 100), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' current income tax', 71), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: net (gain)/loss on actuarial gains and losses , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' income tax expense on continuing operations', 48), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 38)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: total , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' income tax expense on continuing operations', 48), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 40)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [28995.0, 3.0, -16585.0, 12413.0, 32883.0, 10.0, -17117.0, 15776.0], 'label': ['Current income tax Current income tax charge', 'Current income tax Adjustments in respect of current income tax of prior year', 'Deferred income tax Relating to origination and reversal of temporary differences', 'Deferred income tax Income tax expenses reported in the statement of profit or loss', 'Current income tax Current income tax charge', 'Current income tax Adjustments in respect of current income tax of prior year', 'Deferred income tax Relating to origination and reversal of temporary differences', 'Deferred income tax Income tax expenses reported in the statement of profit or loss'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-09 17:53:00+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = none accounting profit before tax , res_fuzz_match = [(' current income tax', 47), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 38)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = none ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = none adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' total income tax expense / (benefit)', 54), (' income tax expense on continuing operations', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses for tax purposes , res_fuzz_match = [('income tax expense', 56), (' income tax expense on continuing operations', 55), (' current income tax', 53), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 44)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = none income tax expense at effective tax rate , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 68), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 57)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), ('income tax expense', 44), (' current income tax', 41), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 35)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), ('income tax expense', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense / (benefit)', 34), (' current income tax', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 38)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [(' deferred income tax', 67), (' current income tax', 65), ('income tax expense', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense / (benefit)', 47), (' income tax expense on continuing operations', 45)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33), (' current income tax', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('income tax expense', 50), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 44)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 52), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 40)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 52), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 40)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = none accounting profit before tax , res_fuzz_match = [(' current income tax', 47), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 38)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = none ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = none adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' total income tax expense / (benefit)', 54), (' income tax expense on continuing operations', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses for tax purposes , res_fuzz_match = [('income tax expense', 56), (' income tax expense on continuing operations', 55), (' current income tax', 53), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 44)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = none income tax expense at effective tax rate , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 68), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 57)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), ('income tax expense', 44), (' current income tax', 41), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 35)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), ('income tax expense', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense / (benefit)', 34), (' current income tax', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 38)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [(' deferred income tax', 67), (' current income tax', 65), ('income tax expense', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense / (benefit)', 47), (' income tax expense on continuing operations', 45)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33), (' current income tax', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('income tax expense', 50), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 44)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 52), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 40)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 52), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 40)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 21, 23], 'score': [100, 100, 100, 100], 'value': [3.0, 12413.0, 10.0, 15776.0], 'label': ['None Adjustments in respect of current income tax of prior year', 'None Income tax expense at effective tax rate', 'None Adjustments in respect of current income tax of prior year', 'None Income tax expense at effective tax rate'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:53:00+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-09 17:53:00+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:53:00+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-09 17:53:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:53:00+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-09 17:53:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:53:00+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:53:00+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:53:00+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-09 17:53:00+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:53:00+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-09 17:53:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:53:00+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-09 17:53:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:53:00+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('prior period', 27), ('exceptional', 16)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('exceptional', 29), ('prior period', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 27)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('prior period', 26), ('exceptional', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 14)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 14)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('prior period', 26), ('exceptional', 12)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('prior period', 26), ('exceptional', 12)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('prior period', 30), ('exceptional', 15)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:53:00+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('prior period', 27), ('exceptional', 16)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('exceptional', 29), ('prior period', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 27)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('prior period', 26), ('exceptional', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 14)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('prior period', 22), ('exceptional', 14)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('prior period', 26), ('exceptional', 12)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('prior period', 26), ('exceptional', 12)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('prior period', 30), ('exceptional', 15)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-09 17:53:00+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-09 17:53:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-09 17:53:00+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-09 17:53:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-09 17:53:00+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-09 17:53:00+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:53:00+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-09 17:53:00+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-09 17:53:00+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-08-09 17:53:00+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:30+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-08-10 12:54:30+0530 - sLogger - DEBUG - process_main_pages started
2023-08-10 12:54:30+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-10 12:54:30+0530 - sLogger - DEBUG - start_refactoring started
2023-08-10 12:54:30+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-10 12:54:30+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-10 12:54:30+0530 - sLogger - DEBUG - start_refactoring started
2023-08-10 12:54:30+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-10 12:54:30+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-08-10 12:54:30+0530 - sLogger - DEBUG - start_refactoring started
2023-08-10 12:54:30+0530 - sLogger - DEBUG - start_refactoring completed
2023-08-10 12:54:30+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-08-10 12:54:30+0530 - sLogger - DEBUG - set_section_details started
2023-08-10 12:54:30+0530 - sLogger - DEBUG - CurrentAssets | [('currentassets', 100), ('noncurrentassets', 89), ('currentliabilities', 67), ('current liabilities', 62), ('assets', 59), ('noncurrentliabilities', 58), ('current assets', 56), ('noncurrent assets', 40), ('noncurrent liabilities', 31), ('equityandliabilities', 26), ('equity liabilities', 24), ('equity', 22), ('equity and liabilities', 21), ('equityliabilities', 20), ('liabilities', 11)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD current assets | score 96
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD currentassets | score 100
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD current liabilities | score 62
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD currentliabilities | score 65
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrent assets | score 87
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrentassets | score 90
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrent liabilities | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD non current assets | score 84
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD non current liabilities | score 56
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrentliabilities | score 59
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrentassets | score 90
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD noncurrentliabilities | score 59
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD equity and liabilities | score 29
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text CurrentAssets | MATCH WORD equityandliabilities | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Cash and bank balances | [('equity and liabilities', 38), ('noncurrent liabilities', 35), ('noncurrentassets', 34), ('noncurrent assets', 30), ('current liabilities', 29), ('equityandliabilities', 26), ('currentassets', 25), ('noncurrentliabilities', 25), ('current assets', 24), ('equity liabilities', 24), ('liabilities', 23), ('assets', 16), ('currentliabilities', 14), ('equityliabilities', 7), ('equity', 0)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD current assets | score 33
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD currentassets | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD current liabilities | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD currentliabilities | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrent assets | score 31
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrentassets | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrent liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD non current assets | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD non current liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrentliabilities | score 33
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrentassets | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD noncurrentliabilities | score 33
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD equity and liabilities | score 45
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD equity | score 15
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Cash and bank balances | MATCH WORD equityandliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Trade and other receivables | [('noncurrentassets', 43), ('equity and liabilities', 41), ('currentassets', 35), ('noncurrentliabilities', 35), ('current assets', 34), ('equityandliabilities', 30), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('currentliabilities', 26), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('equityliabilities', 20), ('liabilities', 14)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentassets | score 41
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD currentliabilities | score 45
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentassets | score 37
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrentliabilities | score 46
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equityandliabilities | score 43
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Inventories | [('noncurrentliabilities', 48), ('currentliabilities', 44), ('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equityliabilities', 35), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equityandliabilities', 30), ('assets', 29), ('currentassets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentassets | score 42
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD currentliabilities | score 41
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentassets | score 44
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrentliabilities | score 44
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equityandliabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Prepayments | [('currentassets', 33), ('current liabilities', 30), ('noncurrentassets', 29), ('equityliabilities', 29), ('currentliabilities', 27), ('equityandliabilities', 24), ('noncurrentliabilities', 22), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentassets | score 50
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD currentliabilities | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentassets | score 44
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrentliabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equityandliabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Current Tax Asset | [('current assets', 87), ('noncurrent assets', 67), ('current liabilities', 58), ('currentassets', 55), ('currentliabilities', 54), ('noncurrentassets', 50), ('noncurrentliabilities', 48), ('assets', 45), ('noncurrent liabilities', 39), ('equity and liabilities', 35), ('equity liabilities', 33), ('equityandliabilities', 29), ('equity', 26), ('equityliabilities', 24), ('liabilities', 9)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD current assets | score 84
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD currentassets | score 80
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD current liabilities | score 56
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD currentliabilities | score 51
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrent assets | score 76
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrentassets | score 73
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrent liabilities | score 51
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD non current assets | score 76
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD non current liabilities | score 55
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrentliabilities | score 47
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrentassets | score 73
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD noncurrentliabilities | score 47
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD equity and liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Tax Asset | MATCH WORD equityandliabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Total CurrentAssets | [('currentassets', 80), ('noncurrentassets', 73), ('current liabilities', 62), ('currentliabilities', 59), ('noncurrentliabilities', 53), ('current assets', 45), ('noncurrent assets', 45), ('assets', 43), ('equity and liabilities', 34), ('equity liabilities', 32), ('equityandliabilities', 28), ('noncurrent liabilities', 25), ('equityliabilities', 23), ('liabilities', 17), ('equity', 17)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD current assets | score 79
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD currentassets | score 95
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD current liabilities | score 53
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD currentliabilities | score 54
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrent assets | score 78
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrentassets | score 80
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrent liabilities | score 54
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD non current assets | score 81
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD non current liabilities | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrentliabilities | score 55
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrentassets | score 80
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD noncurrentliabilities | score 55
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD equity and liabilities | score 29
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total CurrentAssets | MATCH WORD equityandliabilities | score 31
2023-08-10 12:54:30+0530 - sLogger - DEBUG - NonCurrent Assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('noncurrentliabilities', 56), ('noncurrentassets', 50), ('currentassets', 40), ('currentliabilities', 36), ('current liabilities', 30), ('equity and liabilities', 27), ('equityandliabilities', 25), ('equity liabilities', 23), ('equity', 21), ('equityliabilities', 19), ('liabilities', 11)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD current assets | score 90
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD currentassets | score 87
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD current liabilities | score 61
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD currentliabilities | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrent assets | score 100
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrentassets | score 97
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrent liabilities | score 72
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD non current assets | score 97
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD non current liabilities | score 70
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrentliabilities | score 68
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrentassets | score 97
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD noncurrentliabilities | score 68
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD equity and liabilities | score 31
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Assets | MATCH WORD equityandliabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Plant and equipment | [('equity and liabilities', 69), ('equity liabilities', 50), ('equity', 48), ('equityandliabilities', 46), ('equityliabilities', 43), ('current assets', 36), ('assets', 30), ('noncurrentliabilities', 30), ('noncurrent assets', 29), ('liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('noncurrentassets', 27), ('currentliabilities', 25), ('currentassets', 22)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD current assets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD currentassets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD current liabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD currentliabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrent assets | score 33
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrentassets | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrent liabilities | score 29
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD non current assets | score 41
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD non current liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrentliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrentassets | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD noncurrentliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD equity and liabilities | score 60
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD equity | score 60
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Plant and equipment | MATCH WORD equityandliabilities | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Investment property | [('current assets', 43), ('noncurrentliabilities', 37), ('noncurrent assets', 36), ('noncurrentassets', 33), ('currentliabilities', 33), ('equity and liabilities', 31), ('assets', 30), ('currentassets', 30), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('equityandliabilities', 23), ('liabilities', 19)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD current assets | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD currentassets | score 31
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD current liabilities | score 26
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD currentliabilities | score 22
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrent assets | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrentassets | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrent liabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD non current assets | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD non current liabilities | score 29
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrentliabilities | score 25
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrentassets | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD noncurrentliabilities | score 25
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD equity and liabilities | score 24
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD equity | score 45
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Investment property | MATCH WORD equityandliabilities | score 26
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equityandliabilities', 43), ('currentassets', 42), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('noncurrentassets', 37), ('equity', 33), ('noncurrent liabilities', 31), ('equityliabilities', 30), ('currentliabilities', 29), ('noncurrentliabilities', 25), ('liabilities', 22)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentassets | score 53
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD currentliabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentassets | score 55
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrentliabilities | score 37
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equityandliabilities | score 49
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Rightofuse assets | [('current assets', 57), ('noncurrent assets', 57), ('assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equityliabilities', 26), ('currentliabilities', 25), ('equityandliabilities', 23), ('noncurrentliabilities', 22), ('liabilities', 19)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current assets | score 58
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentassets | score 53
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD current liabilities | score 33
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD currentliabilities | score 29
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent assets | score 59
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrent liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current assets | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD non current liabilities | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentassets | score 55
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD noncurrentliabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity and liabilities | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Rightofuse assets | MATCH WORD equityandliabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('currentassets', 37), ('noncurrentassets', 33), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('equityandliabilities', 23), ('noncurrent liabilities', 21), ('equity', 19), ('currentliabilities', 17), ('equityliabilities', 17), ('noncurrentliabilities', 15), ('liabilities', 10)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentassets | score 62
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD currentliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentassets | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrentliabilities | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equityandliabilities | score 31
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Total NonCurrent Assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrentliabilities', 58), ('noncurrent liabilities', 55), ('noncurrentassets', 53), ('currentliabilities', 43), ('assets', 42), ('current liabilities', 42), ('currentassets', 39), ('equity and liabilities', 33), ('equityandliabilities', 33), ('equity liabilities', 31), ('equityliabilities', 30), ('equity', 24), ('liabilities', 16)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD current assets | score 90
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD currentassets | score 83
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD current liabilities | score 52
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD currentliabilities | score 49
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrent assets | score 95
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrentassets | score 82
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrent liabilities | score 62
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD non current assets | score 83
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD non current liabilities | score 61
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrentliabilities | score 59
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrentassets | score 82
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD noncurrentliabilities | score 59
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD equity and liabilities | score 31
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Assets | MATCH WORD equityandliabilities | score 28
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Total Assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('currentassets', 43), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equityliabilities', 32), ('currentliabilities', 30), ('noncurrentliabilities', 26), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD current assets | score 64
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD currentassets | score 56
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD current liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD currentliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrent assets | score 64
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentassets | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrent liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD non current assets | score 86
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD non current liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentassets | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD noncurrentliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equity and liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Assets | MATCH WORD equityandliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Current Liabilities | [('current liabilities', 100), ('currentliabilities', 78), ('noncurrentliabilities', 69), ('equity liabilities', 67), ('currentassets', 62), ('liabilities', 60), ('equity and liabilities', 58), ('noncurrentassets', 55), ('current assets', 52), ('noncurrent liabilities', 43), ('equityliabilities', 36), ('equityandliabilities', 32), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD current assets | score 67
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD currentassets | score 62
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD current liabilities | score 100
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD currentliabilities | score 97
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrent assets | score 61
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrentassets | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrent liabilities | score 93
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD non current assets | score 59
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD non current liabilities | score 95
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrentassets | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD noncurrentliabilities | score 90
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD equity and liabilities | score 69
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current Liabilities | MATCH WORD equityandliabilities | score 67
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('noncurrentassets', 32), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrentliabilities', 29), ('noncurrent liabilities', 28), ('currentassets', 24), ('equityandliabilities', 24), ('assets', 22), ('liabilities', 21), ('equityliabilities', 20), ('currentliabilities', 19), ('equity', 14)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentassets | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD currentliabilities | score 43
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentassets | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrentliabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equityandliabilities | score 41
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Current tax liability | [('current liabilities', 88), ('currentliabilities', 67), ('currentassets', 60), ('noncurrentliabilities', 60), ('equity liabilities', 58), ('noncurrentassets', 55), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('equityliabilities', 31), ('equityandliabilities', 28), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD current assets | score 86
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD currentassets | score 56
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD current liabilities | score 80
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD currentliabilities | score 77
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrent assets | score 53
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentassets | score 49
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrent liabilities | score 74
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD non current assets | score 53
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD non current liabilities | score 73
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentliabilities | score 71
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentassets | score 49
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD noncurrentliabilities | score 71
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equity and liabilities | score 60
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equity | score 45
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Current tax liability | MATCH WORD equityandliabilities | score 54
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Contract liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrentliabilities', 44), ('currentliabilities', 42), ('noncurrent liabilities', 41), ('currentassets', 37), ('noncurrentassets', 33), ('equityandliabilities', 31), ('equityliabilities', 26), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current assets | score 41
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentassets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current liabilities | score 77
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentliabilities | score 74
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent assets | score 43
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent liabilities | score 76
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current assets | score 42
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current liabilities | score 74
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity and liabilities | score 67
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equityandliabilities | score 65
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Total Current Liabilities | [('current liabilities', 82), ('currentliabilities', 62), ('currentassets', 56), ('noncurrentliabilities', 56), ('equity liabilities', 55), ('noncurrentassets', 51), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('equityandliabilities', 32), ('equityliabilities', 29), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD current assets | score 86
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD currentassets | score 56
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD current liabilities | score 95
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD currentliabilities | score 84
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrent assets | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentassets | score 54
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrent liabilities | score 85
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD non current assets | score 60
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD non current liabilities | score 88
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentassets | score 54
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD noncurrentliabilities | score 83
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equity and liabilities | score 64
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Current Liabilities | MATCH WORD equityandliabilities | score 62
2023-08-10 12:54:30+0530 - sLogger - DEBUG - NonCurrent Liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('noncurrentliabilities', 54), ('noncurrentassets', 48), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('currentliabilities', 35), ('currentassets', 31), ('equityandliabilities', 24), ('equity', 20), ('equityliabilities', 18), ('assets', 11)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD current assets | score 61
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD currentassets | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD current liabilities | score 93
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD currentliabilities | score 90
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrent assets | score 72
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrentassets | score 68
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrent liabilities | score 100
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD non current assets | score 70
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD non current liabilities | score 98
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrentassets | score 68
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD noncurrentliabilities | score 98
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD equity and liabilities | score 65
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NonCurrent Liabilities | MATCH WORD equityandliabilities | score 62
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equityandliabilities', 36), ('equity', 35), ('equityliabilities', 32), ('currentliabilities', 30), ('currentassets', 26), ('noncurrentliabilities', 26), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25), ('noncurrentassets', 23)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentassets | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD currentliabilities | score 69
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentassets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrentliabilities | score 63
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equityandliabilities | score 70
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Provisions | [('currentliabilities', 27), ('currentassets', 22), ('noncurrentliabilities', 22), ('current liabilities', 20), ('noncurrentassets', 19), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equityliabilities', 14), ('equityandliabilities', 12), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentassets | score 26
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD currentliabilities | score 29
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentassets | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrentliabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equityandliabilities | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Contract liabilities | [('current liabilities', 69), ('liabilities', 57), ('equity liabilities', 57), ('equity and liabilities', 56), ('noncurrentliabilities', 44), ('currentliabilities', 42), ('noncurrent liabilities', 41), ('currentassets', 37), ('noncurrentassets', 33), ('equityandliabilities', 31), ('equityliabilities', 26), ('current assets', 21), ('noncurrent assets', 21), ('assets', 20), ('equity', 19)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current assets | score 41
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentassets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD current liabilities | score 77
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD currentliabilities | score 74
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent assets | score 43
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrent liabilities | score 76
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current assets | score 42
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD non current liabilities | score 74
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentassets | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD noncurrentliabilities | score 73
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity and liabilities | score 67
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Contract liabilities | MATCH WORD equityandliabilities | score 65
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Total NonCurrent Liabilities | [('noncurrent liabilities', 82), ('noncurrentliabilities', 56), ('noncurrent assets', 55), ('noncurrentassets', 51), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('currentliabilities', 41), ('currentassets', 38), ('equity liabilities', 36), ('equity and liabilities', 32), ('equityandliabilities', 26), ('equityliabilities', 21), ('assets', 16), ('equity', 15)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD current assets | score 61
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD currentassets | score 56
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD current liabilities | score 81
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD currentliabilities | score 85
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrent assets | score 86
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrentassets | score 62
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrent liabilities | score 95
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD non current assets | score 61
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD non current liabilities | score 86
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrentassets | score 62
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD noncurrentliabilities | score 86
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD equity and liabilities | score 64
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total NonCurrent Liabilities | MATCH WORD equityandliabilities | score 58
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Total Liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('equityandliabilities', 35), ('equityliabilities', 30), ('noncurrentliabilities', 25), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('noncurrentassets', 22), ('equity', 22), ('currentliabilities', 19), ('currentassets', 17)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD current assets | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD currentassets | score 27
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD current liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD currentliabilities | score 69
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrent assets | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentassets | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrent liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD non current assets | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD non current liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentassets | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD noncurrentliabilities | score 68
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equity and liabilities | score 75
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Liabilities | MATCH WORD equityandliabilities | score 70
2023-08-10 12:54:30+0530 - sLogger - DEBUG - NetAssets | [('assets', 77), ('currentassets', 70), ('noncurrentassets', 70), ('current assets', 48), ('noncurrent assets', 48), ('equity and liabilities', 32), ('equityandliabilities', 32), ('noncurrentliabilities', 30), ('equity', 29), ('equity liabilities', 29), ('current liabilities', 27), ('equityliabilities', 25), ('currentliabilities', 24), ('liabilities', 14), ('noncurrent liabilities', 9)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD current assets | score 80
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD currentassets | score 73
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD current liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD currentliabilities | score 37
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrent assets | score 80
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrentassets | score 80
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrent liabilities | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD non current assets | score 80
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD non current liabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrentliabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrentassets | score 80
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD noncurrentliabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD equity and liabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text NetAssets | MATCH WORD equityandliabilities | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equityliabilities', 86), ('equityandliabilities', 71), ('equity liabilities', 63), ('equity and liabilities', 52), ('currentliabilities', 40), ('assets', 36), ('liabilities', 33), ('noncurrentliabilities', 33), ('current assets', 32), ('current liabilities', 30), ('currentassets', 22), ('noncurrent assets', 21), ('noncurrent liabilities', 20), ('noncurrentassets', 19)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentassets | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD currentliabilities | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentassets | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrentliabilities | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equityandliabilities | score 90
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('currentassets', 36), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('equityliabilities', 33), ('noncurrentassets', 32), ('currentliabilities', 32), ('equityandliabilities', 29), ('noncurrentliabilities', 27), ('liabilities', 25)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentassets | score 42
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD currentliabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentassets | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrentliabilities | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equityandliabilities | score 33
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('currentliabilities', 50), ('current liabilities', 48), ('currentassets', 43), ('noncurrentliabilities', 43), ('current assets', 42), ('assets', 38), ('noncurrentassets', 38), ('equityandliabilities', 36), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('equityliabilities', 32), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentassets | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD currentliabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentassets | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrentliabilities | score 40
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equityandliabilities | score 43
2023-08-10 12:54:30+0530 - sLogger - DEBUG - Total Equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('equityandliabilities', 61), ('equityliabilities', 60), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('currentliabilities', 29), ('currentassets', 25), ('noncurrentliabilities', 25), ('assets', 24), ('noncurrentassets', 22)]
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD current assets | score 31
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD currentassets | score 32
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD current liabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD currentliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrent assets | score 34
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentassets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrent liabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD non current assets | score 33
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD non current liabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentassets | score 36
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD noncurrentliabilities | score 38
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equity and liabilities | score 86
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equity | score 90
2023-08-10 12:54:30+0530 - sLogger - DEBUG - particular_text Total Equity | MATCH WORD equityandliabilities | score 57
2023-08-10 12:54:30+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-08-10 12:54:30+0530 - sLogger - DEBUG - set_section_details started
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Operating Activities | working capital adjustments
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest and other costs of finance paid | operating profit before changes in assets and liabilities
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax paid | changes in working capital
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income tax refunded | movements in working capital
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows from operating activities | operating cash flow before working capital changes
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Investing Activities | movements in working capital
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for plant and equipment | adiustments for movements in working capital
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for intangible assets (Note 13) | operating profit before changes in assets and liabilities
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in investing activities | adjustments for increase decrease in operating liabilities
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Financing Activities | changes in working capital
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of principal portion oflease liabilities | movements in working capital
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of dividends | movements in working capital
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash flows used in financing activities | operating cash flow before working capital changes
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net Idecrease/increase in Cash and Cash Equivalents | adjustments for increase decrease in operating assets
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the beginning ofthe | changes in operating assets and liabilities
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- year | changes in working capital
2023-08-10 12:54:30+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and Cash Equivalents at the end of the year | changes in operating assets and liabilities
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-08-10 12:54:32+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-08-10 12:54:32+0530 - sLogger - ERROR - error occured: 'value'
2023-08-10 12:54:32+0530 - sLogger - DEBUG - process_main_pages completed
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand ', ' cash at bank ', ' cash at bank and on hand ', ' short term deposits ', ' cash at banks earns interest at floating rates based on daily bank deposit rates ', ' cash and cash equivalents ', ' cash on hand and at bank ', ' bank balances ', '  cash and bank balances ', ' cash asset']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('cash asset', 45), ('cash and cash equivalents', 30), ('other bank balances', 28), ('bank balances other than above', 26), ('cash and short term deposits', 26), ('Cash and short term deposits', 26), ('bank balances other than cash and cash equivalents', 25), ('cash and bank balances', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('cash and bank balances', 100), ('other bank balances', 70), ('bank balances other than above', 64), ('bank balances other than cash and cash equivalents', 62), ('cash and cash equivalents', 54), ('cash asset', 40), ('cash and short term deposits', 38), ('Cash and short term deposits', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('cash asset', 59), ('cash and short term deposits', 41), ('Cash and short term deposits', 41), ('bank balances other than above', 36), ('cash and cash equivalents', 32), ('cash and bank balances', 32), ('bank balances other than cash and cash equivalents', 30), ('other bank balances', 29)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('cash asset', 50), ('cash and cash equivalents', 36), ('cash and short term deposits', 36), ('Cash and short term deposits', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('other bank balances', 29), ('cash and bank balances', 21)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 231379.0, 'line_item_label': ['Cash and bank balances'], 'note_numbers': ['20(a)'], 'line_item_value': [231379.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', 'cash asset', 'Cash and short term deposits'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('cash asset', 45), ('cash and cash equivalents', 30), ('other bank balances', 28), ('bank balances other than above', 26), ('cash and short term deposits', 26), ('Cash and short term deposits', 26), ('bank balances other than cash and cash equivalents', 25), ('cash and bank balances', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('cash and bank balances', 100), ('other bank balances', 70), ('bank balances other than above', 64), ('bank balances other than cash and cash equivalents', 62), ('cash and cash equivalents', 54), ('cash asset', 40), ('cash and short term deposits', 38), ('Cash and short term deposits', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('Cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33), ('cash asset', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('Cash and short term deposits', 28), ('bank balances other than above', 22), ('cash asset', 21), ('cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash asset', 25), ('cash and short term deposits', 18), ('Cash and short term deposits', 18), ('cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('cash asset', 59), ('cash and short term deposits', 41), ('Cash and short term deposits', 41), ('bank balances other than above', 36), ('cash and cash equivalents', 32), ('cash and bank balances', 32), ('bank balances other than cash and cash equivalents', 30), ('other bank balances', 29)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('cash asset', 50), ('cash and cash equivalents', 36), ('cash and short term deposits', 36), ('Cash and short term deposits', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('other bank balances', 29), ('cash and bank balances', 21)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 187655.0, 'line_item_label': ['Cash and bank balances'], 'note_numbers': ['20(a)'], 'line_item_value': [187655.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('inventories', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('inventories', 22)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('inventories', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('inventories', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 255028.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [255028.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('inventories', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [('inventories', 22)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('inventories', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('inventories', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 237402.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [237402.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['raw materials ', ' finished goods ', ' finished goods at cost ', ' stores and other consumables at cost ', ' raw materials ', ' work in progress ', ' goods in transit ', ' provision for inventory obsolescence ', ' inventories ', ' cranes ', ' cranes - in transit ', ' spare parts ', ' parts and accessories (at cost) ', ' stock in transit'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total finished goods (at cost) , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' goods in transit ', 58), (' parts and accessories (at cost) ', 48), (' stock in transit', 46), (' stores and other consumables at cost ', 45), (' provision for inventory obsolescence ', 41), (' inventories ', 33), (' work in progress ', 31), (' cranes - in transit ', 31), ('raw materials ', 30), (' raw materials ', 30), (' cranes ', 20), (' spare parts ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total parts and accessories (at cost) , res_fuzz_match = [(' parts and accessories (at cost) ', 100), (' stores and other consumables at cost ', 52), ('raw materials ', 50), (' raw materials ', 50), (' spare parts ', 50), (' cranes - in transit ', 46), (' stock in transit', 46), (' finished goods at cost ', 44), (' inventories ', 44), (' goods in transit ', 42), (' provision for inventory obsolescence ', 41), (' cranes ', 40), (' work in progress ', 38), (' finished goods ', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' stores and other consumables at cost ', 55), (' provision for inventory obsolescence ', 45), (' stock in transit', 45), (' finished goods at cost ', 36), (' goods in transit ', 36), (' cranes - in transit ', 36), (' parts and accessories (at cost) ', 36), ('raw materials ', 32), (' raw materials ', 32), (' spare parts ', 30), (' work in progress ', 27), (' inventories ', 22), (' cranes ', 20), (' finished goods ', 18)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total finished goods (at cost) , res_fuzz_match = [(' finished goods ', 100), (' finished goods at cost ', 100), (' goods in transit ', 58), (' parts and accessories (at cost) ', 48), (' stock in transit', 46), (' stores and other consumables at cost ', 45), (' provision for inventory obsolescence ', 41), (' inventories ', 33), (' work in progress ', 31), (' cranes - in transit ', 31), ('raw materials ', 30), (' raw materials ', 30), (' cranes ', 20), (' spare parts ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total parts and accessories (at cost) , res_fuzz_match = [(' parts and accessories (at cost) ', 100), (' stores and other consumables at cost ', 52), ('raw materials ', 50), (' raw materials ', 50), (' spare parts ', 50), (' cranes - in transit ', 46), (' stock in transit', 46), (' finished goods at cost ', 44), (' inventories ', 44), (' goods in transit ', 42), (' provision for inventory obsolescence ', 41), (' cranes ', 40), (' work in progress ', 38), (' finished goods ', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total total , res_fuzz_match = [(' stores and other consumables at cost ', 55), (' provision for inventory obsolescence ', 45), (' stock in transit', 45), (' finished goods at cost ', 36), (' goods in transit ', 36), (' cranes - in transit ', 36), (' parts and accessories (at cost) ', 36), ('raw materials ', 32), (' raw materials ', 32), (' spare parts ', 30), (' work in progress ', 27), (' inventories ', 22), (' cranes ', 20), (' finished goods ', 18)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = $'000 , res_fuzz_match = [('raw materials ', 0), (' finished goods ', 0), (' finished goods at cost ', 0), (' stores and other consumables at cost ', 0), (' raw materials ', 0), (' work in progress ', 0), (' goods in transit ', 0), (' provision for inventory obsolescence ', 0), (' inventories ', 0), (' cranes ', 0), (' cranes - in transit ', 0), (' spare parts ', 0), (' parts and accessories (at cost) ', 0), (' stock in transit', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [160160.0, 77242.0, 198827.0, 56201.0], 'label': ['Total Finished goods (at cost)', 'Total Parts and accessories (at cost)', 'Total Finished goods (at cost)', 'Total Parts and accessories (at cost)'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [(' other current assets ', 52), (' other current financial assets ', 46), ('other assets ', 43), (' trade and other receivables', 35), (' prepayments ', 33), (' other financial assets ', 32)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [(' other financial assets ', 36), (' other current financial assets ', 34), (' trade and other receivables', 33), (' other current assets ', 31), ('other assets ', 19), (' prepayments ', 8)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' prepayments ', 100), (' trade and other receivables', 21), (' other current financial assets ', 18), (' other current assets ', 16), (' other financial assets ', 16), ('other assets ', 12)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [(' other current assets ', 83), (' other current financial assets ', 68), ('other assets ', 50), (' other financial assets ', 50), (' trade and other receivables', 41), (' prepayments ', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('other assets ', 55), (' other current assets ', 54), (' other current financial assets ', 49), (' other financial assets ', 43), (' trade and other receivables', 35), (' prepayments ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5], 'score': 83, 'value': 25582.0, 'line_item_label': ['Trade and other receivables', 'Prepayments', 'Current Tax Asset'], 'note_numbers': ['8', nan, nan], 'line_item_value': [22375.0, 3207.0, 0.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['other assets ', ' other current assets ', ' other financial assets ', ' other current financial assets ', ' prepayments ', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [(' other current assets ', 52), (' other current financial assets ', 46), ('other assets ', 43), (' trade and other receivables', 35), (' prepayments ', 33), (' other financial assets ', 32)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [(' other financial assets ', 36), (' other current financial assets ', 34), (' trade and other receivables', 33), (' other current assets ', 31), ('other assets ', 19), (' prepayments ', 8)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), ('other assets ', 42), (' other current financial assets ', 41), (' other current assets ', 39), (' other financial assets ', 39), (' prepayments ', 21)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets ', 40), (' other current assets ', 36), (' other financial assets ', 36), (' other current financial assets ', 28), (' trade and other receivables', 26), (' prepayments ', 13)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' prepayments ', 100), (' trade and other receivables', 21), (' other current financial assets ', 18), (' other current assets ', 16), (' other financial assets ', 16), ('other assets ', 12)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [(' other current assets ', 83), (' other current financial assets ', 68), ('other assets ', 50), (' other financial assets ', 50), (' trade and other receivables', 41), (' prepayments ', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('other assets ', 55), (' other current assets ', 54), (' other current financial assets ', 49), (' other financial assets ', 43), (' trade and other receivables', 35), (' prepayments ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 5], 'score': 83, 'value': 53369.0, 'line_item_label': ['Trade and other receivables', 'Prepayments', 'Current Tax Asset'], 'note_numbers': ['8', nan, nan], 'line_item_value': [42648.0, 3684.0, 7037.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['current ', ' prepaid expense ', ' prepaid expenditure ', ' prepayments ', ' prepaid ', ' other prepayments ', ' other receivables and prepayments ', ' prepaid ', ' in advance ', ' charges paid in advance'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' other receivables and prepayments ', 59), (' other prepayments ', 50), (' prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' prepaid expenditure ', 41), (' prepayments ', 33), (' in advance ', 33), ('current ', 29), (' charges paid in advance', 29)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' prepaid expense ', 60), (' prepaid expenditure ', 60), ('current ', 40), (' prepayments ', 40), (' prepaid ', 40), (' other prepayments ', 40), (' other receivables and prepayments ', 40), (' prepaid ', 40), (' charges paid in advance', 40), (' in advance ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = none allowance for expected credit losses , res_fuzz_match = [('current ', 57), (' prepaid expenditure ', 50), (' prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' other prepayments ', 42), (' other receivables and prepayments ', 35), (' prepayments ', 33), (' charges paid in advance', 29), (' in advance ', 17)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' prepaid expense ', 60), (' prepaid expenditure ', 60), ('current ', 40), (' prepayments ', 40), (' prepaid ', 40), (' other prepayments ', 40), (' other receivables and prepayments ', 40), (' prepaid ', 40), (' charges paid in advance', 40), (' in advance ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = none 41636 , res_fuzz_match = [(' other prepayments ', 50), ('current ', 25), (' prepaid expense ', 25), (' prepaid expenditure ', 25), (' prepayments ', 25), (' other receivables and prepayments ', 25), (' in advance ', 25), (' charges paid in advance', 25), (' prepaid ', 0), (' prepaid ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' prepaid expense ', 60), (' prepaid expenditure ', 60), ('current ', 40), (' prepayments ', 40), (' prepaid ', 40), (' other prepayments ', 40), (' other receivables and prepayments ', 40), (' prepaid ', 40), (' charges paid in advance', 40), (' in advance ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total related party receivables - ultimate parent company , res_fuzz_match = [('current ', 57), (' other receivables and prepayments ', 57), (' prepaid expenditure ', 50), (' other prepayments ', 50), (' prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' charges paid in advance', 41), (' prepayments ', 33), (' in advance ', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' prepaid expense ', 60), (' prepaid expenditure ', 60), ('current ', 40), (' prepayments ', 40), (' prepaid ', 40), (' other prepayments ', 40), (' other receivables and prepayments ', 40), (' prepaid ', 40), (' charges paid in advance', 40), (' in advance ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total other receivables , res_fuzz_match = [(' other prepayments ', 67), (' other receivables and prepayments ', 67), ('current ', 43), (' prepaid ', 43), (' prepaid ', 43), (' prepayments ', 33), (' prepaid expense ', 29), (' charges paid in advance', 29), (' prepaid expenditure ', 28), (' in advance ', 17)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' prepaid expense ', 60), (' prepaid expenditure ', 60), ('current ', 40), (' prepayments ', 40), (' prepaid ', 40), (' other prepayments ', 40), (' other receivables and prepayments ', 40), (' prepaid ', 40), (' charges paid in advance', 40), (' in advance ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total 2023 trade and other receivables, including related parties , res_fuzz_match = [(' other receivables and prepayments ', 78), (' other prepayments ', 67), (' in advance ', 67), (' prepaid expenditure ', 44), ('current ', 43), (' prepaid expense ', 43), (' prepaid ', 43), (' prepaid ', 43), (' charges paid in advance', 41), (' prepayments ', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' prepaid expense ', 60), (' prepaid expenditure ', 60), ('current ', 40), (' prepayments ', 40), (' prepaid ', 40), (' other prepayments ', 40), (' other receivables and prepayments ', 40), (' prepaid ', 40), (' charges paid in advance', 40), (' in advance ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = [' ']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('other current assets', 52), (' other current assets', 52), ('other assets', 43), (' biological assets', 42), (' financial assets', 40), (' trade and other receivables', 35), (' other financial assets', 32), (' deferred operating expenditure', 30), (' income tax receivable from related parties', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [(' financial assets', 36), (' other financial assets', 36), (' trade and other receivables', 33), ('other current assets', 31), (' other current assets', 31), (' income tax receivable from related parties', 30), (' biological assets', 25), (' deferred operating expenditure', 20), ('other assets', 19)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('other current assets', 83), (' other current assets', 83), (' financial assets', 53), ('other assets', 50), (' other financial assets', 50), (' income tax receivable from related parties', 44), (' biological assets', 41), (' trade and other receivables', 41), (' deferred operating expenditure', 32)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('other assets', 55), ('other current assets', 54), (' other current assets', 54), (' biological assets', 53), (' financial assets', 45), (' other financial assets', 43), (' income tax receivable from related parties', 35), (' trade and other receivables', 35), (' deferred operating expenditure', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 83, 'value': 22375.0, 'line_item_label': ['Trade and other receivables', 'Current Tax Asset'], 'note_numbers': ['8', nan], 'line_item_value': [22375.0, 0.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('other current assets', 52), (' other current assets', 52), ('other assets', 43), (' biological assets', 42), (' financial assets', 40), (' trade and other receivables', 35), (' other financial assets', 32), (' deferred operating expenditure', 30), (' income tax receivable from related parties', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [(' financial assets', 36), (' other financial assets', 36), (' trade and other receivables', 33), ('other current assets', 31), (' other current assets', 31), (' income tax receivable from related parties', 30), (' biological assets', 25), (' deferred operating expenditure', 20), ('other assets', 19)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [('other current assets', 83), (' other current assets', 83), (' financial assets', 53), ('other assets', 50), (' other financial assets', 50), (' income tax receivable from related parties', 44), (' biological assets', 41), (' trade and other receivables', 41), (' deferred operating expenditure', 32)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('other assets', 55), ('other current assets', 54), (' other current assets', 54), (' biological assets', 53), (' financial assets', 45), (' other financial assets', 43), (' income tax receivable from related parties', 35), (' trade and other receivables', 35), (' deferred operating expenditure', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': 83, 'value': 49685.0, 'line_item_label': ['Trade and other receivables', 'Current Tax Asset'], 'note_numbers': ['8', nan], 'line_item_value': [42648.0, 7037.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' interest receivable', 73), (' income tax receivable from related parties', 71), (' other deposits receivable - related party', 65), (' long service leave receivable', 59), (' other receivables - related party', 59), (' amount receivable from controlling entity', 59), (' related party receivable', 59), (' other debtors and prepayments', 48), ('foreign exchange derivatives at fair value', 47), (' electricity derivatives at fair value', 47), (' derivative contracts - fair value', 47), ('other assets', 45), (' condensate', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' forward exchange contracts', 41), (' other', 40), (' bank guarantee', 38), (' accrued interest', 36), (' rental bond', 36), (' current investments', 36), (' accrued rebates', 36), (' lng', 33), ('current', 29), (' related party disclosures', 29), (' deposits', 29)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = none allowance for expected credit losses , res_fuzz_match = [('current', 57), (' related party disclosures', 49), (' interest receivable', 47), (' forward exchange contracts', 46), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), (' related party receivable', 44), (' accrued interest', 43), (' long service leave receivable', 43), (' other receivables - related party', 43), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' electricity derivatives at fair value', 41), (' other deposits receivable - related party', 41), (' foreign exchange forward contracts', 41), (' other', 40), ('foreign exchange derivatives at fair value', 39), (' income tax receivable from related parties', 39), (' amount receivable from controlling entity', 39), (' derivative contracts - fair value', 38), (' other debtors and prepayments', 35), (' share of jv prepayments', 33), (' lng', 33), (' bank guarantee', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = none 41636 , res_fuzz_match = [(' condensate', 75), ('other assets', 50), ('foreign exchange derivatives at fair value', 50), (' accrued interest', 50), (' other', 50), (' income tax receivable from related parties', 50), (' derivative contracts - fair value', 50), (' long service leave receivable', 50), (' other receivables - related party', 50), (' amount receivable from controlling entity', 50), (' interest receivable', 50), (' bank guarantee', 50), (' rental bond', 50), (' current investments', 50), (' foreign exchange forward contracts', 50), (' forward exchange contracts', 50), (' lng', 33), ('current', 25), (' electricity derivatives at fair value', 25), (' related party disclosures', 25), (' other deposits receivable - related party', 25), (' deposits', 25), (' related party receivable', 25), (' share of jv prepayments', 25), (' accrued rebates', 25), (' other debtors and prepayments', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total related party receivables - ultimate parent company , res_fuzz_match = [(' related party receivable', 100), (' related party disclosures', 67), (' other receivables - related party', 67), (' interest receivable', 67), (' other deposits receivable - related party', 59), ('current', 57), (' income tax receivable from related parties', 55), (' rental bond', 55), (' accrued rebates', 55), (' long service leave receivable', 52), (' amount receivable from controlling entity', 52), (' share of jv prepayments', 50), (' bank guarantee', 46), ('other assets', 45), (' electricity derivatives at fair value', 45), (' deposits', 43), (' current investments', 43), (' condensate', 43), (' other debtors and prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' derivative contracts - fair value', 42), (' other', 40), (' foreign exchange forward contracts', 38), (' forward exchange contracts', 38), (' accrued interest', 36), (' lng', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 67), (' interest receivable', 67), ('other assets', 64), (' income tax receivable from related parties', 56), (' other deposits receivable - related party', 56), (' related party receivable', 56), (' long service leave receivable', 50), (' amount receivable from controlling entity', 50), (' rental bond', 45), (' accrued rebates', 45), ('current', 43), (' accrued interest', 43), (' share of jv prepayments', 42), ('foreign exchange derivatives at fair value', 39), (' electricity derivatives at fair value', 39), (' derivative contracts - fair value', 39), (' foreign exchange forward contracts', 39), (' other debtors and prepayments', 39), (' current investments', 36), (' lng', 33), (' forward exchange contracts', 33), (' bank guarantee', 31), (' deposits', 29), (' condensate', 29), (' related party disclosures', 28)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total 2023 trade and other receivables, including related parties , res_fuzz_match = [(' other', 100), (' other deposits receivable - related party', 75), (' interest receivable', 73), (' other receivables - related party', 71), (' income tax receivable from related parties', 67), ('other assets', 64), (' accrued rebates', 64), (' related party receivable', 61), (' other debtors and prepayments', 57), (' related party disclosures', 52), (' amount receivable from controlling entity', 52), (' long service leave receivable', 48), (' derivative contracts - fair value', 46), (' forward exchange contracts', 46), ('foreign exchange derivatives at fair value', 45), (' electricity derivatives at fair value', 45), (' rental bond', 45), ('current', 43), (' accrued interest', 43), (' deposits', 43), (' current investments', 43), (' share of jv prepayments', 42), (' foreign exchange forward contracts', 41), (' bank guarantee', 38), (' lng', 33), (' condensate', 29)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' electricity derivatives at fair value', 80), (' accrued interest', 60), (' derivative contracts - fair value', 60), (' other deposits receivable - related party', 60), (' amount receivable from controlling entity', 60), (' interest receivable', 60), (' bank guarantee', 60), (' related party receivable', 60), (' foreign exchange forward contracts', 60), (' forward exchange contracts', 60), (' other debtors and prepayments', 60), ('current', 40), ('other assets', 40), ('foreign exchange derivatives at fair value', 40), (' other', 40), (' related party disclosures', 40), (' income tax receivable from related parties', 40), (' long service leave receivable', 40), (' other receivables - related party', 40), (' rental bond', 40), (' share of jv prepayments', 40), (' condensate', 40), (' accrued rebates', 40), (' deposits', 20), (' current investments', 20), (' lng', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 3, 4, 4, 5, 5], 'score': [80, 80, 80, 100, 80, 100, 80, 100, 80], 'value': [41763.0, -127.0, 21783.0, 387.0, 387.0, 625.0, 625.0, 42648.0, 42648.0], 'label': ['Trade', 'Trade', 'Trade', 'Total Related party receivables - ultimate parent company', 'Trade', 'Total Other receivables', 'Trade', 'Total 2023 Trade and other receivables, including related parties', 'Trade'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns']}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = [' '] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = none allowance for expected credit losses , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = none 41636 , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total related party receivables - ultimate parent company , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total other receivables , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total 2023 trade and other receivables, including related parties , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [(' ', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: keyword_mapping , File:BSDataBucketingUtils.py,  function: calculate_other_current_assets
2023-08-10 12:54:32+0530 - sLogger - ERROR - error occured: 2023
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value', 'net book value']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69), ('plant and equipment', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 4935.0, 'line_item_label': ['Plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [4935.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment', 'plant and equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30), ('plant and equipment', 29)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant and equipment', 100), ('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69), ('plant and equipment', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant and equipment', 37), ('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29), ('plant and equipment', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34), ('plant and equipment', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 5664.0, 'line_item_label': ['Plant and equipment'], 'note_numbers': ['10'], 'line_item_value': [5664.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('depreciatio', 30), ('accumulated depreciation', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('accumulated depreciation', 41), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9, 10, 20, 21, 22, 23, 33, 34, 35, 36, 46, 47, 48, 49, 59, 60, 61, 62, 72, 73, 74, 75, 85, 86, 87, 88, 98, 99, 100, 101, 111, 112, 113, 114, 124, 125, 126, 127], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [-12.0, -7.0, 0.0, -19.0, -19.0, -9.0, 0.0, -28.0, -3610.0, -717.0, 52.0, -4275.0, -4275.0, -733.0, 49.0, -4959.0, -722.0, -100.0, 0.0, -822.0, -822.0, -120.0, 0.0, -942.0, 0.0, 0.0, 0.0, 0.0, -5116.0, 0.0, 0.0, 0.0, -4344.0, -824.0, 52.0, -5116.0, -5116.0, -862.0, 49.0, -5929.0], 'label': ['Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('net value', 25), ('net book value', 24), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('gross', 40), ('net value', 38), ('net book value', 31), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('net value', 25), ('net book value', 24), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('cost', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('net value', 25), ('net book value', 24), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost', 50), ('net value', 38), ('net book value', 25), ('gross', 0)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('net value', 25), ('net book value', 24), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('gross', 80), ('net book value', 38), ('cost', 25), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost', 100), ('net value', 50), ('gross', 40), ('net book value', 40)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost', 100), ('gross', 60), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost', 100), ('gross', 40), ('net book value', 27), ('net value', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost', 100), ('net value', 25), ('net book value', 24), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 38), ('net book value', 32)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('gross', 40), ('net book value', 38), ('cost', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('cost', 50), ('gross', 40), ('net book value', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost', 50), ('gross', 40), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('cost', 25), ('net value', 25), ('net book value', 23), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('cost', 25), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('cost', 50), ('net book value', 40), ('gross', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 26, 27, 28, 29, 30, 31, 32, 52, 53, 54, 55, 56, 57, 58, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100, 100, 100], 'value': [106.0, 0.0, 91.0, 0.0, 0.0, 0.0, 197.0, 7515.0, 0.0, 716.0, 0.0, -52.0, 0.0, 8179.0, 960.0, 0.0, 42.0, 0.0, 0.0, 0.0, 1002.0, 523.0, 523.0, 2645.0, 2645.0, -849.0, -849.0, -1624.0, -1624.0, 0.0, 0.0, -22.0, -22.0, 673.0, 673.0, 0.0, 0.0, 0.0, 0.0, 673.0, 523.0, 673.0, 2011.0, -1711.0, -403.0, 0.0, -5.0, 565.0, -5116.0, 0.0, 0.0, 0.0, 565.0, 673.0, 9104.0, 2645.0, 0.0, -1624.0, -52.0, -22.0, 10051.0], 'label': ['Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Cost At1 April 2021', "Capital work in progress $'000", 'Cost Additions', "Capital work in progress $'000", 'Cost Reclassification to PPE', "Capital work in progress $'000", 'Cost Reclassification to Investment Property & Intangible assets', "Capital work in progress $'000", 'Cost Disposals', "Capital work in progress $'000", 'Cost Write-offs', "Capital work in progress $'000", 'Cost At31 March 2022', "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('plant property equipment', 63), ('property plant equipment', 63)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('plant property equipment', 69), ('property plant equipment', 69)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('plant property equipment', 29), ('property plant equipment', 29)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['construction in progress ', ' work in progress ', ' capital works in progress']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:32+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-08-10 12:54:32+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 73), (' plant property equipment ', 53), (' investment property', 33), ('Work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [(' investment property', 100), (' plant property equipment ', 73), (' property plant equipment ', 47), ('Work in progress ', 38), (' plant and equipment ', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 50), (' plant property equipment ', 42), (' property plant equipment ', 42), (' investment property', 42), ('Work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 16710.0, 'line_item_label': ['Plant and equipment', 'Investment property'], 'note_numbers': ['10', '11'], 'line_item_value': [4935.0, 11775.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['Work in progress ', ' plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('Work in progress ', 38), (' property plant equipment ', 38), (' plant property equipment ', 31), (' plant and equipment ', 31), (' investment property', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), (' property plant equipment ', 73), (' plant property equipment ', 53), (' investment property', 33), ('Work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [(' investment property', 100), (' plant property equipment ', 73), (' property plant equipment ', 47), ('Work in progress ', 38), (' plant and equipment ', 34)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 50), (' plant property equipment ', 42), (' property plant equipment ', 42), (' investment property', 42), ('Work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property', 34), (' property plant equipment ', 33), ('Work in progress ', 31), (' plant property equipment ', 27), (' plant and equipment ', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' property plant equipment ', 40), (' investment property', 34), (' plant property equipment ', 33), ('Work in progress ', 31), (' plant and equipment ', 27)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 17220.0, 'line_item_label': ['Plant and equipment', 'Investment property'], 'note_numbers': ['10', '11'], 'line_item_value': [5664.0, 11556.0]}
2023-08-10 12:54:32+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:32+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress', 46), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('construction in progress ', 50), (' work in progress ', 46), (' capital works in progress', 39)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('construction in progress ', 50), (' work in progress ', 46), (' capital works in progress', 42)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress', 38), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress', 38), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 37), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [(' capital works in progress', 31), ('construction in progress ', 25), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 41), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' work in progress ', 42), (' capital works in progress', 38), ('construction in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress', 46), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('construction in progress ', 50), (' work in progress ', 46), (' capital works in progress', 39)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('construction in progress ', 50), (' work in progress ', 46), (' capital works in progress', 42)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress', 38), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress', 38), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 37), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [(' capital works in progress', 31), ('construction in progress ', 25), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 41), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' capital works in progress', 33), ('construction in progress ', 27), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress', 46), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('construction in progress ', 50), (' work in progress ', 46), (' capital works in progress', 39)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('construction in progress ', 50), (' work in progress ', 46), (' capital works in progress', 42)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress', 38), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress', 38), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 37), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [(' capital works in progress', 31), ('construction in progress ', 25), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 41), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 42), (' work in progress ', 25)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress', 46), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('construction in progress ', 50), (' work in progress ', 46), (' capital works in progress', 39)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('construction in progress ', 50), (' work in progress ', 46), (' capital works in progress', 42)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress', 38), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress', 38), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 37), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [(' capital works in progress', 31), ('construction in progress ', 25), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 41), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' work in progress ', 100), (' capital works in progress', 100), ('construction in progress ', 61)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress', 46), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('construction in progress ', 50), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('construction in progress ', 50), (' work in progress ', 46), (' capital works in progress', 39)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('construction in progress ', 50), (' work in progress ', 46), (' capital works in progress', 42)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('construction in progress ', 55), (' work in progress ', 36), (' capital works in progress', 36)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress', 38), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('construction in progress ', 54), (' capital works in progress', 38), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 37), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [(' capital works in progress', 31), ('construction in progress ', 25), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('construction in progress ', 41), (' capital works in progress', 41), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 15)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' capital works in progress', 37), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('construction in progress ', 40), (' capital works in progress', 40), (' work in progress ', 20)]
2023-08-10 12:54:32+0530 - sLogger - DEBUG - best_match = {'data_index': [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [523.0, 2645.0, -849.0, -1624.0, 0.0, -22.0, 673.0, 0.0, 0.0, 0.0, 0.0, 673.0, 523.0, 673.0, 2011.0, -1711.0, -403.0, 0.0, -5.0, 565.0, -5116.0, 0.0, 0.0, 0.0, 565.0, 673.0], 'label': ["Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['construction in progress ', ' work in progress ', ' capital works in progress'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('construction in progress ', 62), (' capital works in progress', 46), (' work in progress ', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reclassification from ppe at31 march 2022 , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 33), (' work in progress ', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 april 2022 , res_fuzz_match = [('construction in progress ', 39), (' capital works in progress', 37), (' work in progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification from ppe , res_fuzz_match = [(' capital works in progress', 47), ('construction in progress ', 44), (' work in progress ', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 15)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [('construction in progress ', 33), (' capital works in progress', 32), (' work in progress ', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' capital works in progress', 42), ('construction in progress ', 39), (' work in progress ', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('construction in progress ', 33), (' work in progress ', 31), (' capital works in progress', 26)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' capital works in progress', 38), ('construction in progress ', 31), (' work in progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' capital works in progress', 21), ('construction in progress ', 14), (' work in progress ', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('tangible assets', 36)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 80, 'value': 2547.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [2547.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('tangible assets', 36)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('tangible assets', 36)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('tangible assets', 50)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 80, 'value': 1866.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [1866.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' intangible asset', 50), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [(' intangible asset', 42), (' goodwill on consolidation ', 33), ('goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 25), ('goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 2547.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [2547.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['goodwill ', ' goodwill on consolidation ', ' intangible asset'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible asset', 58), (' goodwill on consolidation ', 23), ('goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' intangible asset', 50), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [(' intangible asset', 42), (' goodwill on consolidation ', 33), ('goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' intangible asset', 100), (' goodwill on consolidation ', 25), ('goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' intangible asset', 58), ('goodwill ', 29), (' goodwill on consolidation ', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' intangible asset', 70), (' goodwill on consolidation ', 20), ('goodwill ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1866.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [1866.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' Construction in Progress ', ' Work in Progress ', ' Capital Works in Progress ']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('property plant equipment', 73), (' plant property equipment', 53), ('intangible assets ', 50), (' intangible under development ', 47), (' intangible assets under development ', 47)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [(' plant property equipment', 73), ('property plant equipment', 47), ('intangible assets ', 42), (' intangible under development ', 40), (' intangible assets under development ', 40)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets ', 100), (' intangible assets under development ', 100), (' intangible under development ', 67), (' plant property equipment', 42), ('property plant equipment', 42)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 2547.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [2547.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['intangible assets ', ' intangible under development ', ' intangible assets under development ', ' plant property equipment', 'property plant equipment'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' intangible assets under development ', 62), ('intangible assets ', 58), (' intangible under development ', 38), ('property plant equipment', 38), (' plant property equipment', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('property plant equipment', 73), (' plant property equipment', 53), ('intangible assets ', 50), (' intangible under development ', 47), (' intangible assets under development ', 47)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [(' plant property equipment', 73), ('property plant equipment', 47), ('intangible assets ', 42), (' intangible under development ', 40), (' intangible assets under development ', 40)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible assets ', 100), (' intangible assets under development ', 100), (' intangible under development ', 67), (' plant property equipment', 42), ('property plant equipment', 42)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('intangible assets ', 58), (' intangible assets under development ', 53), ('property plant equipment', 33), (' intangible under development ', 27), (' plant property equipment', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible assets ', 70), ('property plant equipment', 40), (' intangible under development ', 33), (' intangible assets under development ', 33), (' plant property equipment', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 1866.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['13'], 'line_item_value': [1866.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['Other intangibles ', ' development and software ', ' goodwill ', ' software ', ' carrying amounts ', ' Construction in Progress ', ' Work in Progress ', ' Capital Works in Progress '] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' Construction in Progress ', 58), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 33), (' Work in Progress ', 33), (' Capital Works in Progress ', 33), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' Construction in Progress ', 50), (' Work in Progress ', 46), (' software ', 43), (' Capital Works in Progress ', 42), ('Other intangibles ', 33), (' carrying amounts ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' Construction in Progress ', 54), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' Capital Works in Progress ', 38), (' carrying amounts ', 33), (' Work in Progress ', 23), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Capital Works in Progress ', 32), (' Work in Progress ', 31), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' carrying amounts ', 58), ('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 39), (' Work in Progress ', 38), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Work in Progress ', 31), (' Capital Works in Progress ', 26), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' Work in Progress ', 46), (' software ', 43), (' carrying amounts ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 33), (' development and software ', 32), (' goodwill ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' carrying amounts ', 50), (' software ', 43), (' development and software ', 35), (' Capital Works in Progress ', 35), ('Other intangibles ', 33), (' goodwill ', 29), (' Construction in Progress ', 29), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Capital Works in Progress ', 32), (' Work in Progress ', 31), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' carrying amounts ', 58), ('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 39), (' Work in Progress ', 38), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Work in Progress ', 31), (' Capital Works in Progress ', 26), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [('Other intangibles ', 30), (' development and software ', 30), (' carrying amounts ', 20), (' Construction in Progress ', 20), (' Work in Progress ', 20), (' Capital Works in Progress ', 20), (' goodwill ', 14), (' software ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' Construction in Progress ', 58), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 33), (' Work in Progress ', 33), (' Capital Works in Progress ', 33), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' Construction in Progress ', 50), (' Work in Progress ', 46), (' software ', 43), (' Capital Works in Progress ', 42), ('Other intangibles ', 33), (' carrying amounts ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' Construction in Progress ', 54), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' Capital Works in Progress ', 38), (' carrying amounts ', 33), (' Work in Progress ', 23), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Capital Works in Progress ', 32), (' Work in Progress ', 31), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' carrying amounts ', 58), ('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 39), (' Work in Progress ', 38), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Work in Progress ', 31), (' Capital Works in Progress ', 26), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' Work in Progress ', 46), (' software ', 43), (' carrying amounts ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 33), (' development and software ', 32), (' goodwill ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' carrying amounts ', 50), (' software ', 43), (' development and software ', 35), (' Capital Works in Progress ', 35), ('Other intangibles ', 33), (' goodwill ', 29), (' Construction in Progress ', 29), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Capital Works in Progress ', 32), (' Work in Progress ', 31), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' carrying amounts ', 58), ('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 39), (' Work in Progress ', 38), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Work in Progress ', 31), (' Capital Works in Progress ', 26), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' development and software ', 100), (' software ', 100), (' Construction in Progress ', 43), (' Capital Works in Progress ', 43), ('Other intangibles ', 29), (' goodwill ', 29), (' carrying amounts ', 29), (' Work in Progress ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' Construction in Progress ', 58), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 33), (' Work in Progress ', 33), (' Capital Works in Progress ', 33), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' Construction in Progress ', 50), (' Work in Progress ', 46), (' software ', 43), (' Capital Works in Progress ', 42), ('Other intangibles ', 33), (' carrying amounts ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' Construction in Progress ', 54), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' Capital Works in Progress ', 38), (' carrying amounts ', 33), (' Work in Progress ', 23), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Capital Works in Progress ', 32), (' Work in Progress ', 31), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' carrying amounts ', 58), ('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 39), (' Work in Progress ', 38), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Work in Progress ', 31), (' Capital Works in Progress ', 26), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' Work in Progress ', 46), (' software ', 43), (' carrying amounts ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 33), (' development and software ', 32), (' goodwill ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' carrying amounts ', 50), (' software ', 43), (' development and software ', 35), (' Capital Works in Progress ', 35), ('Other intangibles ', 33), (' goodwill ', 29), (' Construction in Progress ', 29), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Capital Works in Progress ', 32), (' Work in Progress ', 31), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' carrying amounts ', 58), ('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 39), (' Work in Progress ', 38), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Work in Progress ', 31), (' Capital Works in Progress ', 26), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' carrying amounts ', 50), (' Work in Progress ', 50), (' Construction in Progress ', 46), (' Capital Works in Progress ', 46), (' development and software ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' Construction in Progress ', 58), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 33), (' Work in Progress ', 33), (' Capital Works in Progress ', 33), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' Construction in Progress ', 50), (' Work in Progress ', 46), (' software ', 43), (' Capital Works in Progress ', 42), ('Other intangibles ', 33), (' carrying amounts ', 33), (' development and software ', 32), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' Construction in Progress ', 54), (' software ', 43), ('Other intangibles ', 42), (' development and software ', 38), (' Capital Works in Progress ', 38), (' carrying amounts ', 33), (' Work in Progress ', 23), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Capital Works in Progress ', 32), (' Work in Progress ', 31), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' carrying amounts ', 58), ('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 39), (' Work in Progress ', 38), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Work in Progress ', 31), (' Capital Works in Progress ', 26), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' Work in Progress ', 46), (' software ', 43), (' carrying amounts ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 33), (' development and software ', 32), (' goodwill ', 29), ('Other intangibles ', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' carrying amounts ', 50), (' software ', 43), (' development and software ', 35), (' Capital Works in Progress ', 35), ('Other intangibles ', 33), (' goodwill ', 29), (' Construction in Progress ', 29), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Capital Works in Progress ', 32), (' Work in Progress ', 31), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' carrying amounts ', 58), ('Other intangibles ', 50), (' software ', 43), (' development and software ', 42), (' Capital Works in Progress ', 42), (' Construction in Progress ', 39), (' Work in Progress ', 38), (' goodwill ', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' software ', 43), ('Other intangibles ', 42), (' development and software ', 42), (' carrying amounts ', 42), (' Construction in Progress ', 33), (' Work in Progress ', 31), (' Capital Works in Progress ', 26), (' goodwill ', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amounts ', 67), (' Capital Works in Progress ', 38), (' development and software ', 31), (' Construction in Progress ', 31), (' goodwill ', 29), (' software ', 29), ('Other intangibles ', 25), (' Work in Progress ', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' development and software ', 60), (' software ', 60), ('Other intangibles ', 40), (' goodwill ', 40), (' carrying amounts ', 40), (' Construction in Progress ', 40), (' Capital Works in Progress ', 40), (' Work in Progress ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [15714.0, 484.0, 16198.0, -13924.0, -641.0, -14565.0, 1633.0, 1790.0, 384.0, 16582.0, -14565.0, -684.0, -15249.0, 1333.0, 1633.0], 'label': ["Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000", "Software $'000"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('donations', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('donations', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('donations', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('donations', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('investment', 100), (' investment in associate', 62), (' investment in joint venture', 60), (' investments accounted for using the equity method', 60), ('derivative financial instruments', 48), ('joint ventures and associates', 40)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 11775.0, 'line_item_label': ['Investment property'], 'note_numbers': ['11'], 'line_item_value': [11775.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('joint ventures and associates', 53), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), (' investment in associate', 38), ('investment', 33), ('derivative financial instruments', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('investment', 100), (' investment in associate', 62), (' investment in joint venture', 60), (' investments accounted for using the equity method', 60), ('derivative financial instruments', 48), ('joint ventures and associates', 40)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment in associate', 46), ('joint ventures and associates', 40), (' investments accounted for using the equity method', 40), ('investment', 33), ('derivative financial instruments', 33), (' investment in joint venture', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 11556.0, 'line_item_label': ['Investment property'], 'note_numbers': ['11'], 'line_item_value': [11556.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('investment in joint venture', 38), (' investment in associate', 38), (' carrying amount at the end of the financial year', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reclassification from ppe at31 march 2022 , res_fuzz_match = [(' investment in associate', 38), ('investment in joint venture', 37), (' carrying amount at the end of the financial year', 37)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [(' carrying amount at the end of the financial year', 39), (' investment in associate', 31), ('investment in joint venture', 26)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' carrying amount at the end of the financial year', 41), ('investment in joint venture', 37), (' investment in associate', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 42), (' investment in associate', 38), ('investment in joint venture', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 april 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 58), (' investment in associate', 38), ('investment in joint venture', 32)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification from ppe , res_fuzz_match = [(' carrying amount at the end of the financial year', 45), (' investment in associate', 38), ('investment in joint venture', 37)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [(' carrying amount at the end of the financial year', 58), (' investment in associate', 38), ('investment in joint venture', 32)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 42), (' investment in associate', 38), ('investment in joint venture', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [(' carrying amount at the end of the financial year', 41), ('investment in joint venture', 37), (' investment in associate', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' carrying amount at the end of the financial year', 42), (' investment in associate', 38), ('investment in joint venture', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' carrying amount at the end of the financial year', 62), (' investment in associate', 40), ('investment in joint venture', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' carrying amount at the end of the financial year', 36), (' investment in associate', 31), ('investment in joint venture', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('deferred tax assets', 40), ('deferred tax', 33), ('deferred charges', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 44553.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [44553.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [('deferred tax', 33), ('deferred tax assets', 33), ('deferred charges', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('deferred tax assets', 40), ('deferred tax', 33), ('deferred charges', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 31), ('deferred tax', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [5], 'score': 100, 'value': 60999.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['5'], 'line_item_value': [60999.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: net (gain)/loss on actuarial gains and losses , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: total , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [(' deferred tax balances', 62), ('deferred tax assets', 60)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: net (gain)/loss on actuarial gains and losses , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: total , res_fuzz_match = [('deferred tax assets', 80), (' deferred tax balances', 75)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 5, 10, 11], 'score': [80, 80, 80, 80], 'value': [114.0, 114.0, -1.0, -1.0], 'label': ['Deferred tax related to items recognised in OCI during the year: Net (gain)/loss on actuarial gains and losses', 'Deferred tax related to items recognised in OCI during the year: Total', 'Deferred tax related to items recognised in OCI during the year: Net (gain)/loss on actuarial gains and losses', 'Deferred tax related to items recognised in OCI during the year: Total'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none accounting profit before tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses for tax purposes , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none income tax expense at effective tax rate , res_fuzz_match = [('deferred tax assets', 67), (' deferred tax balances', 56)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none accounting profit before tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none adjustments in respect of current income tax of prior year , res_fuzz_match = [('deferred tax assets', 40), (' deferred tax balances', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses for tax purposes , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none income tax expense at effective tax rate , res_fuzz_match = [('deferred tax assets', 67), (' deferred tax balances', 56)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [('deferred tax assets', 87), (' deferred tax balances', 56)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [('deferred tax assets', 100), (' deferred tax balances', 69)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 87, 87, 87, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 87, 87, 87, 100, 100], 'value': [64.0, 58608.0, 1195.0, -2869.0, 3539.0, 595.0, -120.0, -13.0, 60999.0, 44553.0, 16585.0, -114.0, -25.0, 60999.0, -209.0, 42057.0, 867.0, -3465.0, 4666.0, 652.0, -4.0, -11.0, 44553.0, 26730.0, 17117.0, 1.0, 705.0, 44553.0], 'label': ['Deferred tax assets relate to the following: Unrealised foreign exchange gains', 'Deferred tax assets relate to the following: Provisions', 'Deferred tax assets relate to the following: Business related costs', 'Deferred tax assets relate to the following: Right-of-use assets', 'Deferred tax assets relate to the following: Lease liabilities', 'Deferred tax assets relate to the following: Fit out incentive received', 'Deferred tax assets relate to the following: Interest income not received', 'Deferred tax assets relate to the following: Prepaid insurance', 'Deferred tax assets relate to the following: Total deferred tax assets', 'Reconciliation ofdeferred tax assets: Asofl beginning of the period', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in profit or loss', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in other comprehensive income', 'Reconciliation ofdeferred tax assets: Adjustments in respect deferred tax assets of prior years As of the end ofthe period', 'Reconciliation ofdeferred tax assets: Adjustments in respect deferred tax assets of prior years As of the end ofthe period', 'Deferred tax assets relate to the following: Unrealised foreign exchange gains', 'Deferred tax assets relate to the following: Provisions', 'Deferred tax assets relate to the following: Business related costs', 'Deferred tax assets relate to the following: Right-of-use assets', 'Deferred tax assets relate to the following: Lease liabilities', 'Deferred tax assets relate to the following: Fit out incentive received', 'Deferred tax assets relate to the following: Interest income not received', 'Deferred tax assets relate to the following: Prepaid insurance', 'Deferred tax assets relate to the following: Total deferred tax assets', 'Reconciliation ofdeferred tax assets: Asofl beginning of the period', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in profit or loss', 'Reconciliation ofdeferred tax assets: Tax income during the period recognised in other comprehensive income', 'Reconciliation ofdeferred tax assets: Adjustments in respect deferred tax assets of prior years As of the end ofthe period', 'Reconciliation ofdeferred tax assets: Adjustments in respect deferred tax assets of prior years As of the end ofthe period'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('other assets', 46), (' other assets', 46), (' other non-current assets', 41), (' other non-current assets', 41), (' exploration and evaluation expenditure', 38), (' loan receivables', 38), (' leased assets', 32), (' financial assets', 29), ('non-current', 27), (' leases', 21)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 80, 'value': 2547.0, 'line_item_label': ['Non-Current Assets', 'Intangible assets'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 2547.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 48), (' leased assets', 40), (' loan receivables', 38), (' financial assets', 36), ('other assets', 31), (' other assets', 31), (' other non-current assets', 29), (' other non-current assets', 29), (' leases', 21), ('non-current', 18)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [('other assets', 46), (' other assets', 46), (' other non-current assets', 41), (' other non-current assets', 41), (' exploration and evaluation expenditure', 38), (' loan receivables', 38), (' leased assets', 32), (' financial assets', 29), ('non-current', 27), (' leases', 21)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' leased assets', 56), ('other assets', 54), (' other assets', 54), (' financial assets', 50), (' other non-current assets', 47), (' other non-current assets', 47), (' loan receivables', 31), (' exploration and evaluation expenditure', 29), (' leases', 21), ('non-current', 18)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': 80, 'value': 1866.0, 'line_item_label': ['Non-Current Assets', 'Intangible assets'], 'note_numbers': [nan, '13'], 'line_item_value': [0.0, 1866.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' allowance for expected credit losses', 50), (' motor vehicles', 43), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' total properties', 42), (' warehouse and office equipment', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), (' total properties', 43), (' electricity derivatives at fair value', 41), (' right-of-use-assets', 40), (' allowance for expected credit losses', 35), (' warehouse and office equipment', 35), (' defined benefit plans', 33), ('finance receivables', 31), (' exploration and evaluation expenditure', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' warehouse and office equipment', 46), (' allowance for expected credit losses', 38), (' electricity derivatives at fair value', 38), (' exploration and evaluation expenditure', 38), (' total properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' defined benefit plans', 31), (' right-of-use-assets', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' total properties', 43), (' right-of-use-assets', 40), (' electricity derivatives at fair value', 37), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' warehouse and office equipment', 33), (' exploration and evaluation expenditure', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 47), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' warehouse and office equipment', 35), (' motor vehicles', 33), (' defined benefit plans', 30), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = memberships $'000 , res_fuzz_match = [(' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' motor vehicles', 40), ('finance receivables', 30), (' allowance for expected credit losses', 30), (' exploration and evaluation expenditure', 30), (' total properties', 30), (' warehouse and office equipment', 30), (' right-of-use-assets', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' allowance for expected credit losses', 50), (' motor vehicles', 43), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' total properties', 42), (' warehouse and office equipment', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), (' total properties', 43), (' electricity derivatives at fair value', 41), (' right-of-use-assets', 40), (' allowance for expected credit losses', 35), (' warehouse and office equipment', 35), (' defined benefit plans', 33), ('finance receivables', 31), (' exploration and evaluation expenditure', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' warehouse and office equipment', 46), (' allowance for expected credit losses', 38), (' electricity derivatives at fair value', 38), (' exploration and evaluation expenditure', 38), (' total properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' defined benefit plans', 31), (' right-of-use-assets', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' total properties', 43), (' right-of-use-assets', 40), (' electricity derivatives at fair value', 37), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' warehouse and office equipment', 33), (' exploration and evaluation expenditure', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 47), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' warehouse and office equipment', 35), (' motor vehicles', 33), (' defined benefit plans', 30), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = software $'000 , res_fuzz_match = [(' total properties', 57), (' allowance for expected credit losses', 43), (' electricity derivatives at fair value', 43), (' right-of-use-assets', 43), (' motor vehicles', 43), ('finance receivables', 29), (' defined benefit plans', 29), (' exploration and evaluation expenditure', 29), (' warehouse and office equipment', 29)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' allowance for expected credit losses', 50), (' motor vehicles', 43), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' total properties', 42), (' warehouse and office equipment', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), (' total properties', 43), (' electricity derivatives at fair value', 41), (' right-of-use-assets', 40), (' allowance for expected credit losses', 35), (' warehouse and office equipment', 35), (' defined benefit plans', 33), ('finance receivables', 31), (' exploration and evaluation expenditure', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' warehouse and office equipment', 46), (' allowance for expected credit losses', 38), (' electricity derivatives at fair value', 38), (' exploration and evaluation expenditure', 38), (' total properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' defined benefit plans', 31), (' right-of-use-assets', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' total properties', 43), (' right-of-use-assets', 40), (' electricity derivatives at fair value', 37), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' warehouse and office equipment', 33), (' exploration and evaluation expenditure', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 47), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' warehouse and office equipment', 35), (' motor vehicles', 33), (' defined benefit plans', 30), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = marketing promotion $'000 , res_fuzz_match = [(' total properties', 46), (' allowance for expected credit losses', 38), (' defined benefit plans', 33), (' electricity derivatives at fair value', 31), (' exploration and evaluation expenditure', 31), (' warehouse and office equipment', 31), (' motor vehicles', 25), ('finance receivables', 23), (' right-of-use-assets', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at1april 2021 , res_fuzz_match = [(' allowance for expected credit losses', 50), (' motor vehicles', 43), (' electricity derivatives at fair value', 42), (' exploration and evaluation expenditure', 42), (' total properties', 42), (' warehouse and office equipment', 42), ('finance receivables', 33), (' defined benefit plans', 33), (' right-of-use-assets', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), (' total properties', 43), (' electricity derivatives at fair value', 41), (' right-of-use-assets', 40), (' allowance for expected credit losses', 35), (' warehouse and office equipment', 35), (' defined benefit plans', 33), ('finance receivables', 31), (' exploration and evaluation expenditure', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [(' warehouse and office equipment', 46), (' allowance for expected credit losses', 38), (' electricity derivatives at fair value', 38), (' exploration and evaluation expenditure', 38), (' total properties', 38), (' motor vehicles', 33), ('finance receivables', 31), (' defined benefit plans', 31), (' right-of-use-assets', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 reclassification from ppe , res_fuzz_match = [(' motor vehicles', 50), ('finance receivables', 46), (' total properties', 43), (' right-of-use-assets', 40), (' electricity derivatives at fair value', 37), (' allowance for expected credit losses', 33), (' defined benefit plans', 33), (' warehouse and office equipment', 33), (' exploration and evaluation expenditure', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = at1 april 2022 at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 47), ('finance receivables', 38), (' total properties', 36), (' allowance for expected credit losses', 35), (' exploration and evaluation expenditure', 35), (' warehouse and office equipment', 35), (' motor vehicles', 33), (' defined benefit plans', 30), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' allowance for expected credit losses', 46), (' defined benefit plans', 44), (' total properties', 43), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation amortisation charge for the year (note 6) , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' allowance for expected credit losses', 43), (' motor vehicles', 42), (' warehouse and office equipment', 38), (' total properties', 36), (' defined benefit plans', 33), (' right-of-use-assets', 33), (' exploration and evaluation expenditure', 33), ('finance receivables', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 45), (' total properties', 43), (' allowance for expected credit losses', 42), (' defined benefit plans', 39), ('finance receivables', 38), (' exploration and evaluation expenditure', 38), (' motor vehicles', 33), (' warehouse and office equipment', 29), (' right-of-use-assets', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' electricity derivatives at fair value', 50), (' exploration and evaluation expenditure', 44), ('finance receivables', 40), (' motor vehicles', 33), (' allowance for expected credit losses', 31), (' warehouse and office equipment', 31), (' total properties', 29), (' right-of-use-assets', 28), (' defined benefit plans', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [(' total properties', 100), (' allowance for expected credit losses', 40), (' electricity derivatives at fair value', 40), (' defined benefit plans', 40), (' right-of-use-assets', 40), (' exploration and evaluation expenditure', 40), (' motor vehicles', 40), ('finance receivables', 20), (' warehouse and office equipment', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [15764.0, 1624.0, 17388.0, -13924.0, -917.0, -14841.0, 2547.0, 1840.0, 384.0, 17772.0, -14841.0, -1065.0, -15906.0, 1866.0, 2547.0], 'label': ["Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000", "Total $'000"], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft ']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['bank borrowings ', ' utilised bank borrowings ', ' leases ', ' not later than 1 year ', ' not later than one year ', ' secured long-term bank loans ', ' loans from related party ', ' lease liabilities - current ', ' lease liabilities ', ' bank overdraft ', ' balance at the end of period ', ' cash overdraft']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), (' cash overdraft ', 31), ('short term debt ', 30), (' loans and borrowings ', 30), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' borrowings ', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities ', 62), (' interest bearing liabilites ', 59), (' cash and cash equivalents ', 39), (' cash overdraft ', 34), (' loans and borrowings ', 33), (' bank overdraft ', 28), ('short term debt ', 27), (' short-term debt ', 21), (' shortterm debt ', 21), ('  leases ', 21), (' borrowings ', 19), (' shortterm borrowings ', 19)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 5181.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [5181.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['short term debt ', ' short-term debt ', ' borrowings ', ' shortterm debt ', ' shortterm borrowings ', ' lease liabilities ', ' loans and borrowings ', ' bank overdraft ', '  leases ', ' interest bearing liabilites ', ' cash and cash equivalents ', ' cash overdraft '] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [(' lease liabilities ', 64), (' interest bearing liabilites ', 61), (' loans and borrowings ', 34), (' cash and cash equivalents ', 29), (' cash overdraft ', 29), ('  leases ', 22), ('short term debt ', 21), (' short-term debt ', 21), (' shortterm debt ', 21), (' bank overdraft ', 21), (' borrowings ', 20), (' shortterm borrowings ', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings ', 49), (' interest bearing liabilites ', 45), (' bank overdraft ', 44), (' cash and cash equivalents ', 42), (' cash overdraft ', 39), ('short term debt ', 38), (' short-term debt ', 33), (' shortterm debt ', 33), (' lease liabilities ', 30), (' shortterm borrowings ', 26), (' borrowings ', 21), ('  leases ', 15)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities ', 100), (' interest bearing liabilites ', 61), ('  leases ', 53), (' cash and cash equivalents ', 38), (' cash overdraft ', 32), (' loans and borrowings ', 31), (' bank overdraft ', 24), ('short term debt ', 23), (' short-term debt ', 16), (' shortterm debt ', 16), (' borrowings ', 12), (' shortterm borrowings ', 7)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [(' interest bearing liabilites ', 60), (' lease liabilities ', 55), (' cash overdraft ', 31), ('short term debt ', 30), (' loans and borrowings ', 30), (' cash and cash equivalents ', 26), (' short-term debt ', 25), (' shortterm debt ', 25), (' bank overdraft ', 25), (' shortterm borrowings ', 24), ('  leases ', 18), (' borrowings ', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' borrowings ', 33), (' shortterm borrowings ', 27), (' interest bearing liabilites ', 21), (' bank overdraft ', 20), ('  leases ', 20), (' cash overdraft ', 20), (' loans and borrowings ', 19), (' lease liabilities ', 12), ('short term debt ', 10), (' short-term debt ', 10), (' shortterm debt ', 10), (' cash and cash equivalents ', 7)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities ', 62), (' interest bearing liabilites ', 59), (' cash and cash equivalents ', 39), (' cash overdraft ', 34), (' loans and borrowings ', 33), (' bank overdraft ', 28), ('short term debt ', 27), (' short-term debt ', 21), (' shortterm debt ', 21), ('  leases ', 21), (' borrowings ', 19), (' shortterm borrowings ', 19)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 3000.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [3000.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'trade payable', 'other trade payables']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', ' payables ', ' accounts payable - trade ']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other trade payables', 42), ('trade and other payables', 38), ('trade payable', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 219685.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [219685.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'trade payable', 'other trade payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33), ('other trade payables', 31), ('trade payable', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade payable', 35), ('other trade payables', 34), ('trade and other payables', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade payable', 22), ('other trade payables', 17), ('trade and other payables', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('other trade payables', 42), ('trade and other payables', 38), ('trade payable', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 175701.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [175701.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['trade creditors ', ' trade and other payables ', ' trade payables ', ' trade payables - other parties ', ' amounts payable to controlling entity ', ' other trade payables ', ' payables to related parties ', ' payables ', ' accounts payable - trade '] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' trade payables ', 100), (' payables ', 100), (' trade payables - other parties ', 88), (' other trade payables ', 83), (' payables to related parties ', 78), (' trade and other payables ', 64), (' accounts payable - trade ', 55), (' amounts payable to controlling entity ', 54), ('trade creditors ', 50)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' trade payables ', 100), (' payables to related parties ', 100), (' payables ', 100), (' trade payables - other parties ', 83), (' other trade payables ', 83), (' amounts payable to controlling entity ', 57), (' trade and other payables ', 55), (' accounts payable - trade ', 55), ('trade creditors ', 50)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' trade payables ', 100), (' payables to related parties ', 100), (' payables ', 100), (' trade payables - other parties ', 83), (' other trade payables ', 83), (' trade and other payables ', 55), (' accounts payable - trade ', 55), (' amounts payable to controlling entity ', 54), ('trade creditors ', 50)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' payables ', 100), (' trade payables ', 67), (' other trade payables ', 56), (' trade and other payables ', 55), (' accounts payable - trade ', 45), ('trade creditors ', 43), (' trade payables - other parties ', 42), (' amounts payable to controlling entity ', 36), (' payables to related parties ', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('trade creditors ', 79), (' trade payables - other parties ', 51), (' other trade payables ', 50), (' trade and other payables ', 44), (' amounts payable to controlling entity ', 43), (' accounts payable - trade ', 33), (' payables to related parties ', 28), (' trade payables ', 25), (' payables ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' trade and other payables ', 100), (' payables ', 100), (' trade payables ', 75), (' trade payables - other parties ', 67), (' other trade payables ', 67), (' payables to related parties ', 61), (' accounts payable - trade ', 60), ('trade creditors ', 57), (' amounts payable to controlling entity ', 57)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' trade payables ', 100), (' payables ', 100), (' trade payables - other parties ', 88), (' other trade payables ', 83), (' payables to related parties ', 78), (' trade and other payables ', 64), (' accounts payable - trade ', 55), (' amounts payable to controlling entity ', 54), ('trade creditors ', 50)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' trade payables ', 100), (' payables to related parties ', 100), (' payables ', 100), (' trade payables - other parties ', 83), (' other trade payables ', 83), (' amounts payable to controlling entity ', 57), (' trade and other payables ', 55), (' accounts payable - trade ', 55), ('trade creditors ', 50)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' trade payables ', 100), (' payables to related parties ', 100), (' payables ', 100), (' trade payables - other parties ', 83), (' other trade payables ', 83), (' trade and other payables ', 55), (' accounts payable - trade ', 55), (' amounts payable to controlling entity ', 54), ('trade creditors ', 50)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' payables ', 100), (' trade payables ', 67), (' other trade payables ', 56), (' trade and other payables ', 55), (' accounts payable - trade ', 45), ('trade creditors ', 43), (' trade payables - other parties ', 42), (' amounts payable to controlling entity ', 36), (' payables to related parties ', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('trade creditors ', 79), (' trade payables - other parties ', 51), (' other trade payables ', 50), (' trade and other payables ', 44), (' amounts payable to controlling entity ', 43), (' accounts payable - trade ', 33), (' payables to related parties ', 28), (' trade payables ', 25), (' payables ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' trade and other payables ', 100), (' payables ', 100), (' trade payables ', 75), (' trade payables - other parties ', 67), (' other trade payables ', 67), (' payables to related parties ', 61), (' accounts payable - trade ', 60), ('trade creditors ', 57), (' amounts payable to controlling entity ', 57)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('trade creditors ', 0), (' trade and other payables ', 0), (' trade payables ', 0), (' trade payables - other parties ', 0), (' amounts payable to controlling entity ', 0), (' other trade payables ', 0), (' payables to related parties ', 0), (' payables ', 0), (' accounts payable - trade ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 5, 6, 7, 8, 9, 11], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [50854.0, 2270.0, 109601.0, 10374.0, 175701.0, 40768.0, 1126.0, 169387.0, 6085.0, 219685.0], 'label': ['None Trade payables external parties', 'None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Goods and services tax (GST) payable', 'None Total trade and other payables at amortised cost', 'None Trade payables external parties', 'None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Goods and services tax (GST) payable', 'None Total trade and other payables at amortised cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('trade and other payables', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 219685.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [219685.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['trade and other payables'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('trade and other payables', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('trade and other payables', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('trade and other payables', 45)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('trade and other payables', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('trade and other payables', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 175701.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['14'], 'line_item_value': [175701.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [('accrued expenses', 50), ('interest accrued', 43)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [('accrued expenses', 50), ('interest accrued', 43)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 42)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [('interest accrued', 36), ('accrued expenses', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [('interest accrued', 50), ('accrued expenses', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' income tax payable ', 56), (' provision', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities ', 67), (' tax ', 67), (' income tax payable ', 55), (' provision', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 135087.0, 'line_item_label': ['Current tax liability', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [19337.0, 115750.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['current tax liabilities ', ' income tax payable ', ' tax ', ' provision'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities ', 71), (' income tax payable ', 43), (' tax ', 33), (' provision', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' tax ', 67), (' income tax payable ', 62), ('current tax liabilities ', 44), (' provision', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities ', 73), (' income tax payable ', 48), (' tax ', 33), (' provision', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('current tax liabilities ', 100), (' tax ', 100), (' income tax payable ', 56), (' provision', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provision', 100), ('current tax liabilities ', 17), (' income tax payable ', 17), (' tax ', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('current tax liabilities ', 67), (' tax ', 67), (' income tax payable ', 55), (' provision', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 157777.0, 'line_item_label': ['Current tax liability', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 157777.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable ', ' provision for income tax ', ' tax receivable/payable'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 41), (' tax receivable/payable', 41)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 36), (' tax receivable/payable', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 41), (' tax receivable/payable', 41)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 36), (' tax receivable/payable', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 41), (' tax receivable/payable', 41)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 36), (' tax receivable/payable', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 41), (' tax receivable/payable', 41)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 36), (' tax receivable/payable', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' tax receivable/payable', 47), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 39)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 41), (' tax receivable/payable', 41)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 36), (' tax receivable/payable', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 41), (' tax receivable/payable', 41)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 36), (' tax receivable/payable', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' tax receivable/payable', 47), ('income tax (refundable)/payable ', 35), (' provision for income tax ', 35)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 41), (' tax receivable/payable', 41)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 36), (' tax receivable/payable', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 38)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('income tax (refundable)/payable ', 43), (' provision for income tax ', 41), (' tax receivable/payable', 41)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [('income tax (refundable)/payable ', 36), (' provision for income tax ', 36), (' tax receivable/payable', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [('income tax (refundable)/payable ', 46), (' provision for income tax ', 38), (' tax receivable/payable', 31)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [('income tax (refundable)/payable ', 42), (' provision for income tax ', 33), (' tax receivable/payable', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provision for income tax ', 42), ('income tax (refundable)/payable ', 33), (' tax receivable/payable', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' tax receivable/payable', 41), (' provision for income tax ', 40), ('income tax (refundable)/payable ', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:33+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-08-10 12:54:33+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': 100, 'value': 354772.0, 'line_item_label': ['Current Liabilities', 'Trade and other payables', 'Current tax liability', 'Provisions'], 'note_numbers': [nan, '14', nan, '15'], 'line_item_value': [0.0, 219685.0, 19337.0, 115750.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = current tax liability , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities', 69), (' foreign exchange contract liability', 65), ('other current liabilities', 57), (' other current liabilities', 57), (' other financial liabilities', 57), (' trade and other payables', 38), (' customer deposits', 28), (' employee benefits', 27), ('provisions', 19), (' deferred revenue', 15)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': 100, 'value': 333478.0, 'line_item_label': ['Current Liabilities', 'Trade and other payables', 'Current tax liability', 'Provisions'], 'note_numbers': [nan, '14', nan, '15'], 'line_item_value': [0.0, 175701.0, 0.0, 157777.0]}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' gst payables', 70), (' other', 60), (' loan payable to relayed party under tax funding agreement', 57), (' gst payable and accruals', 55), (' other related parties', 53), (' warranty', 50), (' loans from related party', 48), (' contract liabilites - current', 48), (' employee benefits - payroll', 47), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' share of joint venture payables', 41), (' current - liability for annual and long service leave', 40), (' gst liabilities', 40), (' rebates', 40), (' employee benefits - current', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 32), (' restructuring', 30), (' provisions - current', 29), (' provision for associate funding', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' rebates', 80), (' other related parties', 71), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 69), (' loans from related party', 62), (' gst payable and accruals', 55), (' contract liabilites - current', 52), (' warranty', 50), (' ultimate parent entity', 47), (' employee benefits - payroll', 47), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' employee benefits - current', 41), (' share of joint venture payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 28), (' provision for associate funding', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' rebates', 80), (' ultimate parent entity', 74), (' other related parties', 71), (' gst payables', 70), (' gst payable and accruals', 64), (' loans from related party', 62), (' loan payable to relayed party under tax funding agreement', 61), (' contract liabilites - current', 52), (' secured long-term bank loans', 50), (' provisions - current', 50), (' gst liabilities', 50), (' warranty', 50), (' derivative contracts - at fair value', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' restructuring', 40), (' other', 40), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' gst payables', 100), (' gst liabilities', 70), (' make good provisions', 56), (' share of joint venture payables', 52), (' arising from service contracts', 52), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' other related parties', 47), (' abandonment and decommissioning costs', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' provisions - current', 36), (' employee benefits - current', 35), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' total current employee benefits', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' ultimate parent entity', 26), (' warranty', 25), (' rebates', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [(' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), ('other creditors and accruals', 74), (' other related parties', 65), (' rebates', 60), (' restructuring', 50), (' loans from related party', 47), (' employee benefits - current', 47), (' provisions - current', 43), (' total current employee benefits', 43), (' derivative contracts - at fair value', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' arising from service contracts', 42), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 37), (' secured long-term bank loans', 37), (' contract liabilites - current', 37), (' abandonment and decommissioning costs', 37), (' provision for associate funding', 37), (' forward exchange contracts', 37), (' gst', 33), (' ultimate parent entity', 32), (' gst payable and accruals', 21), (' gst payables', 20), (' gst liabilities', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' gst', 67), (' share of joint venture payables', 60), (' other related parties', 59), (' gst payable and accruals', 50), (' warranty', 50), (' total current employee benefits', 48), ('other creditors and accruals', 46), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' contract liabilites - current', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' current - liability for annual and long service leave', 40), (' rebates', 40), (' restructuring', 40), (' make good provisions', 38), (' ultimate parent entity', 37), (' arising from service contracts', 36), (' employee benefits - current', 35), (' provision for associate funding', 32), (' gst liabilities', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables external parties , res_fuzz_match = [(' gst payables', 70), (' other', 60), (' loan payable to relayed party under tax funding agreement', 57), (' gst payable and accruals', 55), (' other related parties', 53), (' warranty', 50), (' loans from related party', 48), (' contract liabilites - current', 48), (' employee benefits - payroll', 47), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' share of joint venture payables', 41), (' current - liability for annual and long service leave', 40), (' gst liabilities', 40), (' rebates', 40), (' employee benefits - current', 39), (' secured long-term bank loans', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 32), (' restructuring', 30), (' provisions - current', 29), (' provision for associate funding', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables related parties , res_fuzz_match = [(' rebates', 80), (' other related parties', 71), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 69), (' loans from related party', 62), (' gst payable and accruals', 55), (' contract liabilites - current', 52), (' warranty', 50), (' ultimate parent entity', 47), (' employee benefits - payroll', 47), ('other creditors and accruals', 42), (' derivative contracts - at fair value', 42), (' forward exchange contracts', 42), (' employee benefits - current', 41), (' share of joint venture payables', 40), (' gst liabilities', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' current - liability for annual and long service leave', 38), (' make good provisions', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 35), (' gst', 33), (' arising from service contracts', 28), (' provision for associate funding', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none trade payables - related parties ultimate parent company , res_fuzz_match = [(' rebates', 80), (' ultimate parent entity', 74), (' other related parties', 71), (' gst payables', 70), (' gst payable and accruals', 64), (' loans from related party', 62), (' loan payable to relayed party under tax funding agreement', 61), (' contract liabilites - current', 52), (' secured long-term bank loans', 50), (' provisions - current', 50), (' gst liabilities', 50), (' warranty', 50), (' derivative contracts - at fair value', 46), (' employee benefits - payroll', 45), (' total current employee benefits', 45), (' share of joint venture payables', 44), (' arising from service contracts', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' employee benefits - current', 43), (' other creditors', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' current - liability for annual and long service leave', 41), (' restructuring', 40), (' other', 40), (' provision for associate funding', 36), (' abandonment and decommissioning costs', 35), (' gst', 33)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none goods and services tax (gst) payable , res_fuzz_match = [(' gst payables', 100), (' gst liabilities', 70), (' make good provisions', 56), (' share of joint venture payables', 52), (' arising from service contracts', 52), (' derivative contracts - at fair value', 50), (' loans from related party', 48), (' other related parties', 47), (' abandonment and decommissioning costs', 46), (' gst payable and accruals', 45), (' current - liability for annual and long service leave', 43), ('other creditors and accruals', 42), (' forward exchange contracts', 42), (' employee benefits - payroll', 41), (' loan payable to relayed party under tax funding agreement', 40), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' provisions - current', 36), (' employee benefits - current', 35), (' gst', 33), (' contract liabilites - current', 32), (' provision for associate funding', 32), (' total current employee benefits', 31), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), (' ultimate parent entity', 26), (' warranty', 25), (' rebates', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none other creditors , res_fuzz_match = [(' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), ('other creditors and accruals', 74), (' other related parties', 65), (' rebates', 60), (' restructuring', 50), (' loans from related party', 47), (' employee benefits - current', 47), (' provisions - current', 43), (' total current employee benefits', 43), (' derivative contracts - at fair value', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' arising from service contracts', 42), (' make good provisions', 38), (' warranty', 38), (' loan payable to relayed party under tax funding agreement', 37), (' secured long-term bank loans', 37), (' contract liabilites - current', 37), (' abandonment and decommissioning costs', 37), (' provision for associate funding', 37), (' forward exchange contracts', 37), (' gst', 33), (' ultimate parent entity', 32), (' gst payable and accruals', 21), (' gst payables', 20), (' gst liabilities', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none total trade and other payables at amortised cost , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' gst', 67), (' share of joint venture payables', 60), (' other related parties', 59), (' gst payable and accruals', 50), (' warranty', 50), (' total current employee benefits', 48), ('other creditors and accruals', 46), (' abandonment and decommissioning costs', 46), (' forward exchange contracts', 46), (' contract liabilites - current', 44), (' other creditors', 43), (' loans from related party', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' employee benefits - payroll', 41), (' current - liability for annual and long service leave', 40), (' rebates', 40), (' restructuring', 40), (' make good provisions', 38), (' ultimate parent entity', 37), (' arising from service contracts', 36), (' employee benefits - current', 35), (' provision for associate funding', 32), (' gst liabilities', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2, 3, 4, 5, 7, 8, 9, 10, 11], 'score': [80, 80, 100, 100, 100, 80, 80, 100, 100, 100], 'value': [2270.0, 109601.0, 10374.0, 2602.0, 175701.0, 1126.0, 169387.0, 6085.0, 2319.0, 219685.0], 'label': ['None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Goods and services tax (GST) payable', 'None Other creditors', 'None Total trade and other payables at amortised cost', 'None Trade payables related parties', 'None Trade payables - related parties ultimate parent company', 'None Goods and services tax (GST) payable', 'None Other creditors', 'None Total trade and other payables at amortised cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:33+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:33+0530 - sLogger - DEBUG - keywords = ['other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' warranty', 100), (' current - liability for annual and long service leave', 78), (' gst', 67), (' rebates', 60), (' loans from related party', 52), (' arising from service contracts', 52), (' secured long-term bank loans', 50), (' contract liabilites - current', 48), (' other related parties', 47), (' make good provisions', 44), (' provisions - current', 43), (' ultimate parent entity', 42), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 41), (' gst payable and accruals', 41), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' other', 40), (' employee benefits - current', 39), ('other creditors and accruals', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' other creditors', 36), (' other creditors', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 65), (' secured long-term bank loans', 54), (' loans from related party', 48), (' arising from service contracts', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' gst payable and accruals', 45), (' make good provisions', 44), (' provisions - current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' share of joint venture payables', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' warranty', 38), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 36), (' employee benefits - payroll', 36), (' other creditors', 36), (' total current employee benefits', 34), (' provision for associate funding', 32), (' restructuring', 30)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' gst', 67), (' current - liability for annual and long service leave', 60), (' make good provisions', 56), (' secured long-term bank loans', 50), (' provisions - current', 50), (' loans from related party', 48), (' arising from service contracts', 48), (' derivative contracts - at fair value', 46), (' share of joint venture payables', 44), (' ultimate parent entity', 42), (' other related parties', 41), (' employee benefits - payroll', 41), (' contract liabilites - current', 40), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 38), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' provision for associate funding', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-10 12:54:33+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' rebates', 60), (' other related parties', 54), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' employee benefits - payroll', 54), (' gst liabilities', 50), ('other creditors and accruals', 46), (' loan payable to relayed party under tax funding agreement', 46), (' secured long-term bank loans', 46), (' gst payable and accruals', 46), (' current - liability for annual and long service leave', 46), (' contract liabilites - current', 46), (' share of joint venture payables', 46), (' abandonment and decommissioning costs', 46), (' make good provisions', 46), (' gst payables', 40), (' other', 40), (' ultimate parent entity', 38), (' other creditors', 38), (' other creditors', 38), (' employee benefits - current', 38), (' forward exchange contracts', 38), (' other creditors', 38), (' warranty', 38), (' total current employee benefits', 38), (' gst', 33), (' provision for associate funding', 31), (' arising from service contracts', 31), (' restructuring', 30), (' provisions - current', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [(' other', 60), (' other related parties', 50), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), ('other creditors and accruals', 48), (' loans from related party', 45), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' forward exchange contracts', 43), (' gst payables', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' abandonment and decommissioning costs', 39), (' arising from service contracts', 39), (' total current employee benefits', 39), (' warranty', 38), (' provisions - current', 36), (' employee benefits - payroll', 36), (' employee benefits - current', 35), (' gst', 33), (' ultimate parent entity', 32), (' provision for associate funding', 32), (' make good provisions', 31), (' contract liabilites - current', 30), (' gst liabilities', 30), (' restructuring', 30), (' gst payable and accruals', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' ultimate parent entity', 48), (' contract liabilites - current', 45), (' rebates', 40), (' other', 40), (' warranty', 38), ('other creditors and accruals', 36), (' other related parties', 36), (' other creditors', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' loans from related party', 36), (' other creditors', 36), (' gst payable and accruals', 36), (' employee benefits - current', 36), (' current - liability for annual and long service leave', 36), (' share of joint venture payables', 36), (' employee benefits - payroll', 36), (' abandonment and decommissioning costs', 36), (' make good provisions', 36), (' forward exchange contracts', 36), (' other creditors', 36), (' total current employee benefits', 36), (' gst', 33), (' gst liabilities', 30), (' restructuring', 30), (' derivative contracts - at fair value', 27), (' provisions - current', 27), (' provision for associate funding', 27), (' arising from service contracts', 27), (' gst payables', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' rebates', 60), (' derivative contracts - at fair value', 54), (' loans from related party', 54), (' abandonment and decommissioning costs', 54), ('other creditors and accruals', 46), (' other related parties', 46), (' loan payable to relayed party under tax funding agreement', 46), (' contract liabilites - current', 46), (' employee benefits - payroll', 46), (' forward exchange contracts', 46), (' restructuring', 40), (' other', 40), (' secured long-term bank loans', 38), (' gst payable and accruals', 38), (' employee benefits - current', 38), (' current - liability for annual and long service leave', 38), (' share of joint venture payables', 38), (' arising from service contracts', 38), (' gst', 33), (' gst payables', 32), (' ultimate parent entity', 31), (' other creditors', 31), (' other creditors', 31), (' provision for associate funding', 31), (' make good provisions', 31), (' other creditors', 31), (' total current employee benefits', 31), (' gst liabilities', 30), (' warranty', 25), (' provisions - current', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - current', 75), (' provisions - current', 75), (' total current employee benefits', 75), (' contract liabilites - current', 67), (' rebates', 60), ('other creditors and accruals', 58), (' other creditors', 58), (' other creditors', 58), (' other creditors', 58), (' warranty', 53), (' other related parties', 50), (' loan payable to relayed party under tax funding agreement', 50), (' loans from related party', 50), (' share of joint venture payables', 50), (' employee benefits - payroll', 50), (' ultimate parent entity', 42), (' secured long-term bank loans', 42), (' abandonment and decommissioning costs', 42), (' forward exchange contracts', 42), (' restructuring', 40), (' other', 40), (' derivative contracts - at fair value', 33), (' gst payable and accruals', 33), (' current - liability for annual and long service leave', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 25), (' gst payables', 10), (' gst liabilities', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' employee benefits - current', 58), (' provisions - current', 50), (' share of joint venture payables', 50), (' abandonment and decommissioning costs', 50), ('other creditors and accruals', 42), (' other creditors', 42), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' other creditors', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' forward exchange contracts', 42), (' other creditors', 42), (' restructuring', 40), (' other', 40), (' other related parties', 33), (' loan payable to relayed party under tax funding agreement', 33), (' loans from related party', 33), (' gst payable and accruals', 33), (' employee benefits - payroll', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' total current employee benefits', 33), (' ultimate parent entity', 25), (' warranty', 25), (' rebates', 20), (' gst payables', 10), (' gst liabilities', 10), (' gst', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' current - liability for annual and long service leave', 82), (' gst', 67), (' arising from service contracts', 56), (' secured long-term bank loans', 50), (' loans from related party', 48), (' other related parties', 47), (' derivative contracts - at fair value', 46), (' loan payable to relayed party under tax funding agreement', 44), (' share of joint venture payables', 44), (' make good provisions', 44), (' other creditors', 43), (' other creditors', 43), (' provisions - current', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' employee benefits - payroll', 41), (' gst payables', 40), (' gst liabilities', 40), (' rebates', 40), (' other', 40), (' employee benefits - current', 39), (' abandonment and decommissioning costs', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' gst payable and accruals', 36), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' provision for associate funding', 32), (' restructuring', 30), (' warranty', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82], 'value': [19230.0, 27947.0, -12290.0, 34887.0, 12517.0, 22370.0, 15722.0, 16942.0, -13434.0, 19230.0, 9113.0, 10117.0, 126446.0, 325226.0, -270828.0, 180844.0, 157777.0, 23067.0, 70642.0, 266892.0, -211088.0, 126446.0, 115750.0, 10696.0], 'label': ['Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Warranties $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000', 'Annual Leave & Long Service Leave Total $000'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term debt', 28)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('long term debt', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('long term debt', 28)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('long term debt', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 47), (' borrowings', 33), (' loans and borrowings', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 50), (' lease liabilities', 38), (' lease liability', 38), (' loans and borrowings', 25), (' borrowings', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 10374.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [10374.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 47), (' borrowings', 33), (' loans and borrowings', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 50), (' lease liabilities', 38), (' lease liability', 38), (' loans and borrowings', 25), (' borrowings', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 8796.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['12'], 'line_item_value': [8796.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 27), ('(bond)', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('interest bearing loans and borrowings', 27), ('(bond)', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['deferred taxes', 'deferred tax liabilities']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('deferred tax liabilities', 57), ('deferred taxes', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('deferred tax liabilities', 73), ('deferred taxes', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes', 17), ('deferred tax liabilities', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('deferred tax liabilities', 60), ('deferred taxes', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('deferred taxes', 38), ('deferred tax liabilities', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['deferred taxes', 'deferred tax liabilities'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('deferred tax liabilities', 57), ('deferred taxes', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('deferred tax liabilities', 73), ('deferred taxes', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('deferred taxes', 17), ('deferred tax liabilities', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('deferred tax liabilities', 60), ('deferred taxes', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('deferred taxes', 38), ('deferred tax liabilities', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' deferred revenue', 23), (' provisions ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue', 17), (' provisions ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' provision for associate funding ', 43), (' deferred revenue', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities ', 69), (' other financial liabilities ', 57), (' trade and other payables ', 38), (' other non-current liabilities ', 34), ('other long term liabilities ', 32), (' employee benefits ', 27), (' provision for associate funding ', 27), (' provisions ', 19), (' deferred revenue', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [(' employee benefits ', 35), (' trade and other payables ', 33), ('other long term liabilities ', 27), (' other financial liabilities ', 21), (' other non-current liabilities ', 21), (' provision for associate funding ', 20), (' deferred revenue', 20), (' financial liabilities ', 18), (' provisions ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 10695.0, 'line_item_label': ['Non-Current Liabilities', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 10695.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['other long term liabilities ', ' trade and other payables ', ' financial liabilities ', ' employee benefits ', ' provisions ', ' other financial liabilities ', ' other non-current liabilities ', ' provision for associate funding ', ' deferred revenue'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities ', 82), ('other long term liabilities ', 61), (' other financial liabilities ', 53), (' financial liabilities ', 43), (' provision for associate funding ', 33), (' trade and other payables ', 28), (' employee benefits ', 28), (' deferred revenue', 23), (' provisions ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities ', 64), (' other financial liabilities ', 52), (' other non-current liabilities ', 39), ('other long term liabilities ', 36), (' trade and other payables ', 30), (' provision for associate funding ', 24), (' employee benefits ', 23), (' deferred revenue', 17), (' provisions ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions ', 100), (' provision for associate funding ', 43), (' deferred revenue', 22), (' employee benefits ', 19), (' other non-current liabilities ', 15), (' trade and other payables ', 14), (' financial liabilities ', 10), (' other financial liabilities ', 8), ('other long term liabilities ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [(' financial liabilities ', 69), (' other financial liabilities ', 57), (' trade and other payables ', 38), (' other non-current liabilities ', 34), ('other long term liabilities ', 32), (' employee benefits ', 27), (' provision for associate funding ', 27), (' provisions ', 19), (' deferred revenue', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [(' employee benefits ', 35), (' trade and other payables ', 33), ('other long term liabilities ', 27), (' other financial liabilities ', 21), (' other non-current liabilities ', 21), (' provision for associate funding ', 20), (' deferred revenue', 20), (' financial liabilities ', 18), (' provisions ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': 100, 'value': 23067.0, 'line_item_label': ['Non-Current Liabilities', 'Provisions'], 'note_numbers': [nan, '15'], 'line_item_value': [0.0, 23067.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables ', ' electricity derivatives at fair value through oci ', ' derivative contracts - at fair value ', ' employee benefits - non current ', ' non-current - liability for long-service leave ', ' provisions - non-current ', ' contract liabilites - non-current ', ' employee benefits - payroll ', ' abandonment and decommissioning costs ', ' provision for associate funding ', ' make good provisions ', ' trade payables - related parties ', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' contract liabilites - non-current ', 54), (' employee benefits - payroll ', 54), (' trade payables - related parties ', 54), ('non-current trade and other payables ', 46), (' electricity derivatives at fair value through oci ', 46), (' non-current - liability for long-service leave ', 46), (' abandonment and decommissioning costs ', 46), (' make good provisions ', 46), (' total non-current employee benefits', 46), (' employee benefits - non current ', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 39), (' abandonment and decommissioning costs ', 39), (' trade payables - related parties ', 39), (' employee benefits - non current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32), (' make good provisions ', 31), (' contract liabilites - non-current ', 30), (' provisions - non-current ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current ', 55), (' non-current - liability for long-service leave ', 55), ('non-current trade and other payables ', 45), (' contract liabilites - non-current ', 45), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' abandonment and decommissioning costs ', 36), (' make good provisions ', 36), (' trade payables - related parties ', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci ', 27), (' derivative contracts - at fair value ', 27), (' provision for associate funding ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' abandonment and decommissioning costs ', 54), ('non-current trade and other payables ', 46), (' contract liabilites - non-current ', 46), (' employee benefits - payroll ', 46), (' trade payables - related parties ', 46), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' non-current - liability for long-service leave ', 38), (' total non-current employee benefits', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31), (' make good provisions ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current ', 92), ('non-current trade and other payables ', 67), (' provisions - non-current ', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave ', 58), (' contract liabilites - non-current ', 58), (' employee benefits - payroll ', 50), (' abandonment and decommissioning costs ', 42), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 33), (' trade payables - related parties ', 33), (' electricity derivatives at fair value through oci ', 25), (' make good provisions ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current ', 75), (' total non-current employee benefits', 75), (' employee benefits - non current ', 67), (' contract liabilites - non-current ', 67), ('non-current trade and other payables ', 58), (' non-current - liability for long-service leave ', 58), (' abandonment and decommissioning costs ', 50), (' derivative contracts - at fair value ', 42), (' electricity derivatives at fair value through oci ', 33), (' employee benefits - payroll ', 33), (' provision for associate funding ', 33), (' make good provisions ', 33), (' trade payables - related parties ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' contract liabilites - non-current ', 54), (' employee benefits - payroll ', 54), (' trade payables - related parties ', 54), ('non-current trade and other payables ', 46), (' electricity derivatives at fair value through oci ', 46), (' non-current - liability for long-service leave ', 46), (' abandonment and decommissioning costs ', 46), (' make good provisions ', 46), (' total non-current employee benefits', 46), (' employee benefits - non current ', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 39), (' abandonment and decommissioning costs ', 39), (' trade payables - related parties ', 39), (' employee benefits - non current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32), (' make good provisions ', 31), (' contract liabilites - non-current ', 30), (' provisions - non-current ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current ', 55), (' non-current - liability for long-service leave ', 55), ('non-current trade and other payables ', 45), (' contract liabilites - non-current ', 45), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' abandonment and decommissioning costs ', 36), (' make good provisions ', 36), (' trade payables - related parties ', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci ', 27), (' derivative contracts - at fair value ', 27), (' provision for associate funding ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' abandonment and decommissioning costs ', 54), ('non-current trade and other payables ', 46), (' contract liabilites - non-current ', 46), (' employee benefits - payroll ', 46), (' trade payables - related parties ', 46), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' non-current - liability for long-service leave ', 38), (' total non-current employee benefits', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31), (' make good provisions ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current ', 92), ('non-current trade and other payables ', 67), (' provisions - non-current ', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave ', 58), (' contract liabilites - non-current ', 58), (' employee benefits - payroll ', 50), (' abandonment and decommissioning costs ', 42), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 33), (' trade payables - related parties ', 33), (' electricity derivatives at fair value through oci ', 25), (' make good provisions ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current ', 75), (' total non-current employee benefits', 75), (' employee benefits - non current ', 67), (' contract liabilites - non-current ', 67), ('non-current trade and other payables ', 58), (' non-current - liability for long-service leave ', 58), (' abandonment and decommissioning costs ', 50), (' derivative contracts - at fair value ', 42), (' electricity derivatives at fair value through oci ', 33), (' employee benefits - payroll ', 33), (' provision for associate funding ', 33), (' make good provisions ', 33), (' trade payables - related parties ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave warranties $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 44), (' provisions - non-current ', 43), (' derivative contracts - at fair value ', 42), (' trade payables - related parties ', 42), (' employee benefits - non current ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' total non-current employee benefits', 38), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' contract liabilites - non-current ', 54), (' employee benefits - payroll ', 54), (' trade payables - related parties ', 54), ('non-current trade and other payables ', 46), (' electricity derivatives at fair value through oci ', 46), (' non-current - liability for long-service leave ', 46), (' abandonment and decommissioning costs ', 46), (' make good provisions ', 46), (' total non-current employee benefits', 46), (' employee benefits - non current ', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 39), (' abandonment and decommissioning costs ', 39), (' trade payables - related parties ', 39), (' employee benefits - non current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32), (' make good provisions ', 31), (' contract liabilites - non-current ', 30), (' provisions - non-current ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current ', 55), (' non-current - liability for long-service leave ', 55), ('non-current trade and other payables ', 45), (' contract liabilites - non-current ', 45), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' abandonment and decommissioning costs ', 36), (' make good provisions ', 36), (' trade payables - related parties ', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci ', 27), (' derivative contracts - at fair value ', 27), (' provision for associate funding ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' abandonment and decommissioning costs ', 54), ('non-current trade and other payables ', 46), (' contract liabilites - non-current ', 46), (' employee benefits - payroll ', 46), (' trade payables - related parties ', 46), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' non-current - liability for long-service leave ', 38), (' total non-current employee benefits', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31), (' make good provisions ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current ', 92), ('non-current trade and other payables ', 67), (' provisions - non-current ', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave ', 58), (' contract liabilites - non-current ', 58), (' employee benefits - payroll ', 50), (' abandonment and decommissioning costs ', 42), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 33), (' trade payables - related parties ', 33), (' electricity derivatives at fair value through oci ', 25), (' make good provisions ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current ', 75), (' total non-current employee benefits', 75), (' employee benefits - non current ', 67), (' contract liabilites - non-current ', 67), ('non-current trade and other payables ', 58), (' non-current - liability for long-service leave ', 58), (' abandonment and decommissioning costs ', 50), (' derivative contracts - at fair value ', 42), (' electricity derivatives at fair value through oci ', 33), (' employee benefits - payroll ', 33), (' provision for associate funding ', 33), (' make good provisions ', 33), (' trade payables - related parties ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' contract liabilites - non-current ', 54), (' employee benefits - payroll ', 54), (' trade payables - related parties ', 54), ('non-current trade and other payables ', 46), (' electricity derivatives at fair value through oci ', 46), (' non-current - liability for long-service leave ', 46), (' abandonment and decommissioning costs ', 46), (' make good provisions ', 46), (' total non-current employee benefits', 46), (' employee benefits - non current ', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 39), (' abandonment and decommissioning costs ', 39), (' trade payables - related parties ', 39), (' employee benefits - non current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32), (' make good provisions ', 31), (' contract liabilites - non-current ', 30), (' provisions - non-current ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current ', 55), (' non-current - liability for long-service leave ', 55), ('non-current trade and other payables ', 45), (' contract liabilites - non-current ', 45), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' abandonment and decommissioning costs ', 36), (' make good provisions ', 36), (' trade payables - related parties ', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci ', 27), (' derivative contracts - at fair value ', 27), (' provision for associate funding ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' abandonment and decommissioning costs ', 54), ('non-current trade and other payables ', 46), (' contract liabilites - non-current ', 46), (' employee benefits - payroll ', 46), (' trade payables - related parties ', 46), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' non-current - liability for long-service leave ', 38), (' total non-current employee benefits', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31), (' make good provisions ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current ', 92), ('non-current trade and other payables ', 67), (' provisions - non-current ', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave ', 58), (' contract liabilites - non-current ', 58), (' employee benefits - payroll ', 50), (' abandonment and decommissioning costs ', 42), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 33), (' trade payables - related parties ', 33), (' electricity derivatives at fair value through oci ', 25), (' make good provisions ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current ', 75), (' total non-current employee benefits', 75), (' employee benefits - non current ', 67), (' contract liabilites - non-current ', 67), ('non-current trade and other payables ', 58), (' non-current - liability for long-service leave ', 58), (' abandonment and decommissioning costs ', 50), (' derivative contracts - at fair value ', 42), (' electricity derivatives at fair value through oci ', 33), (' employee benefits - payroll ', 33), (' provision for associate funding ', 33), (' make good provisions ', 33), (' trade payables - related parties ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave annual leave & long service leave s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' contract liabilites - non-current ', 44), (' make good provisions ', 44), ('non-current trade and other payables ', 43), (' trade payables - related parties ', 42), (' total non-current employee benefits', 41), (' electricity derivatives at fair value through oci ', 38), (' abandonment and decommissioning costs ', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' contract liabilites - non-current ', 54), (' employee benefits - payroll ', 54), (' trade payables - related parties ', 54), ('non-current trade and other payables ', 46), (' electricity derivatives at fair value through oci ', 46), (' non-current - liability for long-service leave ', 46), (' abandonment and decommissioning costs ', 46), (' make good provisions ', 46), (' total non-current employee benefits', 46), (' employee benefits - non current ', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 39), (' abandonment and decommissioning costs ', 39), (' trade payables - related parties ', 39), (' employee benefits - non current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32), (' make good provisions ', 31), (' contract liabilites - non-current ', 30), (' provisions - non-current ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current ', 55), (' non-current - liability for long-service leave ', 55), ('non-current trade and other payables ', 45), (' contract liabilites - non-current ', 45), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' abandonment and decommissioning costs ', 36), (' make good provisions ', 36), (' trade payables - related parties ', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci ', 27), (' derivative contracts - at fair value ', 27), (' provision for associate funding ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' abandonment and decommissioning costs ', 54), ('non-current trade and other payables ', 46), (' contract liabilites - non-current ', 46), (' employee benefits - payroll ', 46), (' trade payables - related parties ', 46), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' non-current - liability for long-service leave ', 38), (' total non-current employee benefits', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31), (' make good provisions ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current ', 92), ('non-current trade and other payables ', 67), (' provisions - non-current ', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave ', 58), (' contract liabilites - non-current ', 58), (' employee benefits - payroll ', 50), (' abandonment and decommissioning costs ', 42), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 33), (' trade payables - related parties ', 33), (' electricity derivatives at fair value through oci ', 25), (' make good provisions ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current ', 75), (' total non-current employee benefits', 75), (' employee benefits - non current ', 67), (' contract liabilites - non-current ', 67), ('non-current trade and other payables ', 58), (' non-current - liability for long-service leave ', 58), (' abandonment and decommissioning costs ', 50), (' derivative contracts - at fair value ', 42), (' electricity derivatives at fair value through oci ', 33), (' employee benefits - payroll ', 33), (' provision for associate funding ', 33), (' make good provisions ', 33), (' trade payables - related parties ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' contract liabilites - non-current ', 54), (' employee benefits - payroll ', 54), (' trade payables - related parties ', 54), ('non-current trade and other payables ', 46), (' electricity derivatives at fair value through oci ', 46), (' non-current - liability for long-service leave ', 46), (' abandonment and decommissioning costs ', 46), (' make good provisions ', 46), (' total non-current employee benefits', 46), (' employee benefits - non current ', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 39), (' abandonment and decommissioning costs ', 39), (' trade payables - related parties ', 39), (' employee benefits - non current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32), (' make good provisions ', 31), (' contract liabilites - non-current ', 30), (' provisions - non-current ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current ', 55), (' non-current - liability for long-service leave ', 55), ('non-current trade and other payables ', 45), (' contract liabilites - non-current ', 45), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' abandonment and decommissioning costs ', 36), (' make good provisions ', 36), (' trade payables - related parties ', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci ', 27), (' derivative contracts - at fair value ', 27), (' provision for associate funding ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' abandonment and decommissioning costs ', 54), ('non-current trade and other payables ', 46), (' contract liabilites - non-current ', 46), (' employee benefits - payroll ', 46), (' trade payables - related parties ', 46), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' non-current - liability for long-service leave ', 38), (' total non-current employee benefits', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31), (' make good provisions ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current ', 92), ('non-current trade and other payables ', 67), (' provisions - non-current ', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave ', 58), (' contract liabilites - non-current ', 58), (' employee benefits - payroll ', 50), (' abandonment and decommissioning costs ', 42), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 33), (' trade payables - related parties ', 33), (' electricity derivatives at fair value through oci ', 25), (' make good provisions ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current ', 75), (' total non-current employee benefits', 75), (' employee benefits - non current ', 67), (' contract liabilites - non-current ', 67), ('non-current trade and other payables ', 58), (' non-current - liability for long-service leave ', 58), (' abandonment and decommissioning costs ', 50), (' derivative contracts - at fair value ', 42), (' electricity derivatives at fair value through oci ', 33), (' employee benefits - payroll ', 33), (' provision for associate funding ', 33), (' make good provisions ', 33), (' trade payables - related parties ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave sales provisions s000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' make good provisions ', 56), (' provisions - non-current ', 50), (' derivative contracts - at fair value ', 46), (' electricity derivatives at fair value through oci ', 44), (' trade payables - related parties ', 42), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' contract liabilites - non-current ', 40), (' abandonment and decommissioning costs ', 38), (' provision for associate funding ', 36), (' total non-current employee benefits', 34), (' employee benefits - non current ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at1 april 2022 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' contract liabilites - non-current ', 54), (' employee benefits - payroll ', 54), (' trade payables - related parties ', 54), ('non-current trade and other payables ', 46), (' electricity derivatives at fair value through oci ', 46), (' non-current - liability for long-service leave ', 46), (' abandonment and decommissioning costs ', 46), (' make good provisions ', 46), (' total non-current employee benefits', 46), (' employee benefits - non current ', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 39), (' abandonment and decommissioning costs ', 39), (' trade payables - related parties ', 39), (' employee benefits - non current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32), (' make good provisions ', 31), (' contract liabilites - non-current ', 30), (' provisions - non-current ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current ', 55), (' non-current - liability for long-service leave ', 55), ('non-current trade and other payables ', 45), (' contract liabilites - non-current ', 45), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' abandonment and decommissioning costs ', 36), (' make good provisions ', 36), (' trade payables - related parties ', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci ', 27), (' derivative contracts - at fair value ', 27), (' provision for associate funding ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at31 march 2023 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' abandonment and decommissioning costs ', 54), ('non-current trade and other payables ', 46), (' contract liabilites - non-current ', 46), (' employee benefits - payroll ', 46), (' trade payables - related parties ', 46), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' non-current - liability for long-service leave ', 38), (' total non-current employee benefits', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31), (' make good provisions ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current ', 92), ('non-current trade and other payables ', 67), (' provisions - non-current ', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave ', 58), (' contract liabilites - non-current ', 58), (' employee benefits - payroll ', 50), (' abandonment and decommissioning costs ', 42), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 33), (' trade payables - related parties ', 33), (' electricity derivatives at fair value through oci ', 25), (' make good provisions ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current ', 75), (' total non-current employee benefits', 75), (' employee benefits - non current ', 67), (' contract liabilites - non-current ', 67), ('non-current trade and other payables ', 58), (' non-current - liability for long-service leave ', 58), (' abandonment and decommissioning costs ', 50), (' derivative contracts - at fair value ', 42), (' electricity derivatives at fair value through oci ', 33), (' employee benefits - payroll ', 33), (' provision for associate funding ', 33), (' make good provisions ', 33), (' trade payables - related parties ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at1 april 2021 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' contract liabilites - non-current ', 54), (' employee benefits - payroll ', 54), (' trade payables - related parties ', 54), ('non-current trade and other payables ', 46), (' electricity derivatives at fair value through oci ', 46), (' non-current - liability for long-service leave ', 46), (' abandonment and decommissioning costs ', 46), (' make good provisions ', 46), (' total non-current employee benefits', 46), (' employee benefits - non current ', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none charge for the year: , res_fuzz_match = [('non-current trade and other payables ', 52), (' non-current - liability for long-service leave ', 43), (' total non-current employee benefits', 43), (' electricity derivatives at fair value through oci ', 39), (' derivative contracts - at fair value ', 39), (' abandonment and decommissioning costs ', 39), (' trade payables - related parties ', 39), (' employee benefits - non current ', 36), (' employee benefits - payroll ', 36), (' provision for associate funding ', 32), (' make good provisions ', 31), (' contract liabilites - non-current ', 30), (' provisions - non-current ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none utilised: , res_fuzz_match = [(' employee benefits - non current ', 55), (' non-current - liability for long-service leave ', 55), ('non-current trade and other payables ', 45), (' contract liabilites - non-current ', 45), (' provisions - non-current ', 36), (' employee benefits - payroll ', 36), (' abandonment and decommissioning costs ', 36), (' make good provisions ', 36), (' trade payables - related parties ', 36), (' total non-current employee benefits', 36), (' electricity derivatives at fair value through oci ', 27), (' derivative contracts - at fair value ', 27), (' provision for associate funding ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none at31 march 2022 , res_fuzz_match = [(' derivative contracts - at fair value ', 54), (' abandonment and decommissioning costs ', 54), ('non-current trade and other payables ', 46), (' contract liabilites - non-current ', 46), (' employee benefits - payroll ', 46), (' trade payables - related parties ', 46), (' electricity derivatives at fair value through oci ', 38), (' employee benefits - non current ', 38), (' non-current - liability for long-service leave ', 38), (' total non-current employee benefits', 38), (' provisions - non-current ', 32), (' provision for associate funding ', 31), (' make good provisions ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none current: , res_fuzz_match = [(' employee benefits - non current ', 92), ('non-current trade and other payables ', 67), (' provisions - non-current ', 67), (' total non-current employee benefits', 67), (' non-current - liability for long-service leave ', 58), (' contract liabilites - non-current ', 58), (' employee benefits - payroll ', 50), (' abandonment and decommissioning costs ', 42), (' derivative contracts - at fair value ', 33), (' provision for associate funding ', 33), (' trade payables - related parties ', 33), (' electricity derivatives at fair value through oci ', 25), (' make good provisions ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none non-current: , res_fuzz_match = [(' provisions - non-current ', 75), (' total non-current employee benefits', 75), (' employee benefits - non current ', 67), (' contract liabilites - non-current ', 67), ('non-current trade and other payables ', 58), (' non-current - liability for long-service leave ', 58), (' abandonment and decommissioning costs ', 50), (' derivative contracts - at fair value ', 42), (' electricity derivatives at fair value through oci ', 33), (' employee benefits - payroll ', 33), (' provision for associate funding ', 33), (' make good provisions ', 33), (' trade payables - related parties ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = annual leave & long service leave total $000 , res_fuzz_match = [(' non-current - liability for long-service leave ', 65), (' derivative contracts - at fair value ', 46), (' make good provisions ', 44), (' employee benefits - payroll ', 41), ('non-current trade and other payables ', 40), (' abandonment and decommissioning costs ', 38), (' trade payables - related parties ', 38), (' total non-current employee benefits', 38), (' employee benefits - non current ', 37), (' provisions - non-current ', 36), (' contract liabilites - non-current ', 36), (' electricity derivatives at fair value through oci ', 35), (' provision for associate funding ', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 10, 16, 22, 28, 34, 40, 46], 'score': [92, 92, 92, 92, 92, 92, 92, 92], 'value': [12517.0, 9113.0, 4426.0, 4294.0, 140834.0, 102343.0, 157777.0, 115750.0], 'label': ['None Current:', 'None Current:', 'None Current:', 'None Current:', 'None Current:', 'None Current:', 'None Current:', 'None Current:'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = [''] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = contract liabilities , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = netassets , res_fuzz_match = [('', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 57000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['16'], 'line_item_value': [57000.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['common stock ', ' share capital ', ' equity share capital ', ' perpetual equity instrument ', ' contributed equity ', ' issued capital ', ' share capital ', ' contributed equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' contributed equity ', 55), (' contributed equity', 55), (' equity share capital ', 50), (' perpetual equity instrument ', 39), (' issued capital ', 38), (' share capital ', 24), (' share capital ', 24), ('common stock ', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' issued capital ', 100), (' share capital ', 67), (' share capital ', 67), (' equity share capital ', 57), (' contributed equity ', 38), (' contributed equity', 38), (' perpetual equity instrument ', 34), ('common stock ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' perpetual equity instrument ', 39), (' contributed equity ', 37), (' contributed equity', 37), (' share capital ', 36), (' share capital ', 36), (' equity share capital ', 34), (' issued capital ', 29), ('common stock ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 57000.0, 'line_item_label': ['Issued capital'], 'note_numbers': ['16'], 'line_item_value': [57000.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['ordinary shares ', ' fully paid ordinary shares ', ' issued and paid-up share capital ', ' retained profits ', ' ordinary shares fully paid ', ' total issued capital ', ' on issue, fully paid ', ' Fully paid Preference shares ', ' Profits captialised on redemption of preference shares'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none 10,000,000 fully paid ordinary shares (2022: 10,000,000) , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 56), (' issued and paid-up share capital ', 48), (' Profits captialised on redemption of preference shares', 43), (' retained profits ', 38), (' total issued capital ', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none 37,000,000 fully paid preference shares (2022: 37,000,000) , res_fuzz_match = [(' Fully paid Preference shares ', 100), (' fully paid ordinary shares ', 79), (' on issue, fully paid ', 73), (' Profits captialised on redemption of preference shares', 61), ('ordinary shares ', 57), (' ordinary shares fully paid ', 56), (' issued and paid-up share capital ', 49), (' retained profits ', 46), (' total issued capital ', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none profits capitalised on the redemption of preference shares , res_fuzz_match = [(' Profits captialised on redemption of preference shares', 86), (' Fully paid Preference shares ', 65), ('ordinary shares ', 57), (' total issued capital ', 50), (' retained profits ', 46), (' fully paid ordinary shares ', 44), (' issued and paid-up share capital ', 44), (' ordinary shares fully paid ', 40), (' on issue, fully paid ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' total issued capital ', 50), (' retained profits ', 40), (' Profits captialised on redemption of preference shares', 40), ('ordinary shares ', 30), (' fully paid ordinary shares ', 30), (' issued and paid-up share capital ', 30), (' ordinary shares fully paid ', 30), (' Fully paid Preference shares ', 30), (' on issue, fully paid ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none 10,000,000 fully paid ordinary shares (2022: 10,000,000) , res_fuzz_match = [('ordinary shares ', 100), (' fully paid ordinary shares ', 100), (' Fully paid Preference shares ', 74), (' on issue, fully paid ', 73), (' ordinary shares fully paid ', 56), (' issued and paid-up share capital ', 48), (' Profits captialised on redemption of preference shares', 43), (' retained profits ', 38), (' total issued capital ', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none 37,000,000 fully paid preference shares (2022: 37,000,000) , res_fuzz_match = [(' Fully paid Preference shares ', 100), (' fully paid ordinary shares ', 79), (' on issue, fully paid ', 73), (' Profits captialised on redemption of preference shares', 61), ('ordinary shares ', 57), (' ordinary shares fully paid ', 56), (' issued and paid-up share capital ', 49), (' retained profits ', 46), (' total issued capital ', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none profits capitalised on the redemption of preference shares , res_fuzz_match = [(' Profits captialised on redemption of preference shares', 86), (' Fully paid Preference shares ', 65), ('ordinary shares ', 57), (' total issued capital ', 50), (' retained profits ', 46), (' fully paid ordinary shares ', 44), (' issued and paid-up share capital ', 44), (' ordinary shares fully paid ', 40), (' on issue, fully paid ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none total , res_fuzz_match = [(' total issued capital ', 50), (' retained profits ', 40), (' Profits captialised on redemption of preference shares', 40), ('ordinary shares ', 30), (' fully paid ordinary shares ', 30), (' issued and paid-up share capital ', 30), (' ordinary shares fully paid ', 30), (' Fully paid Preference shares ', 30), (' on issue, fully paid ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('ordinary shares ', 0), (' fully paid ordinary shares ', 0), (' issued and paid-up share capital ', 0), (' retained profits ', 0), (' ordinary shares fully paid ', 0), (' total issued capital ', 0), (' on issue, fully paid ', 0), (' Fully paid Preference shares ', 0), (' Profits captialised on redemption of preference shares', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 4, 5, 6], 'score': [100, 100, 86, 100, 100, 86], 'value': [10000.0, 37000.0, 10000.0, 10000.0, 37000.0, 10000.0], 'label': ['None 10,000,000 fully paid ordinary shares (2022: 10,000,000)', 'None 37,000,000 fully paid Preference shares (2022: 37,000,000)', 'None Profits capitalised on the redemption of preference shares', 'None 10,000,000 fully paid ordinary shares (2022: 10,000,000)', 'None 37,000,000 fully paid Preference shares (2022: 37,000,000)', 'None Profits capitalised on the redemption of preference shares'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['Share premium']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['Share premium'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('Share premium', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('Share premium', 35)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('Share premium', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 135725.0, 'line_item_label': ['Retained earnings'], 'note_numbers': ['17'], 'line_item_value': [135725.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['other equity ', ' reserves surplus ', ' retained earnings ', ' accumulated losses ', ' retained profits'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity ', 67), (' retained earnings ', 35), (' retained profits', 32), (' reserves surplus ', 21), (' accumulated losses ', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' retained profits', 43), (' accumulated losses ', 36), (' retained earnings ', 29), ('other equity ', 27), (' reserves surplus ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [(' retained earnings ', 100), (' retained profits', 67), (' reserves surplus ', 33), ('other equity ', 26), (' accumulated losses ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 127623.0, 'line_item_label': ['Retained earnings'], 'note_numbers': ['17'], 'line_item_value': [127623.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['retained earnings ', ' general reserves ', ' accumulated losses ', ' retained earnings and dividends on equity instruments'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none balance at the beginning of the financial year , res_fuzz_match = [('retained earnings ', 55), (' retained earnings and dividends on equity instruments', 39), (' general reserves ', 33), (' accumulated losses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings ', 0), (' general reserves ', 0), (' accumulated losses ', 0), (' retained earnings and dividends on equity instruments', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none net profit for the year , res_fuzz_match = [('retained earnings ', 57), (' general reserves ', 42), (' retained earnings and dividends on equity instruments', 33), (' accumulated losses ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings ', 0), (' general reserves ', 0), (' accumulated losses ', 0), (' retained earnings and dividends on equity instruments', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none other comprehensive income , res_fuzz_match = [(' general reserves ', 42), ('retained earnings ', 36), (' retained earnings and dividends on equity instruments', 33), (' accumulated losses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings ', 0), (' general reserves ', 0), (' accumulated losses ', 0), (' retained earnings and dividends on equity instruments', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none dividend paid , res_fuzz_match = [(' retained earnings and dividends on equity instruments', 67), ('retained earnings ', 36), (' general reserves ', 33), (' accumulated losses ', 8)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings ', 0), (' general reserves ', 0), (' accumulated losses ', 0), (' retained earnings and dividends on equity instruments', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none balance at the end of the financial year , res_fuzz_match = [('retained earnings ', 57), (' retained earnings and dividends on equity instruments', 42), (' general reserves ', 33), (' accumulated losses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings ', 0), (' general reserves ', 0), (' accumulated losses ', 0), (' retained earnings and dividends on equity instruments', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none balance at the beginning of the financial year , res_fuzz_match = [('retained earnings ', 55), (' retained earnings and dividends on equity instruments', 39), (' general reserves ', 33), (' accumulated losses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings ', 0), (' general reserves ', 0), (' accumulated losses ', 0), (' retained earnings and dividends on equity instruments', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none net profit for the year , res_fuzz_match = [('retained earnings ', 57), (' general reserves ', 42), (' retained earnings and dividends on equity instruments', 33), (' accumulated losses ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings ', 0), (' general reserves ', 0), (' accumulated losses ', 0), (' retained earnings and dividends on equity instruments', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none other comprehensive income , res_fuzz_match = [(' general reserves ', 42), ('retained earnings ', 36), (' retained earnings and dividends on equity instruments', 33), (' accumulated losses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings ', 0), (' general reserves ', 0), (' accumulated losses ', 0), (' retained earnings and dividends on equity instruments', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none dividend paid , res_fuzz_match = [(' retained earnings and dividends on equity instruments', 67), ('retained earnings ', 36), (' general reserves ', 33), (' accumulated losses ', 8)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings ', 0), (' general reserves ', 0), (' accumulated losses ', 0), (' retained earnings and dividends on equity instruments', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none balance at the end of the financial year , res_fuzz_match = [('retained earnings ', 57), (' retained earnings and dividends on equity instruments', 42), (' general reserves ', 33), (' accumulated losses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings ', 0), (' general reserves ', 0), (' accumulated losses ', 0), (' retained earnings and dividends on equity instruments', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['minority interest', 'non controlling interest', 'noncontrolling interest', 'minority interest', ' non-controlling interest'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('minority interest', 30), ('minority interest', 30), ('noncontrolling interest', 16), (' non-controlling interest', 16), ('non controlling interest', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('minority interest', 33), ('non controlling interest', 33), ('minority interest', 33), ('noncontrolling interest', 21), (' non-controlling interest', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('minority interest', 48), ('minority interest', 48), ('non controlling interest', 39), ('noncontrolling interest', 33), (' non-controlling interest', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve ', ' cash flow hedge reserve ', ' reserve in joint venture ', ' other reserve ', ' total other reserves ', ' tax reserve ', ' other  components of equity']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve', 24), (' reserves ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['other reserves ', ' reserves ', ' foreign currency translation reserve'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [(' reserves ', 17), (' foreign currency translation reserve', 16), ('other reserves ', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves ', 27), (' foreign currency translation reserve', 24), (' reserves ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves ', 43), (' foreign currency translation reserve', 43), (' reserves ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property ']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['cost ', ' gross ', ' investment property ']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property '] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investment property ', 36), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), ('plant property equipment ', 63), (' property plant equipment ', 63), (' investment property ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [(' investment property ', 100), ('plant property equipment ', 69), (' property plant equipment ', 69), (' plant and equipment ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 37), (' investment property ', 30), ('plant property equipment ', 25), (' property plant equipment ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 16710.0, 'line_item_label': ['Plant and equipment', 'Investment property'], 'note_numbers': ['10', '11'], 'line_item_value': [4935.0, 11775.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['plant property equipment ', ' property plant equipment ', ' plant and equipment ', ' investment property '] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investment property ', 36), ('plant property equipment ', 30), (' property plant equipment ', 30), (' plant and equipment ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = plant and equipment , res_fuzz_match = [(' plant and equipment ', 100), ('plant property equipment ', 63), (' property plant equipment ', 63), (' investment property ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = investment property , res_fuzz_match = [(' investment property ', 100), ('plant property equipment ', 69), (' property plant equipment ', 69), (' plant and equipment ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' plant and equipment ', 37), (' investment property ', 30), ('plant property equipment ', 25), (' property plant equipment ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = right-of-use assets , res_fuzz_match = [(' investment property ', 33), ('plant property equipment ', 29), (' property plant equipment ', 29), (' plant and equipment ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' investment property ', 40), ('plant property equipment ', 34), (' property plant equipment ', 34), (' plant and equipment ', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 17220.0, 'line_item_label': ['Plant and equipment', 'Investment property'], 'note_numbers': ['10', '11'], 'line_item_value': [5664.0, 11556.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property '] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost ', 100), (' investment property ', 46), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost ', 100), (' investment property ', 100), (' gross ', 60)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' investment property ', 45), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost ', 100), (' investment property ', 38), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [(' investment property ', 47), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [(' investment property ', 100), (' gross ', 60), ('cost ', 50)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost ', 100), (' investment property ', 46), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost ', 100), (' investment property ', 100), (' gross ', 60)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' investment property ', 45), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost ', 100), (' investment property ', 38), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [(' investment property ', 47), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [(' investment property ', 100), (' gross ', 60), ('cost ', 50)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost ', 100), (' investment property ', 46), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost ', 100), (' investment property ', 100), (' gross ', 60)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' investment property ', 45), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost ', 100), (' investment property ', 38), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [(' investment property ', 47), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [(' investment property ', 100), (' gross ', 60), ('cost ', 50)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 35), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost ', 100), (' investment property ', 46), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost ', 100), (' investment property ', 100), (' gross ', 60)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' investment property ', 45), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost ', 100), (' investment property ', 38), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [(' investment property ', 47), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [(' investment property ', 100), (' gross ', 60), ('cost ', 50)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [(' gross ', 80), (' investment property ', 47), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost ', 100), (' investment property ', 46), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('cost ', 100), (' investment property ', 100), (' gross ', 60)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('cost ', 100), (' investment property ', 45), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('cost ', 100), (' investment property ', 38), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('cost ', 100), (' gross ', 40), (' investment property ', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [(' investment property ', 47), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [(' investment property ', 100), (' gross ', 60), ('cost ', 50)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('cost ', 50), (' investment property ', 40), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 16, 26, 27, 28, 29, 30, 31, 32, 42, 52, 53, 54, 55, 56, 57, 58, 68, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 120], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [106.0, 0.0, 91.0, 0.0, 0.0, 0.0, 197.0, 0.0, 7515.0, 0.0, 716.0, 0.0, -52.0, 0.0, 8179.0, 0.0, 960.0, 0.0, 42.0, 0.0, 0.0, 0.0, 1002.0, 0.0, 523.0, 523.0, 2645.0, 2645.0, -849.0, -849.0, -1624.0, -1624.0, 0.0, 0.0, -22.0, -22.0, 673.0, 673.0, 0.0, 0.0, 0.0, 0.0, 673.0, 523.0, 673.0, 2011.0, -1711.0, -403.0, -403.0, 0.0, -5.0, 565.0, -5116.0, 0.0, 0.0, 0.0, 565.0, 673.0, 9104.0, 2645.0, 0.0, -1624.0, -52.0, -22.0, 10051.0, -403.0], 'label': ['Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Carrying value as at Reclassification to Investment Property & Intangible assets', 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Carrying value as at Reclassification to Investment Property & Intangible assets', 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Carrying value as at Reclassification to Investment Property & Intangible assets', 'Cost At1 April 2021', "Capital work in progress $'000", 'Cost Additions', "Capital work in progress $'000", 'Cost Reclassification to PPE', "Capital work in progress $'000", 'Cost Reclassification to Investment Property & Intangible assets', "Capital work in progress $'000", 'Cost Disposals', "Capital work in progress $'000", 'Cost Write-offs', "Capital work in progress $'000", 'Cost At31 March 2022', "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", 'Carrying value as at Reclassification to Investment Property & Intangible assets', "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", "Capital work in progress $'000", 'Cost At1 April 2021', 'Cost Additions', 'Cost Reclassification to PPE', 'Cost Reclassification to Investment Property & Intangible assets', 'Cost Disposals', 'Cost Write-offs', 'Cost At31 March 2022', 'Carrying value as at Reclassification to Investment Property & Intangible assets'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31), ('net value', 25), ('net book value', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = leasehold improvement $'000 , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 34), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31), ('net value', 25), ('net book value', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = plant and equipment $'000 , res_fuzz_match = [('net value', 50), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31), ('net value', 25), ('net book value', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = computer equipment $'000 , res_fuzz_match = [('accumulated depreciation', 50), ('net value', 38), ('depreciatio', 27), ('net book value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31), ('net value', 25), ('net book value', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = capital work in progress $'000 , res_fuzz_match = [('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost additions , res_fuzz_match = [('net value', 38), ('depreciatio', 30), ('accumulated depreciation', 30), ('net book value', 30)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to ppe , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('net book value', 38), ('accumulated depreciation', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost disposals , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36), ('net book value', 27), ('net value', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost write-offs , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 31), ('net value', 25), ('net book value', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at31 march 2022 , res_fuzz_match = [('net value', 38), ('net book value', 32), ('accumulated depreciation', 31), ('depreciatio', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 . april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at additions , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to ppe , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification to investment property & intangible assets , res_fuzz_match = [('net value', 50), ('accumulated depreciation', 47), ('depreciatio', 45), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at disposals , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 34)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at write-offs , res_fuzz_match = [('net value', 62), ('net book value', 38), ('depreciatio', 36), ('accumulated depreciation', 33)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation write-offs , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 73), ('net value', 25), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total $'000 , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('net book value', 40), ('accumulated depreciation', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9, 10, 20, 21, 22, 23, 33, 34, 35, 36, 46, 47, 48, 49, 59, 60, 61, 62, 72, 73, 74, 75, 85, 86, 87, 88, 98, 99, 100, 101, 111, 112, 113, 114, 124, 125, 126, 127], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [-12.0, -7.0, 0.0, -19.0, -19.0, -9.0, 0.0, -28.0, -3610.0, -717.0, 52.0, -4275.0, -4275.0, -733.0, 49.0, -4959.0, -722.0, -100.0, 0.0, -822.0, -822.0, -120.0, 0.0, -942.0, 0.0, 0.0, 0.0, 0.0, -5116.0, 0.0, 0.0, 0.0, -4344.0, -824.0, 52.0, -5116.0, -5116.0, -862.0, 49.0, -5929.0], 'label': ['Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023', 'Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation Write-offs', 'Accumulated depreciation At31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['cost ', ' gross ', ' investment property '] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('cost ', 100), (' investment property ', 46), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = reclassification from ppe at31 march 2022 , res_fuzz_match = [('cost ', 50), (' investment property ', 47), (' gross ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 april 2022 , res_fuzz_match = [(' investment property ', 47), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification from ppe , res_fuzz_match = [(' gross ', 40), (' investment property ', 40), ('cost ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [(' investment property ', 40), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('cost ', 50), (' gross ', 40), (' investment property ', 40)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [(' investment property ', 33), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [(' investment property ', 27), ('cost ', 25), (' gross ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [(' investment property ', 21), ('cost ', 0), (' gross ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': [100], 'value': [16102.0], 'label': ['Cost At1 April 2021'], 'year': [], 'colname_found': ['rows']}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value', 'net book value'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = cost at1 april 2021 , res_fuzz_match = [('net value', 50), ('net book value', 40), ('accumulated depreciation', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = reclassification from ppe at31 march 2022 , res_fuzz_match = [('depreciatio', 45), ('net value', 38), ('accumulated depreciation', 33), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1april 2021 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2021 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at1 april 2022 , res_fuzz_match = [('net value', 62), ('accumulated depreciation', 41), ('net book value', 38), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at reclassification from ppe , res_fuzz_match = [('net value', 62), ('depreciatio', 45), ('accumulated depreciation', 40), ('net book value', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at at31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 33), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at1 april 2022 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 50), ('net book value', 38)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation depreciation charge for the year (note 6) , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 64), ('net value', 38), ('net book value', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = accumulated depreciation at31 march 2023 , res_fuzz_match = [('accumulated depreciation', 100), ('depreciatio', 82), ('net value', 38), ('net book value', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2023 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = carrying value as at 31 march 2022 , res_fuzz_match = [('net value', 62), ('net book value', 38), ('accumulated depreciation', 34), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = land and buildings $'000 , res_fuzz_match = [('net value', 38), ('net book value', 31), ('accumulated depreciation', 29), ('depreciatio', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 3, 4, 10, 11, 12], 'score': [100, 100, 100, 100, 100, 100], 'value': [-4089.0, -238.0, -4327.0, -4327.0, -238.0, -4565.0], 'label': ['Accumulated depreciation At1April 2021', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation At31 March 2022', 'Accumulated depreciation At1 April 2022', 'Accumulated depreciation Depreciation charge for the year (Note 6)', 'Accumulated depreciation At31 March 2023'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('account receivables ', 42), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [(' billed ', 50), (' unbilled ', 40), (' trade and other receivables', 40), ('account receivables ', 29), (' trade receivables ', 25), (' government subsidies receivable ', 25), (' receivable ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' receivable ', 36), ('account receivables ', 33), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [(' unbilled ', 40), ('account receivables ', 36), (' government subsidies receivable ', 35), (' trade and other receivables', 35), (' trade receivables ', 33), (' receivable ', 33), (' billed ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('account receivables ', 43), (' trade receivables ', 42), (' unbilled ', 40), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 22375.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [22375.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['account receivables ', ' trade receivables ', ' government subsidies receivable ', ' receivable ', ' billed ', ' unbilled ', ' trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = currentassets , res_fuzz_match = [('account receivables ', 42), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cash and bank balances , res_fuzz_match = [(' billed ', 50), (' unbilled ', 40), (' trade and other receivables', 40), ('account receivables ', 29), (' trade receivables ', 25), (' government subsidies receivable ', 25), (' receivable ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' receivable ', 100), (' trade and other receivables', 100), (' trade receivables ', 75), ('account receivables ', 64), (' government subsidies receivable ', 48), (' billed ', 25), (' unbilled ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables ', 44), (' unbilled ', 40), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' receivable ', 36), ('account receivables ', 33), (' trade receivables ', 33), (' government subsidies receivable ', 33), (' trade and other receivables', 33), (' billed ', 0), (' unbilled ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = current tax asset , res_fuzz_match = [(' unbilled ', 40), ('account receivables ', 36), (' government subsidies receivable ', 35), (' trade and other receivables', 35), (' trade receivables ', 33), (' receivable ', 33), (' billed ', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = total currentassets , res_fuzz_match = [('account receivables ', 43), (' trade receivables ', 42), (' unbilled ', 40), (' government subsidies receivable ', 33), (' receivable ', 33), (' trade and other receivables', 33), (' billed ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 42648.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['8'], 'line_item_value': [42648.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['trade receivables ', ' related party receivables ', ' trade debtors ', ' other debtors ', ' share of joint venture receivables ', ' net trade debtors ', 'charges paid in advance ', ' provision for impairment losses ', ' receivables from related parties ', ' allowance for expected credit loss ', ' trade debtors from contracts with customers'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none trade receivables , res_fuzz_match = [('trade receivables ', 100), (' share of joint venture receivables ', 65), (' net trade debtors ', 62), (' related party receivables ', 59), (' trade debtors ', 58), (' other debtors ', 50), (' receivables from related parties ', 41), (' allowance for expected credit loss ', 41), (' trade debtors from contracts with customers', 41), ('charges paid in advance ', 29), (' provision for impairment losses ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables ', 100), (' trade debtors ', 100), (' net trade debtors ', 100), (' trade debtors from contracts with customers', 100), (' related party receivables ', 60), (' other debtors ', 60), (' allowance for expected credit loss ', 60), (' share of joint venture receivables ', 40), ('charges paid in advance ', 40), (' provision for impairment losses ', 20), (' receivables from related parties ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none allowance for expected credit losses , res_fuzz_match = [(' allowance for expected credit loss ', 100), (' trade debtors ', 50), (' net trade debtors ', 50), (' provision for impairment losses ', 50), (' related party receivables ', 44), ('trade receivables ', 42), (' other debtors ', 42), (' trade debtors from contracts with customers', 42), (' share of joint venture receivables ', 40), (' receivables from related parties ', 39), ('charges paid in advance ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables ', 100), (' trade debtors ', 100), (' net trade debtors ', 100), (' trade debtors from contracts with customers', 100), (' related party receivables ', 60), (' other debtors ', 60), (' allowance for expected credit loss ', 60), (' share of joint venture receivables ', 40), ('charges paid in advance ', 40), (' provision for impairment losses ', 20), (' receivables from related parties ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = none 41636 , res_fuzz_match = [(' other debtors ', 50), (' share of joint venture receivables ', 50), (' net trade debtors ', 50), (' allowance for expected credit loss ', 50), (' trade debtors from contracts with customers', 50), ('trade receivables ', 25), (' related party receivables ', 25), (' trade debtors ', 25), ('charges paid in advance ', 25), (' provision for impairment losses ', 25), (' receivables from related parties ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables ', 100), (' trade debtors ', 100), (' net trade debtors ', 100), (' trade debtors from contracts with customers', 100), (' related party receivables ', 60), (' other debtors ', 60), (' allowance for expected credit loss ', 60), (' share of joint venture receivables ', 40), ('charges paid in advance ', 40), (' provision for impairment losses ', 20), (' receivables from related parties ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total related party receivables - ultimate parent company , res_fuzz_match = [(' related party receivables ', 100), ('trade receivables ', 67), (' receivables from related parties ', 61), (' share of joint venture receivables ', 52), (' allowance for expected credit loss ', 46), (' provision for impairment losses ', 45), (' net trade debtors ', 44), (' trade debtors ', 42), (' other debtors ', 42), (' trade debtors from contracts with customers', 42), ('charges paid in advance ', 41)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables ', 100), (' trade debtors ', 100), (' net trade debtors ', 100), (' trade debtors from contracts with customers', 100), (' related party receivables ', 60), (' other debtors ', 60), (' allowance for expected credit loss ', 60), (' share of joint venture receivables ', 40), ('charges paid in advance ', 40), (' provision for impairment losses ', 20), (' receivables from related parties ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total other receivables , res_fuzz_match = [('trade receivables ', 75), (' share of joint venture receivables ', 67), (' other debtors ', 58), (' related party receivables ', 56), (' allowance for expected credit loss ', 44), (' trade debtors ', 42), (' trade debtors from contracts with customers', 39), (' net trade debtors ', 38), (' receivables from related parties ', 34), (' provision for impairment losses ', 33), ('charges paid in advance ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables ', 100), (' trade debtors ', 100), (' net trade debtors ', 100), (' trade debtors from contracts with customers', 100), (' related party receivables ', 60), (' other debtors ', 60), (' allowance for expected credit loss ', 60), (' share of joint venture receivables ', 40), ('charges paid in advance ', 40), (' provision for impairment losses ', 20), (' receivables from related parties ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = total 2023 trade and other receivables, including related parties , res_fuzz_match = [('trade receivables ', 75), (' receivables from related parties ', 74), (' trade debtors ', 67), (' net trade debtors ', 62), (' related party receivables ', 61), (' other debtors ', 58), (' share of joint venture receivables ', 56), (' trade debtors from contracts with customers', 45), (' allowance for expected credit loss ', 43), ('charges paid in advance ', 41), (' provision for impairment losses ', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = trade , res_fuzz_match = [('trade receivables ', 100), (' trade debtors ', 100), (' net trade debtors ', 100), (' trade debtors from contracts with customers', 100), (' related party receivables ', 60), (' other debtors ', 60), (' allowance for expected credit loss ', 60), (' share of joint venture receivables ', 40), ('charges paid in advance ', 40), (' provision for impairment losses ', 20), (' receivables from related parties ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 0, 1, 1, 2, 3, 3, 4, 5], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [41763.0, 41763.0, -127.0, -127.0, 21783.0, 387.0, 387.0, 625.0, 42648.0], 'label': ['None Trade receivables', 'Trade', 'None Allowance for expected credit losses', 'Trade', 'Trade', 'Total Related party receivables - ultimate parent company', 'Trade', 'Trade', 'Trade'], 'year': [], 'colname_found': ['rows', 'columns', 'rows', 'columns', 'columns', 'rows', 'columns', 'columns', 'columns']}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods ', ' LNG ', ' Condensate ', ' Domgas ', ' Feed gas income ', ' Gas transportation income ', ' Sale of goods - Cars ', ' Sale of goods - Motorcycles ', ' Sale of goods - Marine ', ' Sale of goods - Spareparts ', ' Total Revenue ', ' Goods sold to customer from warehouse ', ' Goods sold to customer direct from supplier ', ' revenue from continuing activities ', ' revenue form contracts with customers ', ' hedge loss / gain ', ' contribution from joint venture']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' revenue from contracts with customers ', 100), (' revenue from continuing activities', 63), ('revenue from operations ', 50), (' from trading business ', 43), (' transmission and distribution business ', 33), (' Sales revenue ', 33), (' Revenue ', 32), (' Sale of coal ', 29), (' sale of products ', 27), (' net sales ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations ', 71), (' Revenue ', 67), (' revenue from continuing activities', 54), (' Sales revenue ', 52), (' revenue from contracts with customers ', 45), (' sale of products ', 33), (' net sales ', 30), (' from trading business ', 30), (' Sale of coal ', 29), (' transmission and distribution business ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities', 33), (' net sales ', 32), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' net sales ', 53), (' Sales revenue ', 48), (' sale of products ', 47), (' transmission and distribution business ', 40), (' Sale of coal ', 39), ('revenue from operations ', 37), (' revenue from continuing activities', 34), (' from trading business ', 32), (' revenue from contracts with customers ', 30), (' Revenue ', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' net sales ', 32), (' from trading business ', 31), (' transmission and distribution business ', 26), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue ', 43), (' from trading business ', 37), (' sale of products ', 33), (' Revenue ', 33), (' net sales ', 30), ('revenue from operations ', 29), (' revenue from contracts with customers ', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' from trading business ', 45), (' sale of products ', 43), ('revenue from operations ', 38), (' transmission and distribution business ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 29), (' Sale of coal ', 24), (' revenue from continuing activities', 24), (' Sales revenue ', 22), (' Revenue ', 9)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities', 32), (' revenue from contracts with customers ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' revenue from contracts with customers ', 36), (' transmission and distribution business ', 35), (' revenue from continuing activities', 33), (' sale of products ', 30), ('revenue from operations ', 28), (' from trading business ', 25), (' net sales ', 24), (' Sales revenue ', 23), (' Sale of coal ', 20), (' Revenue ', 9)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' revenue from continuing activities', 39), (' revenue from contracts with customers ', 36), (' transmission and distribution business ', 33), (' from trading business ', 30), ('revenue from operations ', 27), (' Sales revenue ', 26), (' net sales ', 24), (' Sale of coal ', 20), (' sale of products ', 19), (' Revenue ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' revenue from continuing activities', 39), (' revenue from contracts with customers ', 36), (' transmission and distribution business ', 33), (' from trading business ', 30), ('revenue from operations ', 27), (' Sales revenue ', 26), (' net sales ', 24), (' Sale of coal ', 20), (' sale of products ', 19), (' Revenue ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' revenue from contracts with customers ', 38), (' revenue from continuing activities', 34), ('revenue from operations ', 30), (' from trading business ', 30), (' transmission and distribution business ', 26), (' sale of products ', 23), (' Sales revenue ', 23), (' net sales ', 18), (' Sale of coal ', 18), (' Revenue ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' revenue from contracts with customers ', 38), (' revenue from continuing activities', 34), ('revenue from operations ', 30), (' from trading business ', 30), (' transmission and distribution business ', 26), (' sale of products ', 23), (' Sales revenue ', 23), (' net sales ', 18), (' Sale of coal ', 18), (' Revenue ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('revenue from operations ', 44), (' revenue from contracts with customers ', 42), (' revenue from continuing activities', 37), (' from trading business ', 33), (' sale of products ', 30), (' net sales ', 29), (' transmission and distribution business ', 29), (' Sale of coal ', 28), (' Sales revenue ', 27), (' Revenue ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 1033845.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': ['4'], 'line_item_value': [1033845.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['revenue from operations ', ' sale of products ', ' net sales ', ' revenue from contracts with customers ', ' transmission and distribution business ', ' from trading business ', ' Sale of coal ', ' Sales revenue ', ' Revenue ', ' revenue from continuing activities'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' revenue from contracts with customers ', 100), (' revenue from continuing activities', 63), ('revenue from operations ', 50), (' from trading business ', 43), (' transmission and distribution business ', 33), (' Sales revenue ', 33), (' Revenue ', 32), (' Sale of coal ', 29), (' sale of products ', 27), (' net sales ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal ', 78), (' net sales ', 71), (' sale of products ', 67), (' Sales revenue ', 50), (' from trading business ', 33), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), ('revenue from operations ', 24), (' transmission and distribution business ', 22), (' Revenue ', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' from trading business ', 37), ('revenue from operations ', 36), (' sale of products ', 33), (' revenue from contracts with customers ', 32), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19), (' Sales revenue ', 17), (' Revenue ', 11), (' net sales ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('revenue from operations ', 71), (' Revenue ', 67), (' revenue from continuing activities', 54), (' Sales revenue ', 52), (' revenue from contracts with customers ', 45), (' sale of products ', 33), (' net sales ', 30), (' from trading business ', 30), (' Sale of coal ', 29), (' transmission and distribution business ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' from trading business ', 46), ('revenue from operations ', 44), (' Sale of coal ', 40), (' revenue from contracts with customers ', 37), (' revenue from continuing activities', 33), (' net sales ', 32), (' Sales revenue ', 27), (' sale of products ', 26), (' transmission and distribution business ', 21), (' Revenue ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' net sales ', 53), (' Sales revenue ', 48), (' sale of products ', 47), (' transmission and distribution business ', 40), (' Sale of coal ', 39), ('revenue from operations ', 37), (' revenue from continuing activities', 34), (' from trading business ', 32), (' revenue from contracts with customers ', 30), (' Revenue ', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' transmission and distribution business ', 45), (' revenue from continuing activities', 44), ('revenue from operations ', 38), (' Sales revenue ', 37), (' Revenue ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 33), (' sale of products ', 29), (' from trading business ', 26), (' Sale of coal ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal ', 40), (' sale of products ', 35), (' revenue from contracts with customers ', 33), (' revenue from continuing activities', 33), (' net sales ', 32), (' from trading business ', 31), (' transmission and distribution business ', 26), ('revenue from operations ', 22), (' Sales revenue ', 18), (' Revenue ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue ', 43), (' from trading business ', 37), (' sale of products ', 33), (' Revenue ', 33), (' net sales ', 30), ('revenue from operations ', 29), (' revenue from contracts with customers ', 27), (' transmission and distribution business ', 25), (' revenue from continuing activities', 22), (' Sale of coal ', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' from trading business ', 45), (' sale of products ', 43), ('revenue from operations ', 38), (' transmission and distribution business ', 36), (' net sales ', 33), (' revenue from contracts with customers ', 29), (' Sale of coal ', 24), (' revenue from continuing activities', 24), (' Sales revenue ', 22), (' Revenue ', 9)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' from trading business ', 45), (' Sales revenue ', 37), (' transmission and distribution business ', 32), (' Sale of coal ', 32), (' sale of products ', 29), (' revenue from contracts with customers ', 29), (' revenue from continuing activities', 29), (' Revenue ', 27), ('revenue from operations ', 25), (' net sales ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations ', 46), (' sale of products ', 39), (' from trading business ', 35), (' revenue from continuing activities', 32), (' revenue from contracts with customers ', 31), (' transmission and distribution business ', 30), (' Sales revenue ', 27), (' Revenue ', 24), (' net sales ', 22), (' Sale of coal ', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' revenue from contracts with customers ', 41), (' from trading business ', 38), (' revenue from continuing activities', 38), ('revenue from operations ', 37), (' Sales revenue ', 36), (' sale of products ', 29), (' Revenue ', 29), (' transmission and distribution business ', 28), (' Sale of coal ', 26), (' net sales ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' revenue from contracts with customers ', 36), (' transmission and distribution business ', 35), (' revenue from continuing activities', 33), (' sale of products ', 30), ('revenue from operations ', 28), (' from trading business ', 25), (' net sales ', 24), (' Sales revenue ', 23), (' Sale of coal ', 20), (' Revenue ', 9)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' revenue from continuing activities', 39), (' revenue from contracts with customers ', 36), (' transmission and distribution business ', 33), (' from trading business ', 30), ('revenue from operations ', 27), (' Sales revenue ', 26), (' net sales ', 24), (' Sale of coal ', 20), (' sale of products ', 19), (' Revenue ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' revenue from continuing activities', 39), (' revenue from contracts with customers ', 36), (' transmission and distribution business ', 33), (' from trading business ', 30), ('revenue from operations ', 27), (' Sales revenue ', 26), (' net sales ', 24), (' Sale of coal ', 20), (' sale of products ', 19), (' Revenue ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' revenue from contracts with customers ', 38), (' revenue from continuing activities', 34), ('revenue from operations ', 30), (' from trading business ', 30), (' transmission and distribution business ', 26), (' sale of products ', 23), (' Sales revenue ', 23), (' net sales ', 18), (' Sale of coal ', 18), (' Revenue ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' revenue from contracts with customers ', 38), (' revenue from continuing activities', 34), ('revenue from operations ', 30), (' from trading business ', 30), (' transmission and distribution business ', 26), (' sale of products ', 23), (' Sales revenue ', 23), (' net sales ', 18), (' Sale of coal ', 18), (' Revenue ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('revenue from operations ', 44), (' revenue from contracts with customers ', 42), (' revenue from continuing activities', 37), (' from trading business ', 33), (' sale of products ', 30), (' net sales ', 29), (' transmission and distribution business ', 29), (' Sale of coal ', 28), (' Sales revenue ', 27), (' Revenue ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 1267172.0, 'line_item_label': ['Revenue from contracts with customers'], 'note_numbers': ['4'], 'line_item_value': [1267172.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales ', ' cost of goods']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), (' cost of goods sold ', 30), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' change in inventory', 37), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), (' cost of goods sold ', 23), ('purchase of stock-in-trade', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('cost of sales', 45), ('Cost of sales', 45), ('expense', 43), (' Cost of goods and services sold', 43), (' cost of coal sold', 39), ('expenditure', 38), (' Cost of product sold', 36), (' Cost of inventory sold', 34), (' Personnel costs', 33), (' change in inventory', 32), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 28)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), (' change in inventory', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' cost of goods sold ', 27), (' change in inventory', 26), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory', 24), ('expense', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('purchase of stock-in-trade', 30), ('total expenses', 30), (' cost of goods sold ', 29), ('cost of sales', 28), ('Cost of sales', 28), (' cost of coal sold', 25), (' change in inventory', 25), ('expenditure', 20), ('expense', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' change in inventory', 36), (' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), (' cost of goods sold ', 28), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' change in inventory', 36), (' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), (' cost of goods sold ', 28), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), (' change in inventory', 30), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' cost of goods sold ', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), (' change in inventory', 30), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' cost of goods sold ', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 33), ('Cost of sales', 33), (' cost of coal sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('total expenses', 30), (' cost of goods sold ', 29), (' change in inventory', 29), (' Cost of product sold', 27), ('expense', 25), ('expenditure', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -901584.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-901584.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs', ' cost of goods sold ', ' change in inventory'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' cost of coal sold', 39), (' Cost of goods and services sold', 39), (' Cost of product sold', 37), (' Cost of inventory sold', 35), (' Personnel costs', 35), ('purchase of stock-in-trade', 31), (' cost of goods sold ', 30), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 24), ('total expenses', 23), ('expense', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' cost of goods sold ', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), (' change in inventory', 25), ('expense', 13), ('expenditure', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' cost of goods sold ', 31), (' change in inventory', 30), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Cost of inventory sold', 39), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), (' change in inventory', 37), ('expenditure', 36), (' Cost of product sold', 34), ('expense', 33), ('total expenditure', 29), (' Cost of goods and services sold', 27), ('total expenses', 25), (' cost of coal sold', 23), (' cost of goods sold ', 23), ('purchase of stock-in-trade', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), (' cost of goods sold ', 32), (' change in inventory', 31), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('total expenses', 59), ('total expenditure', 47), ('cost of sales', 45), ('Cost of sales', 45), ('expense', 43), (' Cost of goods and services sold', 43), (' cost of coal sold', 39), ('expenditure', 38), (' Cost of product sold', 36), (' Cost of inventory sold', 34), (' Personnel costs', 33), (' change in inventory', 32), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 28)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29), (' cost of goods sold ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' cost of goods sold ', 40), (' Cost of goods and services sold', 39), (' change in inventory', 38), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), (' change in inventory', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23), (' cost of goods sold ', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' cost of goods sold ', 27), (' change in inventory', 26), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' change in inventory', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' cost of goods sold ', 27), (' Cost of product sold', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), (' cost of goods sold ', 24), (' change in inventory', 24), ('expense', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), (' change in inventory', 43), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), (' cost of goods sold ', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Cost of product sold', 38), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('purchase of stock-in-trade', 30), ('total expenses', 30), (' cost of goods sold ', 29), ('cost of sales', 28), ('Cost of sales', 28), (' cost of coal sold', 25), (' change in inventory', 25), ('expenditure', 20), ('expense', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' change in inventory', 36), (' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), (' cost of goods sold ', 28), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' change in inventory', 36), (' Cost of goods and services sold', 34), ('purchase of stock-in-trade', 31), (' cost of coal sold', 31), (' Cost of inventory sold', 31), ('total expenses', 29), (' cost of goods sold ', 28), ('total expenditure', 27), (' Personnel costs', 25), (' Cost of product sold', 24), ('cost of sales', 23), ('Cost of sales', 23), ('expenditure', 20), ('expense', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), (' change in inventory', 30), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' cost of goods sold ', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of inventory sold', 34), (' Cost of goods and services sold', 31), (' change in inventory', 30), ('total expenditure', 27), ('total expenses', 26), (' cost of coal sold', 25), (' Personnel costs', 25), (' cost of goods sold ', 25), (' Cost of product sold', 24), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 18), ('expense', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('purchase of stock-in-trade', 34), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 33), ('Cost of sales', 33), (' cost of coal sold', 33), (' Personnel costs', 33), ('total expenditure', 32), ('total expenses', 30), (' cost of goods sold ', 29), (' change in inventory', 29), (' Cost of product sold', 27), ('expense', 25), ('expenditure', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': -1122249.0, 'line_item_label': ['Cost of sales'], 'note_numbers': [nan], 'line_item_value': [-1122249.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['consum ', ' power ', ' machinery ', ' charges ', ' research ', ' analytical ', ' equipment ', ' exchange ', ' loss on ', ' donation ', ' csr ', ' social ', ' miscellaneous ', ' loss allowance ', ' Included in administrative expenses ', ' Depreciation property ', ' plant and equipment ', ' Depreciation right-of-use assets ', ' Administrative expenses ', ' Wages and salaries ', ' Compulsory superannuation contributions ', ' Payroll on-costs (excluding employee benefit provision) ', ' Staff welfare ', ' Contractors, subcontractors and employee related expenses ', ' Facilities Expense ', ' Rental equipment expenses ', ' Depreciation expense right-of-use asset ', ' Depreciation expense ', ' Amortisation expense ', ' Other expenses ', ' Research and development expenses ', ' employee benefits expenses ', ' depreciation and amortisation expenses ', ' Employee expenses ', ' Distribution Expenses ', ' Depreciation and Amortisation Expenses ', ' Other Expenses from Ordinary Activities ', '  ', ' Defined contribution plans ', ' Other employement costs']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses ', 38), (' Amortisation expenses ', 35), (' Logistics and distribution ', 35), (' Selling & distribution expenses ', 34), (' Depreciation and amortisation expenses ', 34), (' Distribution expenses ', 33), (' Administrative expenses ', 33), (' Administration expenses ', 33), (' employee benefits expense ', 33), (' employee benefit espense ', 33), (' Marketing expenses ', 31), (' Advertising expenses ', 30), (' property espense ', 30), (' other expenses ', 27), (' Other expenses ', 27), (' Other expenses ', 27), (' Depreciation expenses ', 26), (' Sales and marketing ', 26), (' Administration ', 24), (' Occupancy expenses ', 23), (' Management expenses ', 23), (' Occupancy ', 22), (' Royalties ', 21), (' Lease expenses ', 19), (' Selling Expenses ', 19), (' levies', 17), ('expenses ', 16), (' depreciation ', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Depreciation and amortisation expenses ', 42), (' Other expenses ', 42), (' Selling & distribution expenses ', 36), (' employee benefits expense ', 35), (' employee benefit espense ', 35), ('expenses ', 33), (' Occupancy expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Administrative and other expenses ', 32), (' Sales and marketing ', 30), (' property espense ', 30), (' Lease expenses ', 26), (' Selling Expenses ', 26), (' Management expenses ', 25), (' levies', 25), (' Occupancy ', 24), (' Royalties ', 21), (' Logistics and distribution ', 19), (' Administration ', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Sales and marketing ', 81), (' Marketing expenses ', 74), (' Management expenses ', 59), (' Lease expenses ', 55), (' Selling Expenses ', 55), (' Administrative and other expenses ', 54), (' other expenses ', 53), (' Other expenses ', 53), (' Other expenses ', 53), (' Selling & distribution expenses ', 51), (' Advertising expenses ', 49), (' property espense ', 49), (' Administrative expenses ', 47), (' Administration expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), ('expenses ', 43), (' Logistics and distribution ', 43), (' Distribution expenses ', 42), (' Depreciation and amortisation expenses ', 42), (' Occupancy expenses ', 41), (' employee benefit espense ', 41), (' employee benefits expense ', 36), (' depreciation ', 34), (' Administration ', 32), (' Royalties ', 21), (' levies', 15), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies', 13), ('expenses ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' other expenses ', 100), (' Other expenses ', 100), (' Other expenses ', 100), (' Lease expenses ', 70), (' Selling Expenses ', 70), ('expenses ', 67), (' Occupancy expenses ', 67), (' property espense ', 67), (' Marketing expenses ', 64), (' Administrative and other expenses ', 63), (' Management expenses ', 58), (' Selling & distribution expenses ', 48), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' Administration ', 38), (' employee benefits expense ', 35), (' depreciation ', 32), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' employee benefit espense ', 29), (' Royalties ', 21), (' Occupancy ', 12), (' levies', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' employee benefits expense ', 42), (' Depreciation expenses ', 40), (' property espense ', 39), (' Depreciation and amortisation expenses ', 38), (' employee benefit espense ', 37), (' depreciation ', 35), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' Advertising expenses ', 32), (' Sales and marketing ', 32), (' Distribution expenses ', 31), (' Lease expenses ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Marketing expenses ', 28), (' Selling & distribution expenses ', 27), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Administrative and other expenses ', 24), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' levies', 20), (' Occupancy ', 19), ('expenses ', 18), (' Administration ', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Administrative and other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies', 9)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Selling & distribution expenses ', 39), (' Depreciation and amortisation expenses ', 36), (' property espense ', 36), (' Administrative and other expenses ', 33), (' Logistics and distribution ', 33), (' Distribution expenses ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Sales and marketing ', 29), (' Selling Expenses ', 27), (' other expenses ', 26), (' Marketing expenses ', 26), (' Other expenses ', 26), (' Other expenses ', 26), (' depreciation ', 25), (' Administrative expenses ', 25), (' Depreciation expenses ', 25), (' Administration expenses ', 25), (' Amortisation expenses ', 25), (' Lease expenses ', 23), (' Management expenses ', 23), (' Advertising expenses ', 21), (' Royalties ', 21), (' Administration ', 20), (' Occupancy expenses ', 19), ('expenses ', 17), (' levies', 13), (' Occupancy ', 9)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' employee benefits expense ', 41), (' Administrative and other expenses ', 39), (' employee benefit espense ', 38), (' Depreciation and amortisation expenses ', 34), (' Logistics and distribution ', 34), (' Selling & distribution expenses ', 31), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Sales and marketing ', 27), (' property espense ', 27), (' Lease expenses ', 26), (' other expenses ', 25), (' Marketing expenses ', 25), (' Other expenses ', 25), (' Amortisation expenses ', 25), (' Other expenses ', 25), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Selling Expenses ', 23), (' Administration ', 23), (' Depreciation expenses ', 22), (' Management expenses ', 22), (' Occupancy expenses ', 19), (' Royalties ', 17), ('expenses ', 14), (' depreciation ', 14), (' levies', 11), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' employee benefits expense ', 41), (' Administrative and other expenses ', 39), (' employee benefit espense ', 38), (' Depreciation and amortisation expenses ', 34), (' Logistics and distribution ', 34), (' Selling & distribution expenses ', 31), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Sales and marketing ', 27), (' property espense ', 27), (' Lease expenses ', 26), (' other expenses ', 25), (' Marketing expenses ', 25), (' Other expenses ', 25), (' Amortisation expenses ', 25), (' Other expenses ', 25), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Selling Expenses ', 23), (' Administration ', 23), (' Depreciation expenses ', 22), (' Management expenses ', 22), (' Occupancy expenses ', 19), (' Royalties ', 17), ('expenses ', 14), (' depreciation ', 14), (' levies', 11), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses ', 36), (' Depreciation and amortisation expenses ', 31), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Other expenses ', 29), (' property espense ', 27), (' Depreciation expenses ', 25), (' Selling & distribution expenses ', 25), (' Amortisation expenses ', 25), (' Administrative expenses ', 24), (' Administration expenses ', 24), (' Marketing expenses ', 23), (' Occupancy expenses ', 23), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' Management expenses ', 23), (' Logistics and distribution ', 23), (' Distribution expenses ', 22), (' Advertising expenses ', 22), (' Sales and marketing ', 22), (' Administration ', 18), (' depreciation ', 15), (' Royalties ', 15), ('expenses ', 12), (' Occupancy ', 10), (' levies', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses ', 36), (' Depreciation and amortisation expenses ', 31), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Other expenses ', 29), (' property espense ', 27), (' Depreciation expenses ', 25), (' Selling & distribution expenses ', 25), (' Amortisation expenses ', 25), (' Administrative expenses ', 24), (' Administration expenses ', 24), (' Marketing expenses ', 23), (' Occupancy expenses ', 23), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' Management expenses ', 23), (' Logistics and distribution ', 23), (' Distribution expenses ', 22), (' Advertising expenses ', 22), (' Sales and marketing ', 22), (' Administration ', 18), (' depreciation ', 15), (' Royalties ', 15), ('expenses ', 12), (' Occupancy ', 10), (' levies', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Administrative and other expenses ', 40), (' Depreciation and amortisation expenses ', 40), (' Amortisation expenses ', 38), (' Selling & distribution expenses ', 36), (' Lease expenses ', 36), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' other expenses ', 35), (' Other expenses ', 35), (' Other expenses ', 35), (' Marketing expenses ', 34), (' Depreciation expenses ', 33), (' Advertising expenses ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Selling Expenses ', 31), (' Management expenses ', 30), (' Sales and marketing ', 29), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), ('expenses ', 25), (' Administration ', 23), (' Occupancy ', 21), (' depreciation ', 20), (' Royalties ', 20), (' levies', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 8], 'score': 100, 'value': -83441.0, 'line_item_label': ['Sales and marketing expenses', 'Administration expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-35443.0, -47684.0, -314.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['expenses ', ' other expenses ', ' depreciation ', ' Distribution expenses ', ' Marketing expenses ', ' Occupancy expenses ', ' Administrative expenses ', ' Other expenses ', ' Depreciation expenses ', ' Selling & distribution expenses ', ' Administrative and other expenses ', ' Lease expenses ', ' Occupancy ', ' Administration expenses ', ' Advertising expenses ', ' Selling Expenses ', ' Depreciation and amortisation expenses ', ' Amortisation expenses ', ' Management expenses ', ' Logistics and distribution ', ' Sales and marketing ', ' Other expenses ', ' employee benefits expense ', ' property espense ', ' employee benefit espense ', ' Administration ', ' Royalties ', ' levies'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administrative and other expenses ', 38), (' Amortisation expenses ', 35), (' Logistics and distribution ', 35), (' Selling & distribution expenses ', 34), (' Depreciation and amortisation expenses ', 34), (' Distribution expenses ', 33), (' Administrative expenses ', 33), (' Administration expenses ', 33), (' employee benefits expense ', 33), (' employee benefit espense ', 33), (' Marketing expenses ', 31), (' Advertising expenses ', 30), (' property espense ', 30), (' other expenses ', 27), (' Other expenses ', 27), (' Other expenses ', 27), (' Depreciation expenses ', 26), (' Sales and marketing ', 26), (' Administration ', 24), (' Occupancy expenses ', 23), (' Management expenses ', 23), (' Occupancy ', 22), (' Royalties ', 21), (' Lease expenses ', 19), (' Selling Expenses ', 19), (' levies', 17), ('expenses ', 16), (' depreciation ', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing ', 50), (' Lease expenses ', 40), (' Selling Expenses ', 40), (' Royalties ', 38), (' Marketing expenses ', 36), (' Amortisation expenses ', 35), (' Selling & distribution expenses ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' levies', 31), (' other expenses ', 29), (' Other expenses ', 29), (' Administrative and other expenses ', 29), (' Depreciation and amortisation expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Logistics and distribution ', 28), (' Depreciation expenses ', 26), (' employee benefits expense ', 26), (' employee benefit espense ', 26), (' Advertising expenses ', 25), (' property espense ', 25), (' Administration ', 22), (' Occupancy expenses ', 19), (' Occupancy ', 14), ('expenses ', 13), (' depreciation ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' property espense ', 52), (' other expenses ', 33), (' Other expenses ', 33), (' Other expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Depreciation and amortisation expenses ', 32), (' Royalties ', 32), (' Amortisation expenses ', 31), (' Logistics and distribution ', 31), (' Advertising expenses ', 30), (' Distribution expenses ', 29), (' Administrative and other expenses ', 26), (' Occupancy expenses ', 25), (' Selling & distribution expenses ', 24), (' Occupancy ', 24), (' Depreciation expenses ', 23), (' Sales and marketing ', 22), (' Administrative expenses ', 21), (' Administration expenses ', 21), (' Administration ', 19), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' Lease expenses ', 17), (' Selling Expenses ', 17), (' Management expenses ', 17), (' levies', 12), ('expenses ', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' other expenses ', 42), (' Other expenses ', 42), (' Depreciation and amortisation expenses ', 42), (' Other expenses ', 42), (' Selling & distribution expenses ', 36), (' employee benefits expense ', 35), (' employee benefit espense ', 35), ('expenses ', 33), (' Occupancy expenses ', 33), (' depreciation ', 32), (' Marketing expenses ', 32), (' Administrative and other expenses ', 32), (' Sales and marketing ', 30), (' property espense ', 30), (' Lease expenses ', 26), (' Selling Expenses ', 26), (' Management expenses ', 25), (' levies', 25), (' Occupancy ', 24), (' Royalties ', 21), (' Logistics and distribution ', 19), (' Administration ', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other expenses ', 61), (' Other expenses ', 61), (' Other expenses ', 61), (' Administrative and other expenses ', 43), (' Administration ', 40), (' property espense ', 38), (' Amortisation expenses ', 32), (' Sales and marketing ', 31), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Lease expenses ', 27), (' Selling Expenses ', 27), (' Depreciation and amortisation expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Depreciation expenses ', 24), (' employee benefits expense ', 24), (' employee benefit espense ', 24), (' Advertising expenses ', 23), (' depreciation ', 22), (' Distribution expenses ', 22), (' Royalties ', 22), (' Management expenses ', 17), (' levies', 13), ('expenses ', 12), (' Occupancy ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Sales and marketing ', 81), (' Marketing expenses ', 74), (' Management expenses ', 59), (' Lease expenses ', 55), (' Selling Expenses ', 55), (' Administrative and other expenses ', 54), (' other expenses ', 53), (' Other expenses ', 53), (' Other expenses ', 53), (' Selling & distribution expenses ', 51), (' Advertising expenses ', 49), (' property espense ', 49), (' Administrative expenses ', 47), (' Administration expenses ', 47), (' Depreciation expenses ', 44), (' Amortisation expenses ', 44), ('expenses ', 43), (' Logistics and distribution ', 43), (' Distribution expenses ', 42), (' Depreciation and amortisation expenses ', 42), (' Occupancy expenses ', 41), (' employee benefit espense ', 41), (' employee benefits expense ', 36), (' depreciation ', 34), (' Administration ', 32), (' Royalties ', 21), (' levies', 15), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses ', 100), (' Administration expenses ', 100), (' Administrative and other expenses ', 76), (' Distribution expenses ', 75), (' Amortisation expenses ', 73), (' Administration ', 72), (' Advertising expenses ', 71), (' Selling & distribution expenses ', 65), (' Depreciation expenses ', 60), (' Depreciation and amortisation expenses ', 57), ('expenses ', 55), (' employee benefits expense ', 53), (' employee benefit espense ', 47), (' Lease expenses ', 44), (' Selling Expenses ', 44), (' Logistics and distribution ', 44), (' other expenses ', 43), (' Occupancy expenses ', 43), (' Other expenses ', 43), (' Management expenses ', 43), (' Other expenses ', 43), (' Marketing expenses ', 41), (' Sales and marketing ', 39), (' depreciation ', 35), (' property espense ', 32), (' Royalties ', 17), (' Occupancy ', 10), (' levies', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses ', 35), (' Royalties ', 33), (' Depreciation and amortisation expenses ', 32), (' Amortisation expenses ', 32), (' Distribution expenses ', 30), (' Administrative expenses ', 30), (' Administration expenses ', 30), (' Administrative and other expenses ', 27), (' Lease expenses ', 27), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), (' Marketing expenses ', 25), (' Selling & distribution expenses ', 25), (' Occupancy ', 25), (' Depreciation expenses ', 24), (' Advertising expenses ', 23), (' Sales and marketing ', 23), (' property espense ', 23), (' depreciation ', 22), (' Administration ', 20), (' Selling Expenses ', 18), (' employee benefits expense ', 18), (' employee benefit espense ', 18), (' other expenses ', 17), (' Other expenses ', 17), (' Other expenses ', 17), (' levies', 13), ('expenses ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' other expenses ', 100), (' Other expenses ', 100), (' Other expenses ', 100), (' Lease expenses ', 70), (' Selling Expenses ', 70), ('expenses ', 67), (' Occupancy expenses ', 67), (' property espense ', 67), (' Marketing expenses ', 64), (' Administrative and other expenses ', 63), (' Management expenses ', 58), (' Selling & distribution expenses ', 48), (' Depreciation expenses ', 46), (' Amortisation expenses ', 46), (' Advertising expenses ', 44), (' Distribution expenses ', 43), (' Administrative expenses ', 43), (' Administration expenses ', 43), (' Administration ', 38), (' employee benefits expense ', 35), (' depreciation ', 32), (' Depreciation and amortisation expenses ', 32), (' Logistics and distribution ', 31), (' Sales and marketing ', 30), (' employee benefit espense ', 29), (' Royalties ', 21), (' Occupancy ', 12), (' levies', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' employee benefits expense ', 42), (' Depreciation expenses ', 40), (' property espense ', 39), (' Depreciation and amortisation expenses ', 38), (' employee benefit espense ', 37), (' depreciation ', 35), (' Amortisation expenses ', 33), (' Logistics and distribution ', 33), (' Advertising expenses ', 32), (' Sales and marketing ', 32), (' Distribution expenses ', 31), (' Lease expenses ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Management expenses ', 29), (' Other expenses ', 29), (' Marketing expenses ', 28), (' Selling & distribution expenses ', 27), (' Royalties ', 26), (' Administrative expenses ', 25), (' Administration expenses ', 25), (' Administrative and other expenses ', 24), (' Selling Expenses ', 22), (' Occupancy expenses ', 21), (' levies', 20), (' Occupancy ', 19), ('expenses ', 18), (' Administration ', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' other expenses ', 64), (' Other expenses ', 64), (' Management expenses ', 64), (' Other expenses ', 64), (' Marketing expenses ', 62), (' Lease expenses ', 59), (' Occupancy expenses ', 57), ('expenses ', 55), (' Selling Expenses ', 52), (' property espense ', 52), (' Administrative and other expenses ', 43), (' Depreciation expenses ', 40), (' Amortisation expenses ', 40), (' Advertising expenses ', 39), (' Distribution expenses ', 38), (' Administrative expenses ', 38), (' Selling & distribution expenses ', 38), (' Administration expenses ', 38), (' depreciation ', 35), (' Sales and marketing ', 32), (' employee benefits expense ', 32), (' Depreciation and amortisation expenses ', 29), (' Logistics and distribution ', 28), (' employee benefit espense ', 26), (' Administration ', 24), (' levies', 20), (' Royalties ', 17), (' Occupancy ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Depreciation and amortisation expenses ', 40), (' other expenses ', 39), (' Other expenses ', 39), (' Other expenses ', 39), (' Depreciation expenses ', 36), (' Administrative and other expenses ', 36), (' Amortisation expenses ', 36), (' Selling & distribution expenses ', 35), (' property espense ', 35), (' Distribution expenses ', 34), (' employee benefits expense ', 34), (' employee benefit espense ', 34), (' Lease expenses ', 33), (' Marketing expenses ', 31), (' Logistics and distribution ', 31), (' Royalties ', 31), (' Administrative expenses ', 29), (' Administration expenses ', 29), (' Advertising expenses ', 29), (' Sales and marketing ', 29), (' Selling Expenses ', 27), (' Management expenses ', 26), (' depreciation ', 23), (' Administration ', 21), (' Occupancy expenses ', 19), (' Occupancy ', 17), ('expenses ', 16), (' levies', 9)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other expenses ', 59), (' Other expenses ', 59), (' Other expenses ', 59), (' Administrative and other expenses ', 50), (' property espense ', 43), (' Marketing expenses ', 40), (' Lease expenses ', 36), (' Selling Expenses ', 36), (' Occupancy expenses ', 35), (' Management expenses ', 35), (' Depreciation expenses ', 33), (' Selling & distribution expenses ', 33), (' Depreciation and amortisation expenses ', 33), (' Amortisation expenses ', 33), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Administration ', 32), ('expenses ', 29), (' Logistics and distribution ', 29), (' depreciation ', 28), (' Advertising expenses ', 27), (' Sales and marketing ', 27), (' employee benefits expense ', 27), (' employee benefit espense ', 27), (' Distribution expenses ', 26), (' Royalties ', 21), (' Occupancy ', 15), (' levies', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Selling & distribution expenses ', 39), (' Depreciation and amortisation expenses ', 36), (' property espense ', 36), (' Administrative and other expenses ', 33), (' Logistics and distribution ', 33), (' Distribution expenses ', 32), (' employee benefits expense ', 32), (' employee benefit espense ', 32), (' Sales and marketing ', 29), (' Selling Expenses ', 27), (' other expenses ', 26), (' Marketing expenses ', 26), (' Other expenses ', 26), (' Other expenses ', 26), (' depreciation ', 25), (' Administrative expenses ', 25), (' Depreciation expenses ', 25), (' Administration expenses ', 25), (' Amortisation expenses ', 25), (' Lease expenses ', 23), (' Management expenses ', 23), (' Advertising expenses ', 21), (' Royalties ', 21), (' Administration ', 20), (' Occupancy expenses ', 19), ('expenses ', 17), (' levies', 13), (' Occupancy ', 9)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' employee benefits expense ', 41), (' Administrative and other expenses ', 39), (' employee benefit espense ', 38), (' Depreciation and amortisation expenses ', 34), (' Logistics and distribution ', 34), (' Selling & distribution expenses ', 31), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Sales and marketing ', 27), (' property espense ', 27), (' Lease expenses ', 26), (' other expenses ', 25), (' Marketing expenses ', 25), (' Other expenses ', 25), (' Amortisation expenses ', 25), (' Other expenses ', 25), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Selling Expenses ', 23), (' Administration ', 23), (' Depreciation expenses ', 22), (' Management expenses ', 22), (' Occupancy expenses ', 19), (' Royalties ', 17), ('expenses ', 14), (' depreciation ', 14), (' levies', 11), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' employee benefits expense ', 41), (' Administrative and other expenses ', 39), (' employee benefit espense ', 38), (' Depreciation and amortisation expenses ', 34), (' Logistics and distribution ', 34), (' Selling & distribution expenses ', 31), (' Administrative expenses ', 27), (' Administration expenses ', 27), (' Sales and marketing ', 27), (' property espense ', 27), (' Lease expenses ', 26), (' other expenses ', 25), (' Marketing expenses ', 25), (' Other expenses ', 25), (' Amortisation expenses ', 25), (' Other expenses ', 25), (' Distribution expenses ', 24), (' Advertising expenses ', 24), (' Selling Expenses ', 23), (' Administration ', 23), (' Depreciation expenses ', 22), (' Management expenses ', 22), (' Occupancy expenses ', 19), (' Royalties ', 17), ('expenses ', 14), (' depreciation ', 14), (' levies', 11), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses ', 36), (' Depreciation and amortisation expenses ', 31), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Other expenses ', 29), (' property espense ', 27), (' Depreciation expenses ', 25), (' Selling & distribution expenses ', 25), (' Amortisation expenses ', 25), (' Administrative expenses ', 24), (' Administration expenses ', 24), (' Marketing expenses ', 23), (' Occupancy expenses ', 23), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' Management expenses ', 23), (' Logistics and distribution ', 23), (' Distribution expenses ', 22), (' Advertising expenses ', 22), (' Sales and marketing ', 22), (' Administration ', 18), (' depreciation ', 15), (' Royalties ', 15), ('expenses ', 12), (' Occupancy ', 10), (' levies', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Administrative and other expenses ', 36), (' Depreciation and amortisation expenses ', 31), (' employee benefits expense ', 30), (' employee benefit espense ', 30), (' other expenses ', 29), (' Other expenses ', 29), (' Other expenses ', 29), (' property espense ', 27), (' Depreciation expenses ', 25), (' Selling & distribution expenses ', 25), (' Amortisation expenses ', 25), (' Administrative expenses ', 24), (' Administration expenses ', 24), (' Marketing expenses ', 23), (' Occupancy expenses ', 23), (' Lease expenses ', 23), (' Selling Expenses ', 23), (' Management expenses ', 23), (' Logistics and distribution ', 23), (' Distribution expenses ', 22), (' Advertising expenses ', 22), (' Sales and marketing ', 22), (' Administration ', 18), (' depreciation ', 15), (' Royalties ', 15), ('expenses ', 12), (' Occupancy ', 10), (' levies', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Administrative and other expenses ', 40), (' Depreciation and amortisation expenses ', 40), (' Amortisation expenses ', 38), (' Selling & distribution expenses ', 36), (' Lease expenses ', 36), (' employee benefits expense ', 36), (' employee benefit espense ', 36), (' other expenses ', 35), (' Other expenses ', 35), (' Other expenses ', 35), (' Marketing expenses ', 34), (' Depreciation expenses ', 33), (' Advertising expenses ', 33), (' property espense ', 33), (' Distribution expenses ', 32), (' Administrative expenses ', 32), (' Administration expenses ', 32), (' Selling Expenses ', 31), (' Management expenses ', 30), (' Sales and marketing ', 29), (' Occupancy expenses ', 26), (' Logistics and distribution ', 26), ('expenses ', 25), (' Administration ', 23), (' Occupancy ', 21), (' depreciation ', 20), (' Royalties ', 20), (' levies', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [5, 6, 8], 'score': 100, 'value': -110280.0, 'line_item_label': ['Sales and marketing expenses', 'Administration expenses', 'Other expenses'], 'note_numbers': [nan, nan, nan], 'line_item_value': [-55764.0, -54291.0, -225.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['Rent ', ' Rental expenses', ' Occupancy', ' Occupancy expenses']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses ', 33), (' Rental expenses ', 31), (' Occupancy expenses', 23), ('Rent ', 22), (' Occupancy ', 22)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses ', 43), (' Rental expenses ', 40), ('Rent ', 38), (' Occupancy expenses', 33), (' Occupancy ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Rental expenses ', 69), (' Administration expenses ', 47), (' Occupancy expenses', 41), ('Rent ', 23), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses', 26), (' Occupancy ', 25), ('Rent ', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses ', 64), (' Administration expenses ', 43), ('Rent ', 38), (' Occupancy ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 25), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses ', 30), (' Administration expenses ', 25), (' Occupancy expenses', 19), ('Rent ', 13), (' Occupancy ', 9)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 27), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 27), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 24), (' Occupancy expenses', 23), ('Rent ', 13), (' Occupancy ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 24), (' Occupancy expenses', 23), ('Rent ', 13), (' Occupancy ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 32), (' Occupancy expenses', 26), (' Occupancy ', 21), ('Rent ', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -47684.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-47684.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['Rent ', ' Rental expenses ', ' Administration expenses ', ' Occupancy ', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Administration expenses ', 33), (' Rental expenses ', 31), (' Occupancy expenses', 23), ('Rent ', 22), (' Occupancy ', 22)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses ', 36), (' Administration expenses ', 32), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses ', 32), ('Rent ', 25), (' Occupancy expenses', 25), (' Occupancy ', 24), (' Administration expenses ', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Administration expenses ', 43), (' Rental expenses ', 40), ('Rent ', 38), (' Occupancy expenses', 33), (' Occupancy ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses ', 30), ('Rent ', 27), (' Occupancy expenses', 26), (' Rental expenses ', 25), (' Occupancy ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Rental expenses ', 69), (' Administration expenses ', 47), (' Occupancy expenses', 41), ('Rent ', 23), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses ', 100), (' Occupancy expenses', 43), (' Rental expenses ', 41), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses ', 33), (' Administration expenses ', 30), (' Occupancy expenses', 26), (' Occupancy ', 25), ('Rent ', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses ', 64), (' Administration expenses ', 43), ('Rent ', 38), (' Occupancy ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 25), (' Occupancy expenses', 21), ('Rent ', 20), (' Occupancy ', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses ', 69), (' Occupancy expenses', 57), (' Administration expenses ', 38), ('Rent ', 30), (' Occupancy ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses ', 31), (' Administration expenses ', 29), (' Occupancy expenses', 19), ('Rent ', 17), (' Occupancy ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses ', 40), (' Occupancy expenses', 35), (' Administration expenses ', 32), ('Rent ', 31), (' Occupancy ', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Rental expenses ', 30), (' Administration expenses ', 25), (' Occupancy expenses', 19), ('Rent ', 13), (' Occupancy ', 9)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 27), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 27), (' Occupancy expenses', 19), ('Rent ', 15), (' Occupancy ', 7)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 24), (' Occupancy expenses', 23), ('Rent ', 13), (' Occupancy ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Rental expenses ', 28), (' Administration expenses ', 24), (' Occupancy expenses', 23), ('Rent ', 13), (' Occupancy ', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Rental expenses ', 34), (' Administration expenses ', 32), (' Occupancy expenses', 26), (' Occupancy ', 21), ('Rent ', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': -54291.0, 'line_item_label': ['Administration expenses'], 'note_numbers': [nan], 'line_item_value': [-54291.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['Other income ', ' Commission revenue ', ' Rent ', ' rental revenue']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('other operating', 31), ('Other revenue', 29), (' Other income', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Other income', 27), ('other operating', 24), ('Other revenue', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Other income', 49), ('Other revenue', 39), ('other operating', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 4518.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['6', '6'], 'line_item_value': [1882.0, 2636.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('Other revenue', 45), (' Other income', 37), ('other operating', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('Other revenue', 100), ('other operating', 45), (' Other income', 43)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('other operating', 31), ('Other revenue', 29), (' Other income', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Other income', 27), ('other operating', 24), ('Other revenue', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Other income', 32), ('other operating', 20), ('Other revenue', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Other income', 32), ('other operating', 29), ('Other revenue', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Other income', 49), ('Other revenue', 39), ('other operating', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': 6593.0, 'line_item_label': ['Other revenue', 'Other income'], 'note_numbers': ['6', '6'], 'line_item_value': [5366.0, 1227.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['interest ', ' Bank interest ', ' Interest income ', ' Interest received - Bank ', ' Interest received - Loan ', ' Sublease interest income ', ' Share of JV interest received/(paid) ', ' Bank Deposits - cash and cash equivalents ', ' Finance income under the effective interest method on financial assets not measured at FVTPL ', ' interest revenue']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['Interest expense', 'interest expense']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Finance income and costs', 37), (' Finance income and finance costs', 36), (' Net finance costs', 32), ('finance income', 29), ('Finance income', 29), ('other income', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21), ('Finance income', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 38), (' Finance income and costs', 32), (' Net finance costs', 32), (' Interest revenue', 29), ('other income', 27), ('finance income', 19), ('Finance income', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('other income', 49), (' Interest revenue', 37), ('finance income', 35), ('Finance income', 35), (' Finance income and costs', 33), (' Net finance costs', 33), (' Finance income and finance costs', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 85, 'value': 1731.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [2636.0, -905.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Interest revenue', 51), (' Finance income and costs', 38), (' Net finance costs', 38), ('other income', 37), (' Finance income and finance costs', 37), ('finance income', 32), ('Finance income', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' Interest revenue', 74), ('other income', 43), (' Net finance costs', 30), (' Finance income and costs', 24), (' Finance income and finance costs', 20), ('finance income', 17), ('Finance income', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Finance income and costs', 37), (' Finance income and finance costs', 36), (' Net finance costs', 32), ('finance income', 29), ('Finance income', 29), ('other income', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21), ('Finance income', 21)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Finance income and finance costs', 38), (' Finance income and costs', 32), (' Net finance costs', 32), (' Interest revenue', 29), ('other income', 27), ('finance income', 19), ('Finance income', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Finance income and costs', 39), (' Finance income and finance costs', 38), (' Net finance costs', 36), ('other income', 32), ('finance income', 32), ('Finance income', 32), (' Interest revenue', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Finance income and finance costs', 37), (' Finance income and costs', 35), (' Net finance costs', 33), ('other income', 32), ('finance income', 29), ('Finance income', 29), (' Interest revenue', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('other income', 49), (' Interest revenue', 37), ('finance income', 35), ('Finance income', 35), (' Finance income and costs', 33), (' Net finance costs', 33), (' Finance income and finance costs', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 85, 'value': 694.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [1227.0, -533.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost ', ' finance costs ', ' finance expenses ', ' net finance costs ', ' interest expense']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['loan ', ' debt ', ' debenture ', ' cash credit ', ' borrowings ', ' bank facilities ', ' bonds ', ' interest ', ' Interest expenses ', ' Discount unwind on the provision for asset retirement obligation ', ' Other interest expense ', ' Interest on leases ', ' Interest on bank overdrafts and loans (other than those from related parties) ', ' Interest accrued on loans ', ' Interest accrued on lease liabilities ', ' Lease interest expense ', ' Interest expense on financial liabilities using the effective interest rate method - other ', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities ', ' Lease liabilities interest expense']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['interest income']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance costs ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost ', 33), (' finance costs ', 33), (' interest expense', 26), (' finance expenses ', 22)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' finance costs ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance costs ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost ', 35), (' finance costs ', 35), (' net finance costs ', 30), (' interest expense', 30), (' finance expenses ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 27), (' finance costs ', 27), (' finance expenses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' interest expense', 54), (' finance expenses ', 46), (' net finance costs ', 32), ('finance cost ', 24), (' finance costs ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses ', 41), (' interest expense', 39), ('finance cost ', 30), (' finance costs ', 30), (' net finance costs ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' finance costs ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' interest expense', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' interest expense', 74), (' finance expenses ', 56), (' net finance costs ', 22), ('finance cost ', 17), (' finance costs ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 37), (' finance costs ', 37), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense', 65), (' net finance costs ', 45), ('finance cost ', 37), (' finance costs ', 37)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost ', 33), (' finance costs ', 33), (' interest expense', 29), (' finance expenses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42), (' finance costs ', 42)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), (' interest expense', 32), ('finance cost ', 27), (' finance costs ', 27), (' finance expenses ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), (' interest expense', 30), ('finance cost ', 26), (' finance costs ', 26), (' finance expenses ', 22)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), (' interest expense', 30), ('finance cost ', 26), (' finance costs ', 26), (' finance expenses ', 22)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' interest expense', 30), (' finance expenses ', 28), ('finance cost ', 26), (' finance costs ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' interest expense', 30), (' finance expenses ', 28), ('finance cost ', 26), (' finance costs ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' net finance costs ', 33), (' interest expense', 33), (' finance expenses ', 30), ('finance cost ', 27), (' finance costs ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -905.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-905.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['finance cost ', ' finance costs ', ' finance expenses ', ' net finance costs ', ' interest expense'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' net finance costs ', 38), ('finance cost ', 33), (' finance costs ', 33), (' interest expense', 26), (' finance expenses ', 22)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost ', 60), (' finance costs ', 60), (' net finance costs ', 58), (' finance expenses ', 27), (' interest expense', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost ', 43), (' finance costs ', 43), (' finance expenses ', 32), (' interest expense', 30)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('finance cost ', 35), (' finance costs ', 35), (' net finance costs ', 30), (' interest expense', 30), (' finance expenses ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), (' interest expense', 38), ('finance cost ', 27), (' finance costs ', 27), (' finance expenses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' interest expense', 54), (' finance expenses ', 46), (' net finance costs ', 32), ('finance cost ', 24), (' finance costs ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses ', 41), (' interest expense', 39), ('finance cost ', 30), (' finance costs ', 30), (' net finance costs ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost ', 100), (' finance costs ', 100), (' net finance costs ', 85), (' finance expenses ', 67), (' interest expense', 31)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' interest expense', 74), (' finance expenses ', 56), (' net finance costs ', 22), ('finance cost ', 17), (' finance costs ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost ', 37), (' finance costs ', 37), (' finance expenses ', 34), (' interest expense', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses ', 69), (' interest expense', 65), (' net finance costs ', 45), ('finance cost ', 37), (' finance costs ', 37)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost ', 33), (' finance costs ', 33), (' interest expense', 29), (' finance expenses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' interest expense', 54), (' net finance costs ', 49), (' finance expenses ', 46), ('finance cost ', 42), (' finance costs ', 42)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' net finance costs ', 32), (' interest expense', 32), ('finance cost ', 27), (' finance costs ', 27), (' finance expenses ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), (' interest expense', 30), ('finance cost ', 26), (' finance costs ', 26), (' finance expenses ', 22)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' net finance costs ', 36), (' interest expense', 30), ('finance cost ', 26), (' finance costs ', 26), (' finance expenses ', 22)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' interest expense', 30), (' finance expenses ', 28), ('finance cost ', 26), (' finance costs ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' net finance costs ', 33), (' interest expense', 30), (' finance expenses ', 28), ('finance cost ', 26), (' finance costs ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' net finance costs ', 33), (' interest expense', 33), (' finance expenses ', 30), ('finance cost ', 27), (' finance costs ', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 100, 'value': -533.0, 'line_item_label': ['Finance costs'], 'note_numbers': [nan], 'line_item_value': [-533.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue ', ' commission revenue ', ' government grants ', ' insurance proceeds ', ' foreign exchange gain ', ' other ', ' dividend from other parties ', ' other income ', ' net foreign exchange gain ', ' effective portion of changes in fair value of cash flow ', ' profit from discontinued operation ', ' net of tax ', ' share of jv income ', ' secondment income (tw recovery) ', ' japan recoveries ', ' margin charge income ', ' net foreign exchange gains/(losses) ', ' paid by customers - at amortised cost ', ' net foreign exchange (loss)/gain ', ' net ppe disposal (loss)/gain ', ' other miscellaneous - net (loss)/gain ', ' quota lease income ', ' sundry income ', ' net (loss)/profit on disposal of non-current assets ', ' net other foreign exchange (losses)/gains ', ' Sub-lease rental income ', ' Profit on sale of assets ', ' Asset impairment ', ' Loss on sale of disposal of assets ', ' Remuneration from services linked to newly acquired entities ', ' Power purchase agreement realised gain ', ' Power purchase agreement unrelaised gain ', ' net gain / loss on disposal of property plant and equipment ']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' other opertaing income ', 40), (' net finance costs ', 38), (' other income ', 37), ('finance cost', 33), ('finance costs', 33), (' other gains/losses', 30), (' finance expenses', 22), (' expenses ', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' other income ', 40), (' other opertaing income ', 37), (' other gains/losses', 33), (' finance expenses', 27), (' expenses ', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses', 52), (' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' other opertaing income ', 40), (' other income ', 35), (' finance expenses', 32), (' expenses ', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' other income ', 43), (' other gains/losses', 37), ('finance cost', 35), ('finance costs', 35), (' other opertaing income ', 33), (' expenses ', 33), (' net finance costs ', 30), (' finance expenses', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' other opertaing income ', 76), (' other gains/losses', 69), (' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' expenses ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' expenses ', 43), (' other opertaing income ', 40), (' other gains/losses', 38), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24), (' other income ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' expenses ', 55), (' finance expenses', 41), (' other gains/losses', 39), ('finance cost', 30), ('finance costs', 30), (' other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67), (' other opertaing income ', 28), (' other income ', 27), (' other gains/losses', 23), (' expenses ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' expenses ', 67), (' other income ', 61), (' other gains/losses', 59), (' finance expenses', 56), (' other opertaing income ', 53), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' other opertaing income ', 41), (' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34), (' other income ', 30), (' other gains/losses', 26), (' expenses ', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' expenses ', 55), (' other income ', 52), (' other opertaing income ', 47), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37), (' other gains/losses', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' other opertaing income ', 54), (' other income ', 47), (' other gains/losses', 41), (' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25), (' expenses ', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42), (' expenses ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' other opertaing income ', 37), (' other gains/losses', 36), (' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' other income ', 27), (' finance expenses', 26), (' expenses ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' other gains/losses', 39), (' other opertaing income ', 38), (' net finance costs ', 36), (' other income ', 32), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22), (' expenses ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' other gains/losses', 39), (' other opertaing income ', 38), (' net finance costs ', 36), (' other income ', 32), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22), (' expenses ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' other opertaing income ', 42), (' net finance costs ', 33), (' other gains/losses', 33), (' other income ', 32), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26), (' expenses ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' other opertaing income ', 42), (' net finance costs ', 33), (' other gains/losses', 33), (' other income ', 32), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26), (' expenses ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' other opertaing income ', 50), (' other income ', 49), (' other gains/losses', 37), (' net finance costs ', 33), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27), (' expenses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 100, 'value': 1731.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [2636.0, -905.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ', ' other opertaing income ', ' other income ', ' expenses ', ' other gains/losses'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' other opertaing income ', 40), (' net finance costs ', 38), (' other income ', 37), ('finance cost', 33), ('finance costs', 33), (' other gains/losses', 30), (' finance expenses', 22), (' expenses ', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' other income ', 40), (' other opertaing income ', 37), (' other gains/losses', 33), (' finance expenses', 27), (' expenses ', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' other gains/losses', 52), (' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' other opertaing income ', 40), (' other income ', 35), (' finance expenses', 32), (' expenses ', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' other income ', 43), (' other gains/losses', 37), ('finance cost', 35), ('finance costs', 35), (' other opertaing income ', 33), (' expenses ', 33), (' net finance costs ', 30), (' finance expenses', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' other income ', 100), (' other opertaing income ', 76), (' other gains/losses', 69), (' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25), (' expenses ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' finance expenses', 46), (' expenses ', 43), (' other opertaing income ', 40), (' other gains/losses', 38), (' net finance costs ', 32), ('finance cost', 24), ('finance costs', 24), (' other income ', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' expenses ', 55), (' finance expenses', 41), (' other gains/losses', 39), ('finance cost', 30), ('finance costs', 30), (' other income ', 30), (' other opertaing income ', 29), (' net finance costs ', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67), (' other opertaing income ', 28), (' other income ', 27), (' other gains/losses', 23), (' expenses ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' expenses ', 67), (' other income ', 61), (' other gains/losses', 59), (' finance expenses', 56), (' other opertaing income ', 53), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' other opertaing income ', 41), (' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34), (' other income ', 30), (' other gains/losses', 26), (' expenses ', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' expenses ', 55), (' other income ', 52), (' other opertaing income ', 47), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37), (' other gains/losses', 32)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' other opertaing income ', 54), (' other income ', 47), (' other gains/losses', 41), (' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25), (' expenses ', 16)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' other income ', 67), (' other opertaing income ', 55), (' net finance costs ', 49), (' other gains/losses', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42), (' expenses ', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' other opertaing income ', 37), (' other gains/losses', 36), (' net finance costs ', 32), ('finance cost', 27), ('finance costs', 27), (' other income ', 27), (' finance expenses', 26), (' expenses ', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' other gains/losses', 39), (' other opertaing income ', 38), (' net finance costs ', 36), (' other income ', 32), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22), (' expenses ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' other gains/losses', 39), (' other opertaing income ', 38), (' net finance costs ', 36), (' other income ', 32), ('finance cost', 26), ('finance costs', 26), (' finance expenses', 22), (' expenses ', 14)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' other opertaing income ', 42), (' net finance costs ', 33), (' other gains/losses', 33), (' other income ', 32), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26), (' expenses ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' other opertaing income ', 42), (' net finance costs ', 33), (' other gains/losses', 33), (' other income ', 32), (' finance expenses', 28), ('finance cost', 26), ('finance costs', 26), (' expenses ', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' other opertaing income ', 50), (' other income ', 49), (' other gains/losses', 37), (' net finance costs ', 33), (' finance expenses', 30), ('finance cost', 27), ('finance costs', 27), (' expenses ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [4, 7], 'score': 100, 'value': 694.0, 'line_item_label': ['Other income', 'Finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [1227.0, -533.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:34+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-08-10 12:54:34+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax expense', 53), (' income tax benefit/(expense)', 52), ('amount transferred to retained earnings', 49), ('deferred tax', 39), ('minimum alternate tax credit entitlement', 37), ('provision for taxation previous year', 35), ('earlier year', 35), (' income tax benefit', 31), ('current tax', 30), (' income tax', 26), ('prior year ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 40), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax benefit', 34), (' income tax expense', 28), ('deferred tax', 24), ('prior year ', 24), (' income tax', 24), ('current tax', 23), ('earlier year', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('provision for taxation previous year', 48), ('prior year ', 41), ('amount transferred to retained earnings', 39), ('earlier year', 39), (' income tax benefit', 39), (' tax (expense)/benefit', 38), (' income tax', 37), ('minimum alternate tax credit entitlement', 36), (' income tax expense', 36), (' income tax benefit/(expense)', 34), ('current tax', 27), ('deferred tax', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -15776.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['5'], 'line_item_value': [-15776.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('minimum alternate tax credit entitlement', 38), ('current tax', 37), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 33), (' income tax benefit', 33), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), (' income tax expense', 29), (' income tax', 29), ('prior year ', 24), ('deferred tax', 20), ('earlier year', 18)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('deferred tax', 29), (' income tax benefit/(expense)', 28), (' income tax expense', 21), (' income tax benefit', 21), (' income tax', 19)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' tax (expense)/benefit', 55), (' income tax expense', 53), (' income tax benefit/(expense)', 52), ('amount transferred to retained earnings', 49), ('deferred tax', 39), ('minimum alternate tax credit entitlement', 37), ('provision for taxation previous year', 35), ('earlier year', 35), (' income tax benefit', 31), ('current tax', 30), (' income tax', 26), ('prior year ', 25)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('provision for taxation previous year', 40), (' income tax benefit/(expense)', 37), (' tax (expense)/benefit', 37), (' income tax benefit', 34), (' income tax expense', 28), ('deferred tax', 24), ('prior year ', 24), (' income tax', 24), ('current tax', 23), ('earlier year', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' income tax benefit/(expense)', 51), (' income tax benefit', 50), ('minimum alternate tax credit entitlement', 43), (' tax (expense)/benefit', 41), (' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 32), ('provision for taxation previous year', 32), (' income tax', 30), ('deferred tax', 27), ('earlier year', 25), ('prior year ', 20)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('provision for taxation previous year', 44), (' income tax benefit', 40), (' income tax benefit/(expense)', 39), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('minimum alternate tax credit entitlement', 36), ('earlier year', 31), ('current tax', 29), ('prior year ', 29), (' tax (expense)/benefit', 29), (' income tax', 27), ('deferred tax', 24)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('provision for taxation previous year', 48), ('prior year ', 41), ('amount transferred to retained earnings', 39), ('earlier year', 39), (' income tax benefit', 39), (' tax (expense)/benefit', 38), (' income tax', 37), ('minimum alternate tax credit entitlement', 36), (' income tax expense', 36), (' income tax benefit/(expense)', 34), ('current tax', 27), ('deferred tax', 23)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -12413.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['5'], 'line_item_value': [-12413.0]}
2023-08-10 12:54:34+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:34+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 48)]
2023-08-10 12:54:34+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' total tax (expense)/benefit in income statement', 52)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 100), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), (' total tax (expense)/benefit in income statement', 40)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 100), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' current income tax', 71), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: net (gain)/loss on actuarial gains and losses , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' income tax expense on continuing operations', 48), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 38)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: total , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' income tax expense on continuing operations', 48), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 40)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = current income tax current income tax charge , res_fuzz_match = [(' current income tax', 100), ('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 48)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = current income tax adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' total tax (expense)/benefit in income statement', 52)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred income tax relating to origination and reversal of temporary differences , res_fuzz_match = [(' deferred income tax', 100), ('income tax expense', 69), (' income tax expense on continuing operations', 59), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), (' total tax (expense)/benefit in income statement', 40)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred income tax income tax expenses reported in the statement of profit or loss , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 100), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' current income tax', 71), (' total tax (expense)/benefit in income statement', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 57)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: net (gain)/loss on actuarial gains and losses , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' income tax expense on continuing operations', 48), (' total income tax expense / (benefit)', 40), (' total tax (expense)/benefit in income statement', 40), ('income tax expense', 38)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax related to items recognised in oci during the year: total , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' income tax expense on continuing operations', 48), ('income tax expense', 44), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' total income tax expense / (benefit)', 40)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [28995.0, 3.0, -16585.0, 12413.0, 32883.0, 10.0, -17117.0, 15776.0], 'label': ['Current income tax Current income tax charge', 'Current income tax Adjustments in respect of current income tax of prior year', 'Deferred income tax Relating to origination and reversal of temporary differences', 'Deferred income tax Income tax expenses reported in the statement of profit or loss', 'Current income tax Current income tax charge', 'Current income tax Adjustments in respect of current income tax of prior year', 'Deferred income tax Relating to origination and reversal of temporary differences', 'Deferred income tax Income tax expenses reported in the statement of profit or loss'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-08-10 12:54:35+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = none accounting profit before tax , res_fuzz_match = [(' current income tax', 47), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 38)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = none ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = none adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' total income tax expense / (benefit)', 54), (' income tax expense on continuing operations', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses for tax purposes , res_fuzz_match = [('income tax expense', 56), (' income tax expense on continuing operations', 55), (' current income tax', 53), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 44)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = none income tax expense at effective tax rate , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 68), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 57)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), ('income tax expense', 44), (' current income tax', 41), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 35)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 29)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), ('income tax expense', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 29)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense / (benefit)', 34), (' current income tax', 29)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 38)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [(' deferred income tax', 67), (' current income tax', 65), ('income tax expense', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense / (benefit)', 47), (' income tax expense on continuing operations', 45)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33), (' current income tax', 29)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('income tax expense', 50), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 44)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 52), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 40)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 52), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 40)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = none accounting profit before tax , res_fuzz_match = [(' current income tax', 47), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 41), (' total tax (expense)/benefit in income statement', 41), ('income tax expense', 38)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = none ataustralia's statutory income tax rate of 30% (2022: 30%) , res_fuzz_match = [('income tax expense', 73), (' deferred income tax', 73), (' current income tax', 71), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), (' income tax expense on continuing operations', 41)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = none adjustments in respect of current income tax of prior year , res_fuzz_match = [(' current income tax', 100), (' deferred income tax', 73), ('income tax expense', 69), (' total income tax expense / (benefit)', 54), (' income tax expense on continuing operations', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total tax (expense)/benefit in income statement', 50)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = none non-deductible expenses for tax purposes , res_fuzz_match = [('income tax expense', 56), (' income tax expense on continuing operations', 55), (' current income tax', 53), (' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 50), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 44)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = none income tax expense at effective tax rate , res_fuzz_match = [('income tax expense', 100), (' deferred income tax', 73), (' total income tax expense / (benefit)', 73), (' income tax expense on continuing operations', 72), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 68), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 57)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: unrealised foreign exchange gains , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 45), ('income tax expense', 44), (' current income tax', 41), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 37), (' total tax (expense)/benefit in income statement', 35)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: provisions , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' current income tax', 29)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: business related costs , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' current income tax', 47), ('income tax expense', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: right-of-use assets , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 29)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: lease liabilities , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 35), (' total income tax expense / (benefit)', 34), (' current income tax', 29)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: fit out incentive received , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 44), (' total tax (expense)/benefit in income statement', 42), (' current income tax', 41), (' income tax expense on continuing operations', 38)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: interest income not received , res_fuzz_match = [(' deferred income tax', 67), (' current income tax', 65), ('income tax expense', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense / (benefit)', 47), (' income tax expense on continuing operations', 45)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: prepaid insurance , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 33), (' current income tax', 29)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = deferred tax assets relate to the following: total deferred tax assets , res_fuzz_match = [(' deferred income tax', 60), (' total income tax expense / (benefit)', 47), ('income tax expense', 44), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' total tax (expense)/benefit in income statement', 40), (' income tax expense on continuing operations', 38), (' current income tax', 35)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: asofl beginning of the period , res_fuzz_match = [('income tax expense', 50), (' current income tax', 47), (' deferred income tax', 47), (' total income tax expense / (benefit)', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' income tax expense on continuing operations', 45), (' total tax (expense)/benefit in income statement', 44)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in profit or loss , res_fuzz_match = [(' current income tax', 53), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: tax income during the period recognised in other comprehensive income , res_fuzz_match = [(' current income tax', 59), (' deferred income tax', 53), (' total income tax expense / (benefit)', 53), ('income tax expense', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49), (' income tax expense on continuing operations', 48), (' total tax (expense)/benefit in income statement', 48)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 52), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 40)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows = reconciliation ofdeferred tax assets: adjustments in respect deferred tax assets of prior years as of the end ofthe period , res_fuzz_match = [(' deferred income tax', 60), (' income tax expense on continuing operations', 52), ('income tax expense', 50), (' total tax (expense)/benefit in income statement', 48), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' total income tax expense / (benefit)', 40)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 4, 21, 23], 'score': [100, 100, 100, 100], 'value': [3.0, 12413.0, 10.0, 15776.0], 'label': ['None Adjustments in respect of current income tax of prior year', 'None Income tax expense at effective tax rate', 'None Adjustments in respect of current income tax of prior year', 'None Income tax expense at effective tax rate'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:35+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-10 12:54:35+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:35+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-10 12:54:35+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:35+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-08-10 12:54:35+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:35+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:35+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('share of', 13), ('share in', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('share of', 21), ('share in', 21)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:35+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-10 12:54:35+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation']
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:35+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-10 12:54:35+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:35+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-08-10 12:54:35+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:35+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 27), ('exceptional ', 16)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 22)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 29), (' prior period ', 24)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 42), (' Actuarial gains / (losses) on retirement benefit obligation', 33)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 32), ('exceptional ', 16)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), (' prior period ', 26), ('exceptional ', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 84), (' prior period ', 22), ('exceptional ', 14)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 84), (' prior period ', 22), ('exceptional ', 14)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 40), (' prior period ', 26), ('exceptional ', 12)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 40), (' prior period ', 26), ('exceptional ', 12)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 34), (' prior period ', 30), ('exceptional ', 15)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15], 'score': 84, 'value': -2.0, 'line_item_label': ['Actuarial gains /(losses) on retirement benefit obligation (net of income tax)', 'Actuarial gains /(losses) on retirement benefit obligation (net of income tax)'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, -2.0]}
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:35+0530 - sLogger - DEBUG - keywords = ['exceptional ', ' prior period ', ' Actuarial gains / (losses) on retirement benefit obligation'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 35), (' prior period ', 27), ('exceptional ', 16)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional ', 27), (' Actuarial gains / (losses) on retirement benefit obligation', 26), (' prior period ', 19)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' prior period ', 50), (' Actuarial gains / (losses) on retirement benefit obligation', 33), ('exceptional ', 22)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [(' prior period ', 33), (' Actuarial gains / (losses) on retirement benefit obligation', 24), ('exceptional ', 22)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 29), ('exceptional ', 24)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 29), (' prior period ', 24)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 30), ('exceptional ', 27), (' prior period ', 21)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 29), (' prior period ', 26), ('exceptional ', 24)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional ', 44), (' prior period ', 42), (' Actuarial gains / (losses) on retirement benefit obligation', 33)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' prior period ', 43), (' Actuarial gains / (losses) on retirement benefit obligation', 34), ('exceptional ', 27)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional ', 36), (' prior period ', 36), (' Actuarial gains / (losses) on retirement benefit obligation', 30)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' prior period ', 39), (' Actuarial gains / (losses) on retirement benefit obligation', 32), ('exceptional ', 16)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' prior period ', 41), (' Actuarial gains / (losses) on retirement benefit obligation', 41), ('exceptional ', 21)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 38), (' prior period ', 26), ('exceptional ', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 84), (' prior period ', 22), ('exceptional ', 14)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 84), (' prior period ', 22), ('exceptional ', 14)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 40), (' prior period ', 26), ('exceptional ', 12)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 40), (' prior period ', 26), ('exceptional ', 12)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [(' Actuarial gains / (losses) on retirement benefit obligation', 34), (' prior period ', 30), ('exceptional ', 15)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15], 'score': 84, 'value': 265.0, 'line_item_label': ['Actuarial gains /(losses) on retirement benefit obligation (net of income tax)', 'Actuarial gains /(losses) on retirement benefit obligation (net of income tax)'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 265.0]}
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-08-10 12:54:35+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-10 12:54:35+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-08-10 12:54:35+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-10 12:54:35+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-08-10 12:54:35+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-08-10 12:54:35+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:35+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-08-10 12:54:35+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-08-10 12:54:35+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = revenue from contracts with customers , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other revenue , res_fuzz_match = [('NULL', 25)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = sales and marketing expenses , res_fuzz_match = [('NULL', 15)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = items that will not be reclassified to profit or loss , res_fuzz_match = [('NULL', 13)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = actuarial gains /(losses) on retirement benefit obligation (net of income tax) , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = other comprehensive incomellloss), net ofincome tax, for the year , res_fuzz_match = [('NULL', 10)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - txt_particular = totalcomprehensive income for the year , res_fuzz_match = [('NULL', 11)]
2023-08-10 12:54:35+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}

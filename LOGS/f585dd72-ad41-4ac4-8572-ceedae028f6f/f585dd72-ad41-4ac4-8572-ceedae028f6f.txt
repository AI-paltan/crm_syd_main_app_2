2023-05-09 10:58:03+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-05-09 10:58:03+0530 - sLogger - DEBUG - {'fileid': 'f585dd72-ad41-4ac4-8572-ceedae028f6f', 'filename': '20230331 2022 General Purpose Financial Statements signed.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/20230331 2022 General Purpose Financial Statements signed.pdf'}
2023-05-09 10:58:03+0530 - sLogger - DEBUG - save file completed
2023-05-09 10:58:03+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-05-09 10:58:03+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-05-09 10:58:03+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-05-09 10:58:03+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-05-09 10:58:03+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-05-09 10:58:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:03+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:05+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:05+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:05+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:05+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:05+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:08+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:08+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:08+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:08+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:08+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:15+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:15+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:21+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:21+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:21+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:21+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:21+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:25+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:25+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:25+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:25+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:25+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:30+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:30+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:30+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:30+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:30+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:35+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:35+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:39+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:39+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:39+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:39+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:39+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:43+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:46+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:46+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:51+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:51+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:53+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:53+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:53+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:53+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:53+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:58:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:58:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:58:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:58:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:58:58+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:58:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:58:58+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:59:03+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:59:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:59:03+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:59:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:59:03+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:59:03+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:59:03+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:59:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:59:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:59:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:59:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:59:11+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:59:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:59:11+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:59:20+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:59:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:59:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:59:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:59:20+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:59:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:59:20+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:59:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:59:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:59:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:59:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:59:27+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:59:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:59:27+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:59:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:59:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:59:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:59:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:59:35+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:59:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:59:35+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:59:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:59:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:59:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:59:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:59:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:59:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:59:43+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 10:59:50+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 10:59:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 10:59:50+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 10:59:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 10:59:50+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 10:59:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 10:59:50+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:00:00+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:00:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:00:00+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:00:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:00:00+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:00:00+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:00:00+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:00:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:00:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:00:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:00:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:00:06+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:00:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:00:06+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:00:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:00:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:00:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:00:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:00:13+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:00:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:00:13+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:00:20+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:00:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:00:20+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:00:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:00:20+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:00:20+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:00:20+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:00:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:00:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:00:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:00:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:00:27+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:00:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:00:27+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:00:33+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:00:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:00:33+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:00:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:00:33+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:00:33+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:00:33+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:00:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:00:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:00:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:00:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:00:41+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:00:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:00:41+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:00:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:00:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:00:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:00:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:00:48+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:00:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:00:48+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:00:55+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:00:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:00:55+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:00:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:00:55+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:00:55+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:00:55+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:00:59+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:00:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:00:59+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:00:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:00:59+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:00:59+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:00:59+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:02+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:01:02+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:06+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:01:06+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:11+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:11+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:11+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:11+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:01:11+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:14+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:14+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:14+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:14+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:01:14+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:18+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:18+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:18+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:18+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:01:18+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:23+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:23+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:23+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:23+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:01:23+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:29+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:29+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:29+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:29+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:01:29+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:35+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:35+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:35+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:35+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:01:35+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:40+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:40+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:40+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:40+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:01:40+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:46+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:01:46+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:01:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:01:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:01:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:01:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:01:49+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:01:50+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-05-09 11:01:50+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [10], 'predicted_cpl_pages': [9], 'predicted_ccf_pages': [12], 'filtered_cbs_pages': [10], 'filtered_cpl_pages': [9], 'filtered_ccf_pages': [12], 'month': 'december'}
2023-05-09 11:01:50+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-05-09 11:01:50+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-05-09 11:01:50+0530 - sLogger - DEBUG - process file completed
2023-05-09 11:01:50+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-05-09 11:01:50+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-05-09 11:01:50+0530 - sLogger - DEBUG - TE process file started
2023-05-09 11:05:53+0530 - sLogger - DEBUG - TE Proces file completed
2023-05-09 11:05:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-05-09 11:05:53+0530 - sLogger - DEBUG - process_main_pages started
2023-05-09 11:05:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-09 11:05:53+0530 - sLogger - DEBUG - start_refactoring started
2023-05-09 11:05:53+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-09 11:05:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-09 11:05:53+0530 - sLogger - DEBUG - start_refactoring started
2023-05-09 11:05:53+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-09 11:05:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-09 11:05:53+0530 - sLogger - DEBUG - start_refactoring started
2023-05-09 11:05:53+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-09 11:05:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-05-09 11:05:53+0530 - sLogger - DEBUG - set_section_details started
2023-05-09 11:05:53+0530 - sLogger - DEBUG - ASSETS | [('assets', 100), ('current assets', 56), ('noncurrent assets', 56), ('equity', 36), ('equity and liabilities', 27), ('equity liabilities', 22), ('current liabilities', 21), ('liabilities', 18), ('noncurrent liabilities', 11)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current assets | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD current liabilities | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent assets | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD noncurrent liabilities | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current assets | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD non current liabilities | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity and liabilities | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text ASSETS | MATCH WORD equity | score 33
2023-05-09 11:05:53+0530 - sLogger - DEBUG - CURRENT ASSETS | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current assets | score 100
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD current liabilities | score 67
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent assets | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 61
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current assets | score 95
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD non current liabilities | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT ASSETS | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equity liabilities', 35), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrent liabilities', 23), ('liabilities', 22)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Current tax receivables | [('current liabilities', 62), ('current assets', 45), ('equity and liabilities', 34), ('equity liabilities', 32), ('noncurrent assets', 26), ('equity', 25), ('noncurrent liabilities', 25), ('assets', 17), ('liabilities', 17)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD current assets | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD current liabilities | score 67
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrent assets | score 55
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD noncurrent liabilities | score 62
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD non current assets | score 56
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD non current liabilities | score 62
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD equity and liabilities | score 49
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax receivables | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Prepayments | [('current liabilities', 30), ('current assets', 21), ('equity liabilities', 21), ('assets', 18), ('liabilities', 17), ('equity', 17), ('equity and liabilities', 17), ('noncurrent assets', 11), ('noncurrent liabilities', 10)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current assets | score 48
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD current liabilities | score 33
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent assets | score 50
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD noncurrent liabilities | score 32
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current assets | score 50
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD non current liabilities | score 32
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity and liabilities | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Prepayments | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Other investments | [('noncurrent assets', 40), ('current assets', 32), ('noncurrent liabilities', 31), ('equity and liabilities', 28), ('assets', 24), ('equity liabilities', 24), ('current liabilities', 23), ('equity', 22), ('liabilities', 11)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD current assets | score 39
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD current liabilities | score 33
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD noncurrent assets | score 41
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD non current assets | score 40
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD non current liabilities | score 35
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD equity and liabilities | score 31
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other investments | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - TOTAL CURRENT ASSETS | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current assets | score 95
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD current liabilities | score 56
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent assets | score 81
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD noncurrent liabilities | score 57
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current assets | score 84
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD non current liabilities | score 60
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity and liabilities | score 33
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT ASSETS | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - NONCURRENT ASSETS | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD current liabilities | score 61
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 100
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 72
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current assets | score 97
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD non current liabilities | score 70
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Right ofuse assets | [('current assets', 62), ('noncurrent assets', 62), ('assets', 48), ('equity', 36), ('noncurrent liabilities', 33), ('equity and liabilities', 30), ('equity liabilities', 28), ('current liabilities', 27), ('liabilities', 18)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Right ofuse assets | MATCH WORD current assets | score 59
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Right ofuse assets | MATCH WORD current liabilities | score 32
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Right ofuse assets | MATCH WORD noncurrent assets | score 60
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Right ofuse assets | MATCH WORD noncurrent liabilities | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Right ofuse assets | MATCH WORD non current assets | score 56
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Right ofuse assets | MATCH WORD non current liabilities | score 34
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Right ofuse assets | MATCH WORD equity and liabilities | score 35
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Right ofuse assets | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Intangible assets | [('current assets', 64), ('noncurrent assets', 64), ('assets', 59), ('equity and liabilities', 41), ('equity liabilities', 40), ('current liabilities', 38), ('equity', 33), ('noncurrent liabilities', 31), ('liabilities', 22)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current assets | score 58
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD current liabilities | score 42
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent assets | score 59
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current assets | score 57
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD non current liabilities | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity and liabilities | score 46
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Intangible assets | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Other noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 30), ('equity', 24), ('equity and liabilities', 22), ('equity liabilities', 19), ('liabilities', 8)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current assets | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current assets | score 83
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other noncurrent assets | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - TOTAL NONCURRENT ASSETS | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current assets | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD current liabilities | score 52
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent assets | score 95
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD noncurrent liabilities | score 62
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current assets | score 83
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD non current liabilities | score 61
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity and liabilities | score 31
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT ASSETS | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - TOTAL ASSETS | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current assets | score 64
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD current liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent assets | score 64
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current assets | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD non current liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity and liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL ASSETS | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - LIABILITIES | [('liabilities', 100), ('equity liabilities', 63), ('current liabilities', 60), ('noncurrent liabilities', 60), ('equity and liabilities', 52), ('equity', 33), ('assets', 18), ('current assets', 11), ('noncurrent assets', 11)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current assets | score 24
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD current liabilities | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent assets | score 24
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD noncurrent liabilities | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current assets | score 24
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD non current liabilities | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity and liabilities | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text LIABILITIES | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - CURRENT LIABILITIES | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current assets | score 67
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD current liabilities | score 100
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 61
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 93
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current assets | score 59
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD non current liabilities | score 95
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 69
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('current liabilities', 34), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('assets', 20)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Current tax liabilities | [('current liabilities', 88), ('equity liabilities', 58), ('equity and liabilities', 51), ('liabilities', 50), ('current assets', 45), ('noncurrent liabilities', 44), ('noncurrent assets', 26), ('equity', 25), ('assets', 17)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current assets | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD current liabilities | score 95
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent assets | score 55
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD noncurrent liabilities | score 84
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current assets | score 56
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD non current liabilities | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity and liabilities | score 71
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Current tax liabilities | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrent assets', 32), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Other current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('noncurrent liabilities', 53), ('equity and liabilities', 49), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 30), ('equity', 23), ('assets', 16)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD current assets | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD current liabilities | score 95
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD noncurrent assets | score 57
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD non current assets | score 60
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD non current liabilities | score 88
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD equity and liabilities | score 64
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Other current liabilities | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - TOTAL CURRENT LIABILITIES | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current assets | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD current liabilities | score 95
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent assets | score 57
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 85
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current assets | score 60
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD non current liabilities | score 88
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL CURRENT LIABILITIES | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - NONCURRENT LIABILITIES | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 93
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 72
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 100
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current assets | score 70
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 98
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 65
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Employee benefits | [('equity and liabilities', 38), ('equity liabilities', 36), ('current liabilities', 34), ('current assets', 29), ('noncurrent assets', 29), ('liabilities', 29), ('equity', 29), ('noncurrent liabilities', 28), ('assets', 20)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current assets | score 32
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD current liabilities | score 33
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent assets | score 35
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current assets | score 40
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD non current liabilities | score 35
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity and liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Employee benefits | MATCH WORD equity | score 45
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Borrowings | [('noncurrent liabilities', 40), ('noncurrent assets', 32), ('current assets', 21), ('current liabilities', 20), ('liabilities', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('assets', 0), ('equity', 0)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current assets | score 33
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD current liabilities | score 28
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent assets | score 37
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current assets | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD non current liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity and liabilities | score 27
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Borrowings | MATCH WORD equity | score 15
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Lease liability | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current assets | score 34
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD current liabilities | score 59
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent assets | score 31
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD noncurrent liabilities | score 54
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current assets | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD non current liabilities | score 60
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity and liabilities | score 59
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Lease liability | MATCH WORD equity | score 45
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Deferred tax liability | [('liabilities', 55), ('equity and liabilities', 55), ('equity liabilities', 55), ('current liabilities', 53), ('noncurrent liabilities', 47), ('equity', 27), ('current assets', 21), ('assets', 19), ('noncurrent assets', 14)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD current assets | score 39
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD current liabilities | score 63
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrent assets | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD noncurrent liabilities | score 59
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD non current assets | score 35
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD non current liabilities | score 58
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD equity and liabilities | score 55
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Deferred tax liability | MATCH WORD equity | score 45
2023-05-09 11:05:53+0530 - sLogger - DEBUG - TOTAL NONCURRENT LIABILITIES | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current assets | score 61
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD current liabilities | score 81
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent assets | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD noncurrent liabilities | score 95
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current assets | score 61
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD non current liabilities | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity and liabilities | score 64
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL NONCURRENT LIABILITIES | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - TOTAL LIABILITIES | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current assets | score 32
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD current liabilities | score 75
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent assets | score 35
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD noncurrent liabilities | score 75
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current assets | score 34
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD non current liabilities | score 75
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity and liabilities | score 75
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL LIABILITIES | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - NET ASSETS | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current assets | score 75
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD current liabilities | score 41
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent assets | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD noncurrent liabilities | score 44
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current assets | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD non current liabilities | score 42
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity and liabilities | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text NET ASSETS | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - EQUITY | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current assets | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD current liabilities | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent assets | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD noncurrent liabilities | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current assets | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD non current liabilities | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity and liabilities | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text EQUITY | MATCH WORD equity | score 100
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('liabilities', 25)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Reserves | [('assets', 36), ('current assets', 32), ('noncurrent assets', 32), ('current liabilities', 20), ('noncurrent liabilities', 20), ('equity', 17), ('equity liabilities', 11), ('equity and liabilities', 9), ('liabilities', 0)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current assets | score 45
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD current liabilities | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent assets | score 45
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD noncurrent liabilities | score 32
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current assets | score 45
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD non current liabilities | score 26
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity and liabilities | score 22
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Reserves | MATCH WORD equity | score 14
2023-05-09 11:05:53+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('current liabilities', 48), ('current assets', 42), ('assets', 38), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-05-09 11:05:53+0530 - sLogger - DEBUG - TOTAL EQUITY | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD current assets | score 31
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD current liabilities | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrent assets | score 34
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD noncurrent liabilities | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD non current assets | score 33
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD non current liabilities | score 38
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD equity and liabilities | score 86
2023-05-09 11:05:53+0530 - sLogger - DEBUG - particular_text TOTAL EQUITY | MATCH WORD equity | score 90
2023-05-09 11:05:53+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-05-09 11:05:53+0530 - sLogger - DEBUG - set_section_details started
2023-05-09 11:05:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-05-09 11:05:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-05-09 11:05:53+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest paid | movements in working capital
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- GST refund | adjustments for increase decrease in operating assets
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income taxes paid | changes in working capital
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to related party supplier | adjustments for increase decrease in operating assets
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash from operating activities | adjustments for increase decrease in operating assets
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows used in investing activities | adjustments for increase decrease in operating assets
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for purchase of property, plant & equipment | operating profit before working capital changes
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from disposal of property, plant & equipment | operating profit before changes in assets and liabilities
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from maturities of deposits with fixed maturity dates | operating profit before changes in assets and liabilities
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for deposits with fixed maturity dates | adiustments for movements in working capital
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in investing activities | adjustments for increase decrease in operating liabilities
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows used in financing activities | operating cash flow before working capital changes
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of borrowings | operating profit before working capital changes
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from borrowings | operating cash flow before working capital changes
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Repayment of lease liability | changes in assets liabilities
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment of dividends | movements in working capital
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash used in financing activities | adjustments for increase decrease in operating assets
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Effects of exchange rate changes on the balance of | changes in operating assets and liabilities
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- cash held in foreign currencies | adjustments for increase decrease in operating assets
2023-05-09 11:05:54+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the year | changes in operating assets and liabilities
2023-05-09 11:05:55+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:05:55+0530 - sLogger - ERROR - error occured: 'year'
2023-05-09 11:05:55+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:05:55+0530 - sLogger - ERROR - error occured: 'value'
2023-05-09 11:05:56+0530 - sLogger - DEBUG - process_main_pages completed
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('cash and bank balances', 26), ('other bank balances', 23)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other bank balances', 48), ('cash and short term deposits', 46), ('bank balances other than above', 36), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('bank balances other than cash and cash equivalents', 29), ('cash and bank balances', 19)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 38371500.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19'], 'line_item_value': [38371500.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and short term deposits', 25), ('bank balances other than cash and cash equivalents', 20), ('bank balances other than above', 19), ('other bank balances', 18), ('cash and bank balances', 16)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('cash and cash equivalents', 36), (' cash and cash equivalents', 36), ('bank balances other than cash and cash equivalents', 32), ('bank balances other than above', 31), ('cash and short term deposits', 31), ('cash and bank balances', 26), ('other bank balances', 23)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('cash and short term deposits', 18), ('cash and cash equivalents', 15), (' cash and cash equivalents', 15), ('bank balances other than above', 12), ('other bank balances', 9), ('bank balances other than cash and cash equivalents', 8), ('cash and bank balances', 8)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other bank balances', 48), ('cash and short term deposits', 46), ('bank balances other than above', 36), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30), ('bank balances other than cash and cash equivalents', 29), ('cash and bank balances', 19)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 47888561.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['19'], 'line_item_value': [47888561.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 52), (' short term deposits', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = cash and cash equivalents , res_fuzz_match = [(' cash and cash equivalents', 100), ('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 61), (' cash at bank and on hand', 56), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 52), (' short term deposits', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [47888561.0, 38371500.0], 'label': [' Cash and cash equivalents', ' Cash and cash equivalents'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('inventories', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('inventories', 56)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 5244865.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [5244865.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('inventories', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('inventories', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('inventories', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('inventories', 56)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [4], 'score': 100, 'value': 6229038.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [6229038.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = coal inventory at cost , res_fuzz_match = [(' inventories', 100), (' provision for inventory obsolescence', 74), (' finished goods at cost', 50), (' stores and other consumables at cost', 47), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' goods in transit', 33), (' spare parts', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = operating supplies at cost , res_fuzz_match = [(' stores and other consumables at cost', 62), (' finished goods at cost', 38), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' goods in transit', 33), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27), (' inventories', 22), (' cranes', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 53), (' finished goods at cost', 47), (' work in progress', 46), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' goods in transit', 33), (' provision for inventory obsolescence', 33), (' inventories', 33), (' finished goods', 18), (' finished goods', 18)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = stock on hand - stores , res_fuzz_match = [(' stores and other consumables at cost', 62), (' goods in transit', 50), (' cranes - in transit', 46), (' provision for inventory obsolescence', 44), (' inventories', 44), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' finished goods at cost', 38), (' work in progress', 38), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = coal inventory at cost , res_fuzz_match = [(' inventories', 100), (' provision for inventory obsolescence', 74), (' finished goods at cost', 50), (' stores and other consumables at cost', 47), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' work in progress', 38), (' finished goods', 36), (' finished goods', 36), (' goods in transit', 33), (' spare parts', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = operating supplies at cost , res_fuzz_match = [(' stores and other consumables at cost', 62), (' finished goods at cost', 38), (' work in progress', 38), (' provision for inventory obsolescence', 38), (' cranes - in transit', 38), (' goods in transit', 33), ('raw materials', 30), (' raw materials', 30), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27), (' inventories', 22), (' cranes', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = spare parts at cost , res_fuzz_match = [(' spare parts', 100), (' stores and other consumables at cost', 53), (' finished goods at cost', 47), (' work in progress', 46), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' goods in transit', 33), (' provision for inventory obsolescence', 33), (' inventories', 33), (' finished goods', 18), (' finished goods', 18)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = stock on hand - stores , res_fuzz_match = [(' stores and other consumables at cost', 62), (' goods in transit', 50), (' cranes - in transit', 46), (' provision for inventory obsolescence', 44), (' inventories', 44), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' finished goods at cost', 38), (' work in progress', 38), (' spare parts', 30), (' finished goods', 27), (' finished goods', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 7], 'score': [100, 100, 100, 100], 'value': [3528471.0, 1346758.0, 3174270.0, 444171.0], 'label': [' Coal inventory at cost', ' Spare parts at cost', ' Coal inventory at cost', ' Spare parts at cost'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('other current financial assets', 53), ('other current assets', 49), ('other financial assets', 38), ('other assets', 28), ('prepayments', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), ('other financial assets', 52), ('other current financial assets', 41), ('prepayments', 11)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 6], 'score': 100, 'value': 243822.0, 'line_item_label': ['CURRENT ASSETS', 'Prepayments'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 243822.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), ('other current assets', 42), ('other financial assets', 42), ('other current financial assets', 31), ('prepayments', 18)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('other current financial assets', 53), ('other current assets', 49), ('other financial assets', 38), ('other assets', 28), ('prepayments', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('prepayments', 100), ('other current financial assets', 18), ('other current assets', 16), ('other financial assets', 16), ('other assets', 12)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), ('other financial assets', 52), ('other current financial assets', 41), ('prepayments', 11)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 6], 'score': 100, 'value': 629661.0, 'line_item_label': ['CURRENT ASSETS', 'Prepayments'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 629661.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [(' trade and other receivables', 60), (' income tax receivable from related parties', 55), ('other current assets', 49), (' other current assets', 49), (' other financial assets', 38), (' financial assets', 32), (' deferred operating expenditure', 31), ('other assets', 28), (' biological assets', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), (' other current assets', 52), (' other financial assets', 52), (' trade and other receivables', 41), (' deferred operating expenditure', 36), (' biological assets', 33), (' income tax receivable from related parties', 31), (' financial assets', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 13983506.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and other receivables'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 13983506.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('other assets', 62), (' biological assets', 59), (' financial assets', 56), ('other current assets', 42), (' other current assets', 42), (' other financial assets', 42), (' trade and other receivables', 22), (' income tax receivable from related parties', 16), (' deferred operating expenditure', 15)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [(' trade and other receivables', 60), (' income tax receivable from related parties', 55), ('other current assets', 49), (' other current assets', 49), (' other financial assets', 38), (' financial assets', 32), (' deferred operating expenditure', 31), ('other assets', 28), (' biological assets', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [(' deferred operating expenditure', 22), (' financial assets', 21), (' income tax receivable from related parties', 21), (' trade and other receivables', 21), ('other current assets', 16), (' other current assets', 16), (' other financial assets', 16), ('other assets', 12), (' biological assets', 11)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('other assets', 70), ('other current assets', 52), (' other current assets', 52), (' other financial assets', 52), (' trade and other receivables', 41), (' deferred operating expenditure', 36), (' biological assets', 33), (' income tax receivable from related parties', 31), (' financial assets', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 3], 'score': 100, 'value': 23265701.0, 'line_item_label': ['CURRENT ASSETS', 'Trade and other receivables'], 'note_numbers': [nan, '10'], 'line_item_value': [0.0, 23265701.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 67), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' related party receivable', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' share of jv prepayments', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' other', 40), ('other assets', 36), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' bank guarantee', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' lng', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 100), (' other deposits receivable - related party', 75), (' amount receivable from controlling entity', 75), (' interest receivable', 75), (' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), ('other assets', 64), (' other debtors and prepayments', 58), (' electricity derivatives at fair value', 50), ('current', 43), (' share of jv prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' derivative contracts - fair value', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' forward exchange contracts', 42), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' deposits', 29), (' condensate', 29), (' bank guarantee', 25), (' rental bond', 18), (' lng', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [(' income tax receivable from related parties', 75), (' other receivables - related party', 75), (' interest receivable', 75), (' long service leave receivable', 67), (' other deposits receivable - related party', 67), (' amount receivable from controlling entity', 67), (' related party receivable', 67), (' electricity derivatives at fair value', 58), ('foreign exchange derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' forward exchange contracts', 50), (' other debtors and prepayments', 50), (' share of jv prepayments', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' other', 40), ('other assets', 36), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' bank guarantee', 33), ('current', 29), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' lng', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [(' other', 100), (' other receivables - related party', 100), (' other deposits receivable - related party', 75), (' amount receivable from controlling entity', 75), (' interest receivable', 75), (' income tax receivable from related parties', 67), (' long service leave receivable', 67), (' related party receivable', 67), ('other assets', 64), (' other debtors and prepayments', 58), (' electricity derivatives at fair value', 50), ('current', 43), (' share of jv prepayments', 43), ('foreign exchange derivatives at fair value', 42), (' derivative contracts - fair value', 42), (' current investments', 42), (' foreign exchange forward contracts', 42), (' forward exchange contracts', 42), (' accrued rebates', 36), (' accrued interest', 33), (' related party disclosures', 33), (' deposits', 29), (' condensate', 29), (' bank guarantee', 25), (' rental bond', 18), (' lng', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4], 'score': [100, 100], 'value': [2461924.0, 1525145.0], 'label': [' Other receivables', ' Other receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('current assets', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('current assets', 32)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('current assets', 56)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('current assets', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('current assets', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('current assets', 32)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 0.0, 'line_item_label': ['CURRENT ASSETS'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 77944930.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [77944930.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 83893305.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [83893305.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 25), ('cost', 0), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 25), ('cost', 0), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 25), ('cost', 0), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 25), ('cost', 0), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 25), ('cost', 0), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 25), ('cost', 0), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 25), ('cost', 0), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 25), ('cost', 0), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 25), ('cost', 0), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('net value', 25), ('cost', 0), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('cost', 25), ('gross', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('net value', 50), ('gross', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40), ('net value', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 38)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 38)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 38)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 38)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 38)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 38)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 38)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 38)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 38)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50), ('net value', 38)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0), ('net value', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('cost', 50), ('gross', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [15625586.0, 1626478.0, 0.0, -91683.0, 17160381.0, 0.0, 0.0, 0.0, 0.0, 17160381.0], 'label': ['Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 77944930.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [77944930.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 83893305.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [83893305.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('rightofuse', 89), ('righttouse', 78), ('right of use', 78), ('right to use', 78), ('capital work in progress', 44), ('capital work-in-progress', 31), ('capital workinprogress', 31), ('work in progress', 31), ('tangible', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 25), ('work in progress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('work in progress', 46), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('tangible', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 89, 'value': 9562117.0, 'line_item_label': ['Right- of-use assets'], 'note_numbers': ['21'], 'line_item_value': [9562117.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('rightofuse', 89), ('righttouse', 78), ('right of use', 78), ('right to use', 78), ('capital work in progress', 44), ('capital work-in-progress', 31), ('capital workinprogress', 31), ('work in progress', 31), ('tangible', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible', 57), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 25), ('work in progress', 25), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('work in progress', 46), ('right of use', 44), ('right to use', 44), ('capital work-in-progress', 42), ('capital workinprogress', 42), ('capital work in progress', 37), ('rightofuse', 33), ('righttouse', 33), ('tangible', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 89, 'value': 7678852.0, 'line_item_label': ['Right- of-use assets'], 'note_numbers': ['21'], 'line_item_value': [7678852.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('tangible assets', 48)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 80, 'value': 48644405.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [48644405.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('tangible assets', 48)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('tangible assets', 80)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('tangible assets', 44)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 80, 'value': 44593458.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [44593458.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('goodwill on consolidatio', 38), ('goodwill', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('goodwill on consolidatio', 38), ('goodwill', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('goodwill on consolidatio', 25), ('goodwill', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('goodwill on consolidatio', 32), ('goodwill', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('intangible assets under development', 44), ('intangible', 33), ('intangible under development', 31)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 32)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 48644405.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [48644405.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('intangible assets under development', 44), ('intangible', 33), ('intangible under development', 31)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 100), ('intangible under development', 67)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('intangible assets under development', 42), ('intangible', 33), ('intangible under development', 32)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [12], 'score': 100, 'value': 44593458.0, 'line_item_label': ['Intangible assets'], 'note_numbers': ['12'], 'line_item_value': [44593458.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('donations', 19)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('donations', 19)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('donations', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('donations', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [(' investment in associate', 46), ('derivative financial instruments', 44), (' investments accounted for using the equity method', 44), ('joint ventures and associates', 38), (' investment in joint venture', 38), ('investment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 47), ('derivative financial instruments', 47), (' investments accounted for using the equity method', 47), (' investment in associate', 40), (' investment in joint venture', 37), ('investment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [(' investment in associate', 46), ('derivative financial instruments', 44), (' investments accounted for using the equity method', 44), ('joint ventures and associates', 38), (' investment in joint venture', 38), ('investment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('derivative financial instruments', 58), (' investment in associate', 58), ('investment', 50), ('joint ventures and associates', 50), (' investment in joint venture', 50), (' investments accounted for using the equity method', 50)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('joint ventures and associates', 47), ('derivative financial instruments', 47), (' investments accounted for using the equity method', 47), (' investment in associate', 40), (' investment in joint venture', 37), ('investment', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('deferred tax assets', 58), ('deferred tax', 32), ('deferred charges', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 33), ('deferred tax', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('deferred tax assets', 58), ('deferred tax', 32), ('deferred charges', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('deferred tax assets', 59), ('deferred tax', 38), ('deferred charges', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('deferred tax assets', 53), ('deferred charges', 33), ('deferred tax', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('other assets', 59), (' other assets', 59), (' other non-current assets', 57), (' other non-current assets', 57), (' financial assets', 55), (' leased assets', 54), (' loan receivables', 30), (' exploration and evaluation expenditure', 28), ('non-current', 26), (' leases', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 39), (' loan receivables', 27), (' leases', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 12, 13], 'score': 100, 'value': 48854520.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Intangible assets', 'Other non-current assets'], 'note_numbers': [nan, '12', nan], 'line_item_value': [0.0, 48644405.0, 210115.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('other assets', 59), (' other assets', 59), (' other non-current assets', 57), (' other non-current assets', 57), (' financial assets', 55), (' leased assets', 54), (' loan receivables', 30), (' exploration and evaluation expenditure', 28), ('non-current', 26), (' leases', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [(' financial assets', 80), (' leased assets', 64), ('other assets', 61), (' other assets', 61), (' other non-current assets', 52), (' other non-current assets', 52), (' exploration and evaluation expenditure', 26), (' loan receivables', 26), (' leases', 25), ('non-current', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [(' other non-current assets', 100), (' other non-current assets', 100), ('other assets', 73), (' other assets', 73), (' financial assets', 56), ('non-current', 54), (' leased assets', 48), (' exploration and evaluation expenditure', 39), (' loan receivables', 27), (' leases', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 12, 13], 'score': 100, 'value': 44861945.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Intangible assets', 'Other non-current assets'], 'note_numbers': [nan, '12', nan], 'line_item_value': [0.0, 44593458.0, 268487.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('non-current assets total', 57)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13], 'score': 84, 'value': 210115.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Other non-current assets'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 210115.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('non-current assets total', 57)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('non-current assets total', 58)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('non-current assets total', 84)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [9, 13], 'score': 84, 'value': 268487.0, 'line_item_label': ['NON-CURRENT ASSETS', 'Other non-current assets'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 268487.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 41), ('shortterm debt', 41), ('short term debt', 40), ('shortterm borrowings', 39), (' loans and borrowings', 29), (' bank overdraft', 29), ('borrowings', 23), (' leases', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [22, 23], 'score': 100, 'value': 17226057.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [14506615.0, 2719442.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('lease liabilities', 71), (' leases', 40), (' loans and borrowings', 29), ('borrowings', 17), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10), (' bank overdraft', 10), ('shortterm borrowings', 9)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('short-term debt', 34), ('shortterm debt', 34), (' bank overdraft', 34), ('short term debt', 33), (' loans and borrowings', 27), ('shortterm borrowings', 26), ('lease liabilities', 23), (' leases', 21), ('borrowings', 19)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('lease liabilities', 55), ('short term debt', 30), (' loans and borrowings', 30), ('short-term debt', 25), ('shortterm debt', 25), (' bank overdraft', 25), ('shortterm borrowings', 24), (' leases', 18), ('borrowings', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('borrowings', 100), (' loans and borrowings', 57), ('shortterm borrowings', 55), ('short-term debt', 40), ('shortterm debt', 40), (' bank overdraft', 40), ('short term debt', 38), ('lease liabilities', 12), (' leases', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 41), ('shortterm debt', 41), ('short term debt', 40), ('shortterm borrowings', 39), (' loans and borrowings', 29), (' bank overdraft', 29), ('borrowings', 23), (' leases', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [22, 23], 'score': 100, 'value': 17152202.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [15536531.0, 1615671.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost mizuho bank term loan, secured , res_fuzz_match = [(' not later than 1 year', 58), (' bank overdraft', 57), ('bank borrowings', 55), (' secured long-term bank loans', 54), (' balance at the end of period', 52), (' loans from related party', 48), (' utilised – bank borrowings', 45), ('current', 43), (' current', 43), (' lease liabilities - current', 42), (' lease liabilities', 27), (' leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost smbc term loan, secured , res_fuzz_match = [(' not later than 1 year', 53), (' secured long-term bank loans', 50), (' balance at the end of period', 48), ('current', 43), (' current', 43), (' lease liabilities - current', 42), (' utilised – bank borrowings', 40), (' loans from related party', 38), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost , res_fuzz_match = [(' secured long-term bank loans', 50), ('current', 43), (' current', 43), (' lease liabilities - current', 39), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 29), (' not later than 1 year', 28), (' balance at the end of period', 28), (' lease liabilities', 27), (' leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 53), (' secured long-term bank loans', 42), (' utilised – bank borrowings', 40), (' not later than 1 year', 37), ('bank borrowings', 36), (' bank overdraft', 36), (' loans from related party', 33), (' balance at the end of period', 29), (' lease liabilities', 27), (' leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost mizuho bank term loan, secured , res_fuzz_match = [(' not later than 1 year', 58), (' bank overdraft', 57), ('bank borrowings', 55), (' secured long-term bank loans', 54), (' balance at the end of period', 52), (' loans from related party', 48), (' utilised – bank borrowings', 45), ('current', 43), (' current', 43), (' lease liabilities - current', 42), (' lease liabilities', 27), (' leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost smbc term loan, secured , res_fuzz_match = [(' not later than 1 year', 53), (' secured long-term bank loans', 50), (' balance at the end of period', 48), ('current', 43), (' current', 43), (' lease liabilities - current', 42), (' utilised – bank borrowings', 40), (' loans from related party', 38), ('bank borrowings', 36), (' lease liabilities', 36), (' bank overdraft', 36), (' leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost , res_fuzz_match = [(' secured long-term bank loans', 50), ('current', 43), (' current', 43), (' lease liabilities - current', 39), ('bank borrowings', 36), (' utilised – bank borrowings', 33), (' loans from related party', 33), (' bank overdraft', 29), (' not later than 1 year', 28), (' balance at the end of period', 28), (' lease liabilities', 27), (' leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 53), (' secured long-term bank loans', 42), (' utilised – bank borrowings', 40), (' not later than 1 year', 37), ('bank borrowings', 36), (' bank overdraft', 36), (' loans from related party', 33), (' balance at the end of period', 29), (' lease liabilities', 27), (' leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7], 'score': [100, 100], 'value': [15536531.0, 14506615.0], 'label': ['Secured at amortised cost Current', 'Secured at amortised cost Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 100), (' secured long-term bank loans', 57), (' loans from related party', 43), (' bank overdraft', 43), ('bank borrowings', 29), (' utilised – bank borrowings', 29), (' not later than 1 year', 29), (' balance at the end of period', 29), (' leases', 25), (' lease liabilities', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' current', 73), ('bank borrowings', 57), (' utilised – bank borrowings', 57), (' lease liabilities - current', 57), (' secured long-term bank loans', 43), (' loans from related party', 43), (' bank overdraft', 43), (' not later than 1 year', 29), (' balance at the end of period', 29), (' leases', 0), (' lease liabilities', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' current', 100), (' lease liabilities - current', 100), (' secured long-term bank loans', 57), (' loans from related party', 43), (' bank overdraft', 43), ('bank borrowings', 29), (' utilised – bank borrowings', 29), (' not later than 1 year', 29), (' balance at the end of period', 29), (' leases', 25), (' lease liabilities', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' current', 73), ('bank borrowings', 57), (' utilised – bank borrowings', 57), (' lease liabilities - current', 57), (' secured long-term bank loans', 43), (' loans from related party', 43), (' bank overdraft', 43), (' not later than 1 year', 29), (' balance at the end of period', 29), (' leases', 0), (' lease liabilities', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('bank borrowings', 0), (' utilised – bank borrowings', 0), (' leases', 0), (' not later than 1 year', 0), (' current', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' lease liabilities - current', 0), (' lease liabilities', 0), (' bank overdraft', 0), (' balance at the end of period', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [1615671.0, 2719442.0], 'label': [' Current', ' Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('current maturities', 65), ('other financial liabilities', 53), ('current maturities of long-term debt', 53), ('current maturities of longterm debt', 53)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current maturities of long-term debt', 24), ('current maturities of longterm debt', 24), ('other financial liabilities', 23), ('other current liabilities', 23), ('current maturities', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other financial liabilities', 70), ('current maturities', 67), ('current maturities of long-term debt', 60), ('current maturities of longterm debt', 60)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 100, 'value': 5582432.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 5334394.0, 248038.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other financial liabilities', 46), ('other current liabilities', 46), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('current maturities of long-term debt', 38), ('current maturities of longterm debt', 38), ('current maturities', 36), ('other financial liabilities', 34)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('current maturities', 65), ('other financial liabilities', 53), ('current maturities of long-term debt', 53), ('current maturities of longterm debt', 53)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current maturities of long-term debt', 24), ('current maturities of longterm debt', 24), ('other financial liabilities', 23), ('other current liabilities', 23), ('current maturities', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other financial liabilities', 70), ('current maturities', 67), ('current maturities of long-term debt', 60), ('current maturities of longterm debt', 60)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 100, 'value': 39390069.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 39141813.0, 248256.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 39)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('note payable(debt)', 41)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('note payable(debt)', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('note payable(debt)', 39)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('note payable(debt)', 41)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('note payable(debt)', 39)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 47), ('small enterprises', 47), ('accounts payable', 34), ('trade and other payables', 32), ('micro enterprises and small enterprises', 32), ('other than micro and small enterprises', 31), ('other trade payables', 30), ('outstanding dues of creditors other than', 30), ('outstanding dues of micro enterprises and small enterprises', 25), ('total outstanding due of other creditors other than micro and small', 24), ('trade payable', 22), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('accounts payable', 50), ('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40), ('outstanding dues of creditors other than', 40), ('other than micro and small enterprises', 37), ('small enterprises', 36), ('micro enterprises and small enterprises', 34), ('outstanding dues of micro enterprises and small enterprises', 33), ('outstanding dues of creditors other than micro enterprises and small enterprises', 33), ('total outstanding due of other creditors other than micro and small', 31), ('micro enterprises', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('micro enterprises', 29), ('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21), ('outstanding dues of creditors other than', 21), ('small enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('accounts payable', 47), ('trade and other payables', 43), ('other trade payables', 42), ('outstanding dues of creditors other than', 42), ('other than micro and small enterprises', 39), ('trade payable', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 34), ('micro enterprises', 34), ('small enterprises', 34), ('micro enterprises and small enterprises', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('total outstanding due of other creditors other than micro and small', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 8092154.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['16'], 'line_item_value': [8092154.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('trade payable', 33), ('accounts payable', 30), ('small enterprises', 29), ('other trade payables', 25), ('trade and other payables', 21), ('micro enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than', 11), ('total outstanding due of other creditors other than micro and small', 9), ('outstanding dues of creditors other than micro enterprises and small enterprises', 8)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('micro enterprises', 47), ('small enterprises', 47), ('accounts payable', 34), ('trade and other payables', 32), ('micro enterprises and small enterprises', 32), ('other than micro and small enterprises', 31), ('other trade payables', 30), ('outstanding dues of creditors other than', 30), ('outstanding dues of micro enterprises and small enterprises', 25), ('total outstanding due of other creditors other than micro and small', 24), ('trade payable', 22), ('outstanding dues of creditors other than micro enterprises and small enterprises', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('accounts payable', 50), ('trade and other payables', 45), ('other trade payables', 44), ('trade payable', 40), ('outstanding dues of creditors other than', 40), ('other than micro and small enterprises', 37), ('small enterprises', 36), ('micro enterprises and small enterprises', 34), ('outstanding dues of micro enterprises and small enterprises', 33), ('outstanding dues of creditors other than micro enterprises and small enterprises', 33), ('total outstanding due of other creditors other than micro and small', 31), ('micro enterprises', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('micro enterprises', 29), ('other trade payables', 25), ('trade payable', 22), ('trade and other payables', 21), ('outstanding dues of creditors other than', 21), ('small enterprises', 19), ('micro enterprises and small enterprises', 15), ('other than micro and small enterprises', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of micro enterprises and small enterprises', 11), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('accounts payable', 47), ('trade and other payables', 43), ('other trade payables', 42), ('outstanding dues of creditors other than', 42), ('other than micro and small enterprises', 39), ('trade payable', 38), ('outstanding dues of creditors other than micro enterprises and small enterprises', 34), ('micro enterprises', 34), ('small enterprises', 34), ('micro enterprises and small enterprises', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('total outstanding due of other creditors other than micro and small', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 12878066.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['16'], 'line_item_value': [12878066.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' other trade payables', 100), (' trade and other payables', 75), (' related party payables', 67), (' amounts payable to controlling entity', 67), ('trade creditors', 50), ('current', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('trade creditors', 79), (' trade payables - other parties', 64), ('current', 57), (' other trade payables', 57), (' amounts payable to controlling entity', 52), (' trade and other payables', 46), (' trade payables - related parties', 36), (' related party payables', 29), (' trade payables', 25), (' trade payables', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('current', 43), (' amounts payable to controlling entity', 42), ('trade creditors', 33), (' related party payables', 33), (' trade payables - related parties', 33), (' other trade payables', 33), (' trade and other payables', 25), (' trade payables', 25), (' trade payables - other parties', 25), (' trade payables', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('trade creditors', 57), (' amounts payable to controlling entity', 57), (' trade payables - related parties', 43), (' trade payables - other parties', 43), (' other trade payables', 43), (' trade and other payables', 29), (' related party payables', 29), (' trade payables', 29), (' trade payables', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' amounts payable to controlling entity', 43), ('trade creditors', 29), (' trade and other payables', 29), (' trade payables - other parties', 29), (' other trade payables', 29), (' related party payables', 14), (' trade payables - related parties', 14), (' trade payables', 0), (' trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' other trade payables', 100), (' trade and other payables', 75), (' related party payables', 67), (' amounts payable to controlling entity', 67), ('trade creditors', 50), ('current', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('trade creditors', 79), (' trade payables - other parties', 64), ('current', 57), (' other trade payables', 57), (' amounts payable to controlling entity', 52), (' trade and other payables', 46), (' trade payables - related parties', 36), (' related party payables', 29), (' trade payables', 25), (' trade payables', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('current', 43), (' amounts payable to controlling entity', 42), ('trade creditors', 33), (' related party payables', 33), (' trade payables - related parties', 33), (' other trade payables', 33), (' trade and other payables', 25), (' trade payables', 25), (' trade payables - other parties', 25), (' trade payables', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), ('trade creditors', 57), (' amounts payable to controlling entity', 57), (' trade payables - related parties', 43), (' trade payables - other parties', 43), (' other trade payables', 43), (' trade and other payables', 29), (' related party payables', 29), (' trade payables', 29), (' trade payables', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' amounts payable to controlling entity', 43), ('trade creditors', 29), (' trade and other payables', 29), (' trade payables - other parties', 29), (' other trade payables', 29), (' related party payables', 14), (' trade payables - related parties', 14), (' trade payables', 0), (' trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 7, 11], 'score': [100, 100, 100, 100], 'value': [1932688.0, 12878066.0, 2506637.0, 8092154.0], 'label': ['  Trade payables ', '  Current ', '  Trade payables ', '  Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other current financial liabilities', 37), ('other liabilities', 37), ('other financial liabilities', 34), ('trade and other payables', 32)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other liabilities', 33), ('other current liabilities', 23), ('other financial liabilities', 23), ('trade and other payables', 21), ('other current financial liabilities', 18)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other financial liabilities', 70), ('trade and other payables', 43)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 20, 24], 'score': 100, 'value': 13674586.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '16', '7', nan], 'line_item_value': [0.0, 8092154.0, 5334394.0, 248038.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('other liabilities', 67), ('other current liabilities', 46), ('other financial liabilities', 46), ('other current financial liabilities', 35), ('trade and other payables', 21)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('other current liabilities', 40), ('other current financial liabilities', 37), ('other liabilities', 37), ('other financial liabilities', 34), ('trade and other payables', 32)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), ('other current financial liabilities', 70), ('other financial liabilities', 53), ('other liabilities', 53), ('trade and other payables', 45)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('other liabilities', 33), ('other current liabilities', 23), ('other financial liabilities', 23), ('trade and other payables', 21), ('other current financial liabilities', 18)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other financial liabilities', 70), ('trade and other payables', 43)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 20, 24], 'score': 100, 'value': 52268135.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '16', '7', nan], 'line_item_value': [0.0, 12878066.0, 39141813.0, 248256.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [('interest accrued', 42), ('accrued expenses', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 42)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('accrued expenses', 43), ('interest accrued', 43)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('accrued expenses', 29), ('interest accrued', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [('interest accrued', 42), ('accrued expenses', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 42)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('accrued expenses', 43), ('interest accrued', 43)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('accrued expenses', 29), ('interest accrued', 29)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 9], 'score': [100, 100], 'value': [9550494.0, 4976574.0], 'label': ['  Accrued expenses ', '  Accrued expenses '], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 17), ('tax', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current tax liabilities', 88), (' income tax payable', 38), ('tax', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [16, 20, 24], 'score': 88, 'value': 5582432.0, 'line_item_label': ['LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 5334394.0, 248038.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current tax liabilities', 100), (' income tax payable', 50), ('tax', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('tax', 33), ('current tax liabilities', 27), (' income tax payable', 27)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 56)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current tax liabilities', 33), (' income tax payable', 17), ('tax', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current tax liabilities', 88), (' income tax payable', 38), ('tax', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [16, 20, 24], 'score': 88, 'value': 39390069.0, 'line_item_label': ['LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 39141813.0, 248256.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), (' other current liabilities', 100), (' other financial liabilities', 70), (' financial liabilities', 47), (' foreign exchange contract liability', 47), (' trade and other payables', 43), (' employee benefits', 40), (' customer deposits', 35), (' deferred revenue', 25), ('provisions', 15)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 19, 20, 21, 24], 'score': 100, 'value': 15711294.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Other current liabilities'], 'note_numbers': [nan, '16', '15', '7', '15', nan], 'line_item_value': [0.0, 8092154.0, 1786202.0, 5334394.0, 250506.0, 248038.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [(' financial liabilities', 60), ('other current liabilities', 46), (' other current liabilities', 46), (' other financial liabilities', 46), (' foreign exchange contract liability', 32), (' employee benefits', 29), (' trade and other payables', 21), ('provisions', 17), (' customer deposits', 10), (' deferred revenue', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), ('other current liabilities', 40), (' other current liabilities', 40), (' deferred revenue', 37), (' other financial liabilities', 34), (' customer deposits', 34), (' trade and other payables', 32), (' financial liabilities', 28), (' foreign exchange contract liability', 26), ('provisions', 19)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('other current liabilities', 84), (' other current liabilities', 84), (' other financial liabilities', 53), (' financial liabilities', 50), (' foreign exchange contract liability', 49), (' trade and other payables', 45), (' customer deposits', 38), (' employee benefits', 30), (' deferred revenue', 27), ('provisions', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('provisions', 33), ('other current liabilities', 23), (' other current liabilities', 23), (' other financial liabilities', 23), (' deferred revenue', 22), (' trade and other payables', 21), (' customer deposits', 20), (' employee benefits', 19), (' foreign exchange contract liability', 16), (' financial liabilities', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('other current liabilities', 100), (' other current liabilities', 100), (' other financial liabilities', 70), (' financial liabilities', 47), (' foreign exchange contract liability', 47), (' trade and other payables', 43), (' employee benefits', 40), (' customer deposits', 35), (' deferred revenue', 25), ('provisions', 15)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 18, 19, 20, 21, 24], 'score': 100, 'value': 55808008.0, 'line_item_label': ['CURRENT LIABILITIES', 'Trade and other payables', 'Employee benefits', 'Current tax liabilities', 'Provisions', 'Other current liabilities'], 'note_numbers': [nan, '16', '15', '7', '15', nan], 'line_item_value': [0.0, 12878066.0, 2455852.0, 39141813.0, 1084021.0, 248256.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' share of joint venture payables', 75), (' gst payables', 70), (' gst payable and accruals', 67), (' contract liabilites - current', 58), ('other creditors and accruals', 50), (' employee benefits - payroll', 50), (' other related parties', 43), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 42), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' rebates', 40), (' ultimate parent entity', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 33), ('current', 29), (' other creditors', 25), (' other creditors', 25), (' employee benefits - current', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' other creditors', 25), (' warranty', 25), (' restructuring', 20), (' other', 20), (' provisions - current', 17), (' gst', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 64), (' rebates', 60), ('current', 57), (' total current employee benefits', 50), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' employee benefits - current', 43), (' provisions - current', 43), (' contract liabilites - current', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' arising from service contracts', 43), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' current - liability for annual and long service leave', 36), (' provision for associate funding', 36), (' forward exchange contracts', 36), (' gst', 33), (' abandonment and decommissioning costs', 29), (' make good provisions', 29), (' gst payable and accruals', 21), (' gst liabilities', 20), (' gst payables', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [(' forward exchange contracts', 50), ('current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' gst payable and accruals', 42), (' total current employee benefits', 42), (' rebates', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' contract liabilites - current', 33), (' share of joint venture payables', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 25), (' other creditors', 25), (' employee benefits - payroll', 25), (' make good provisions', 25), (' other creditors', 25), (' gst payables', 20), (' other', 20), (' warranty', 12), (' gst liabilities', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' share of joint venture payables', 75), (' gst payables', 70), (' gst payable and accruals', 67), (' contract liabilites - current', 58), ('other creditors and accruals', 50), (' employee benefits - payroll', 50), (' other related parties', 43), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' loan payable to relayed party under tax funding agreement', 42), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 42), (' forward exchange contracts', 42), (' total current employee benefits', 42), (' rebates', 40), (' ultimate parent entity', 33), (' abandonment and decommissioning costs', 33), (' make good provisions', 33), ('current', 29), (' other creditors', 25), (' other creditors', 25), (' employee benefits - current', 25), (' provision for associate funding', 25), (' arising from service contracts', 25), (' other creditors', 25), (' warranty', 25), (' restructuring', 20), (' other', 20), (' provisions - current', 17), (' gst', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('other creditors and accruals', 100), (' other creditors', 100), (' other creditors', 100), (' other creditors', 100), (' other', 100), (' other related parties', 64), (' rebates', 60), ('current', 57), (' total current employee benefits', 50), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' employee benefits - current', 43), (' provisions - current', 43), (' contract liabilites - current', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' arising from service contracts', 43), (' restructuring', 40), (' warranty', 38), (' ultimate parent entity', 36), (' loan payable to relayed party under tax funding agreement', 36), (' secured long-term bank loans', 36), (' current - liability for annual and long service leave', 36), (' provision for associate funding', 36), (' forward exchange contracts', 36), (' gst', 33), (' abandonment and decommissioning costs', 29), (' make good provisions', 29), (' gst payable and accruals', 21), (' gst liabilities', 20), (' gst payables', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [(' forward exchange contracts', 50), ('current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' gst payable and accruals', 42), (' total current employee benefits', 42), (' rebates', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' contract liabilites - current', 33), (' share of joint venture payables', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 25), (' other creditors', 25), (' employee benefits - payroll', 25), (' make good provisions', 25), (' other creditors', 25), (' gst payables', 20), (' other', 20), (' warranty', 12), (' gst liabilities', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 4, 8, 11], 'score': [100, 100, 100, 100], 'value': [1415152.0, 12878066.0, 649702.0, 8092154.0], 'label': ['  Other creditors ', '  Current ', '  Other creditors ', '  Current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other provisions , res_fuzz_match = [(' other', 100), ('other creditors and accruals', 67), (' other creditors', 67), (' other creditors', 67), (' make good provisions', 67), (' other creditors', 67), (' other related parties', 58), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' provision for associate funding', 42), (' arising from service contracts', 42), (' warranty', 38), (' ultimate parent entity', 33), (' loan payable to relayed party under tax funding agreement', 33), (' employee benefits - current', 33), (' provisions - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' total current employee benefits', 33), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 25), (' forward exchange contracts', 25), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = balance at beginning of the period , res_fuzz_match = [(' other', 60), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' loans from related party', 48), (' employee benefits - payroll', 45), ('current', 43), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' gst payables', 40), (' abandonment and decommissioning costs', 39), (' total current employee benefits', 39), (' make good provisions', 38), (' warranty', 38), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' share of joint venture payables', 35), (' gst', 33), (' secured long-term bank loans', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' provisions - current', 29), (' gst payable and accruals', 27), (' derivative contracts - at fair value', 26), (' provision for associate funding', 23), (' rebates', 20), (' restructuring', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = additional provisions recognised , res_fuzz_match = [(' provisions - current', 71), (' arising from service contracts', 52), (' make good provisions', 50), (' abandonment and decommissioning costs', 48), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' rebates', 40), (' restructuring', 40), (' total current employee benefits', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' warranty', 38), (' other related parties', 35), (' employee benefits - current', 34), (' forward exchange contracts', 34), ('other creditors and accruals', 33), (' loan payable to relayed party under tax funding agreement', 33), (' share of joint venture payables', 33), (' gst', 33), (' gst payables', 30), (' employee benefits - payroll', 30), (' gst liabilities', 30), (' secured long-term bank loans', 29), (' gst payable and accruals', 24), (' other', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = balance at end of period , res_fuzz_match = [(' current - liability for annual and long service leave', 59), (' abandonment and decommissioning costs', 53), (' loan payable to relayed party under tax funding agreement', 47), (' total current employee benefits', 47), (' make good provisions', 44), ('current', 43), (' ultimate parent entity', 41), (' gst payable and accruals', 41), (' employee benefits - payroll', 41), (' other', 40), (' warranty', 38), (' other creditors', 36), (' loans from related party', 36), (' other creditors', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' other related parties', 35), (' secured long-term bank loans', 35), (' employee benefits - current', 35), (' share of joint venture payables', 35), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' contract liabilites - current', 29), (' provision for associate funding', 29), (' derivative contracts - at fair value', 24), (' provisions - current', 21), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), (' gst', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = other provisions , res_fuzz_match = [(' other', 100), ('other creditors and accruals', 67), (' other creditors', 67), (' other creditors', 67), (' make good provisions', 67), (' other creditors', 67), (' other related parties', 58), (' loans from related party', 43), (' derivative contracts - at fair value', 42), (' secured long-term bank loans', 42), (' current - liability for annual and long service leave', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' provision for associate funding', 42), (' arising from service contracts', 42), (' warranty', 38), (' ultimate parent entity', 33), (' loan payable to relayed party under tax funding agreement', 33), (' employee benefits - current', 33), (' provisions - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' total current employee benefits', 33), (' restructuring', 30), ('current', 29), (' gst payable and accruals', 25), (' forward exchange contracts', 25), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('current', 100), (' employee benefits - current', 100), (' current - liability for annual and long service leave', 100), (' provisions - current', 100), (' contract liabilites - current', 100), (' total current employee benefits', 100), (' rebates', 60), (' ultimate parent entity', 57), (' other related parties', 57), (' other creditors', 57), (' loan payable to relayed party under tax funding agreement', 57), (' secured long-term bank loans', 57), (' other creditors', 57), (' other creditors', 57), (' warranty', 57), ('other creditors and accruals', 43), (' derivative contracts - at fair value', 43), (' loans from related party', 43), (' share of joint venture payables', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' gst', 33), (' gst payable and accruals', 29), (' abandonment and decommissioning costs', 29), (' other', 20), (' make good provisions', 14), (' gst payables', 0), (' gst liabilities', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('current', 73), (' employee benefits - current', 57), (' provisions - current', 57), (' contract liabilites - current', 57), (' total current employee benefits', 57), (' other related parties', 43), (' derivative contracts - at fair value', 43), (' secured long-term bank loans', 43), (' loans from related party', 43), (' gst payable and accruals', 43), (' current - liability for annual and long service leave', 43), (' share of joint venture payables', 43), (' abandonment and decommissioning costs', 43), (' arising from service contracts', 43), (' forward exchange contracts', 43), (' restructuring', 43), (' other', 40), ('other creditors and accruals', 29), (' ultimate parent entity', 29), (' other creditors', 29), (' loan payable to relayed party under tax funding agreement', 29), (' other creditors', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' other creditors', 29), (' warranty', 29), (' rebates', 20), (' employee benefits - payroll', 14), (' gst payables', 0), (' gst liabilities', 0), (' gst', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = balance at beginning of the period , res_fuzz_match = [(' other', 60), (' other creditors', 50), (' other creditors', 50), (' other creditors', 50), (' loans from related party', 48), (' employee benefits - payroll', 45), ('current', 43), (' loan payable to relayed party under tax funding agreement', 43), (' current - liability for annual and long service leave', 43), (' ultimate parent entity', 42), (' other related parties', 41), (' gst payables', 40), (' abandonment and decommissioning costs', 39), (' total current employee benefits', 39), (' make good provisions', 38), (' warranty', 38), (' contract liabilites - current', 36), ('other creditors and accruals', 35), (' employee benefits - current', 35), (' share of joint venture payables', 35), (' gst', 33), (' secured long-term bank loans', 30), (' arising from service contracts', 30), (' gst liabilities', 30), (' forward exchange contracts', 30), (' provisions - current', 29), (' gst payable and accruals', 27), (' derivative contracts - at fair value', 26), (' provision for associate funding', 23), (' rebates', 20), (' restructuring', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = additional provisions recognised , res_fuzz_match = [(' provisions - current', 71), (' arising from service contracts', 52), (' make good provisions', 50), (' abandonment and decommissioning costs', 48), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' provision for associate funding', 43), (' other creditors', 43), (' ultimate parent entity', 42), (' rebates', 40), (' restructuring', 40), (' total current employee benefits', 40), (' derivative contracts - at fair value', 38), (' loans from related party', 38), (' current - liability for annual and long service leave', 38), (' contract liabilites - current', 38), (' warranty', 38), (' other related parties', 35), (' employee benefits - current', 34), (' forward exchange contracts', 34), ('other creditors and accruals', 33), (' loan payable to relayed party under tax funding agreement', 33), (' share of joint venture payables', 33), (' gst', 33), (' gst payables', 30), (' employee benefits - payroll', 30), (' gst liabilities', 30), (' secured long-term bank loans', 29), (' gst payable and accruals', 24), (' other', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = balance at end of period , res_fuzz_match = [(' current - liability for annual and long service leave', 59), (' abandonment and decommissioning costs', 53), (' loan payable to relayed party under tax funding agreement', 47), (' total current employee benefits', 47), (' make good provisions', 44), ('current', 43), (' ultimate parent entity', 41), (' gst payable and accruals', 41), (' employee benefits - payroll', 41), (' other', 40), (' warranty', 38), (' other creditors', 36), (' loans from related party', 36), (' other creditors', 36), (' other creditors', 36), ('other creditors and accruals', 35), (' other related parties', 35), (' secured long-term bank loans', 35), (' employee benefits - current', 35), (' share of joint venture payables', 35), (' arising from service contracts', 35), (' forward exchange contracts', 35), (' contract liabilites - current', 29), (' provision for associate funding', 29), (' derivative contracts - at fair value', 24), (' provisions - current', 21), (' gst payables', 20), (' gst liabilities', 20), (' rebates', 20), (' restructuring', 20), (' gst', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 11, 12, 14], 'score': [100, 100, 100, 100, 100, 100], 'value': [2767587.0, 12151482.0, 3539873.0, 2027681.0, 11466220.0, 2036708.0], 'label': ['  Employee benefits', '  Other provisions', '  Current', '  Employee benefits', '  Other provisions', '  Current'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current liabilities', 82)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 82, 'value': 5582432.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 5334394.0, 248038.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = liabilities , res_fuzz_match = [('current liabilities', 60)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('current liabilities', 34)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = current tax liabilities , res_fuzz_match = [('current liabilities', 88)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('current liabilities', 20)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('current liabilities', 64)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = other current liabilities , res_fuzz_match = [('current liabilities', 82)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [17, 20, 24], 'score': 82, 'value': 39390069.0, 'line_item_label': ['CURRENT LIABILITIES', 'Current tax liabilities', 'Other current liabilities'], 'note_numbers': [nan, '7', nan], 'line_item_value': [0.0, 39141813.0, 248256.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 39)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term debt', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term debt', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term debt', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 39)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term debt', 41)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term debt', 30)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term debt', 24)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term debt', 40)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), ('interest bearing loans and borrowings', 45), (' lease liabilities', 45), (' lease liability', 45), (' borrowings', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' lease liabilities', 45), (' lease liability', 45), ('interest bearing loans and borrowings', 40), (' loans and borrowings', 27), (' borrowings', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), (' borrowings', 100), (' loans and borrowings', 100), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 27), (' borrowings', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 54936678.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [48102669.0, 6834009.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), ('interest bearing loans and borrowings', 45), (' lease liabilities', 45), (' lease liability', 45), (' borrowings', 33)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' lease liabilities', 45), (' lease liability', 45), ('interest bearing loans and borrowings', 40), (' loans and borrowings', 27), (' borrowings', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), (' borrowings', 100), (' loans and borrowings', 100), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [(' lease liabilities', 73), (' lease liability', 73), ('interest bearing loans and borrowings', 44), (' loans and borrowings', 27), (' borrowings', 17)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 42372893.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [36057231.0, 6315662.0]}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('later than 1 year', 60), ('not later than 5 years', 58), (' bank loan', 56), (' non current', 55), (' secured finance debt', 47), (' lease liabilities - non-current', 43), (' lease liabilities', 27), (' lease liability', 27), ('leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost smbc term loan, secured , res_fuzz_match = [('later than 1 year', 60), (' bank loan', 56), (' non current', 55), ('not later than 5 years', 53), (' secured finance debt', 47), (' lease liabilities - non-current', 43), (' lease liabilities', 36), (' lease liability', 36), ('leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost , res_fuzz_match = [(' secured finance debt', 47), (' non current', 45), (' lease liabilities - non-current', 33), ('later than 1 year', 33), ('not later than 5 years', 28), (' lease liabilities', 27), (' lease liability', 27), ('leases', 25), (' bank loan', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost current , res_fuzz_match = [(' non current', 82), (' secured finance debt', 47), (' lease liabilities - non-current', 47), ('not later than 5 years', 37), ('later than 1 year', 33), (' lease liabilities', 27), (' lease liability', 27), ('leases', 25), (' bank loan', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('later than 1 year', 60), ('not later than 5 years', 58), (' bank loan', 56), (' non current', 55), (' secured finance debt', 47), (' lease liabilities - non-current', 43), (' lease liabilities', 27), (' lease liability', 27), ('leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost smbc term loan, secured , res_fuzz_match = [('later than 1 year', 60), (' bank loan', 56), (' non current', 55), ('not later than 5 years', 53), (' secured finance debt', 47), (' lease liabilities - non-current', 43), (' lease liabilities', 36), (' lease liability', 36), ('leases', 25)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost , res_fuzz_match = [(' secured finance debt', 47), (' non current', 45), (' lease liabilities - non-current', 33), ('later than 1 year', 33), ('not later than 5 years', 28), (' lease liabilities', 27), (' lease liability', 27), ('leases', 25), (' bank loan', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost current , res_fuzz_match = [(' non current', 82), (' secured finance debt', 47), (' lease liabilities - non-current', 47), ('not later than 5 years', 37), ('later than 1 year', 33), (' lease liabilities', 27), (' lease liability', 27), ('leases', 25), (' bank loan', 22)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 7], 'score': [82, 82], 'value': [15536531.0, 14506615.0], 'label': ['Secured at amortised cost Current', 'Secured at amortised cost Current'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:56+0530 - sLogger - DEBUG - keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' non current', 100), (' secured finance debt', 57), (' lease liabilities - non-current', 57), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' bank loan', 14), (' lease liabilities', 0), (' lease liability', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [(' lease liabilities - non-current', 100), (' non current', 86), (' secured finance debt', 43), (' bank loan', 43), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 0), (' lease liabilities', 0), (' lease liability', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' non current', 100), (' secured finance debt', 57), (' lease liabilities - non-current', 57), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 25), (' bank loan', 14), (' lease liabilities', 0), (' lease liability', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [(' lease liabilities - non-current', 100), (' non current', 86), (' secured finance debt', 43), (' bank loan', 43), ('later than 1 year', 29), ('not later than 5 years', 29), ('leases', 0), (' lease liabilities', 0), (' lease liability', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('leases', 0), (' secured finance debt', 0), (' bank loan', 0), (' lease liabilities', 0), (' lease liability', 0), (' lease liabilities - non-current', 0), (' non current', 0), ('later than 1 year', 0), ('not later than 5 years', 0)]
2023-05-09 11:05:56+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [1615671.0, 6315662.0, 2719442.0, 6834009.0], 'label': [' Current', ' Non-current', ' Current', ' Non-current'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:56+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:56+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-09 11:05:56+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('(bond)', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('(bond)', 40), ('interest bearing loans and borrowings', 34)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('(bond)', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('(bond)', 40), ('interest bearing loans and borrowings', 34)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('(bond)', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('lease liabilities', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('lease liabilities', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('lease liabilities', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [31], 'score': 100, 'value': 6834009.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['22'], 'line_item_value': [6834009.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('lease liabilities', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('interest bearing loans and borrowings', 36), ('lease liabilities', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 34), ('lease liabilities', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 59), ('interest bearing loans and borrowings', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [31], 'score': 100, 'value': 6315662.0, 'line_item_label': ['Lease liability'], 'note_numbers': ['22'], 'line_item_value': [6315662.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 45), ('interest bearing loans and borrowings', 45)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('lease liabilities', 45), ('interest bearing loans and borrowings', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), ('lease liabilities', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 54936678.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [48102669.0, 6834009.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 45), ('interest bearing loans and borrowings', 45)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('lease liabilities', 45), ('interest bearing loans and borrowings', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('interest bearing loans and borrowings', 100), ('lease liabilities', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('lease liabilities', 73), ('interest bearing loans and borrowings', 44)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [30, 31], 'score': 100, 'value': 42372893.0, 'line_item_label': ['Borrowings', 'Lease liability'], 'note_numbers': ['14', '22'], 'line_item_value': [36057231.0, 6315662.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost smbc term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost current , res_fuzz_match = [('deferred tax liabilities', 31), ('total deferred tax (assets) / liabilities', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost mizuho bank term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost smbc term loan, secured , res_fuzz_match = [('total deferred tax (assets) / liabilities', 36), ('deferred tax liabilities', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost , res_fuzz_match = [('total deferred tax (assets) / liabilities', 39), ('deferred tax liabilities', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = secured at amortised cost current , res_fuzz_match = [('deferred tax liabilities', 31), ('total deferred tax (assets) / liabilities', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('deferred tax liabilities', 29), ('total deferred tax (assets) / liabilities', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('total deferred tax (assets) / liabilities', 14), ('deferred tax liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [('deferred tax liabilities', 29), ('total deferred tax (assets) / liabilities', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('total deferred tax (assets) / liabilities', 14), ('deferred tax liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax liabilities', 0), ('total deferred tax (assets) / liabilities', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other long term liabilities', 50), (' other financial liabilities', 43), (' other non-current liabilities', 38), (' financial liabilities', 33), (' employee benefits', 32), (' provision for associate funding', 32), (' provisions', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), (' other financial liabilities', 34), ('other long term liabilities', 32), ('trade and other payables', 32), (' other non-current liabilities', 29), (' financial liabilities', 28), (' provision for associate funding', 22), (' provisions', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' other non-current liabilities', 38), (' provisions', 33), ('other long term liabilities', 29), (' provision for associate funding', 29), (' other financial liabilities', 23), ('trade and other payables', 21), (' employee benefits', 19), (' financial liabilities', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [(' other financial liabilities', 56), ('trade and other payables', 53), (' financial liabilities', 53), (' other non-current liabilities', 44), ('other long term liabilities', 42), (' employee benefits', 26), (' provision for associate funding', 21), (' provisions', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [26, 27, 28, 29], 'score': 100, 'value': 11497952.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Trade and other payables', 'Employee benefits', 'Provisions'], 'note_numbers': [nan, '16', '15', '15'], 'line_item_value': [0.0, 40759.0, 241479.0, 11215714.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other long term liabilities', 50), (' other financial liabilities', 43), (' other non-current liabilities', 38), (' financial liabilities', 33), (' employee benefits', 32), (' provision for associate funding', 32), (' provisions', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [(' employee benefits', 100), (' other financial liabilities', 34), ('other long term liabilities', 32), ('trade and other payables', 32), (' other non-current liabilities', 29), (' financial liabilities', 28), (' provision for associate funding', 22), (' provisions', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [(' other non-current liabilities', 38), (' provisions', 33), ('other long term liabilities', 29), (' provision for associate funding', 29), (' other financial liabilities', 23), ('trade and other payables', 21), (' employee benefits', 19), (' financial liabilities', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [(' other financial liabilities', 56), ('trade and other payables', 53), (' financial liabilities', 53), (' other non-current liabilities', 44), ('other long term liabilities', 42), (' employee benefits', 26), (' provision for associate funding', 21), (' provisions', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [26, 27, 28, 29], 'score': 100, 'value': 11399464.0, 'line_item_label': ['NON-CURRENT LIABILITIES', 'Trade and other payables', 'Employee benefits', 'Provisions'], 'note_numbers': [nan, '16', '15', '15'], 'line_item_value': [0.0, 20268.0, 311735.0, 11067461.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' trade payables - related parties', 100), ('non-current trade and other payables', 75), (' contract liabilites - non-current', 58), (' electricity derivatives at fair value through oci', 50), (' employee benefits - payroll', 50), (' derivative contracts - at fair value', 42), (' non-current - liability for long-service leave', 42), (' total non-current employee benefits', 42), (' abandonment and decommissioning costs', 33), (' make good provisions', 33), (' employee benefits - non current', 25), (' provision for associate funding', 25), (' provisions - non-current', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('non-current trade and other payables', 43), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - non current', 43), (' employee benefits - payroll', 43), (' total non-current employee benefits', 43), (' non-current - liability for long-service leave', 36), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' provision for associate funding', 36), (' trade payables - related parties', 36), (' abandonment and decommissioning costs', 29), (' make good provisions', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [(' total non-current employee benefits', 42), ('non-current trade and other payables', 33), (' electricity derivatives at fair value through oci', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' non-current - liability for long-service leave', 25), (' provisions - non-current', 25), (' contract liabilites - non-current', 25), (' employee benefits - payroll', 25), (' make good provisions', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = trade payables , res_fuzz_match = [(' trade payables - related parties', 100), ('non-current trade and other payables', 75), (' contract liabilites - non-current', 58), (' electricity derivatives at fair value through oci', 50), (' employee benefits - payroll', 50), (' derivative contracts - at fair value', 42), (' non-current - liability for long-service leave', 42), (' total non-current employee benefits', 42), (' abandonment and decommissioning costs', 33), (' make good provisions', 33), (' employee benefits - non current', 25), (' provision for associate funding', 25), (' provisions - non-current', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other creditors , res_fuzz_match = [('non-current trade and other payables', 43), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - non current', 43), (' employee benefits - payroll', 43), (' total non-current employee benefits', 43), (' non-current - liability for long-service leave', 36), (' provisions - non-current', 36), (' contract liabilites - non-current', 36), (' provision for associate funding', 36), (' trade payables - related parties', 36), (' abandonment and decommissioning costs', 29), (' make good provisions', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [(' total non-current employee benefits', 42), ('non-current trade and other payables', 33), (' electricity derivatives at fair value through oci', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' non-current - liability for long-service leave', 25), (' provisions - non-current', 25), (' contract liabilites - non-current', 25), (' employee benefits - payroll', 25), (' make good provisions', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 5, 7, 11, 12], 'score': [100, 100, 100, 100, 100, 100], 'value': [1932688.0, 12878066.0, 20268.0, 2506637.0, 8092154.0, 40759.0], 'label': ['  Trade payables ', '  Current ', '  Non-current ', '  Trade payables ', '  Current ', '  Non-current '], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other provisions , res_fuzz_match = [(' make good provisions', 67), ('non-current trade and other payables', 58), (' electricity derivatives at fair value through oci', 50), (' trade payables - related parties', 43), (' derivative contracts - at fair value', 42), (' non-current - liability for long-service leave', 42), (' contract liabilites - non-current', 42), (' employee benefits - payroll', 42), (' provision for associate funding', 42), (' employee benefits - non current', 33), (' provisions - non-current', 33), (' abandonment and decommissioning costs', 33), (' total non-current employee benefits', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = balance at beginning of the period , res_fuzz_match = [(' employee benefits - payroll', 45), ('non-current trade and other payables', 43), (' trade payables - related parties', 40), (' non-current - liability for long-service leave', 39), (' abandonment and decommissioning costs', 39), (' total non-current employee benefits', 39), (' make good provisions', 38), (' contract liabilites - non-current', 36), (' employee benefits - non current', 35), (' electricity derivatives at fair value through oci', 30), (' provisions - non-current', 29), (' derivative contracts - at fair value', 26), (' provision for associate funding', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = additional provisions recognised , res_fuzz_match = [(' provisions - non-current', 64), (' make good provisions', 50), (' abandonment and decommissioning costs', 48), (' electricity derivatives at fair value through oci', 43), (' provision for associate funding', 43), (' derivative contracts - at fair value', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' contract liabilites - non-current', 33), (' trade payables - related parties', 33), (' total non-current employee benefits', 33), (' employee benefits - payroll', 30), ('non-current trade and other payables', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = balance at end of period , res_fuzz_match = [(' abandonment and decommissioning costs', 53), (' trade payables - related parties', 48), (' total non-current employee benefits', 47), (' make good provisions', 44), ('non-current trade and other payables', 41), (' electricity derivatives at fair value through oci', 41), (' employee benefits - non current', 41), (' employee benefits - payroll', 41), (' non-current - liability for long-service leave', 35), (' contract liabilites - non-current', 35), (' provisions - non-current', 29), (' provision for associate funding', 29), (' derivative contracts - at fair value', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other provisions , res_fuzz_match = [(' make good provisions', 67), ('non-current trade and other payables', 58), (' electricity derivatives at fair value through oci', 50), (' trade payables - related parties', 43), (' derivative contracts - at fair value', 42), (' non-current - liability for long-service leave', 42), (' contract liabilites - non-current', 42), (' employee benefits - payroll', 42), (' provision for associate funding', 42), (' employee benefits - non current', 33), (' provisions - non-current', 33), (' abandonment and decommissioning costs', 33), (' total non-current employee benefits', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = current , res_fuzz_match = [(' employee benefits - non current', 100), ('non-current trade and other payables', 71), (' total non-current employee benefits', 71), (' non-current - liability for long-service leave', 57), (' provisions - non-current', 57), (' contract liabilites - non-current', 57), (' electricity derivatives at fair value through oci', 43), (' derivative contracts - at fair value', 43), (' employee benefits - payroll', 43), (' provision for associate funding', 43), (' trade payables - related parties', 43), (' abandonment and decommissioning costs', 29), (' make good provisions', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = non-current , res_fuzz_match = [('non-current trade and other payables', 100), (' non-current - liability for long-service leave', 100), (' provisions - non-current', 100), (' contract liabilites - non-current', 100), (' total non-current employee benefits', 100), (' employee benefits - non current', 86), (' derivative contracts - at fair value', 43), (' abandonment and decommissioning costs', 43), (' electricity derivatives at fair value through oci', 29), (' provision for associate funding', 29), (' make good provisions', 29), (' employee benefits - payroll', 14), (' trade payables - related parties', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = balance at beginning of the period , res_fuzz_match = [(' employee benefits - payroll', 45), ('non-current trade and other payables', 43), (' trade payables - related parties', 40), (' non-current - liability for long-service leave', 39), (' abandonment and decommissioning costs', 39), (' total non-current employee benefits', 39), (' make good provisions', 38), (' contract liabilites - non-current', 36), (' employee benefits - non current', 35), (' electricity derivatives at fair value through oci', 30), (' provisions - non-current', 29), (' derivative contracts - at fair value', 26), (' provision for associate funding', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = additional provisions recognised , res_fuzz_match = [(' provisions - non-current', 64), (' make good provisions', 50), (' abandonment and decommissioning costs', 48), (' electricity derivatives at fair value through oci', 43), (' provision for associate funding', 43), (' derivative contracts - at fair value', 38), (' employee benefits - non current', 38), (' non-current - liability for long-service leave', 38), (' contract liabilites - non-current', 33), (' trade payables - related parties', 33), (' total non-current employee benefits', 33), (' employee benefits - payroll', 30), ('non-current trade and other payables', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = balance at end of period , res_fuzz_match = [(' abandonment and decommissioning costs', 53), (' trade payables - related parties', 48), (' total non-current employee benefits', 47), (' make good provisions', 44), ('non-current trade and other payables', 41), (' electricity derivatives at fair value through oci', 41), (' employee benefits - non current', 41), (' employee benefits - payroll', 41), (' non-current - liability for long-service leave', 35), (' contract liabilites - non-current', 35), (' provisions - non-current', 29), (' provision for associate funding', 29), (' derivative contracts - at fair value', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3, 4, 11, 14, 15], 'score': [100, 100, 100, 100, 100, 100], 'value': [2767587.0, 3539873.0, 11379196.0, 2027681.0, 2036708.0, 11457193.0], 'label': ['  Employee benefits', '  Current', '  Non-current', '  Employee benefits', '  Current', '  Non-current'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('minority interest', 41)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('minority interest', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('minority interest', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('minority interest', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('minority interest', 41)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('minority interest', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('minority interest', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('minority interest', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term liabilities', 39)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term liabilities', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term liabilities', 44)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term liabilities', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = employee benefits , res_fuzz_match = [('long term liabilities', 39)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = borrowings , res_fuzz_match = [('long term liabilities', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = lease liability , res_fuzz_match = [('long term liabilities', 44)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = deferred tax liability , res_fuzz_match = [('long term liabilities', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), ('common stock', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('share capital', 36), ('equity share capital', 34), ('common stock', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('perpetual equity instrument', 26), ('equity share capital', 25), ('share capital', 24), ('common stock', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('share capital', 36), ('equity share capital', 34), ('common stock', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67), ('reserves and surplus', 52), ('other equity', 33), ('additional paid in capital', 0), ('additional paid up capital', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('other reserves', 67)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [39], 'score': 100, 'value': 28509330.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [28509330.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves surplus', 63), ('other equity', 33), ('retained earnings', 24), (' accumulated losses', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [39], 'score': 100, 'value': 122111851.0, 'line_item_label': ['Retained earnings'], 'note_numbers': [nan], 'line_item_value': [122111851.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [38], 'score': 100, 'value': 2011521.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [2011521.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('reserves', 100), ('other reserves', 67)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [38], 'score': 100, 'value': 3384.0, 'line_item_label': ['Reserves'], 'note_numbers': [nan], 'line_item_value': [3384.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = reserves , res_fuzz_match = [('shareholders equity(a)', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 77944930.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [77944930.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = right- of-use assets , res_fuzz_match = [('plant property equipment', 33), ('property plant equipment', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = intangible assets , res_fuzz_match = [('plant property equipment', 25), ('property plant equipment', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other non-current assets , res_fuzz_match = [('plant property equipment', 36), ('property plant equipment', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 91, 'value': 83893305.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['11'], 'line_item_value': [83893305.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('cost', 50), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('cost', 25), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('cost', 75), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('cost', 100), ('gross', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('gross', 60), ('cost', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('cost', 0), ('gross', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('cost', 50), ('gross', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [15625586.0, 1626478.0, 0.0, -91683.0, 17160381.0, 0.0, 0.0, 0.0, 0.0, 17160381.0], 'label': ['Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs', 'Capitalised pre stripping costs'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = land , res_fuzz_match = [('accumulated depreciation', 50), ('depreciatio', 25), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = mine infrastructure , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = plant & equipment , res_fuzz_match = [('net value', 50), ('depreciatio', 36), ('accumulated depreciation', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = assets under construction , res_fuzz_match = [('net value', 50), ('depreciatio', 45), ('accumulated depreciation', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = capitalised pre stripping costs , res_fuzz_match = [('accumulated depreciation', 47), ('depreciatio', 45), ('net value', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other assets , res_fuzz_match = [('net value', 38), ('depreciatio', 36), ('accumulated depreciation', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 53996342 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 100871 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 231019 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 54328232 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (17,549,117) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (2,553,872) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = (20,102,989) , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = 34225243 , res_fuzz_match = [('depreciatio', 0), ('accumulated depreciation', 0), ('net value', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = total , res_fuzz_match = [('net value', 60), ('depreciatio', 40), ('accumulated depreciation', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 75), ('account receivables', 64), ('trade and other receivables', 61), ('government subsidies receivable', 56), ('unbilled', 40), ('billed', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('trade and other receivables', 67), ('receivable', 50), ('account receivables', 42), ('trade receivables', 42), ('government subsidies receivable', 42), ('billed', 25), ('unbilled', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': 13983506.0, 'line_item_label': ['Trade and other receivables', 'Current tax receivables'], 'note_numbers': ['10', '7'], 'line_item_value': [13983506.0, 0.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = assets , res_fuzz_match = [('trade receivables', 40), ('government subsidies receivable', 40), ('trade and other receivables', 40), ('account receivables', 20), ('receivable', 20), ('billed', 0), ('unbilled', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = current tax receivables , res_fuzz_match = [('receivable', 100), ('trade receivables', 75), ('account receivables', 64), ('trade and other receivables', 61), ('government subsidies receivable', 56), ('unbilled', 40), ('billed', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = prepayments , res_fuzz_match = [('receivable', 36), ('account receivables', 33), ('trade receivables', 33), ('government subsidies receivable', 33), ('trade and other receivables', 33), ('billed', 0), ('unbilled', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other investments , res_fuzz_match = [('trade and other receivables', 67), ('receivable', 50), ('account receivables', 42), ('trade receivables', 42), ('government subsidies receivable', 42), ('billed', 25), ('unbilled', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 5], 'score': 100, 'value': 23265701.0, 'line_item_label': ['Trade and other receivables', 'Current tax receivables'], 'note_numbers': ['10', '7'], 'line_item_value': [23265701.0, 0.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 75), (' related party receivables', 67), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 75), (' related party receivables', 67), (' other debtors', 58), ('current', 43), (' net trade debtors', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = trade receivables , res_fuzz_match = [('trade receivables', 100), (' share of joint venture receivables', 75), (' related party receivables', 67), (' net trade debtors', 58), (' other debtors', 42), ('current', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other receivables , res_fuzz_match = [('trade receivables', 75), (' share of joint venture receivables', 75), (' related party receivables', 67), (' other debtors', 58), ('current', 43), (' net trade debtors', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 3], 'score': [100, 100], 'value': [20803777.0, 12458361.0], 'label': [' Trade receivables', ' Trade receivables'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), ('net sales', 40), (' Sale of coal', 38), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), ('sale of products', 33), ('transmission and distribution business', 30), ('from trading business', 30), (' Revenue', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sale of coal', 100), ('net sales', 59), ('sale of products', 57), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('sale of products', 69), ('from trading business', 38), (' Sale of coal', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('net sales', 32), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Revenue', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sale of coal', 61), ('sale of products', 46), ('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('net sales', 36), ('transmission and distribution business', 29), ('from trading business', 28), ('revenue from operations', 27), (' Sales revenue', 24), (' Revenue', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('transmission and distribution business', 53), (' Sales revenue', 44), ('sale of products', 36), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('revenue from operations', 32), (' Revenue', 30), ('net sales', 28), ('from trading business', 28), (' Sale of coal', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 45), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('from trading business', 49), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), (' Sale of coal', 32), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 37), ('net sales', 35), ('from trading business', 33), ('revenue from operations', 26), ('transmission and distribution business', 23), (' Sales revenue', 23), (' Revenue', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('from trading business', 33), (' Sale of coal', 33), ('revenue from operations', 32), (' Sales revenue', 31), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 26), ('sale of products', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('net sales', 35), (' Sale of coal', 33), (' Sales revenue', 30), ('transmission and distribution business', 27), ('from trading business', 25), ('sale of products', 19), ('revenue from operations', 16), ('revenue from contracts with customers', 15), ('Revenue from contract with customers', 15), (' Revenue', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), (' Sales revenue', 35), ('net sales', 32), (' Sale of coal', 32), ('revenue from operations', 27), ('from trading business', 27), ('sale of products', 24), (' Revenue', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 42), ('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('transmission and distribution business', 36), ('sale of products', 35), ('net sales', 27), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('transmission and distribution business', 39), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('revenue from operations', 33), ('from trading business', 33), ('sale of products', 27), (' Sales revenue', 27), ('net sales', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('transmission and distribution business', 36), ('revenue from operations', 33), ('from trading business', 30), ('sale of products', 27), (' Sales revenue', 24), ('net sales', 21), (' Sale of coal', 21), (' Revenue', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Sale of coal', 31), ('sale of products', 25), ('net sales', 17), (' Sales revenue', 13), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11), ('revenue from operations', 10), (' Revenue', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('transmission and distribution business', 46), ('net sales', 36), (' Sales revenue', 32), ('sale of products', 31), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('revenue from operations', 28), ('from trading business', 23), (' Revenue', 23), (' Sale of coal', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('from trading business', 41), ('transmission and distribution business', 39), ('revenue from operations', 36), (' Sales revenue', 31), ('sale of products', 26), (' Revenue', 25), (' Sale of coal', 23), ('net sales', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 40), ('Revenue from contract with customers', 40), ('from trading business', 37), ('revenue from operations', 36), (' Sales revenue', 36), ('sale of products', 35), ('transmission and distribution business', 32), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [(' Sales revenue', 41), ('sale of products', 40), ('net sales', 38), (' Sale of coal', 37), ('from trading business', 36), ('revenue from operations', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 26), (' Revenue', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 116377997.0, 'line_item_label': ['Revenue', 'Sale of coal'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 116377997.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), ('net sales', 40), (' Sale of coal', 38), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), ('sale of products', 33), ('transmission and distribution business', 30), ('from trading business', 30), (' Revenue', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sale of coal', 100), ('net sales', 59), ('sale of products', 57), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('sale of products', 69), ('from trading business', 38), (' Sale of coal', 38), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), (' Sales revenue', 36), ('net sales', 32), ('transmission and distribution business', 31), ('revenue from operations', 30), (' Revenue', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sale of coal', 61), ('sale of products', 46), ('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('net sales', 36), ('transmission and distribution business', 29), ('from trading business', 28), ('revenue from operations', 27), (' Sales revenue', 24), (' Revenue', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('from trading business', 46), ('revenue from operations', 44), (' Sale of coal', 40), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('net sales', 32), (' Sales revenue', 27), ('sale of products', 26), ('transmission and distribution business', 21), (' Revenue', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Sales revenue', 43), ('from trading business', 37), ('sale of products', 33), (' Revenue', 33), ('net sales', 30), ('revenue from operations', 29), ('revenue from contracts with customers', 27), ('Revenue from contract with customers', 27), ('transmission and distribution business', 25), (' Sale of coal', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('transmission and distribution business', 53), (' Sales revenue', 44), ('sale of products', 36), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('revenue from operations', 32), (' Revenue', 30), ('net sales', 28), ('from trading business', 28), (' Sale of coal', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('transmission and distribution business', 45), ('revenue from operations', 38), (' Sales revenue', 37), (' Revenue', 36), ('net sales', 33), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('sale of products', 29), ('from trading business', 26), (' Sale of coal', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('revenue from operations', 68), ('from trading business', 49), ('revenue from contracts with customers', 48), ('Revenue from contract with customers', 48), (' Sale of coal', 32), (' Sales revenue', 30), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 30), ('from trading business', 30), ('revenue from operations', 21), ('net sales', 20), (' Sale of coal', 19), ('sale of products', 17), (' Sales revenue', 17), (' Revenue', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Sale of coal', 42), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('sale of products', 37), ('net sales', 35), ('from trading business', 33), ('revenue from operations', 26), ('transmission and distribution business', 23), (' Sales revenue', 23), (' Revenue', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('from trading business', 33), (' Sale of coal', 33), ('revenue from operations', 32), (' Sales revenue', 31), (' Revenue', 29), ('transmission and distribution business', 28), ('net sales', 26), ('sale of products', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('net sales', 35), (' Sale of coal', 33), (' Sales revenue', 30), ('transmission and distribution business', 27), ('from trading business', 25), ('sale of products', 19), ('revenue from operations', 16), ('revenue from contracts with customers', 15), ('Revenue from contract with customers', 15), (' Revenue', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), ('transmission and distribution business', 35), (' Sales revenue', 35), ('net sales', 32), (' Sale of coal', 32), ('revenue from operations', 27), ('from trading business', 27), ('sale of products', 24), (' Revenue', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('from trading business', 43), ('revenue from operations', 42), ('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('transmission and distribution business', 36), ('sale of products', 35), ('net sales', 27), (' Sale of coal', 26), (' Sales revenue', 24), (' Revenue', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('transmission and distribution business', 39), ('revenue from contracts with customers', 37), ('Revenue from contract with customers', 37), ('revenue from operations', 33), ('from trading business', 33), ('sale of products', 27), (' Sales revenue', 27), ('net sales', 24), (' Revenue', 21), (' Sale of coal', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('transmission and distribution business', 36), ('revenue from operations', 33), ('from trading business', 30), ('sale of products', 27), (' Sales revenue', 24), ('net sales', 21), (' Sale of coal', 21), (' Revenue', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Sale of coal', 31), ('sale of products', 25), ('net sales', 17), (' Sales revenue', 13), ('transmission and distribution business', 12), ('revenue from contracts with customers', 11), ('from trading business', 11), ('Revenue from contract with customers', 11), ('revenue from operations', 10), (' Revenue', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('transmission and distribution business', 46), ('net sales', 36), (' Sales revenue', 32), ('sale of products', 31), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('revenue from operations', 28), ('from trading business', 23), (' Revenue', 23), (' Sale of coal', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('revenue from contracts with customers', 45), ('Revenue from contract with customers', 45), ('from trading business', 41), ('transmission and distribution business', 39), ('revenue from operations', 36), (' Sales revenue', 31), ('sale of products', 26), (' Revenue', 25), (' Sale of coal', 23), ('net sales', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 40), ('Revenue from contract with customers', 40), ('from trading business', 37), ('revenue from operations', 36), (' Sales revenue', 36), ('sale of products', 35), ('transmission and distribution business', 32), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [(' Sales revenue', 41), ('sale of products', 40), ('net sales', 38), (' Sale of coal', 37), ('from trading business', 36), ('revenue from operations', 35), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 26), (' Revenue', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [1, 2], 'score': 100, 'value': 256646599.0, 'line_item_label': ['Revenue', 'Sale of coal'], 'note_numbers': [nan, nan], 'line_item_value': [0.0, 256646599.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' cost of coal sold', 38), (' Cost of goods and services sold', 38), ('expenditure', 36), ('total expenditure', 36), ('purchase of stock-in-trade', 32), ('total expenses', 25), ('expense', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('cost of sales', 78), ('Cost of sales', 78), (' cost of coal sold', 61), (' Personnel costs', 43), (' Cost of product sold', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), ('total expenses', 29), (' Cost of goods and services sold', 29), ('total expenditure', 24), ('expense', 13), ('expenditure', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Cost of product sold', 100), (' cost of coal sold', 65), (' Personnel costs', 65), (' Cost of goods and services sold', 62), (' Cost of inventory sold', 61), ('cost of sales', 54), ('Cost of sales', 54), ('purchase of stock-in-trade', 39), ('total expenditure', 36), ('total expenses', 34), ('expenditure', 22), ('expense', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' cost of coal sold', 100), (' Cost of product sold', 65), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), (' Cost of goods and services sold', 56), (' Cost of inventory sold', 55), ('purchase of stock-in-trade', 42), ('total expenses', 31), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('total expenses', 48), (' Personnel costs', 46), ('expense', 44), (' Cost of product sold', 42), (' Cost of inventory sold', 40), ('total expenditure', 38), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), (' cost of coal sold', 29), ('purchase of stock-in-trade', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('purchase of stock-in-trade', 41), ('expense', 38), ('total expenses', 37), ('expenditure', 32), ('total expenditure', 32), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' cost of coal sold', 28), (' Personnel costs', 28), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' cost of coal sold', 43), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 29), (' Cost of inventory sold', 29), ('expense', 27), (' Personnel costs', 26), ('total expenditure', 24), (' Cost of product sold', 23), ('purchase of stock-in-trade', 21), ('expenditure', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' cost of coal sold', 33), (' Cost of goods and services sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), ('expense', 29), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' Cost of product sold', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 30), ('expenditure', 25), ('expense', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 45), ('expenditure', 37), (' Cost of product sold', 36), (' Cost of inventory sold', 35), (' Cost of goods and services sold', 34), (' Personnel costs', 34), ('purchase of stock-in-trade', 31), ('expense', 31), (' cost of coal sold', 30), ('cost of sales', 24), ('Cost of sales', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('purchase of stock-in-trade', 31), ('total expenditure', 29), (' Cost of product sold', 29), (' Cost of goods and services sold', 28), (' Cost of inventory sold', 28), ('total expenses', 27), (' Personnel costs', 26), (' cost of coal sold', 23), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 20), ('expense', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('cost of sales', 46), ('Cost of sales', 46), (' cost of coal sold', 44), (' Personnel costs', 33), (' Cost of product sold', 29), (' Cost of inventory sold', 26), (' Cost of goods and services sold', 21), ('expense', 20), ('purchase of stock-in-trade', 17), ('total expenses', 12), ('total expenditure', 10), ('expenditure', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' Cost of inventory sold', 41), ('total expenditure', 39), ('total expenses', 38), (' Cost of product sold', 38), (' Cost of goods and services sold', 36), ('expenditure', 33), ('purchase of stock-in-trade', 31), ('expense', 31), (' cost of coal sold', 29), (' Personnel costs', 29), ('cost of sales', 28), ('Cost of sales', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('total expenditure', 44), ('total expenses', 43), ('expenditure', 36), (' Cost of goods and services sold', 31), ('expense', 30), (' Personnel costs', 29), (' Cost of product sold', 27), ('purchase of stock-in-trade', 26), (' Cost of inventory sold', 26), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('total expenditure', 55), ('total expenses', 50), (' Cost of inventory sold', 47), ('purchase of stock-in-trade', 43), (' cost of coal sold', 43), (' Cost of goods and services sold', 42), (' Cost of product sold', 40), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 32), ('expense', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('total expenses', 47), ('cost of sales', 44), ('Cost of sales', 44), ('total expenditure', 41), ('purchase of stock-in-trade', 38), (' cost of coal sold', 38), (' Cost of product sold', 34), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 32), (' Personnel costs', 31), ('expenditure', 21), ('expense', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': -70764509.0, 'line_item_label': ['Cost of product sold', 'Cost of coal sold'], 'note_numbers': [nan, '4'], 'line_item_value': [0.0, -70764509.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' cost of coal sold', 38), (' Cost of goods and services sold', 38), ('expenditure', 36), ('total expenditure', 36), ('purchase of stock-in-trade', 32), ('total expenses', 25), ('expense', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('cost of sales', 78), ('Cost of sales', 78), (' cost of coal sold', 61), (' Personnel costs', 43), (' Cost of product sold', 38), ('purchase of stock-in-trade', 36), (' Cost of inventory sold', 36), ('total expenses', 29), (' Cost of goods and services sold', 29), ('total expenditure', 24), ('expense', 13), ('expenditure', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Cost of product sold', 100), (' cost of coal sold', 65), (' Personnel costs', 65), (' Cost of goods and services sold', 62), (' Cost of inventory sold', 61), ('cost of sales', 54), ('Cost of sales', 54), ('purchase of stock-in-trade', 39), ('total expenditure', 36), ('total expenses', 34), ('expenditure', 22), ('expense', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' cost of coal sold', 100), (' Cost of product sold', 65), ('cost of sales', 61), ('Cost of sales', 61), (' Personnel costs', 57), (' Cost of goods and services sold', 56), (' Cost of inventory sold', 55), ('purchase of stock-in-trade', 42), ('total expenses', 31), ('total expenditure', 27), ('expense', 10), ('expenditure', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('cost of sales', 40), ('Cost of sales', 40), (' cost of coal sold', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 39), (' Cost of product sold', 36), ('total expenses', 35), ('purchase of stock-in-trade', 33), (' Cost of inventory sold', 33), ('total expenditure', 30), ('expenditure', 29), ('expense', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('total expenses', 75), ('expense', 67), ('expenditure', 64), ('total expenditure', 57), ('purchase of stock-in-trade', 39), (' Personnel costs', 38), (' Cost of goods and services sold', 32), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), (' Cost of inventory sold', 26), (' cost of coal sold', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('total expenses', 48), (' Personnel costs', 46), ('expense', 44), (' Cost of product sold', 42), (' Cost of inventory sold', 40), ('total expenditure', 38), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 32), (' cost of coal sold', 29), ('purchase of stock-in-trade', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), (' cost of coal sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' Cost of product sold', 30), ('purchase of stock-in-trade', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Cost of goods and services sold', 47), (' Cost of inventory sold', 44), (' Personnel costs', 44), (' Cost of product sold', 41), (' cost of coal sold', 39), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 26), ('purchase of stock-in-trade', 24), ('total expenses', 24), ('expense', 21), ('expenditure', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Cost of goods and services sold', 38), (' Cost of inventory sold', 32), (' cost of coal sold', 31), (' Cost of product sold', 28), ('purchase of stock-in-trade', 26), ('total expenses', 25), (' Personnel costs', 23), ('total expenditure', 21), ('cost of sales', 19), ('Cost of sales', 19), ('expenditure', 18), ('expense', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('cost of sales', 58), ('Cost of sales', 58), (' Personnel costs', 55), (' Cost of inventory sold', 53), (' Cost of product sold', 44), (' Cost of goods and services sold', 40), ('purchase of stock-in-trade', 35), (' cost of coal sold', 34), ('total expenses', 22), ('total expenditure', 19), ('expenditure', 16), ('expense', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('purchase of stock-in-trade', 41), ('expense', 38), ('total expenses', 37), ('expenditure', 32), ('total expenditure', 32), (' Cost of goods and services sold', 30), (' Cost of inventory sold', 29), (' cost of coal sold', 28), (' Personnel costs', 28), ('cost of sales', 25), ('Cost of sales', 25), (' Cost of product sold', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' cost of coal sold', 43), (' Cost of goods and services sold', 35), ('cost of sales', 33), ('Cost of sales', 33), ('total expenses', 29), (' Cost of inventory sold', 29), ('expense', 27), (' Personnel costs', 26), ('total expenditure', 24), (' Cost of product sold', 23), ('purchase of stock-in-trade', 21), ('expenditure', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('total expenditure', 36), ('total expenses', 34), ('purchase of stock-in-trade', 33), (' cost of coal sold', 33), (' Cost of goods and services sold', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), ('expense', 29), (' Cost of inventory sold', 29), (' Personnel costs', 28), (' Cost of product sold', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Cost of product sold', 41), (' Cost of inventory sold', 39), ('total expenditure', 37), ('total expenses', 35), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 30), ('expenditure', 25), ('expense', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('total expenses', 49), ('total expenditure', 45), ('expenditure', 37), (' Cost of product sold', 36), (' Cost of inventory sold', 35), (' Cost of goods and services sold', 34), (' Personnel costs', 34), ('purchase of stock-in-trade', 31), ('expense', 31), (' cost of coal sold', 30), ('cost of sales', 24), ('Cost of sales', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('purchase of stock-in-trade', 31), ('total expenditure', 29), (' Cost of product sold', 29), (' Cost of goods and services sold', 28), (' Cost of inventory sold', 28), ('total expenses', 27), (' Personnel costs', 26), (' cost of coal sold', 23), ('cost of sales', 21), ('Cost of sales', 21), ('expenditure', 20), ('expense', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('cost of sales', 46), ('Cost of sales', 46), (' cost of coal sold', 44), (' Personnel costs', 33), (' Cost of product sold', 29), (' Cost of inventory sold', 26), (' Cost of goods and services sold', 21), ('expense', 20), ('purchase of stock-in-trade', 17), ('total expenses', 12), ('total expenditure', 10), ('expenditure', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' Cost of inventory sold', 41), ('total expenditure', 39), ('total expenses', 38), (' Cost of product sold', 38), (' Cost of goods and services sold', 36), ('expenditure', 33), ('purchase of stock-in-trade', 31), ('expense', 31), (' cost of coal sold', 29), (' Personnel costs', 29), ('cost of sales', 28), ('Cost of sales', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('total expenditure', 44), ('total expenses', 43), ('expenditure', 36), (' Cost of goods and services sold', 31), ('expense', 30), (' Personnel costs', 29), (' Cost of product sold', 27), ('purchase of stock-in-trade', 26), (' Cost of inventory sold', 26), (' cost of coal sold', 25), ('cost of sales', 23), ('Cost of sales', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('total expenditure', 55), ('total expenses', 50), (' Cost of inventory sold', 47), ('purchase of stock-in-trade', 43), (' cost of coal sold', 43), (' Cost of goods and services sold', 42), (' Cost of product sold', 40), ('cost of sales', 38), ('Cost of sales', 38), (' Personnel costs', 38), ('expenditure', 32), ('expense', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('total expenses', 47), ('cost of sales', 44), ('Cost of sales', 44), ('total expenditure', 41), ('purchase of stock-in-trade', 38), (' cost of coal sold', 38), (' Cost of product sold', 34), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 32), (' Personnel costs', 31), ('expenditure', 21), ('expense', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [3, 4], 'score': 100, 'value': -86129151.0, 'line_item_label': ['Cost of product sold', 'Cost of coal sold'], 'note_numbers': [nan, '4'], 'line_item_value': [0.0, -86129151.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['Included in cost of sales'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Included in cost of sales', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = changes in finished products inventory , res_fuzz_match = [('Included in cost of sales', 38)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = contractors , res_fuzz_match = [('Included in cost of sales', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = railing , res_fuzz_match = [('Included in cost of sales', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = equipment leasing - joint venture , res_fuzz_match = [('Included in cost of sales', 44)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = explosives , res_fuzz_match = [('Included in cost of sales', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = fuel and oil , res_fuzz_match = [('Included in cost of sales', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = port charges , res_fuzz_match = [('Included in cost of sales', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = royalties , res_fuzz_match = [('Included in cost of sales', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other cost , res_fuzz_match = [('Included in cost of sales', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = administration expenses , res_fuzz_match = [('Included in cost of sales', 38)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = amortisation & depreciation , res_fuzz_match = [('Included in cost of sales', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = changes in finished products inventory , res_fuzz_match = [('Included in cost of sales', 38)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = contractors , res_fuzz_match = [('Included in cost of sales', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = railing , res_fuzz_match = [('Included in cost of sales', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = equipment leasing - joint venture , res_fuzz_match = [('Included in cost of sales', 44)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = explosives , res_fuzz_match = [('Included in cost of sales', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = fuel and oil , res_fuzz_match = [('Included in cost of sales', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = port charges , res_fuzz_match = [('Included in cost of sales', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = royalties , res_fuzz_match = [('Included in cost of sales', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = other cost , res_fuzz_match = [('Included in cost of sales', 50)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = administration expenses , res_fuzz_match = [('Included in cost of sales', 38)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('Included in cost of sales', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), ('Distribution expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Logistics and distribution', 38), (' Administrative and other expenses', 37), (' Advertising expenses', 37), (' Administrative expenses', 36), (' Selling & distribution expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Occupancy expenses', 33), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Marketing expenses', 24), (' depreciation', 21), (' Management expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 30), (' Selling Expenses', 30), (' Logistics and distribution', 28), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Amortisation expenses', 26), (' Advertising expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Administrative and other expenses', 23), (' Selling & distribution expenses', 20), ('other expenses', 19), (' Other expenses', 19), (' Management expenses', 19), (' Other expenses', 19), ('Distribution expenses', 16), (' Occupancy ', 14), (' depreciation', 12), (' Occupancy expenses', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('Distribution expenses', 42), (' Selling & distribution expenses', 42), (' Logistics and distribution', 38), (' Sales and marketing', 38), (' Administrative and other expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Administrative expenses', 30), (' Administration expenses', 30), (' Selling Expenses', 29), ('other expenses', 28), (' Occupancy expenses', 28), (' Other expenses', 28), (' Other expenses', 28), (' Marketing expenses', 27), (' depreciation', 25), (' Advertising expenses', 25), (' Lease expenses', 21), (' Occupancy ', 18), (' Management expenses', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sales and marketing', 41), (' Amortisation expenses', 36), (' Logistics and distribution', 35), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling Expenses', 32), (' Administrative and other expenses', 30), (' Selling & distribution expenses', 29), (' Advertising expenses', 28), ('Distribution expenses', 27), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Depreciation expenses', 21), (' Occupancy ', 21), (' Depreciation expenses', 21), (' Marketing expenses', 15), (' Management expenses', 15), (' depreciation', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Selling & distribution expenses', 100), ('Distribution expenses', 86), (' Selling Expenses', 69), (' Administrative expenses', 65), (' Administration expenses', 65), (' Administrative and other expenses', 60), (' Depreciation expenses', 57), (' Depreciation expenses', 57), (' Advertising expenses', 56), (' Logistics and distribution', 54), (' Amortisation expenses', 51), (' Lease expenses', 50), ('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Marketing expenses', 47), (' Occupancy expenses', 42), (' Management expenses', 42), (' Sales and marketing', 33), (' depreciation', 29), (' Occupancy ', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Advertising expenses', 38), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Selling & distribution expenses', 37), (' Administration expenses', 37), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Lease expenses', 30), (' Selling Expenses', 30), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' depreciation', 21), (' Management expenses', 18), (' Occupancy ', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 39), (' Marketing expenses', 36), (' Amortisation expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), ('Distribution expenses', 32), (' Management expenses', 30), (' Logistics and distribution', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Lease expenses', 23), (' Selling Expenses', 23), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' depreciation', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('other expenses', 44), (' Other expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' Lease expenses', 38), (' Selling Expenses', 38), (' Occupancy expenses', 37), (' Management expenses', 37), (' depreciation', 36), (' Depreciation expenses', 34), (' Depreciation expenses', 34), (' Amortisation expenses', 34), (' Logistics and distribution', 34), (' Sales and marketing', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Administrative and other expenses', 29), (' Selling & distribution expenses', 28), (' Advertising expenses', 27), ('Distribution expenses', 26), (' Occupancy ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Administrative expenses', 40), (' Lease expenses', 40), (' Administration expenses', 40), (' Amortisation expenses', 35), (' Advertising expenses', 33), (' Sales and marketing', 33), (' Selling Expenses', 30), ('other expenses', 29), (' Occupancy expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Other expenses', 29), (' Selling & distribution expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), ('Distribution expenses', 24), (' Management expenses', 19), (' Marketing expenses', 18), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Sales and marketing', 41), (' Marketing expenses', 38), (' Administrative and other expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 31), (' Administration expenses', 31), (' Occupancy expenses', 29), (' Selling & distribution expenses', 28), (' Advertising expenses', 27), (' depreciation', 22), ('Distribution expenses', 22), (' Occupancy ', 6)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Other expenses', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Advertising expenses', 27), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Management expenses', 24), (' Occupancy ', 22), (' Selling Expenses', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Administrative and other expenses', 47), ('other expenses', 44), (' Other expenses', 44), (' Management expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' Advertising expenses', 42), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Lease expenses', 41), (' Administration expenses', 41), (' Occupancy expenses', 40), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Amortisation expenses', 38), (' Logistics and distribution', 38), ('Distribution expenses', 37), (' Selling Expenses', 36), (' Sales and marketing', 33), (' depreciation', 25), (' Occupancy ', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Selling & distribution expenses', 37), (' Administrative and other expenses', 34), (' Logistics and distribution', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Lease expenses', 28), (' Selling Expenses', 28), ('other expenses', 27), (' Marketing expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' depreciation', 26), (' Occupancy expenses', 24), (' Management expenses', 24), (' Amortisation expenses', 23), (' Administrative expenses', 22), (' Administration expenses', 22), (' Advertising expenses', 22), (' Occupancy ', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Amortisation expenses', 33), (' Lease expenses', 27), (' Selling Expenses', 27), (' Logistics and distribution', 25), (' Occupancy ', 22), (' Advertising expenses', 21), ('Distribution expenses', 20), (' Administrative expenses', 20), (' Administration expenses', 20), (' Selling & distribution expenses', 16), (' Administrative and other expenses', 13), ('other expenses', 12), (' Marketing expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Depreciation expenses', 11), (' Depreciation expenses', 11), (' Sales and marketing', 11), (' depreciation', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' Logistics and distribution', 60), ('Distribution expenses', 50), (' Administrative expenses', 50), (' Administration expenses', 50), (' Selling & distribution expenses', 49), (' Administrative and other expenses', 43), (' Sales and marketing', 40), (' Lease expenses', 39), (' Marketing expenses', 36), (' Advertising expenses', 34), (' Selling Expenses', 32), ('other expenses', 31), (' Occupancy expenses', 31), (' Other expenses', 31), (' Management expenses', 31), (' Other expenses', 31), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' depreciation', 22), (' Occupancy ', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Selling & distribution expenses', 55), ('Distribution expenses', 52), (' Marketing expenses', 47), (' Administrative and other expenses', 47), (' Lease expenses', 44), ('other expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Amortisation expenses', 42), (' Advertising expenses', 41), (' Logistics and distribution', 41), (' Administrative expenses', 40), (' Administration expenses', 40), (' Occupancy expenses', 39), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Selling Expenses', 36), (' Sales and marketing', 33), (' depreciation', 20), (' Occupancy ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Administrative and other expenses', 44), (' Marketing expenses', 39), (' Lease expenses', 36), (' Selling Expenses', 36), (' Management expenses', 35), (' Selling & distribution expenses', 33), (' Logistics and distribution', 33), (' Sales and marketing', 33), (' Occupancy expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Administrative expenses', 27), (' Administration expenses', 27), (' depreciation', 23), ('Distribution expenses', 23), (' Advertising expenses', 23), (' Occupancy ', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('other expenses', 40), (' Other expenses', 40), (' Other expenses', 40), (' Administrative and other expenses', 36), (' Sales and marketing', 36), (' Lease expenses', 34), (' Amortisation expenses', 31), (' Management expenses', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), (' Logistics and distribution', 26), (' Depreciation expenses', 25), (' Depreciation expenses', 25), ('Distribution expenses', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Advertising expenses', 24), (' Selling Expenses', 21), (' Occupancy expenses', 20), (' depreciation', 16), (' Occupancy ', 9)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9], 'score': 100, 'value': -9141972.0, 'line_item_label': ['Other expenses', 'Selling & distribution expenses', 'Administration expenses'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [0.0, -1686525.0, -7455447.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), ('Distribution expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Logistics and distribution', 38), (' Administrative and other expenses', 37), (' Advertising expenses', 37), (' Administrative expenses', 36), (' Selling & distribution expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Occupancy expenses', 33), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Marketing expenses', 24), (' depreciation', 21), (' Management expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 30), (' Selling Expenses', 30), (' Logistics and distribution', 28), (' Marketing expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Amortisation expenses', 26), (' Advertising expenses', 25), (' Administrative expenses', 24), (' Administration expenses', 24), (' Administrative and other expenses', 23), (' Selling & distribution expenses', 20), ('other expenses', 19), (' Other expenses', 19), (' Management expenses', 19), (' Other expenses', 19), ('Distribution expenses', 16), (' Occupancy ', 14), (' depreciation', 12), (' Occupancy expenses', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('Distribution expenses', 42), (' Selling & distribution expenses', 42), (' Logistics and distribution', 38), (' Sales and marketing', 38), (' Administrative and other expenses', 33), (' Depreciation expenses', 32), (' Depreciation expenses', 32), (' Amortisation expenses', 32), (' Administrative expenses', 30), (' Administration expenses', 30), (' Selling Expenses', 29), ('other expenses', 28), (' Occupancy expenses', 28), (' Other expenses', 28), (' Other expenses', 28), (' Marketing expenses', 27), (' depreciation', 25), (' Advertising expenses', 25), (' Lease expenses', 21), (' Occupancy ', 18), (' Management expenses', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Sales and marketing', 41), (' Amortisation expenses', 36), (' Logistics and distribution', 35), (' Administrative expenses', 33), (' Administration expenses', 33), (' Selling Expenses', 32), (' Administrative and other expenses', 30), (' Selling & distribution expenses', 29), (' Advertising expenses', 28), ('Distribution expenses', 27), (' Lease expenses', 24), ('other expenses', 23), (' Occupancy expenses', 23), (' Other expenses', 23), (' Other expenses', 23), (' Depreciation expenses', 21), (' Occupancy ', 21), (' Depreciation expenses', 21), (' Marketing expenses', 15), (' Management expenses', 15), (' depreciation', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other expenses', 61), (' Other expenses', 61), (' Other expenses', 61), (' Administrative and other expenses', 43), (' Amortisation expenses', 32), (' Sales and marketing', 31), (' Administrative expenses', 30), (' Administration expenses', 30), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' depreciation', 22), ('Distribution expenses', 22), (' Management expenses', 17), (' Occupancy ', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other expenses', 100), (' Other expenses', 100), (' Other expenses', 100), (' Lease expenses', 70), (' Selling Expenses', 70), (' Occupancy expenses', 67), (' Marketing expenses', 64), (' Administrative and other expenses', 63), (' Management expenses', 58), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 32), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Occupancy ', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Selling & distribution expenses', 100), ('Distribution expenses', 86), (' Selling Expenses', 69), (' Administrative expenses', 65), (' Administration expenses', 65), (' Administrative and other expenses', 60), (' Depreciation expenses', 57), (' Depreciation expenses', 57), (' Advertising expenses', 56), (' Logistics and distribution', 54), (' Amortisation expenses', 51), (' Lease expenses', 50), ('other expenses', 48), (' Other expenses', 48), (' Other expenses', 48), (' Marketing expenses', 47), (' Occupancy expenses', 42), (' Management expenses', 42), (' Sales and marketing', 33), (' depreciation', 29), (' Occupancy ', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administrative expenses', 100), (' Administration expenses', 100), (' Administrative and other expenses', 76), ('Distribution expenses', 75), (' Amortisation expenses', 73), (' Advertising expenses', 71), (' Selling & distribution expenses', 65), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Lease expenses', 44), (' Selling Expenses', 44), (' Logistics and distribution', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' Sales and marketing', 39), (' depreciation', 35), (' Occupancy ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Amortisation expenses', 39), (' Advertising expenses', 38), (' Sales and marketing', 38), (' Administrative expenses', 37), (' Selling & distribution expenses', 37), (' Administration expenses', 37), (' Marketing expenses', 34), (' Depreciation expenses', 33), (' Administrative and other expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Lease expenses', 30), (' Selling Expenses', 30), ('other expenses', 24), (' Occupancy expenses', 24), (' Other expenses', 24), (' Other expenses', 24), (' depreciation', 21), (' Management expenses', 18), (' Occupancy ', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administrative and other expenses', 37), (' Logistics and distribution', 31), (' Sales and marketing', 30), (' Administrative expenses', 29), (' Administration expenses', 29), ('other expenses', 25), (' Occupancy expenses', 25), (' Other expenses', 25), (' Management expenses', 25), (' Other expenses', 25), (' Marketing expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Amortisation expenses', 23), (' Advertising expenses', 22), (' depreciation', 21), ('Distribution expenses', 21), (' Selling & distribution expenses', 18), (' Lease expenses', 17), (' Selling Expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Administrative and other expenses', 39), (' Marketing expenses', 36), (' Amortisation expenses', 34), (' Selling & distribution expenses', 33), (' Sales and marketing', 33), ('Distribution expenses', 32), (' Management expenses', 30), (' Logistics and distribution', 29), (' Depreciation expenses', 28), (' Depreciation expenses', 28), (' Advertising expenses', 27), (' Administrative expenses', 26), (' Administration expenses', 26), (' Lease expenses', 23), (' Selling Expenses', 23), ('other expenses', 22), (' Occupancy expenses', 22), (' Other expenses', 22), (' Other expenses', 22), (' Occupancy ', 20), (' depreciation', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('other expenses', 44), (' Other expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' Lease expenses', 38), (' Selling Expenses', 38), (' Occupancy expenses', 37), (' Management expenses', 37), (' depreciation', 36), (' Depreciation expenses', 34), (' Depreciation expenses', 34), (' Amortisation expenses', 34), (' Logistics and distribution', 34), (' Sales and marketing', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Administrative and other expenses', 29), (' Selling & distribution expenses', 28), (' Advertising expenses', 27), ('Distribution expenses', 26), (' Occupancy ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Administrative expenses', 40), (' Lease expenses', 40), (' Administration expenses', 40), (' Amortisation expenses', 35), (' Advertising expenses', 33), (' Sales and marketing', 33), (' Selling Expenses', 30), ('other expenses', 29), (' Occupancy expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Other expenses', 29), (' Selling & distribution expenses', 27), (' Depreciation expenses', 26), (' Depreciation expenses', 26), ('Distribution expenses', 24), (' Management expenses', 19), (' Marketing expenses', 18), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Logistics and distribution', 41), (' Sales and marketing', 41), (' Marketing expenses', 38), (' Administrative and other expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 34), (' Other expenses', 34), (' Management expenses', 34), (' Other expenses', 34), (' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 31), (' Administration expenses', 31), (' Occupancy expenses', 29), (' Selling & distribution expenses', 28), (' Advertising expenses', 27), (' depreciation', 22), ('Distribution expenses', 22), (' Occupancy ', 6)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Depreciation expenses', 33), (' Depreciation expenses', 33), (' Logistics and distribution', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), (' Sales and marketing', 32), ('other expenses', 29), (' Marketing expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Other expenses', 29), (' depreciation', 28), (' Selling & distribution expenses', 28), (' Amortisation expenses', 28), (' Advertising expenses', 27), (' Occupancy expenses', 24), (' Lease expenses', 24), (' Management expenses', 24), (' Occupancy ', 22), (' Selling Expenses', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Administrative and other expenses', 47), ('other expenses', 44), (' Other expenses', 44), (' Management expenses', 44), (' Other expenses', 44), (' Marketing expenses', 43), (' Advertising expenses', 42), (' Administrative expenses', 41), (' Selling & distribution expenses', 41), (' Lease expenses', 41), (' Administration expenses', 41), (' Occupancy expenses', 40), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Amortisation expenses', 38), (' Logistics and distribution', 38), ('Distribution expenses', 37), (' Selling Expenses', 36), (' Sales and marketing', 33), (' depreciation', 25), (' Occupancy ', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Selling & distribution expenses', 37), (' Administrative and other expenses', 34), (' Logistics and distribution', 34), (' Depreciation expenses', 30), (' Depreciation expenses', 30), (' Sales and marketing', 30), ('Distribution expenses', 29), (' Lease expenses', 28), (' Selling Expenses', 28), ('other expenses', 27), (' Marketing expenses', 27), (' Other expenses', 27), (' Other expenses', 27), (' depreciation', 26), (' Occupancy expenses', 24), (' Management expenses', 24), (' Amortisation expenses', 23), (' Administrative expenses', 22), (' Administration expenses', 22), (' Advertising expenses', 22), (' Occupancy ', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Amortisation expenses', 33), (' Lease expenses', 27), (' Selling Expenses', 27), (' Logistics and distribution', 25), (' Occupancy ', 22), (' Advertising expenses', 21), ('Distribution expenses', 20), (' Administrative expenses', 20), (' Administration expenses', 20), (' Selling & distribution expenses', 16), (' Administrative and other expenses', 13), ('other expenses', 12), (' Marketing expenses', 12), (' Occupancy expenses', 12), (' Other expenses', 12), (' Management expenses', 12), (' Other expenses', 12), (' Depreciation expenses', 11), (' Depreciation expenses', 11), (' Sales and marketing', 11), (' depreciation', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' Logistics and distribution', 60), ('Distribution expenses', 50), (' Administrative expenses', 50), (' Administration expenses', 50), (' Selling & distribution expenses', 49), (' Administrative and other expenses', 43), (' Sales and marketing', 40), (' Lease expenses', 39), (' Marketing expenses', 36), (' Advertising expenses', 34), (' Selling Expenses', 32), ('other expenses', 31), (' Occupancy expenses', 31), (' Other expenses', 31), (' Management expenses', 31), (' Other expenses', 31), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' depreciation', 22), (' Occupancy ', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Selling & distribution expenses', 55), ('Distribution expenses', 52), (' Marketing expenses', 47), (' Administrative and other expenses', 47), (' Lease expenses', 44), ('other expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Amortisation expenses', 42), (' Advertising expenses', 41), (' Logistics and distribution', 41), (' Administrative expenses', 40), (' Administration expenses', 40), (' Occupancy expenses', 39), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Selling Expenses', 36), (' Sales and marketing', 33), (' depreciation', 20), (' Occupancy ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other expenses', 50), (' Other expenses', 50), (' Other expenses', 50), (' Administrative and other expenses', 44), (' Marketing expenses', 39), (' Lease expenses', 36), (' Selling Expenses', 36), (' Management expenses', 35), (' Selling & distribution expenses', 33), (' Logistics and distribution', 33), (' Sales and marketing', 33), (' Occupancy expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Administrative expenses', 27), (' Administration expenses', 27), (' depreciation', 23), ('Distribution expenses', 23), (' Advertising expenses', 23), (' Occupancy ', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('other expenses', 40), (' Other expenses', 40), (' Other expenses', 40), (' Administrative and other expenses', 36), (' Sales and marketing', 36), (' Lease expenses', 34), (' Amortisation expenses', 31), (' Management expenses', 27), (' Marketing expenses', 26), (' Selling & distribution expenses', 26), (' Logistics and distribution', 26), (' Depreciation expenses', 25), (' Depreciation expenses', 25), ('Distribution expenses', 24), (' Administrative expenses', 24), (' Administration expenses', 24), (' Advertising expenses', 24), (' Selling Expenses', 21), (' Occupancy expenses', 20), (' depreciation', 16), (' Occupancy ', 9)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [7, 8, 9], 'score': 100, 'value': -12948940.0, 'line_item_label': ['Other expenses', 'Selling & distribution expenses', 'Administration expenses'], 'note_numbers': [nan, nan, '5'], 'line_item_value': [0.0, -3717145.0, -9231795.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), (' Occupancy expenses', 33), ('Rent', 25), (' Rental expenses', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 24), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 28), ('Rent', 19), (' Occupancy', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Administration expenses', 33), (' Occupancy expenses', 23), (' Rental expenses', 22), (' Occupancy', 21), ('Rent', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Administration expenses', 65), (' Rental expenses', 53), (' Occupancy expenses', 42), ('Rent', 24), (' Occupancy', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses', 37), (' Rental expenses', 34), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Rental expenses', 29), (' Administration expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' Rental expenses', 50), (' Occupancy expenses', 37), ('Rent', 32), (' Administration expenses', 32), (' Occupancy', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Administration expenses', 40), (' Occupancy expenses', 29), (' Rental expenses', 27), ('Rent', 15), (' Occupancy', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Rental expenses', 43), (' Administration expenses', 31), (' Occupancy expenses', 29), ('Rent', 24), (' Occupancy', 6)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Rental expenses', 43), (' Administration expenses', 41), (' Occupancy expenses', 40), ('Rent', 22), (' Occupancy', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Rental expenses', 31), (' Occupancy expenses', 24), (' Administration expenses', 22), ('Rent', 14), (' Occupancy', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Occupancy', 22), (' Administration expenses', 20), (' Rental expenses', 12), (' Occupancy expenses', 12), ('Rent', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' Administration expenses', 50), (' Rental expenses', 48), ('Rent', 33), (' Occupancy expenses', 31), (' Occupancy', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Rental expenses', 47), (' Administration expenses', 40), (' Occupancy expenses', 39), ('Rent', 21), (' Occupancy', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Rental expenses', 44), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 25), (' Occupancy', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 27), (' Administration expenses', 24), (' Occupancy expenses', 20), (' Occupancy', 9)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -7455447.0, 'line_item_label': ['Administration expenses'], 'note_numbers': ['5'], 'line_item_value': [-7455447.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), (' Occupancy expenses', 33), ('Rent', 25), (' Rental expenses', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Rental expenses', 27), (' Administration expenses', 24), ('Rent', 15), (' Occupancy', 14), (' Occupancy expenses', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 28), ('Rent', 19), (' Occupancy', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Administration expenses', 33), (' Occupancy expenses', 23), (' Rental expenses', 22), (' Occupancy', 21), ('Rent', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Administration expenses', 30), ('Rent', 27), (' Occupancy expenses', 26), (' Rental expenses', 25), (' Occupancy', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 64), (' Administration expenses', 43), ('Rent', 38), (' Occupancy', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Administration expenses', 65), (' Rental expenses', 53), (' Occupancy expenses', 42), ('Rent', 24), (' Occupancy', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Administration expenses', 100), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Administration expenses', 37), (' Rental expenses', 34), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Administration expenses', 29), (' Occupancy expenses', 25), (' Rental expenses', 24), (' Occupancy', 24), ('Rent', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Rental expenses', 29), (' Administration expenses', 26), (' Occupancy expenses', 22), ('Rent', 21), (' Occupancy', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' Rental expenses', 50), (' Occupancy expenses', 37), ('Rent', 32), (' Administration expenses', 32), (' Occupancy', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Administration expenses', 40), (' Occupancy expenses', 29), (' Rental expenses', 27), ('Rent', 15), (' Occupancy', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Rental expenses', 43), (' Administration expenses', 31), (' Occupancy expenses', 29), ('Rent', 24), (' Occupancy', 6)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 32), (' Occupancy expenses', 24), ('Rent', 23), (' Occupancy', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Rental expenses', 43), (' Administration expenses', 41), (' Occupancy expenses', 40), ('Rent', 22), (' Occupancy', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Rental expenses', 31), (' Occupancy expenses', 24), (' Administration expenses', 22), ('Rent', 14), (' Occupancy', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Occupancy', 22), (' Administration expenses', 20), (' Rental expenses', 12), (' Occupancy expenses', 12), ('Rent', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' Administration expenses', 50), (' Rental expenses', 48), ('Rent', 33), (' Occupancy expenses', 31), (' Occupancy', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Rental expenses', 47), (' Administration expenses', 40), (' Occupancy expenses', 39), ('Rent', 21), (' Occupancy', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Rental expenses', 44), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 25), (' Occupancy', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 27), (' Administration expenses', 24), (' Occupancy expenses', 20), (' Occupancy', 9)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': -9231795.0, 'line_item_label': ['Administration expenses'], 'note_numbers': ['5'], 'line_item_value': [-9231795.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 45), ('Other revenue', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Other income', 40), ('other operating', 32), ('Other revenue', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 34)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Other income', 40), ('other operating', 33), ('Other revenue', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('Other revenue', 36), ('other operating', 26), (' Other income', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('Other revenue', 37), ('other operating', 32), (' Other income', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Other income', 40), ('other operating', 21), ('Other revenue', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Other income', 36), ('Other revenue', 31), ('other operating', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('Other revenue', 31), (' Other income', 24), ('other operating', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('other operating', 14), (' Other income', 13), ('Other revenue', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('Other revenue', 38), (' Other income', 32), ('other operating', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Other income', 36), ('Other revenue', 30), ('other operating', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Other income', 56), ('other operating', 47), ('Other revenue', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('other operating', 50), (' Other income', 41), ('Other revenue', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': 143754.0, 'line_item_label': ['Other income'], 'note_numbers': [nan], 'line_item_value': [143754.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 45), ('Other revenue', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Other income', 40), ('other operating', 32), ('Other revenue', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('other operating', 37), (' Other income', 36), ('Other revenue', 34)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Other income', 40), ('other operating', 33), ('Other revenue', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' Other income', 100), ('other operating', 67), ('Other revenue', 43)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other operating', 73), (' Other income', 61), ('Other revenue', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('Other revenue', 36), ('other operating', 26), (' Other income', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('Other revenue', 43), (' Other income', 30), ('other operating', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' Other income', 42), ('Other revenue', 41), ('other operating', 38)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' Other income', 43), ('other operating', 18), ('Other revenue', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Other income', 38), ('Other revenue', 30), ('other operating', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('Other revenue', 37), ('other operating', 32), (' Other income', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' Other income', 40), ('other operating', 21), ('Other revenue', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('other operating', 26), (' Other income', 25), ('Other revenue', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' Other income', 48), ('other operating', 31), ('Other revenue', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Other income', 36), ('Other revenue', 31), ('other operating', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('Other revenue', 31), (' Other income', 24), ('other operating', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('other operating', 14), (' Other income', 13), ('Other revenue', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('Other revenue', 38), (' Other income', 32), ('other operating', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Other income', 36), ('Other revenue', 30), ('other operating', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' Other income', 56), ('other operating', 47), ('Other revenue', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('other operating', 50), (' Other income', 41), ('Other revenue', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [6], 'score': 100, 'value': 152362.0, 'line_item_label': ['Other income'], 'note_numbers': [nan], 'line_item_value': [152362.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Net finance costs', 42), ('other income', 40), (' Finance income and costs', 27), (' Finance income and finance costs', 27), ('finance income', 19), ('Finance income', 19), (' Interest revenue', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 42), ('other income', 36), (' Finance income and finance costs', 36), (' Interest revenue', 31), ('finance income', 28), ('Finance income', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Finance income and costs', 46), ('other income', 40), (' Finance income and finance costs', 38), (' Net finance costs', 34), ('finance income', 31), ('Finance income', 31), (' Interest revenue', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 33), (' Finance income and costs', 29), (' Finance income and finance costs', 29), ('other income', 25), ('finance income', 18), ('Finance income', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('finance income', 37), ('Finance income', 37), (' Finance income and costs', 33), (' Interest revenue', 33), (' Finance income and finance costs', 33), (' Net finance costs', 33), ('other income', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('other income', 40), ('finance income', 38), ('Finance income', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 27), (' Interest revenue', 25), (' Net finance costs', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Net finance costs', 50), (' Finance income and costs', 40), (' Finance income and finance costs', 39), ('finance income', 34), ('Finance income', 34), (' Interest revenue', 27), ('other income', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Net finance costs', 38), (' Finance income and finance costs', 36), (' Finance income and costs', 33), (' Interest revenue', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Net finance costs', 38), (' Finance income and costs', 37), ('other income', 36), ('finance income', 36), ('Finance income', 36), (' Finance income and finance costs', 36), (' Interest revenue', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Interest revenue', 37), (' Net finance costs', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), ('other income', 24), ('finance income', 20), ('Finance income', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Net finance costs', 21), (' Finance income and costs', 16), ('other income', 13), ('finance income', 12), ('Finance income', 12), (' Finance income and finance costs', 12), (' Interest revenue', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' Interest revenue', 40), (' Finance income and costs', 34), ('other income', 32), ('finance income', 31), ('Finance income', 31), (' Finance income and finance costs', 29), (' Net finance costs', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Interest revenue', 41), ('other income', 36), (' Finance income and costs', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 35), (' Net finance costs', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other income', 56), (' Net finance costs', 47), (' Finance income and costs', 37), (' Finance income and finance costs', 36), ('finance income', 35), ('Finance income', 35), (' Interest revenue', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('other income', 41), (' Net finance costs', 36), (' Interest revenue', 30), (' Finance income and costs', 26), (' Finance income and finance costs', 26), ('finance income', 20), ('Finance income', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 11, 12, 13], 'score': 100, 'value': -5949157.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '6', nan], 'line_item_value': [143754.0, 25598.0, -3072053.0, -3046456.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' Net finance costs', 42), ('other income', 40), (' Finance income and costs', 27), (' Finance income and finance costs', 27), ('finance income', 19), ('Finance income', 19), (' Interest revenue', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' Net finance costs', 44), (' Finance income and costs', 42), ('other income', 36), (' Finance income and finance costs', 36), (' Interest revenue', 31), ('finance income', 28), ('Finance income', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' Finance income and costs', 46), ('other income', 40), (' Finance income and finance costs', 38), (' Net finance costs', 34), ('finance income', 31), ('Finance income', 31), (' Interest revenue', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('other income', 100), ('finance income', 43), ('Finance income', 43), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 31), (' Finance income and finance costs', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('other income', 61), (' Interest revenue', 37), ('finance income', 25), ('Finance income', 25), (' Finance income and costs', 24), (' Net finance costs', 22), (' Finance income and finance costs', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' Interest revenue', 44), (' Net finance costs', 33), (' Finance income and costs', 29), (' Finance income and finance costs', 29), ('other income', 25), ('finance income', 18), ('Finance income', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Finance income and finance costs', 32), ('other income', 30), ('finance income', 29), ('Finance income', 29), (' Net finance costs', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('other income', 42), (' Interest revenue', 38), (' Net finance costs', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 32), ('finance income', 29), ('Finance income', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('finance income', 100), ('Finance income', 100), (' Finance income and costs', 73), (' Finance income and finance costs', 60), (' Net finance costs', 59), ('other income', 43), (' Interest revenue', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' Net finance costs', 100), (' Finance income and costs', 72), (' Finance income and finance costs', 60), ('finance income', 59), ('Finance income', 59), ('other income', 38), (' Interest revenue', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('finance income', 37), ('Finance income', 37), (' Finance income and costs', 33), (' Interest revenue', 33), (' Finance income and finance costs', 33), (' Net finance costs', 33), ('other income', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('other income', 40), ('finance income', 38), ('Finance income', 38), (' Finance income and costs', 33), (' Finance income and finance costs', 27), (' Interest revenue', 25), (' Net finance costs', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' Net finance costs', 50), (' Finance income and costs', 40), (' Finance income and finance costs', 39), ('finance income', 34), ('Finance income', 34), (' Interest revenue', 27), ('other income', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('other income', 48), ('finance income', 41), ('Finance income', 41), (' Net finance costs', 38), (' Finance income and finance costs', 36), (' Finance income and costs', 33), (' Interest revenue', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' Net finance costs', 38), (' Finance income and costs', 37), ('other income', 36), ('finance income', 36), ('Finance income', 36), (' Finance income and finance costs', 36), (' Interest revenue', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' Interest revenue', 37), (' Net finance costs', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), ('other income', 24), ('finance income', 20), ('Finance income', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' Net finance costs', 21), (' Finance income and costs', 16), ('other income', 13), ('finance income', 12), ('Finance income', 12), (' Finance income and finance costs', 12), (' Interest revenue', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' Interest revenue', 40), (' Finance income and costs', 34), ('other income', 32), ('finance income', 31), ('Finance income', 31), (' Finance income and finance costs', 29), (' Net finance costs', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' Interest revenue', 41), ('other income', 36), (' Finance income and costs', 36), ('finance income', 35), ('Finance income', 35), (' Finance income and finance costs', 35), (' Net finance costs', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('other income', 56), (' Net finance costs', 47), (' Finance income and costs', 37), (' Finance income and finance costs', 36), ('finance income', 35), ('Finance income', 35), (' Interest revenue', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('other income', 41), (' Net finance costs', 36), (' Interest revenue', 30), (' Finance income and costs', 26), (' Finance income and finance costs', 26), ('finance income', 20), ('Finance income', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 11, 12, 13], 'score': 100, 'value': -4789408.0, 'line_item_label': ['Other income', 'Finance income', 'Finance costs', 'Net finance costs'], 'note_numbers': [nan, nan, '6', nan], 'line_item_value': [152362.0, 478743.0, -2949628.0, -2470885.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Interest received - Loan', 55), ('Bank interest', 54), (' Share of JV interest received/(paid)', 50), (' Bank Deposits - cash and cash equivalents', 47), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), (' Sublease interest income', 41)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('interest', 100), ('Bank interest', 85), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Sublease interest income', 56), (' Interest received - Loan', 55), (' Share of JV interest received/(paid)', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Bank Deposits - cash and cash equivalents', 47)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), ('Bank interest', 69), (' Interest received - Bank', 65), (' Interest received - Loan', 60), (' Sublease interest income', 55), (' Share of JV interest received/(paid)', 54), (' Bank Deposits - cash and cash equivalents', 47), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 46)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Interest received - Loan', 55), ('Bank interest', 54), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 53), (' Share of JV interest received/(paid)', 46), (' Sublease interest income', 45), (' Bank Deposits - cash and cash equivalents', 38)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Interest received - Loan', 55), ('Bank interest', 54), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Bank Deposits - cash and cash equivalents', 48), (' Share of JV interest received/(paid)', 46), (' Sublease interest income', 45)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Interest received - Loan', 55), ('Bank interest', 54), (' Share of JV interest received/(paid)', 50), (' Bank Deposits - cash and cash equivalents', 47), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 42), (' Sublease interest income', 41)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('interest', 100), ('Bank interest', 85), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Sublease interest income', 56), (' Interest received - Loan', 55), (' Share of JV interest received/(paid)', 50), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Bank Deposits - cash and cash equivalents', 47)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), ('Bank interest', 69), (' Interest received - Bank', 65), (' Interest received - Loan', 60), (' Sublease interest income', 55), (' Share of JV interest received/(paid)', 54), (' Bank Deposits - cash and cash equivalents', 47), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 46)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Interest received - Loan', 55), ('Bank interest', 54), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 53), (' Share of JV interest received/(paid)', 46), (' Sublease interest income', 45), (' Bank Deposits - cash and cash equivalents', 38)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('interest', 100), (' Interest income', 71), (' Interest income', 71), (' Interest received - Bank', 65), (' Interest received - Loan', 55), ('Bank interest', 54), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 50), (' Bank Deposits - cash and cash equivalents', 48), (' Share of JV interest received/(paid)', 46), (' Sublease interest income', 45)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('interest', 0), ('Bank interest', 0), (' Interest income', 0), (' Interest received - Bank', 0), (' Interest received - Loan', 0), (' Sublease interest income', 0), (' Share of JV interest received/(paid)', 0), (' Bank Deposits - cash and cash equivalents', 0), (' Finance income under the effective interest method on financial assets not measured at FVTPL', 0), (' Interest income', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2211657.0, 197276.0, 540695.0, 2949628.0, 2022.0, 2601186.0, 102990.0, 367877.0, 3072053.0, 2021.0], 'label': ['Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation', 'Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' net finance costs ', 50), (' finance expenses', 43), ('finance cost', 35), ('finance costs', 35)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 38), ('finance cost', 32), ('finance costs', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 30), (' finance expenses', 27), ('finance cost', 24), ('finance costs', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' finance expenses', 30), (' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 33), ('finance cost', 22), ('finance costs', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 39), ('finance cost', 36), ('finance costs', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 28), ('finance costs', 28), (' finance expenses', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -6118509.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-3072053.0, -3046456.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' net finance costs ', 50), (' finance expenses', 43), ('finance cost', 35), ('finance costs', 35)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 38), ('finance cost', 32), ('finance costs', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 30), (' finance expenses', 27), ('finance cost', 24), ('finance costs', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' finance expenses', 30), (' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 33), ('finance cost', 22), ('finance costs', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 39), ('finance cost', 36), ('finance costs', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 28), ('finance costs', 28), (' finance expenses', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -5420513.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-2949628.0, -2470885.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 63), (' Interest accrued on lease liabilities', 58), ('bank facilities', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 50), ('  Other interest expense', 48), (' Discount unwind on the provision for asset retirement obligation', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Lease liabilities interest expense', 41), (' Lease interest expense', 40), ('debenture', 38), ('cash credit', 36), ('borrowings', 33), ('debt', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on leases', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 83), (' Lease interest expense', 74), ('Interest expenses', 73), (' Interest income', 71), ('  Other interest expense', 65), (' Interest accrued on loans', 63), (' Lease liabilities interest expense', 62), (' Interest accrued on lease liabilities', 58), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 54), ('bank facilities', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 50), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 37), ('cash credit', 36), ('borrowings', 33), ('debt', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('loan', 100), ('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 85), (' Interest on bank overdrafts and loans (other than those from related parties)', 80), (' Interest on leases', 77), (' Interest income', 71), (' Lease liabilities interest expense', 70), (' Interest accrued on loans', 63), (' Interest accrued on lease liabilities', 58), (' Interest expense on financial liabilities using the effective interest rate method - other', 56), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 52), ('bank facilities', 50), ('bonds', 50), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 38), ('cash credit', 36), ('borrowings', 33), ('debt', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 63), (' Interest accrued on lease liabilities', 58), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 53), ('bank facilities', 50), ('bonds', 50), ('  Other interest expense', 43), (' Discount unwind on the provision for asset retirement obligation', 41), (' Lease interest expense', 40), ('debenture', 38), (' Lease liabilities interest expense', 37), ('cash credit', 36), ('borrowings', 33), ('debt', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 89), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 63), (' Interest accrued on lease liabilities', 58), ('bank facilities', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 47), ('  Other interest expense', 43), (' Lease interest expense', 40), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 37), (' Lease liabilities interest expense', 37), ('cash credit', 36), ('borrowings', 33), ('debt', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 63), (' Interest accrued on lease liabilities', 58), ('bank facilities', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 50), ('  Other interest expense', 48), (' Discount unwind on the provision for asset retirement obligation', 46), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 45), (' Lease liabilities interest expense', 41), (' Lease interest expense', 40), ('debenture', 38), ('cash credit', 36), ('borrowings', 33), ('debt', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on leases', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 83), (' Lease interest expense', 74), ('Interest expenses', 73), (' Interest income', 71), ('  Other interest expense', 65), (' Interest accrued on loans', 63), (' Lease liabilities interest expense', 62), (' Interest accrued on lease liabilities', 58), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 54), ('bank facilities', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 50), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 37), ('cash credit', 36), ('borrowings', 33), ('debt', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [('loan', 100), ('interest', 100), ('Interest expenses', 100), ('  Other interest expense', 100), (' Lease interest expense', 85), (' Interest on bank overdrafts and loans (other than those from related parties)', 80), (' Interest on leases', 77), (' Interest income', 71), (' Lease liabilities interest expense', 70), (' Interest accrued on loans', 63), (' Interest accrued on lease liabilities', 58), (' Interest expense on financial liabilities using the effective interest rate method - other', 56), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 52), ('bank facilities', 50), ('bonds', 50), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 38), ('cash credit', 36), ('borrowings', 33), ('debt', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 100), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 63), (' Interest accrued on lease liabilities', 58), (' Interest expense on financial liabilities using the effective interest rate method - other', 53), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 53), ('bank facilities', 50), ('bonds', 50), ('  Other interest expense', 43), (' Discount unwind on the provision for asset retirement obligation', 41), (' Lease interest expense', 40), ('debenture', 38), (' Lease liabilities interest expense', 37), ('cash credit', 36), ('borrowings', 33), ('debt', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [('loan', 100), ('interest', 100), (' Interest on bank overdrafts and loans (other than those from related parties)', 89), (' Interest on leases', 77), (' Interest income', 71), ('Interest expenses', 67), (' Interest accrued on loans', 63), (' Interest accrued on lease liabilities', 58), ('bank facilities', 50), ('bonds', 50), (' Interest expense on financial liabilities using the effective interest rate method - other', 50), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 47), ('  Other interest expense', 43), (' Lease interest expense', 40), ('debenture', 38), (' Discount unwind on the provision for asset retirement obligation', 37), (' Lease liabilities interest expense', 37), ('cash credit', 36), ('borrowings', 33), ('debt', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('loan', 0), ('debt', 0), ('debenture', 0), ('cash credit', 0), ('borrowings', 0), ('bank facilities', 0), ('bonds', 0), ('interest', 0), ('Interest expenses', 0), (' Discount unwind on the provision for asset retirement obligation', 0), ('  Other interest expense', 0), (' Interest on leases', 0), (' Interest on bank overdrafts and loans (other than those from related parties)', 0), (' Interest accrued on loans', 0), (' Interest accrued on lease liabilities', 0), (' Lease interest expense', 0), (' Interest expense on financial liabilities using the effective interest rate method - other', 0), (' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', 0), (' Interest income', 0), (' Lease liabilities interest expense', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 'score': [100, 100, 100, 100, 100, 100, 100, 100, 100, 100], 'value': [2211657.0, 197276.0, 540695.0, 2949628.0, 2022.0, 2601186.0, 102990.0, 367877.0, 3072053.0, 2021.0], 'label': ['Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation', 'Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Interest on leases', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans ', 'Interest on bank overdrafts and loans Taxation'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' net finance costs ', 50), (' finance expenses', 43), ('finance cost', 35), ('finance costs', 35)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 38), ('finance cost', 32), ('finance costs', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 30), (' finance expenses', 27), ('finance cost', 24), ('finance costs', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' finance expenses', 30), (' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 33), ('finance cost', 22), ('finance costs', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 39), ('finance cost', 36), ('finance costs', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 28), ('finance costs', 28), (' finance expenses', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -6118509.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-3072053.0, -3046456.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' net finance costs ', 42), ('finance cost', 40), ('finance costs', 40), (' finance expenses', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('finance cost', 40), ('finance costs', 40), (' net finance costs ', 34), (' finance expenses', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 27), ('finance costs', 27), (' finance expenses', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' finance expenses', 56), (' net finance costs ', 22), ('finance cost', 17), ('finance costs', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' finance expenses', 41), ('finance cost', 30), ('finance costs', 30), (' net finance costs ', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 24), ('finance costs', 24), (' finance expenses', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' net finance costs ', 59), ('finance cost', 52), ('finance costs', 52), (' finance expenses', 48)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' net finance costs ', 100), ('finance cost', 85), ('finance costs', 85), (' finance expenses', 57)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' finance expenses', 50), ('finance cost', 38), ('finance costs', 38), (' net finance costs ', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' net finance costs ', 25), ('finance cost', 20), ('finance costs', 20), (' finance expenses', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [(' net finance costs ', 50), (' finance expenses', 43), ('finance cost', 35), ('finance costs', 35)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' net finance costs ', 38), ('finance cost', 36), ('finance costs', 36), (' finance expenses', 34)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 38), ('finance cost', 32), ('finance costs', 32)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [(' net finance costs ', 30), (' finance expenses', 27), ('finance cost', 24), ('finance costs', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('finance cost', 27), ('finance costs', 27), (' net finance costs ', 21), (' finance expenses', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [(' finance expenses', 30), (' net finance costs ', 29), ('finance cost', 26), ('finance costs', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' finance expenses', 43), (' net finance costs ', 33), ('finance cost', 22), ('finance costs', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' net finance costs ', 47), (' finance expenses', 39), ('finance cost', 36), ('finance costs', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [(' net finance costs ', 36), ('finance cost', 28), ('finance costs', 28), (' finance expenses', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [12, 13], 'score': 100, 'value': -5420513.0, 'line_item_label': ['Finance costs', 'Net finance costs'], 'note_numbers': ['6', nan], 'line_item_value': [-2949628.0, -2470885.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [(' other', 100), (' other income', 64), ('other revenue', 58), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 56), (' japan recoveries', 50), (' net other foreign exchange (losses)/gains', 49), (' secondment income (tw recovery)', 48), (' net foreign exchange gains/(losses)', 48), (' other miscellaneous - net (loss)/gain', 48), (' net foreign exchange gain', 46), (' share of jv income', 45), (' net foreign exchange (loss)/gain', 45), (' profit from discontinued operation', 44), (' quota lease income', 44), (' effective portion of changes in fair value of cash flow', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' foreign exchange gain', 40), (' margin charge income', 39), (' commission revenue', 36), (' insurance proceeds', 36), (' sundry income', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [(' other', 60), ('  government grants', 58), (' net of tax', 57), (' japan recoveries', 50), (' quota lease income', 50), (' net other foreign exchange (losses)/gains', 49), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange gain', 46), (' other income', 45), (' net foreign exchange (loss)/gain', 45), (' other miscellaneous - net (loss)/gain', 45), ('other revenue', 42), (' effective portion of changes in fair value of cash flow', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' margin charge income', 39), (' secondment income (tw recovery)', 38), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' share of jv income', 36), (' sundry income', 33), (' commission revenue', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [(' other', 100), (' other income', 73), ('other revenue', 67), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 52), (' japan recoveries', 50), (' net foreign exchange gains/(losses)', 48), (' net other foreign exchange (losses)/gains', 46), (' share of jv income', 45), (' net foreign exchange (loss)/gain', 45), (' other miscellaneous - net (loss)/gain', 45), (' margin charge income', 44), (' quota lease income', 44), (' secondment income (tw recovery)', 43), (' net foreign exchange gain', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' effective portion of changes in fair value of cash flow', 38), (' paid by customers - at amortised cost', 38), (' commission revenue', 36), (' insurance proceeds', 36), (' sundry income', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [(' other', 60), (' net of tax', 57), ('  government grants', 50), (' japan recoveries', 50), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 46), (' other income', 45), (' other miscellaneous - net (loss)/gain', 45), (' net other foreign exchange (losses)/gains', 44), (' net foreign exchange gain', 43), ('other revenue', 42), (' net ppe disposal (loss)/gain', 42), (' effective portion of changes in fair value of cash flow', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' foreign exchange gain', 40), (' secondment income (tw recovery)', 38), (' paid by customers - at amortised cost', 38), (' quota lease income', 38), (' insurance proceeds', 36), (' dividend from other parties', 36), (' share of jv income', 36), (' profit from discontinued operation', 33), (' sundry income', 33), (' commission revenue', 29), (' margin charge income', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('  government grants', 58), (' japan recoveries', 50), (' net foreign exchange gains/(losses)', 48), (' net other foreign exchange (losses)/gains', 46), (' other income', 45), (' net foreign exchange (loss)/gain', 45), (' other miscellaneous - net (loss)/gain', 45), ('other revenue', 42), (' net foreign exchange gain', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' effective portion of changes in fair value of cash flow', 39), (' secondment income (tw recovery)', 38), (' paid by customers - at amortised cost', 38), (' quota lease income', 38), (' insurance proceeds', 36), (' share of jv income', 36), (' profit from discontinued operation', 33), (' sundry income', 33), (' commission revenue', 29), (' margin charge income', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans (other than those from related parties) , res_fuzz_match = [(' other', 100), (' other income', 64), ('other revenue', 58), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 56), (' japan recoveries', 50), (' net other foreign exchange (losses)/gains', 49), (' secondment income (tw recovery)', 48), (' net foreign exchange gains/(losses)', 48), (' other miscellaneous - net (loss)/gain', 48), (' net foreign exchange gain', 46), (' share of jv income', 45), (' net foreign exchange (loss)/gain', 45), (' profit from discontinued operation', 44), (' quota lease income', 44), (' effective portion of changes in fair value of cash flow', 42), (' paid by customers - at amortised cost', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' foreign exchange gain', 40), (' margin charge income', 39), (' commission revenue', 36), (' insurance proceeds', 36), (' sundry income', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans interest on leases , res_fuzz_match = [(' other', 60), ('  government grants', 58), (' net of tax', 57), (' japan recoveries', 50), (' quota lease income', 50), (' net other foreign exchange (losses)/gains', 49), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange gain', 46), (' other income', 45), (' net foreign exchange (loss)/gain', 45), (' other miscellaneous - net (loss)/gain', 45), ('other revenue', 42), (' effective portion of changes in fair value of cash flow', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' margin charge income', 39), (' secondment income (tw recovery)', 38), (' paid by customers - at amortised cost', 38), (' insurance proceeds', 36), (' share of jv income', 36), (' sundry income', 33), (' commission revenue', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans other interest expense , res_fuzz_match = [(' other', 100), (' other income', 73), ('other revenue', 67), ('  government grants', 58), (' net of tax', 57), (' dividend from other parties', 52), (' japan recoveries', 50), (' net foreign exchange gains/(losses)', 48), (' net other foreign exchange (losses)/gains', 46), (' share of jv income', 45), (' net foreign exchange (loss)/gain', 45), (' other miscellaneous - net (loss)/gain', 45), (' margin charge income', 44), (' quota lease income', 44), (' secondment income (tw recovery)', 43), (' net foreign exchange gain', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' profit from discontinued operation', 41), (' foreign exchange gain', 40), (' effective portion of changes in fair value of cash flow', 38), (' paid by customers - at amortised cost', 38), (' commission revenue', 36), (' insurance proceeds', 36), (' sundry income', 33)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans , res_fuzz_match = [(' other', 60), (' net of tax', 57), ('  government grants', 50), (' japan recoveries', 50), (' net foreign exchange gains/(losses)', 48), (' net foreign exchange (loss)/gain', 46), (' other income', 45), (' other miscellaneous - net (loss)/gain', 45), (' net other foreign exchange (losses)/gains', 44), (' net foreign exchange gain', 43), ('other revenue', 42), (' net ppe disposal (loss)/gain', 42), (' effective portion of changes in fair value of cash flow', 41), (' net (loss)/profit on disposal of non-current assets', 41), (' foreign exchange gain', 40), (' secondment income (tw recovery)', 38), (' paid by customers - at amortised cost', 38), (' quota lease income', 38), (' insurance proceeds', 36), (' dividend from other parties', 36), (' share of jv income', 36), (' profit from discontinued operation', 33), (' sundry income', 33), (' commission revenue', 29), (' margin charge income', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows = interest on bank overdrafts and loans taxation , res_fuzz_match = [(' net of tax', 71), (' other', 60), ('  government grants', 58), (' japan recoveries', 50), (' net foreign exchange gains/(losses)', 48), (' net other foreign exchange (losses)/gains', 46), (' other income', 45), (' net foreign exchange (loss)/gain', 45), (' other miscellaneous - net (loss)/gain', 45), ('other revenue', 42), (' net foreign exchange gain', 42), (' net ppe disposal (loss)/gain', 42), (' net (loss)/profit on disposal of non-current assets', 42), (' foreign exchange gain', 40), (' dividend from other parties', 40), (' effective portion of changes in fair value of cash flow', 39), (' secondment income (tw recovery)', 38), (' paid by customers - at amortised cost', 38), (' quota lease income', 38), (' insurance proceeds', 36), (' share of jv income', 36), (' profit from discontinued operation', 33), (' sundry income', 33), (' commission revenue', 29), (' margin charge income', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('other revenue', 0), (' commission revenue', 0), ('  government grants', 0), (' insurance proceeds', 0), (' foreign exchange gain', 0), (' other', 0), (' dividend from other parties', 0), (' other income', 0), (' net foreign exchange gain', 0), (' effective portion of changes in fair value of cash flow', 0), (' profit from discontinued operation', 0), (' net of tax', 0), (' share of jv income', 0), (' secondment income (tw recovery)', 0), (' japan recoveries', 0), (' margin charge income', 0), (' net foreign exchange gains/(losses)', 0), (' paid by customers - at amortised cost', 0), (' net foreign exchange (loss)/gain', 0), (' net ppe disposal (loss)/gain', 0), (' other miscellaneous - net (loss)/gain', 0), (' quota lease income', 0), (' sundry income', 0), (' net (loss)/profit on disposal of non-current assets', 0), (' net other foreign exchange (losses)/gains', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 5, 7], 'score': [100, 100, 100, 100], 'value': [2211657.0, 540695.0, 2601186.0, 367877.0], 'label': ['Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Other interest expense', 'Interest on bank overdrafts and loans (other than those from related parties)', 'Interest on bank overdrafts and loans Other interest expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('NULL', 9)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('NULL', 9)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), (' income tax expense', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('deferred tax', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' income tax', 44), ('earlier year', 38), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), ('current tax', 30), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), (' tax (expense)/benefit', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('provision for taxation previous year', 35), ('amount transferred to retained earnings', 32), (' income tax', 31), ('prior year ', 30), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), (' income tax expense', 24), (' income tax benefit', 24), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 23), ('deferred tax', 15), ('earlier year', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' income tax', 35), ('minimum alternate tax credit entitlement', 30), ('amount transferred to retained earnings', 29), ('provision for taxation previous year', 28), (' income tax expense', 27), (' income tax benefit', 26), ('current tax', 24), ('earlier year', 23), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 51), (' income tax benefit/(expense)', 44), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('provision for taxation previous year', 32), ('minimum alternate tax credit entitlement', 30), ('earlier year', 30), ('deferred tax', 27), ('prior year ', 26), (' income tax benefit', 26), ('current tax', 25), (' income tax', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 31), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), ('minimum alternate tax credit entitlement', 30), ('earlier year', 30), (' tax (expense)/benefit', 30), ('deferred tax', 25), ('prior year ', 24), ('provision for taxation previous year', 23), (' income tax', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' income tax', 33), ('earlier year', 29), ('amount transferred to retained earnings', 28), (' income tax expense', 24), (' income tax benefit/(expense)', 24), (' income tax benefit', 23), (' tax (expense)/benefit', 22), ('provision for taxation previous year', 21), ('prior year ', 21), ('current tax', 20), ('minimum alternate tax credit entitlement', 20), ('deferred tax', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('amount transferred to retained earnings', 46), (' income tax expense', 44), (' income tax benefit', 43), (' income tax benefit/(expense)', 42), ('minimum alternate tax credit entitlement', 39), (' tax (expense)/benefit', 38), ('provision for taxation previous year', 34), ('current tax', 30), ('earlier year', 29), ('deferred tax', 26), ('prior year ', 26), (' income tax', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 35)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 67), (' income tax expense', 65), ('provision for taxation previous year', 52), (' tax (expense)/benefit', 51), ('minimum alternate tax credit entitlement', 49), (' income tax benefit', 48), (' income tax', 43), ('amount transferred to retained earnings', 40), ('current tax', 36), ('deferred tax', 33), ('earlier year', 31), ('prior year ', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 36), ('provision for taxation previous year', 35), (' income tax benefit/(expense)', 35), (' tax (expense)/benefit', 35), (' income tax benefit', 32), ('earlier year', 31), ('prior year ', 29), (' income tax expense', 29), ('deferred tax', 25), ('current tax', 24), (' income tax', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' income tax', 15), ('prior year ', 14), ('amount transferred to retained earnings', 13), ('provision for taxation previous year', 12), ('earlier year', 12), (' income tax expense', 10), (' income tax benefit', 10), (' tax (expense)/benefit', 9), (' income tax benefit/(expense)', 7), ('minimum alternate tax credit entitlement', 6), ('current tax', 0), ('deferred tax', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('amount transferred to retained earnings', 34), (' income tax expense', 33), ('current tax', 32), (' income tax benefit', 32), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('minimum alternate tax credit entitlement', 31), ('provision for taxation previous year', 29), (' income tax', 28), ('earlier year', 25), ('deferred tax', 21), ('prior year ', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' income tax benefit/(expense)', 66), (' income tax expense', 64), ('minimum alternate tax credit entitlement', 52), (' income tax benefit', 51), (' tax (expense)/benefit', 50), ('amount transferred to retained earnings', 46), (' income tax', 42), ('provision for taxation previous year', 41), ('earlier year', 35), ('deferred tax', 33), ('prior year ', 32), ('current tax', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' income tax expense', 59), (' income tax benefit/(expense)', 50), (' income tax benefit', 49), (' income tax', 43), ('provision for taxation previous year', 42), ('current tax', 41), ('minimum alternate tax credit entitlement', 40), ('prior year ', 37), ('amount transferred to retained earnings', 36), (' tax (expense)/benefit', 35), ('deferred tax', 32), ('earlier year', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('provision for taxation previous year', 60), ('earlier year', 53), ('prior year ', 50), ('amount transferred to retained earnings', 40), ('deferred tax', 37), ('minimum alternate tax credit entitlement', 36), ('current tax', 34), (' income tax benefit', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), (' income tax', 30), (' income tax expense', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': -9664765.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['7'], 'line_item_value': [-9664765.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), (' income tax expense', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('deferred tax', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [(' income tax', 44), ('earlier year', 38), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), ('current tax', 30), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), (' tax (expense)/benefit', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('provision for taxation previous year', 35), ('amount transferred to retained earnings', 32), (' income tax', 31), ('prior year ', 30), ('current tax', 29), ('minimum alternate tax credit entitlement', 29), (' income tax expense', 24), (' income tax benefit', 24), (' income tax benefit/(expense)', 24), (' tax (expense)/benefit', 23), ('deferred tax', 15), ('earlier year', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [(' income tax', 35), ('minimum alternate tax credit entitlement', 30), ('amount transferred to retained earnings', 29), ('provision for taxation previous year', 28), (' income tax expense', 27), (' income tax benefit', 26), ('current tax', 24), ('earlier year', 23), (' income tax benefit/(expense)', 21), (' tax (expense)/benefit', 19), ('deferred tax', 17), ('prior year ', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [(' income tax', 70), (' income tax expense', 52), (' income tax benefit', 50), ('prior year ', 48), (' income tax benefit/(expense)', 40), ('provision for taxation previous year', 35), ('earlier year', 35), ('amount transferred to retained earnings', 32), (' tax (expense)/benefit', 28), ('current tax', 27), ('minimum alternate tax credit entitlement', 23), ('deferred tax', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [(' income tax expense', 64), (' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 50), ('earlier year', 42), ('deferred tax', 38), ('amount transferred to retained earnings', 36), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), (' income tax', 29), ('minimum alternate tax credit entitlement', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 51), (' income tax benefit/(expense)', 44), ('amount transferred to retained earnings', 38), (' income tax expense', 38), ('provision for taxation previous year', 32), ('minimum alternate tax credit entitlement', 30), ('earlier year', 30), ('deferred tax', 27), ('prior year ', 26), (' income tax benefit', 26), ('current tax', 25), (' income tax', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [(' tax (expense)/benefit', 59), (' income tax benefit/(expense)', 50), ('amount transferred to retained earnings', 42), (' income tax expense', 38), ('earlier year', 36), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('provision for taxation previous year', 27)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('amount transferred to retained earnings', 37), ('provision for taxation previous year', 35), ('earlier year', 35), ('minimum alternate tax credit entitlement', 33), ('deferred tax', 32), (' income tax', 32), ('prior year ', 31), (' income tax benefit', 31), ('current tax', 30), (' tax (expense)/benefit', 30), (' income tax expense', 26), (' income tax benefit/(expense)', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [(' income tax benefit', 55), (' income tax expense', 50), (' income tax benefit/(expense)', 50), (' income tax', 48), ('minimum alternate tax credit entitlement', 32), ('amount transferred to retained earnings', 31), (' tax (expense)/benefit', 27), ('provision for taxation previous year', 20), ('deferred tax', 19), ('prior year ', 18), ('current tax', 17), ('earlier year', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [(' income tax expense', 45), (' income tax benefit', 44), ('amount transferred to retained earnings', 43), (' income tax', 42), (' income tax benefit/(expense)', 36), ('current tax', 31), ('minimum alternate tax credit entitlement', 30), (' tax (expense)/benefit', 30), ('provision for taxation previous year', 27), ('deferred tax', 25), ('prior year ', 24), ('earlier year', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [(' income tax expense', 39), ('amount transferred to retained earnings', 38), ('current tax', 31), (' income tax benefit', 31), (' income tax benefit/(expense)', 31), ('minimum alternate tax credit entitlement', 30), ('earlier year', 30), (' tax (expense)/benefit', 30), ('deferred tax', 25), ('prior year ', 24), ('provision for taxation previous year', 23), (' income tax', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [(' income tax', 33), ('earlier year', 29), ('amount transferred to retained earnings', 28), (' income tax expense', 24), (' income tax benefit/(expense)', 24), (' income tax benefit', 23), (' tax (expense)/benefit', 22), ('provision for taxation previous year', 21), ('prior year ', 21), ('current tax', 20), ('minimum alternate tax credit entitlement', 20), ('deferred tax', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('amount transferred to retained earnings', 46), (' income tax expense', 44), (' income tax benefit', 43), (' income tax benefit/(expense)', 42), ('minimum alternate tax credit entitlement', 39), (' tax (expense)/benefit', 38), ('provision for taxation previous year', 34), ('current tax', 30), ('earlier year', 29), ('deferred tax', 26), ('prior year ', 26), (' income tax', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [(' income tax benefit', 67), ('provision for taxation previous year', 59), (' income tax expense', 58), (' income tax', 58), (' income tax benefit/(expense)', 57), (' tax (expense)/benefit', 50), ('deferred tax', 45), ('current tax', 42), ('minimum alternate tax credit entitlement', 41), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 35)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [(' income tax benefit/(expense)', 67), (' income tax expense', 65), ('provision for taxation previous year', 52), (' tax (expense)/benefit', 51), ('minimum alternate tax credit entitlement', 49), (' income tax benefit', 48), (' income tax', 43), ('amount transferred to retained earnings', 40), ('current tax', 36), ('deferred tax', 33), ('earlier year', 31), ('prior year ', 28)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('minimum alternate tax credit entitlement', 42), ('amount transferred to retained earnings', 36), ('provision for taxation previous year', 35), (' income tax benefit/(expense)', 35), (' tax (expense)/benefit', 35), (' income tax benefit', 32), ('earlier year', 31), ('prior year ', 29), (' income tax expense', 29), ('deferred tax', 25), ('current tax', 24), (' income tax', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [(' income tax', 15), ('prior year ', 14), ('amount transferred to retained earnings', 13), ('provision for taxation previous year', 12), ('earlier year', 12), (' income tax expense', 10), (' income tax benefit', 10), (' tax (expense)/benefit', 9), (' income tax benefit/(expense)', 7), ('minimum alternate tax credit entitlement', 6), ('current tax', 0), ('deferred tax', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('amount transferred to retained earnings', 34), (' income tax expense', 33), ('current tax', 32), (' income tax benefit', 32), (' income tax benefit/(expense)', 32), (' tax (expense)/benefit', 32), ('minimum alternate tax credit entitlement', 31), ('provision for taxation previous year', 29), (' income tax', 28), ('earlier year', 25), ('deferred tax', 21), ('prior year ', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [(' income tax benefit/(expense)', 66), (' income tax expense', 64), ('minimum alternate tax credit entitlement', 52), (' income tax benefit', 51), (' tax (expense)/benefit', 50), ('amount transferred to retained earnings', 46), (' income tax', 42), ('provision for taxation previous year', 41), ('earlier year', 35), ('deferred tax', 33), ('prior year ', 32), ('current tax', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [(' income tax expense', 59), (' income tax benefit/(expense)', 50), (' income tax benefit', 49), (' income tax', 43), ('provision for taxation previous year', 42), ('current tax', 41), ('minimum alternate tax credit entitlement', 40), ('prior year ', 37), ('amount transferred to retained earnings', 36), (' tax (expense)/benefit', 35), ('deferred tax', 32), ('earlier year', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('provision for taxation previous year', 60), ('earlier year', 53), ('prior year ', 50), ('amount transferred to retained earnings', 40), ('deferred tax', 37), ('minimum alternate tax credit entitlement', 36), ('current tax', 34), (' income tax benefit', 34), (' income tax benefit/(expense)', 33), (' tax (expense)/benefit', 33), (' income tax', 30), (' income tax expense', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': -47777896.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['7'], 'line_item_value': [-47777896.0]}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('share of', 40), ('share in', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('share of', 11), ('share in', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('share of', 35), ('share in', 35)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('share of', 30), ('share in', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('share of', 40), ('share in', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('share of', 7), ('share in', 7)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('share of', 16), ('share in', 16)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('share of', 14), ('share in', 14)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('share of', 15), ('share in', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('share of', 26), ('share in', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('prior period', 41), ('exceptional', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('prior period', 23), ('exceptional', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('prior period', 24), ('exceptional', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 35), ('exceptional', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 29), ('prior period', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('exceptional', 38), ('prior period', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('prior period', 29), ('exceptional', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('exceptional', 29), ('prior period', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('prior period', 36), ('exceptional', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('prior period', 24), ('exceptional', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('prior period', 12), ('exceptional', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('prior period', 31), ('exceptional', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('prior period', 30), ('exceptional', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('prior period', 35), ('exceptional', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('prior period', 27), ('exceptional', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('prior period', 41), ('exceptional', 26)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('prior period', 23), ('exceptional', 20)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('prior period', 43), ('exceptional', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 42)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('prior period', 24), ('exceptional', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('exceptional', 27), ('prior period', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('prior period', 35), ('exceptional', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('prior period', 33), ('exceptional', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('exceptional', 29), ('prior period', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('exceptional', 38), ('prior period', 30)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('prior period', 29), ('exceptional', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('exceptional', 29), ('prior period', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('prior period', 47), ('exceptional', 29)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('prior period', 36), ('exceptional', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('prior period', 24), ('exceptional', 18)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('prior period', 12), ('exceptional', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('prior period', 31), ('exceptional', 23)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('prior period', 30), ('exceptional', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('prior period', 35), ('exceptional', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('prior period', 27), ('exceptional', 17)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:05:57+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-09 11:05:57+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('NULL', 9)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:05:57+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:05:57+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = sale of coal , res_fuzz_match = [('NULL', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of product sold , res_fuzz_match = [('NULL', 19)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = cost of coal sold , res_fuzz_match = [('NULL', 22)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other income , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = selling & distribution expenses , res_fuzz_match = [('NULL', 24)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = administration expenses , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = results from operating activities , res_fuzz_match = [('NULL', 15)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance income , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net finance costs , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = foreign exchange , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = gain/(loss) , res_fuzz_match = [('NULL', 31)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net foreign exchange gain/ (loss) , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = profit before income tax , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = net profit after income tax expense , res_fuzz_match = [('NULL', 5)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = items that may be reclassified subsequently to profit , res_fuzz_match = [('NULL', 5)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = or loss , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = loss on of hedged instrument , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = income tax expense attributable to remeasurement , res_fuzz_match = [('NULL', 11)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total other comprehensive income , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - txt_particular = total for the year , res_fuzz_match = [('NULL', 9)]
2023-05-09 11:05:57+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:06:01+0530 - sLogger - DEBUG - module: Classification_service , File:wrapper.py,  function: Save_file
2023-05-09 11:06:02+0530 - sLogger - DEBUG - {'fileid': '3c2dd9d8-ab66-434e-b476-f05cb70b2e3b', 'filename': 'Tadano Oceania Pty Ltd FY2022 Signed Financial Statements.pdf', 'filepath': '/home/mgsuser01/AI/CRM_SYD/UAT_app/classification/../FILE_DB/FILES/Tadano Oceania Pty Ltd FY2022 Signed Financial Statements.pdf'}
2023-05-09 11:06:02+0530 - sLogger - DEBUG - save file completed
2023-05-09 11:06:02+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: process_pdf
2023-05-09 11:06:02+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __get_basic_info_file
2023-05-09 11:06:02+0530 - sLogger - DEBUG - __get_basic_info_file() completed.
2023-05-09 11:06:02+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __save_basic_info_file_db
2023-05-09 11:06:02+0530 - sLogger - DEBUG - __save_basic_info_file_db() completed. and file data (page_cnt,region) updated in db
2023-05-09 11:06:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:02+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:04+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:04+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:04+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:04+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:04+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:12+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:12+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:15+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:15+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:15+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:15+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:15+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:19+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:19+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:19+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:19+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:19+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:27+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:27+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:36+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:36+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:36+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:36+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:36+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:41+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:41+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:41+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:41+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:41+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:46+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:46+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:46+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:46+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:46+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:49+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:49+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:49+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:50+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:50+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:50+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:54+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:54+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:06:58+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:06:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:06:58+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:06:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:06:58+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:06:58+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:06:58+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:07:02+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:07:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:07:02+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:07:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:07:02+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:07:02+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:07:02+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:07:13+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:07:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:07:13+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:07:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:07:13+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:07:13+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:07:13+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:07:26+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:07:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:07:26+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:07:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:07:26+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:07:26+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:07:26+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:07:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:07:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:07:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:07:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:07:38+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:07:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:07:38+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:07:51+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:07:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:07:51+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:07:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:07:51+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:07:51+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:07:51+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:08:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:08:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:08:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:08:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:08:06+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:08:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:08:06+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:08:17+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:08:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:08:17+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:08:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:08:17+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:08:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:08:17+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:08:27+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:08:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:08:27+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:08:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:08:27+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:08:27+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:08:27+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:08:32+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:08:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:08:32+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:08:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:08:32+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:08:32+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:08:32+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:08:38+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:08:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:08:38+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:08:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:08:38+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:08:38+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:08:38+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:08:43+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:08:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:08:43+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:08:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:08:43+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:08:43+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:08:43+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:08:48+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:08:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:08:48+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:08:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:08:48+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:08:48+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:08:48+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:08:54+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:08:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:08:54+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:08:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:08:54+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:08:54+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:08:54+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:09:01+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:09:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:09:01+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:09:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:09:01+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:09:01+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:09:01+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:09:06+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:09:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:09:06+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:09:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:09:06+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:09:06+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:09:06+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:09:12+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:09:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:09:12+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:09:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:09:12+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:09:12+0530 - sLogger - DEBUG - module: Classification_service , submodule: Standard_OCR, File:OCR.py,  function: get_data
2023-05-09 11:09:12+0530 - sLogger - DEBUG - filetype: pdf
2023-05-09 11:09:17+0530 - sLogger - DEBUG - stadnard_ocr.get_data() completed
2023-05-09 11:09:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_preprocessing.py,  function: data_preprocessing
2023-05-09 11:09:17+0530 - sLogger - DEBUG - data_preprocessing function completed
2023-05-09 11:09:17+0530 - sLogger - DEBUG - module: Classification_service , submodule: machine_learning, File:data_prediction.py,  function: predict
2023-05-09 11:09:17+0530 - sLogger - DEBUG - function: predict completed.
2023-05-09 11:09:17+0530 - sLogger - DEBUG - module: Classification_service , File:clf_core.py,  function: __update_filtered_pages_db
2023-05-09 11:09:17+0530 - sLogger - DEBUG - {'predicted_cbs_pages': [9], 'predicted_cpl_pages': [8], 'predicted_ccf_pages': [11], 'filtered_cbs_pages': [9], 'filtered_cpl_pages': [8], 'filtered_ccf_pages': [11], 'month': 'december'}
2023-05-09 11:09:17+0530 - sLogger - DEBUG - function: __update_filtered_pages_db completed
2023-05-09 11:09:17+0530 - sLogger - DEBUG - function: process_pdf completed successfully
2023-05-09 11:09:17+0530 - sLogger - DEBUG - process file completed
2023-05-09 11:09:17+0530 - sLogger - DEBUG - Classification Service Processing completed
2023-05-09 11:09:17+0530 - sLogger - DEBUG - module: TableExtractionService , File:wrapper.py,  function: process_file
2023-05-09 11:09:17+0530 - sLogger - DEBUG - TE process file started
2023-05-09 11:12:37+0530 - sLogger - DEBUG - TE Proces file completed
2023-05-09 11:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:process_core.py,  function: process_main_pages
2023-05-09 11:12:37+0530 - sLogger - DEBUG - process_main_pages started
2023-05-09 11:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-09 11:12:37+0530 - sLogger - DEBUG - start_refactoring started
2023-05-09 11:12:37+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-09 11:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-09 11:12:37+0530 - sLogger - DEBUG - start_refactoring started
2023-05-09 11:12:37+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-09 11:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:RefactorDF.py,  function: start_refactoring
2023-05-09 11:12:37+0530 - sLogger - DEBUG - start_refactoring started
2023-05-09 11:12:37+0530 - sLogger - DEBUG - start_refactoring completed
2023-05-09 11:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CBS_Sections.py,  function: set_section_details
2023-05-09 11:12:37+0530 - sLogger - DEBUG - set_section_details started
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Current assets | [('current assets', 100), ('noncurrent assets', 77), ('assets', 56), ('current liabilities', 52), ('noncurrent liabilities', 44), ('equity', 32), ('equity and liabilities', 27), ('equity liabilities', 23), ('liabilities', 11)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current assets | score 100
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD current liabilities | score 67
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent assets | score 90
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD noncurrent liabilities | score 61
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current assets | score 95
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD non current liabilities | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity and liabilities | score 33
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current assets | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Cash and cash equivalents | [('equity and liabilities', 53), ('equity liabilities', 35), ('assets', 31), ('equity', 30), ('current assets', 29), ('noncurrent assets', 29), ('current liabilities', 29), ('noncurrent liabilities', 23), ('liabilities', 22)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current assets | score 43
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD current liabilities | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent assets | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD noncurrent liabilities | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current assets | score 37
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD non current liabilities | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity and liabilities | score 54
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Cash and cash equivalents | MATCH WORD equity | score 60
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Trade and other receivables | [('equity and liabilities', 41), ('current assets', 34), ('noncurrent assets', 29), ('current liabilities', 28), ('noncurrent liabilities', 28), ('equity liabilities', 23), ('assets', 22), ('equity', 21), ('liabilities', 14)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current assets | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD current liabilities | score 48
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent assets | score 37
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD noncurrent liabilities | score 45
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current assets | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD non current liabilities | score 44
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity and liabilities | score 49
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other receivables | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Inventories | [('equity', 40), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('equity and liabilities', 31), ('assets', 29), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current assets | score 40
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD current liabilities | score 40
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent assets | score 43
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD noncurrent liabilities | score 42
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current assets | score 41
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD non current liabilities | score 41
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity and liabilities | score 40
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Inventories | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Other financial assets | [('noncurrent assets', 62), ('current assets', 50), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('current liabilities', 36), ('noncurrent liabilities', 36), ('liabilities', 24), ('equity', 24)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD current assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD current liabilities | score 42
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD noncurrent assets | score 53
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD noncurrent liabilities | score 41
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD non current assets | score 50
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD non current liabilities | score 40
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD equity and liabilities | score 43
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial assets | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Other assets | [('noncurrent assets', 67), ('assets', 62), ('current assets', 58), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('equity liabilities', 25), ('equity', 24), ('current liabilities', 24), ('liabilities', 12)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current assets | score 64
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD current liabilities | score 32
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent assets | score 64
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD non current liabilities | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity and liabilities | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other assets | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Total current assets | [('current assets', 81), ('noncurrent assets', 62), ('current liabilities', 61), ('assets', 42), ('equity and liabilities', 39), ('equity liabilities', 38), ('noncurrent liabilities', 36), ('equity', 24), ('liabilities', 16)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current assets | score 95
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD current liabilities | score 56
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent assets | score 81
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD noncurrent liabilities | score 57
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current assets | score 84
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD non current liabilities | score 60
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity and liabilities | score 33
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current assets | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Noncurrent assets | [('noncurrent assets', 100), ('current assets', 77), ('noncurrent liabilities', 67), ('assets', 56), ('current liabilities', 30), ('equity and liabilities', 27), ('equity liabilities', 23), ('equity', 21), ('liabilities', 11)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current assets | score 90
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD current liabilities | score 61
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent assets | score 100
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD noncurrent liabilities | score 72
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current assets | score 97
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD non current liabilities | score 70
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent assets | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Property plant and equipment | [('equity and liabilities', 59), ('equity liabilities', 43), ('equity', 40), ('current assets', 38), ('noncurrent assets', 32), ('noncurrent liabilities', 32), ('current liabilities', 26), ('assets', 21), ('liabilities', 20)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current assets | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD current liabilities | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent assets | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current assets | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD non current liabilities | score 37
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity and liabilities | score 53
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Property plant and equipment | MATCH WORD equity | score 60
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Right of use assets and other intangibles | [('noncurrent assets', 44), ('equity and liabilities', 41), ('current assets', 40), ('assets', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('equity', 21), ('liabilities', 16)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD current assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD current liabilities | score 40
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD noncurrent assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD noncurrent liabilities | score 40
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD non current assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD non current liabilities | score 41
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD equity and liabilities | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Right of use assets and other intangibles | MATCH WORD equity | score 45
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Goodwill | [('liabilities', 31), ('equity and liabilities', 25), ('equity liabilities', 20), ('current liabilities', 19), ('noncurrent liabilities', 19), ('equity', 15), ('noncurrent assets', 10), ('assets', 0), ('current assets', 0)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD current assets | score 0
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD current liabilities | score 22
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrent assets | score 11
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD noncurrent liabilities | score 22
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD non current assets | score 11
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD non current liabilities | score 22
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD equity and liabilities | score 22
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Goodwill | MATCH WORD equity | score 14
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Deferred tax assets | [('current assets', 57), ('assets', 50), ('noncurrent assets', 50), ('equity and liabilities', 31), ('equity liabilities', 29), ('current liabilities', 28), ('noncurrent liabilities', 21), ('equity', 19), ('liabilities', 10)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current assets | score 67
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD current liabilities | score 42
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent assets | score 61
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD noncurrent liabilities | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current assets | score 59
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD non current liabilities | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity and liabilities | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred tax assets | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Total noncurrent assets | [('noncurrent assets', 81), ('current assets', 69), ('noncurrent liabilities', 55), ('assets', 42), ('current liabilities', 42), ('equity and liabilities', 33), ('equity liabilities', 31), ('equity', 24), ('liabilities', 16)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current assets | score 90
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD current liabilities | score 52
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent assets | score 95
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD noncurrent liabilities | score 62
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current assets | score 83
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD non current liabilities | score 61
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity and liabilities | score 31
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent assets | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Total assets | [('assets', 62), ('current assets', 58), ('noncurrent assets', 58), ('equity and liabilities', 43), ('equity liabilities', 42), ('current liabilities', 40), ('liabilities', 24), ('equity', 24), ('noncurrent liabilities', 24)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current assets | score 64
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD current liabilities | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent assets | score 64
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD non current liabilities | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity and liabilities | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total assets | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Current liabilities | [('current liabilities', 100), ('equity liabilities', 67), ('liabilities', 60), ('equity and liabilities', 58), ('current assets', 52), ('noncurrent liabilities', 43), ('noncurrent assets', 30), ('equity', 30), ('assets', 21)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current assets | score 67
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD current liabilities | score 100
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent assets | score 61
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD noncurrent liabilities | score 93
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current assets | score 59
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD non current liabilities | score 95
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity and liabilities | score 69
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current liabilities | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Bank Loan | [('equity and liabilities', 38), ('noncurrent assets', 36), ('current liabilities', 35), ('noncurrent liabilities', 35), ('current assets', 27), ('liabilities', 27), ('equity liabilities', 27), ('assets', 14), ('equity', 0)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD current assets | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD current liabilities | score 40
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD noncurrent assets | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD noncurrent liabilities | score 40
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD non current assets | score 40
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD non current liabilities | score 40
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD equity and liabilities | score 50
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Bank Loan | MATCH WORD equity | score 0
2023-05-09 11:12:37+0530 - sLogger - DEBUG - deposits | [('equity', 46), ('assets', 33), ('equity and liabilities', 33), ('equity liabilities', 30), ('current assets', 20), ('noncurrent assets', 20), ('current liabilities', 19), ('liabilities', 15), ('noncurrent liabilities', 10)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text deposits | MATCH WORD current assets | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text deposits | MATCH WORD current liabilities | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text deposits | MATCH WORD noncurrent assets | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text deposits | MATCH WORD noncurrent liabilities | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text deposits | MATCH WORD non current assets | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text deposits | MATCH WORD non current liabilities | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text deposits | MATCH WORD equity and liabilities | score 43
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text deposits | MATCH WORD equity | score 43
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Other financial liabilities | [('equity liabilities', 55), ('equity and liabilities', 54), ('noncurrent liabilities', 53), ('current liabilities', 47), ('liabilities', 46), ('noncurrent assets', 24), ('current assets', 18), ('assets', 16), ('equity', 15)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD current assets | score 31
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD current liabilities | score 69
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD noncurrent assets | score 32
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD noncurrent liabilities | score 64
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD non current assets | score 31
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD non current liabilities | score 62
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD equity and liabilities | score 65
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other financial liabilities | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Deferred revenue | [('current assets', 40), ('noncurrent assets', 32), ('current liabilities', 31), ('equity and liabilities', 28), ('noncurrent liabilities', 23), ('equity', 22), ('equity liabilities', 16), ('assets', 12), ('liabilities', 0)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD current assets | score 33
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD current liabilities | score 29
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD noncurrent assets | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD noncurrent liabilities | score 26
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD non current assets | score 33
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD non current liabilities | score 29
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD equity and liabilities | score 25
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Deferred revenue | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Current tax | [('current liabilities', 72), ('current assets', 58), ('noncurrent assets', 33), ('equity liabilities', 33), ('noncurrent liabilities', 32), ('equity and liabilities', 29), ('assets', 25), ('equity', 24), ('liabilities', 12)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current tax | MATCH WORD current assets | score 74
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current tax | MATCH WORD current liabilities | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current tax | MATCH WORD noncurrent assets | score 74
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current tax | MATCH WORD noncurrent liabilities | score 74
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current tax | MATCH WORD non current assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current tax | MATCH WORD non current liabilities | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current tax | MATCH WORD equity and liabilities | score 32
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Current tax | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Other liabilities | [('noncurrent liabilities', 69), ('liabilities', 67), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('noncurrent assets', 32), ('assets', 24), ('current assets', 24), ('equity', 22)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current assets | score 32
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD current liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent assets | score 35
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current assets | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD non current liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity and liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Other liabilities | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Total current liabilities | [('current liabilities', 82), ('equity liabilities', 55), ('equity and liabilities', 49), ('noncurrent liabilities', 47), ('liabilities', 46), ('current assets', 42), ('noncurrent assets', 24), ('equity', 23), ('assets', 16)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD current liabilities | score 95
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent assets | score 57
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD noncurrent liabilities | score 85
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current assets | score 60
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD non current liabilities | score 88
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity and liabilities | score 64
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total current liabilities | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Noncurrent liabilities | [('noncurrent liabilities', 100), ('noncurrent assets', 67), ('liabilities', 60), ('current assets', 44), ('equity liabilities', 44), ('current liabilities', 43), ('equity and liabilities', 39), ('equity', 20), ('assets', 11)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD current liabilities | score 93
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent assets | score 72
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD noncurrent liabilities | score 100
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current assets | score 70
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD non current liabilities | score 98
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity and liabilities | score 65
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Noncurrent liabilities | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Trade and other payables | [('equity and liabilities', 46), ('current liabilities', 33), ('current assets', 29), ('noncurrent assets', 29), ('equity liabilities', 29), ('noncurrent liabilities', 28), ('assets', 22), ('liabilities', 21), ('equity', 14)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current assets | score 42
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD current liabilities | score 47
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent assets | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD noncurrent liabilities | score 43
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current assets | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD non current liabilities | score 43
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity and liabilities | score 48
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Trade and other payables | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Provisions | [('current liabilities', 20), ('assets', 18), ('liabilities', 17), ('equity', 17), ('current assets', 11), ('noncurrent assets', 11), ('equity liabilities', 11), ('noncurrent liabilities', 10), ('equity and liabilities', 9)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current assets | score 25
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD current liabilities | score 28
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent assets | score 27
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD noncurrent liabilities | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current assets | score 27
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD non current liabilities | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity and liabilities | score 27
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Provisions | MATCH WORD equity | score 15
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Lease liabilities | [('liabilities', 71), ('equity liabilities', 67), ('current liabilities', 64), ('equity and liabilities', 57), ('noncurrent liabilities', 48), ('equity', 35), ('assets', 25), ('current assets', 25), ('noncurrent assets', 25)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current assets | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD current liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent assets | score 35
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current assets | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD non current liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity and liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Lease liabilities | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Total noncurrent liabilities | [('noncurrent liabilities', 82), ('noncurrent assets', 55), ('liabilities', 46), ('current assets', 42), ('current liabilities', 41), ('equity liabilities', 36), ('equity and liabilities', 32), ('assets', 16), ('equity', 15)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current assets | score 61
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD current liabilities | score 81
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD noncurrent liabilities | score 95
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current assets | score 61
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD non current liabilities | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity and liabilities | score 64
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total noncurrent liabilities | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Total liabilities | [('liabilities', 67), ('noncurrent liabilities', 62), ('equity liabilities', 48), ('current liabilities', 46), ('equity and liabilities', 41), ('assets', 24), ('current assets', 24), ('noncurrent assets', 24), ('equity', 22)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current assets | score 32
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD current liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent assets | score 35
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD noncurrent liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current assets | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD non current liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity and liabilities | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total liabilities | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Net assets | [('current assets', 73), ('assets', 71), ('noncurrent assets', 64), ('equity and liabilities', 31), ('equity', 27), ('equity liabilities', 27), ('current liabilities', 26), ('noncurrent liabilities', 26), ('liabilities', 13)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current assets | score 75
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD current liabilities | score 41
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD noncurrent liabilities | score 44
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current assets | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD non current liabilities | score 42
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity and liabilities | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Net assets | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Equity | [('equity', 100), ('equity liabilities', 63), ('equity and liabilities', 52), ('assets', 36), ('liabilities', 33), ('current assets', 32), ('current liabilities', 30), ('noncurrent assets', 21), ('noncurrent liabilities', 20)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current assets | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD current liabilities | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent assets | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD noncurrent liabilities | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current assets | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD non current liabilities | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity and liabilities | score 90
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Equity | MATCH WORD equity | score 100
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Issued capital | [('assets', 40), ('equity', 38), ('equity and liabilities', 37), ('current assets', 35), ('noncurrent assets', 35), ('equity liabilities', 35), ('current liabilities', 33), ('noncurrent liabilities', 33), ('liabilities', 25)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current assets | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD current liabilities | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent assets | score 32
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD noncurrent liabilities | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current assets | score 31
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD non current liabilities | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity and liabilities | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Issued capital | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Retained earnings | [('equity and liabilities', 50), ('current liabilities', 48), ('current assets', 42), ('assets', 38), ('equity', 35), ('noncurrent assets', 33), ('equity liabilities', 33), ('liabilities', 24), ('noncurrent liabilities', 24)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current assets | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD current liabilities | score 39
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent assets | score 35
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD noncurrent liabilities | score 36
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current assets | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD non current liabilities | score 35
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity and liabilities | score 46
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Retained earnings | MATCH WORD equity | score 30
2023-05-09 11:12:37+0530 - sLogger - DEBUG - Total equity | [('equity liabilities', 72), ('equity', 67), ('equity and liabilities', 62), ('current liabilities', 38), ('liabilities', 33), ('current assets', 32), ('noncurrent assets', 32), ('noncurrent liabilities', 31), ('assets', 24)]
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current assets | score 31
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD current liabilities | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent assets | score 34
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD noncurrent liabilities | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current assets | score 33
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD non current liabilities | score 38
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity and liabilities | score 86
2023-05-09 11:12:37+0530 - sLogger - DEBUG - particular_text Total equity | MATCH WORD equity | score 90
2023-05-09 11:12:37+0530 - sLogger - DEBUG - module: MainPage_processing_Service , File:CCF_Sections.py,  function: set_section_details
2023-05-09 11:12:37+0530 - sLogger - DEBUG - set_section_details started
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from operating activities | operating cash flow before working capital changes
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Receipts from customers | adiustments for movements in working capital
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to suppliers and employees | changes in operating assets and liabilities
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest received | movements in working capital
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Interest and other costs of finance paid | operating profit before changes in assets and liabilities
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Income taxes refunded/(paid) | adiustments for movements in working capital
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (used in)/provided by operating activities | operating profit before working capital changes
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from investing activities | operating cash flow before working capital changes
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments for property, plant and equipment | operating profit before changes in assets and liabilities
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Proceeds from disposal of property, plant and equipment | operating profit before changes in assets and liabilities
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payment for investments* | adiustments for movements in working capital
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (used in)/provided by investing activities | adjustments for increase decrease in operating liabilities
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash flows from financing activities | operating cash flow before working capital changes
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Payments to reduce lease liabilities | changes in operating assets and liabilities
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Loan borrowed/(repaid) | operating profit before working capital changes
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Dividend paid | changes in assets liabilities
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net cash (used in)/provided by financing activities | adjustments for increase decrease in operating liabilities
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Net (decrease/increase in cash and cash equivalents | adjustments for increase decrease in operating assets
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- in Effects of exchange rate changes on the balance of cash held foreign currencies | operating profit before changes in assets and liabilities
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the beginning of the year | changes in operating assets and liabilities
2023-05-09 11:12:37+0530 - sLogger - DEBUG - SUB SECTION : ADJUSTMENTS --- Cash and cash equivalents at the end of the year | changes in operating assets and liabilities
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: 'year'
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: 'year'
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: 'value'
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:note_standardise_utils.py,  function: find_data_block_location
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: local variable 'e' referenced before assignment
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: 'value'
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: 'value'
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: 'value'
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: 'value'
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: 'year'
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: 'year'
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: main_page_processing_service , File:noteStandardise.py,  function: ideal_template_processing
2023-05-09 11:12:39+0530 - sLogger - ERROR - error occured: 'value'
2023-05-09 11:12:39+0530 - sLogger - DEBUG - process_main_pages completed
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:BalanceSheetDataBucketing.py,  function: fetch_report
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_cash_and_cash_equivalents
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('other bank balances', 56), ('bank balances other than above', 48), ('bank balances other than cash and cash equivalents', 41), ('cash and short term deposits', 39), ('cash and bank balances', 36), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 27230401.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['11'], 'line_item_value': [27230401.0]}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['cash and cash equivalents', 'bank balances other than cash and cash equivalents', 'bank balances other than above', 'other bank balances', 'cash and bank balances', 'cash and short term deposits', ' cash and cash equivalents'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('cash and short term deposits', 35), ('cash and cash equivalents', 29), (' cash and cash equivalents', 29), ('other bank balances', 27), ('bank balances other than cash and cash equivalents', 25), ('bank balances other than above', 25), ('cash and bank balances', 24)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('cash and cash equivalents', 100), (' cash and cash equivalents', 100), ('bank balances other than cash and cash equivalents', 65), ('cash and bank balances', 54), ('cash and short term deposits', 54), ('other bank balances', 37), ('bank balances other than above', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('cash and cash equivalents', 51), (' cash and cash equivalents', 51), ('bank balances other than above', 45), ('cash and short term deposits', 45), ('bank balances other than cash and cash equivalents', 42), ('other bank balances', 41), ('cash and bank balances', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other bank balances', 31), ('cash and short term deposits', 28), ('bank balances other than above', 22), ('cash and cash equivalents', 20), (' cash and cash equivalents', 20), ('bank balances other than cash and cash equivalents', 15), ('cash and bank balances', 14)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('other bank balances', 56), ('bank balances other than above', 48), ('bank balances other than cash and cash equivalents', 41), ('cash and short term deposits', 39), ('cash and bank balances', 36), ('cash and cash equivalents', 30), (' cash and cash equivalents', 30)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other bank balances', 50), ('cash and short term deposits', 47), ('bank balances other than above', 37), ('bank balances other than cash and cash equivalents', 36), ('cash and cash equivalents', 31), (' cash and cash equivalents', 31), ('cash and bank balances', 19)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 17825903.0, 'line_item_label': ['Cash and cash equivalents'], 'note_numbers': ['11'], 'line_item_value': [17825903.0]}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['cash on hand', ' cash at bank', ' cash at bank and on hand', ' short term deposits', ' cash at banks earns interest at floating rates based on daily bank deposit rates', ' cash and cash equivalents', ' cash on hand and at bank'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = cash and bank balances , res_fuzz_match = [('cash on hand', 89), (' cash at bank', 78), (' cash on hand and at bank', 78), (' cash at bank and on hand', 67), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 60), (' cash and cash equivalents', 60), (' short term deposits', 22)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = 17825903 , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = 2022 , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('cash on hand', 0), (' cash at bank', 0), (' cash at bank and on hand', 0), (' short term deposits', 0), (' cash at banks earns interest at floating rates based on daily bank deposit rates', 0), (' cash and cash equivalents', 0), (' cash on hand and at bank', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': [89], 'value': [17825903.0], 'label': [' Cash and bank balances'], 'year': [], 'colname_found': ['rows']}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['inventories']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_inventories
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('inventories', 44)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 51132749.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [51132749.0]}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['inventories'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('inventories', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('inventories', 22)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('inventories', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('inventories', 100)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('inventories', 44)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('inventories', 22)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [3], 'score': 100, 'value': 54388398.0, 'line_item_label': ['Inventories'], 'note_numbers': ['9'], 'line_item_value': [54388398.0]}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['raw materials', ' finished goods', ' finished goods at cost', ' stores and other consumables at cost', ' raw materials', ' work in progress', ' finished goods', ' goods in transit', ' provision for inventory obsolescence', ' inventories', ' cranes', ' cranes - in transit', ' spare parts'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = arising from inventory of cranes , res_fuzz_match = [(' inventories', 100), (' cranes', 100), (' provision for inventory obsolescence', 68), (' goods in transit', 42), ('raw materials', 40), (' raw materials', 40), (' finished goods at cost', 38), (' work in progress', 38), (' cranes - in transit', 38), (' finished goods', 36), (' stores and other consumables at cost', 36), (' finished goods', 36), (' spare parts', 30)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = arising from inventory of spare parts , res_fuzz_match = [(' inventories', 100), (' spare parts', 100), (' provision for inventory obsolescence', 66), (' work in progress', 46), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' finished goods at cost', 38), (' stores and other consumables at cost', 37), (' finished goods', 36), (' finished goods', 36), (' goods in transit', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = arising from inventory of cranes , res_fuzz_match = [(' inventories', 100), (' cranes', 100), (' provision for inventory obsolescence', 68), (' goods in transit', 42), ('raw materials', 40), (' raw materials', 40), (' finished goods at cost', 38), (' work in progress', 38), (' cranes - in transit', 38), (' finished goods', 36), (' stores and other consumables at cost', 36), (' finished goods', 36), (' spare parts', 30)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = arising from inventory of spare parts , res_fuzz_match = [(' inventories', 100), (' spare parts', 100), (' provision for inventory obsolescence', 66), (' work in progress', 46), (' cranes - in transit', 46), ('raw materials', 40), (' raw materials', 40), (' cranes', 40), (' finished goods at cost', 38), (' stores and other consumables at cost', 37), (' finished goods', 36), (' finished goods', 36), (' goods in transit', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('raw materials', 0), (' finished goods', 0), (' finished goods at cost', 0), (' stores and other consumables at cost', 0), (' raw materials', 0), (' work in progress', 0), (' finished goods', 0), (' goods in transit', 0), (' provision for inventory obsolescence', 0), (' inventories', 0), (' cranes', 0), (' cranes - in transit', 0), (' spare parts', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [383044.0, 166547.0, 297223.0, 188127.0], 'label': [' Arising from inventory of cranes', ' Arising from inventory of spare parts', ' Arising from inventory of cranes', ' Arising from inventory of spare parts'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_prepaid_expenses
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('other financial assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other current assets', 68), ('prepayments', 16)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 5], 'score': 100, 'value': 1164948.0, 'line_item_label': ['Current assets', 'Other financial assets', 'Other assets'], 'note_numbers': [nan, '13', '14'], 'line_item_value': [0.0, 435033.0, 729915.0]}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other financial assets', 'other current financial assets', 'other assets', 'prepayments'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), ('other current financial assets', 65), ('other assets', 58), ('other financial assets', 50), ('prepayments', 21)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('other assets', 31), ('other current assets', 30), ('other financial assets', 30), ('other current financial assets', 29), ('prepayments', 15)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('other assets', 42), ('other current financial assets', 41), ('other current assets', 39), ('other financial assets', 39), ('prepayments', 21)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), ('other financial assets', 36), ('other current financial assets', 28), ('prepayments', 13)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('other financial assets', 100), ('other current financial assets', 83), ('other assets', 73), ('other current assets', 68), ('prepayments', 16)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), ('other financial assets', 73), ('other current financial assets', 58), ('prepayments', 12)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4, 5], 'score': 100, 'value': 1684817.0, 'line_item_label': ['Current assets', 'Other financial assets', 'Other assets'], 'note_numbers': [nan, '13', '14'], 'line_item_value': [0.0, 1016248.0, 668569.0]}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = bank guarantee , res_fuzz_match = [('current', 57), ('prepayments', 33), ('prepaid expenditure', 31), ('prepaid', 29), ('prepaid expense', 25), ('other prepayments', 25)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 44), ('current', 43), ('prepaid', 43), ('other prepayments', 42), ('prepayments', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = bank guarantee , res_fuzz_match = [('current', 57), ('prepayments', 33), ('prepaid expenditure', 31), ('prepaid', 29), ('prepaid expense', 25), ('other prepayments', 25)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('prepaid expense', 50), ('prepaid expenditure', 44), ('current', 43), ('prepaid', 43), ('other prepayments', 42), ('prepayments', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['current', 'prepaid expense', 'prepaid expenditure', 'prepayments', 'prepaid', 'other prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = other prepayments , res_fuzz_match = [('prepayments', 100), ('other prepayments', 100), ('prepaid', 77), ('current', 43), ('prepaid expense', 42), ('prepaid expenditure', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = other prepayments , res_fuzz_match = [('prepayments', 100), ('other prepayments', 100), ('prepaid', 77), ('current', 43), ('prepaid expense', 42), ('prepaid expenditure', 33)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('prepaid expense', 0), ('prepaid expenditure', 0), ('prepayments', 0), ('prepaid', 0), ('other prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [100, 100], 'value': [668569.0, 729915.0], 'label': [' Other prepayments', ' Other prepayments'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_other_current_assets
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' other financial assets', 100), (' financial assets', 81), ('other assets', 73), ('other current assets', 68), (' other current assets', 68), (' biological assets', 52), (' deferred operating expenditure', 40), (' trade and other receivables', 39), (' income tax receivable from related parties', 31)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4, 5], 'score': 100, 'value': 34550658.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other financial assets', 'Other assets'], 'note_numbers': [nan, '12', '13', '14'], 'line_item_value': [0.0, 33385710.0, 435033.0, 729915.0]}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['other current assets', 'other assets', ' financial assets', ' income tax receivable from related parties', ' other current assets', ' biological assets', ' deferred operating expenditure', ' other financial assets', ' trade and other receivables'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('other current assets', 81), (' other current assets', 81), ('other assets', 58), (' financial assets', 54), (' other financial assets', 50), (' biological assets', 48), (' trade and other receivables', 34), (' income tax receivable from related parties', 30), (' deferred operating expenditure', 29)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [(' trade and other receivables', 51), (' biological assets', 36), (' financial assets', 35), (' income tax receivable from related parties', 33), ('other assets', 31), ('other current assets', 30), (' other current assets', 30), (' other financial assets', 30), (' deferred operating expenditure', 19)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [(' trade and other receivables', 100), (' income tax receivable from related parties', 47), (' deferred operating expenditure', 47), ('other assets', 42), ('other current assets', 39), (' other current assets', 39), (' other financial assets', 39), (' financial assets', 29), (' biological assets', 24)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('other assets', 40), ('other current assets', 36), (' financial assets', 36), (' other current assets', 36), (' other financial assets', 36), (' deferred operating expenditure', 33), (' biological assets', 29), (' trade and other receivables', 26), (' income tax receivable from related parties', 24)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [(' other financial assets', 100), (' financial assets', 81), ('other assets', 73), ('other current assets', 68), (' other current assets', 68), (' biological assets', 52), (' deferred operating expenditure', 40), (' trade and other receivables', 39), (' income tax receivable from related parties', 31)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('other assets', 100), ('other current assets', 73), (' other current assets', 73), (' other financial assets', 73), (' biological assets', 61), (' financial assets', 50), (' trade and other receivables', 42), (' deferred operating expenditure', 38), (' income tax receivable from related parties', 23)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2, 4, 5], 'score': 100, 'value': 26807506.0, 'line_item_label': ['Current assets', 'Trade and other receivables', 'Other financial assets', 'Other assets'], 'note_numbers': [nan, '12', '13', '14'], 'line_item_value': [0.0, 25122689.0, 1016248.0, 668569.0]}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = related parties others accrued revenue , res_fuzz_match = [(' other', 100), (' accrued rebates', 73), (' related party receivable', 72), (' related party disclosures', 67), ('other assets', 64), (' accrued interest', 62), ('current', 57), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' interest receivable', 47), ('foreign exchange derivatives at fair value', 44), (' long service leave receivable', 43), (' current investments', 43), (' other debtors and prepayments', 43), (' other receivables - related party', 42), (' share of jv prepayments', 42), (' amount receivable from controlling entity', 40), (' foreign exchange forward contracts', 40), (' bank guarantee', 38), (' forward exchange contracts', 38), (' income tax receivable from related parties', 37), (' other deposits receivable - related party', 37), (' rental bond', 36), (' lng', 33), (' deposits', 29), (' condensate', 29)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = related parties others accrued revenue , res_fuzz_match = [(' other', 100), (' accrued rebates', 73), (' related party receivable', 72), (' related party disclosures', 67), ('other assets', 64), (' accrued interest', 62), ('current', 57), (' electricity derivatives at fair value', 50), (' derivative contracts - fair value', 50), (' interest receivable', 47), ('foreign exchange derivatives at fair value', 44), (' long service leave receivable', 43), (' current investments', 43), (' other debtors and prepayments', 43), (' other receivables - related party', 42), (' share of jv prepayments', 42), (' amount receivable from controlling entity', 40), (' foreign exchange forward contracts', 40), (' bank guarantee', 38), (' forward exchange contracts', 38), (' income tax receivable from related parties', 37), (' other deposits receivable - related party', 37), (' rental bond', 36), (' lng', 33), (' deposits', 29), (' condensate', 29)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1], 'score': [100, 100], 'value': [25122689.0, 33385710.0], 'label': ['related parties others accrued revenue', 'related parties others accrued revenue'], 'year': [], 'colname_found': ['columns', 'columns']}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = bank guarantee , res_fuzz_match = [(' bank guarantee', 100), ('current', 57), (' related party receivable', 46), (' forward exchange contracts', 46), (' other debtors and prepayments', 46), (' accrued rebates', 45), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' accrued interest', 38), (' related party disclosures', 38), (' income tax receivable from related parties', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' current investments', 38), (' foreign exchange forward contracts', 38), (' share of jv prepayments', 33), (' lng', 33), (' electricity derivatives at fair value', 31), (' long service leave receivable', 31), (' amount receivable from controlling entity', 31), (' interest receivable', 31), (' condensate', 29), ('other assets', 27), (' rental bond', 27), (' deposits', 14)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [(' foreign exchange forward contracts', 100), ('foreign exchange derivatives at fair value', 68), (' lng', 67), (' forward exchange contracts', 67), (' accrued interest', 52), (' amount receivable from controlling entity', 47), (' derivative contracts - fair value', 46), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), ('current', 43), (' related party disclosures', 43), (' condensate', 43), (' other receivables - related party', 42), (' share of jv prepayments', 42), (' income tax receivable from related parties', 41), (' other deposits receivable - related party', 41), (' other', 40), (' other debtors and prepayments', 39), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' current investments', 36), (' long service leave receivable', 35), (' interest receivable', 33), (' related party receivable', 33), (' deposits', 29)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = bank guarantee , res_fuzz_match = [(' bank guarantee', 100), ('current', 57), (' related party receivable', 46), (' forward exchange contracts', 46), (' other debtors and prepayments', 46), (' accrued rebates', 45), (' other', 40), ('foreign exchange derivatives at fair value', 38), (' accrued interest', 38), (' related party disclosures', 38), (' income tax receivable from related parties', 38), (' derivative contracts - fair value', 38), (' other receivables - related party', 38), (' other deposits receivable - related party', 38), (' current investments', 38), (' foreign exchange forward contracts', 38), (' share of jv prepayments', 33), (' lng', 33), (' electricity derivatives at fair value', 31), (' long service leave receivable', 31), (' amount receivable from controlling entity', 31), (' interest receivable', 31), (' condensate', 29), ('other assets', 27), (' rental bond', 27), (' deposits', 14)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [(' foreign exchange forward contracts', 100), ('foreign exchange derivatives at fair value', 68), (' lng', 67), (' forward exchange contracts', 67), (' accrued interest', 52), (' amount receivable from controlling entity', 47), (' derivative contracts - fair value', 46), ('other assets', 45), (' rental bond', 45), (' accrued rebates', 45), ('current', 43), (' related party disclosures', 43), (' condensate', 43), (' other receivables - related party', 42), (' share of jv prepayments', 42), (' income tax receivable from related parties', 41), (' other deposits receivable - related party', 41), (' other', 40), (' other debtors and prepayments', 39), (' bank guarantee', 38), (' electricity derivatives at fair value', 36), (' current investments', 36), (' long service leave receivable', 35), (' interest receivable', 33), (' related party receivable', 33), (' deposits', 29)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4], 'score': [100, 100, 100, 100], 'value': [0.0, 0.0, 435033.0, 0.0], 'label': [' Bank guarantee', ' Foreign exchange forward contracts', ' Bank guarantee', ' Foreign exchange forward contracts'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:39+0530 - sLogger - DEBUG - keywords = ['current', 'other assets', 'foreign exchange derivatives at fair value', ' electricity derivatives at fair value', ' accrued interest', ' other', ' related party disclosures', ' income tax receivable from related parties', ' derivative contracts - fair value', ' long service leave receivable', ' other receivables - related party', ' other deposits receivable - related party', ' deposits', ' amount receivable from controlling entity', ' interest receivable', ' bank guarantee', ' rental bond', ' related party receivable', ' share of jv prepayments', ' current investments', ' lng', ' condensate', ' foreign exchange forward contracts', ' accrued rebates', ' forward exchange contracts', ' other debtors and prepayments'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = other prepayments , res_fuzz_match = [(' other', 100), (' share of jv prepayments', 78), (' other receivables - related party', 67), (' other deposits receivable - related party', 67), (' other debtors and prepayments', 67), ('other assets', 64), (' income tax receivable from related parties', 50), (' interest receivable', 50), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 42), (' electricity derivatives at fair value', 42), (' derivative contracts - fair value', 42), (' long service leave receivable', 42), (' amount receivable from controlling entity', 42), (' related party receivable', 42), (' foreign exchange forward contracts', 42), (' forward exchange contracts', 42), (' accrued interest', 33), (' related party disclosures', 33), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' bank guarantee', 25), (' current investments', 25), (' lng', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows = other prepayments , res_fuzz_match = [(' other', 100), (' share of jv prepayments', 78), (' other receivables - related party', 67), (' other deposits receivable - related party', 67), (' other debtors and prepayments', 67), ('other assets', 64), (' income tax receivable from related parties', 50), (' interest receivable', 50), (' accrued rebates', 45), ('current', 43), ('foreign exchange derivatives at fair value', 42), (' electricity derivatives at fair value', 42), (' derivative contracts - fair value', 42), (' long service leave receivable', 42), (' amount receivable from controlling entity', 42), (' related party receivable', 42), (' foreign exchange forward contracts', 42), (' forward exchange contracts', 42), (' accrued interest', 33), (' related party disclosures', 33), (' deposits', 29), (' condensate', 29), (' rental bond', 27), (' bank guarantee', 25), (' current investments', 25), (' lng', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other assets', 0), ('foreign exchange derivatives at fair value', 0), (' electricity derivatives at fair value', 0), (' accrued interest', 0), (' other', 0), (' related party disclosures', 0), (' income tax receivable from related parties', 0), (' derivative contracts - fair value', 0), (' long service leave receivable', 0), (' other receivables - related party', 0), (' other deposits receivable - related party', 0), (' deposits', 0), (' amount receivable from controlling entity', 0), (' interest receivable', 0), (' bank guarantee', 0), (' rental bond', 0), (' related party receivable', 0), (' share of jv prepayments', 0), (' current investments', 0), (' lng', 0), (' condensate', 0), (' foreign exchange forward contracts', 0), (' accrued rebates', 0), (' forward exchange contracts', 0), (' other debtors and prepayments', 0)]
2023-05-09 11:12:39+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [100, 100], 'value': [668569.0, 729915.0], 'label': [' Other prepayments', ' Other prepayments'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['current assets']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:39+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:39+0530 - sLogger - DEBUG - df_meta_keyword = ca_total_current_assets
2023-05-09 11:12:39+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('current assets', 50)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('current assets', 100)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('current assets', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('current assets', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('current assets', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('current assets', 50)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('current assets', 58)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0], 'score': 100, 'value': 0.0, 'line_item_label': ['Current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_accumulated_depreciation
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross', 'net value']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3228260.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3228260.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3871674.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3871674.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['cost', 'gross', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_net_ppe
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3228260.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3228260.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3871674.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3871674.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_tangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('right of use', 100), ('right to use', 100), ('rightofuse', 78), ('righttouse', 78), ('tangible', 57), ('capital work-in-progress', 35), ('capital workinprogress', 35), ('capital work in progress', 32), ('work in progress', 31)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 29), ('capital workinprogress', 29), ('rightofuse', 29), ('righttouse', 29), ('capital work in progress', 14), ('right of use', 14), ('right to use', 14), ('work in progress', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 5884364.0, 'line_item_label': ['Right of use assets and other intangibles'], 'note_numbers': ['16'], 'line_item_value': [5884364.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['tangible', 'capital work-in-progress', 'capital workinprogress', 'capital work in progress', 'rightofuse', 'righttouse', 'right of use', 'right to use', 'work in progress'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('capital work-in-progress', 46), ('capital workinprogress', 46), ('right of use', 44), ('right to use', 44), ('capital work in progress', 38), ('work in progress', 38), ('rightofuse', 33), ('righttouse', 33), ('tangible', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible', 43), ('right of use', 33), ('right to use', 33), ('capital work in progress', 32), ('work in progress', 31), ('capital work-in-progress', 30), ('capital workinprogress', 30), ('rightofuse', 22), ('righttouse', 22)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('right of use', 100), ('right to use', 100), ('rightofuse', 78), ('righttouse', 78), ('tangible', 57), ('capital work-in-progress', 35), ('capital workinprogress', 35), ('capital work in progress', 32), ('work in progress', 31)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('tangible', 43), ('capital work-in-progress', 29), ('capital workinprogress', 29), ('rightofuse', 29), ('righttouse', 29), ('capital work in progress', 14), ('right of use', 14), ('right to use', 14), ('work in progress', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('right of use', 44), ('right to use', 44), ('rightofuse', 33), ('righttouse', 33), ('work in progress', 31), ('tangible', 29), ('capital work in progress', 27), ('capital work-in-progress', 20), ('capital workinprogress', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 9533623.0, 'line_item_label': ['Right of use assets and other intangibles'], 'note_numbers': ['16'], 'line_item_value': [9533623.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['tangible assets']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_tangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('tangible assets', 49)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('tangible assets', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['tangible assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('tangible assets', 54)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('tangible assets', 32)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('tangible assets', 49)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('tangible assets', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('tangible assets', 57)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['goodwill', 'goodwill on consolidatio']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_goodwill
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('goodwill', 100), ('goodwill on consolidatio', 100)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 5570624.0, 'line_item_label': ['Goodwill'], 'note_numbers': ['17'], 'line_item_value': [5570624.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['goodwill', 'goodwill on consolidatio'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('goodwill on consolidatio', 31), ('goodwill', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('goodwill on consolidatio', 30), ('goodwill', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('goodwill', 100), ('goodwill on consolidatio', 100)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('goodwill on consolidatio', 27), ('goodwill', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': 5570624.0, 'line_item_label': ['Goodwill'], 'note_numbers': ['17'], 'line_item_value': [5570624.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['intangible', 'intangible under development', 'intangible assets under development']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_intangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 54), ('intangible under development', 40)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('intangible under development', 29), ('intangible assets under development', 29), ('intangible', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 5884364.0, 'line_item_label': ['Right of use assets and other intangibles'], 'note_numbers': ['16'], 'line_item_value': [5884364.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['intangible', 'intangible under development', 'intangible assets under development'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('intangible assets under development', 62), ('intangible under development', 38), ('intangible', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('intangible', 67), ('intangible under development', 49), ('intangible assets under development', 42)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('intangible', 100), ('intangible assets under development', 54), ('intangible under development', 40)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('intangible under development', 29), ('intangible assets under development', 29), ('intangible', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('intangible', 33), ('intangible under development', 33), ('intangible assets under development', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [9], 'score': 100, 'value': 9533623.0, 'line_item_label': ['Right of use assets and other intangibles'], 'note_numbers': ['16'], 'line_item_value': [9533623.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['donations']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_intangible_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('donations', 22)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('donations', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['donations'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('donations', 22)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('donations', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('donations', 22)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('donations', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('donations', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['investment in joint venture', ' investment in associate', ' carrying amount at the end of the financial year']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_investments
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('investment', 50), ('joint ventures and associates', 48), (' investment in associate', 46), (' investments accounted for using the equity method', 44), (' investment in joint venture', 42), ('derivative financial instruments', 38)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('joint ventures and associates', 29), (' investment in joint venture', 29), (' investment in associate', 29), (' investments accounted for using the equity method', 29), ('investment', 17), ('derivative financial instruments', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['investment', 'joint ventures and associates', 'derivative financial instruments', ' investment in joint venture', ' investment in associate', ' investments accounted for using the equity method'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' investments accounted for using the equity method', 54), ('joint ventures and associates', 46), ('derivative financial instruments', 46), (' investment in associate', 40), (' investment in joint venture', 38), ('investment', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('joint ventures and associates', 49), (' investment in joint venture', 42), ('derivative financial instruments', 40), (' investment in associate', 38), (' investments accounted for using the equity method', 38), ('investment', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('investment', 50), ('joint ventures and associates', 48), (' investment in associate', 46), (' investments accounted for using the equity method', 44), (' investment in joint venture', 42), ('derivative financial instruments', 38)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('joint ventures and associates', 29), (' investment in joint venture', 29), (' investment in associate', 29), (' investments accounted for using the equity method', 29), ('investment', 17), ('derivative financial instruments', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('joint ventures and associates', 53), (' investment in associate', 48), ('derivative financial instruments', 40), (' investment in joint venture', 40), (' investments accounted for using the equity method', 40), ('investment', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['deferred charges', 'deferred tax', 'deferred tax assets']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax assets', ' deferred tax balances']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_deffered_charges
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('deferred tax assets', 43), ('deferred tax', 29), ('deferred charges', 23)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('deferred charges', 22), ('deferred tax', 12), ('deferred tax assets', 9)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 827995.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['10'], 'line_item_value': [827995.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['deferred charges', 'deferred tax', 'deferred tax assets'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('deferred tax assets', 50), ('deferred charges', 25), ('deferred tax', 18)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('deferred tax assets', 36), ('deferred tax', 30), ('deferred charges', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('deferred tax assets', 43), ('deferred tax', 29), ('deferred charges', 23)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('deferred charges', 22), ('deferred tax', 12), ('deferred tax assets', 9)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('deferred tax assets', 100), ('deferred tax', 75), ('deferred charges', 54)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [11], 'score': 100, 'value': 1053623.0, 'line_item_label': ['Deferred tax assets'], 'note_numbers': ['10'], 'line_item_value': [1053623.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) current year , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) prior year's adjustment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - current year , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - prior year's adjustment , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) income tax expense , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('deferred tax assets', 67), (' deferred tax balances', 62)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.3current tax assets and liabilities , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 50)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): income tax receivable/(payable) , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 50)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) current year , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) prior year's adjustment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 38)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - current year , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - prior year's adjustment , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 69)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) , res_fuzz_match = [('deferred tax assets', 33), (' deferred tax balances', 31)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) income tax expense , res_fuzz_match = [(' deferred tax balances', 44), ('deferred tax assets', 40)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('deferred tax assets', 67), (' deferred tax balances', 62)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.3current tax assets and liabilities , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 50)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): income tax receivable/(payable) , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): , res_fuzz_match = [('deferred tax assets', 73), (' deferred tax balances', 50)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['deferred tax assets', ' deferred tax balances'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred tax balances', 50), ('deferred tax assets', 47)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('deferred tax assets', 60), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('deferred tax assets', 53), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('deferred tax assets', 47), (' deferred tax balances', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('deferred tax assets', 0), (' deferred tax balances', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['non-current', 'finance receivables', ' allowance for expected credit losses', ' electricity derivatives at fair value', ' defined benefit plans', ' right-of-use-assets', ' exploration and evaluation expenditure', ' total. properties', ' warehouse and office equipment', ' motor vehicles']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_other_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [(' other non-current assets', 55), (' other non-current assets', 55), ('other assets', 51), (' other assets', 51), (' financial assets', 49), (' exploration and evaluation expenditure', 41), (' leased assets', 38), (' loan receivables', 28), ('non-current', 21), (' leases', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' loan receivables', 22), (' exploration and evaluation expenditure', 18), (' leases', 18), (' other non-current assets', 15), (' other non-current assets', 15), ('non-current', 14), (' leased assets', 12), ('other assets', 11), (' other assets', 11), (' financial assets', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other assets', 'non-current', ' financial assets', ' other non-current assets', ' exploration and evaluation expenditure', ' other assets', ' loan receivables', ' other non-current assets', ' leased assets', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [(' other non-current assets', 81), (' other non-current assets', 81), ('non-current', 70), (' financial assets', 69), ('other assets', 67), (' other assets', 67), (' leased assets', 52), (' exploration and evaluation expenditure', 35), (' loan receivables', 25), (' leases', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [(' exploration and evaluation expenditure', 55), ('other assets', 40), (' other assets', 40), (' loan receivables', 40), (' other non-current assets', 37), (' other non-current assets', 37), (' financial assets', 32), (' leased assets', 29), ('non-current', 26), (' leases', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [(' other non-current assets', 55), (' other non-current assets', 55), ('other assets', 51), (' other assets', 51), (' financial assets', 49), (' exploration and evaluation expenditure', 41), (' leased assets', 38), (' loan receivables', 28), ('non-current', 21), (' leases', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [(' loan receivables', 22), (' exploration and evaluation expenditure', 18), (' leases', 18), (' other non-current assets', 15), (' other non-current assets', 15), ('non-current', 14), (' leased assets', 12), ('other assets', 11), (' other assets', 11), (' financial assets', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [(' leased assets', 64), ('other assets', 62), (' other assets', 62), (' financial assets', 57), (' other non-current assets', 53), (' other non-current assets', 53), (' exploration and evaluation expenditure', 38), (' loan receivables', 31), (' leases', 21), ('non-current', 9)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['non-current assets total']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_total_non_current_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('non-current assets total', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('non-current assets total', 23)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['non-current assets total'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('non-current assets total', 81)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('non-current assets total', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('non-current assets total', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('non-current assets total', 23)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('non-current assets total', 59)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [7], 'score': 81, 'value': 0.0, 'line_item_label': ['Non-current assets'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'bank borrowings', ' utilised – bank borrowings', ' leases', ' not later than 1 year', ' current', ' secured long-term bank loans', ' loans from related party', ' lease liabilities - current', ' lease liabilities', ' bank overdraft', ' balance at the end of period']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_short_term_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [(' bank overdraft', 61), (' loans and borrowings', 58), ('lease liabilities', 40), (' leases', 31), ('borrowings', 27), ('short-term debt', 26), ('shortterm debt', 26), ('short term debt', 25), ('shortterm borrowings', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('short-term debt', 38), ('shortterm debt', 38), ('short term debt', 36), (' leases', 36), ('lease liabilities', 33), ('shortterm borrowings', 26), (' bank overdraft', 19), (' loans and borrowings', 18), ('borrowings', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 35), ('shortterm debt', 35), (' bank overdraft', 35), ('short term debt', 34), (' loans and borrowings', 34), ('shortterm borrowings', 33), ('borrowings', 23), (' leases', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('short-term debt', 38), ('shortterm debt', 38), ('short term debt', 37), (' loans and borrowings', 30), ('shortterm borrowings', 29), (' bank overdraft', 23), ('borrowings', 22), ('lease liabilities', 17), (' leases', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('short-term debt', 32), ('shortterm debt', 32), ('short term debt', 31), (' loans and borrowings', 31), ('shortterm borrowings', 30), ('lease liabilities', 27), (' leases', 27), ('borrowings', 24), (' bank overdraft', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 46), ('shortterm debt', 46), ('short term debt', 44), ('shortterm borrowings', 43), (' bank overdraft', 38), ('borrowings', 33), (' loans and borrowings', 30), (' leases', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 874163.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [874163.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['short term debt', 'short-term debt', 'borrowings', 'shortterm debt', 'shortterm borrowings', 'lease liabilities', ' loans and borrowings', ' bank overdraft', ' leases'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('lease liabilities', 64), (' loans and borrowings', 34), (' leases', 22), ('short term debt', 21), ('short-term debt', 21), ('shortterm debt', 21), (' bank overdraft', 21), ('borrowings', 20), ('shortterm borrowings', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 49), (' bank overdraft', 44), ('short term debt', 38), ('short-term debt', 33), ('shortterm debt', 33), ('lease liabilities', 30), ('shortterm borrowings', 26), ('borrowings', 21), (' leases', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [(' bank overdraft', 61), (' loans and borrowings', 58), ('lease liabilities', 40), (' leases', 31), ('borrowings', 27), ('short-term debt', 26), ('shortterm debt', 26), ('short term debt', 25), ('shortterm borrowings', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('short-term debt', 38), ('shortterm debt', 38), ('short term debt', 36), (' leases', 36), ('lease liabilities', 33), ('shortterm borrowings', 26), (' bank overdraft', 19), (' loans and borrowings', 18), ('borrowings', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), (' leases', 53), (' loans and borrowings', 31), (' bank overdraft', 24), ('short term debt', 23), ('short-term debt', 16), ('shortterm debt', 16), ('borrowings', 12), ('shortterm borrowings', 7)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 35), ('shortterm debt', 35), (' bank overdraft', 35), ('short term debt', 34), (' loans and borrowings', 34), ('shortterm borrowings', 33), ('borrowings', 23), (' leases', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('short-term debt', 38), ('shortterm debt', 38), ('short term debt', 37), (' loans and borrowings', 30), ('shortterm borrowings', 29), (' bank overdraft', 23), ('borrowings', 22), ('lease liabilities', 17), (' leases', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('short-term debt', 32), ('shortterm debt', 32), ('short term debt', 31), (' loans and borrowings', 31), ('shortterm borrowings', 30), ('lease liabilities', 27), (' leases', 27), ('borrowings', 24), (' bank overdraft', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('borrowings', 33), ('shortterm borrowings', 27), (' bank overdraft', 20), (' leases', 20), (' loans and borrowings', 19), ('lease liabilities', 12), ('short term debt', 10), ('short-term debt', 10), ('shortterm debt', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('lease liabilities', 52), ('short-term debt', 46), ('shortterm debt', 46), ('short term debt', 44), ('shortterm borrowings', 43), (' bank overdraft', 38), ('borrowings', 33), (' loans and borrowings', 30), (' leases', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [18], 'score': 100, 'value': 1486742.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [1486742.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['current maturities']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_long_term_debt_due_in_year
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('other financial liabilities', 34), ('other current liabilities', 28), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('current maturities of long-term debt', 24), ('current maturities of longterm debt', 24), ('other current liabilities', 22), ('current maturities', 20), ('other financial liabilities', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('other financial liabilities', 100), ('other current liabilities', 70), ('current maturities of long-term debt', 34), ('current maturities of longterm debt', 34), ('current maturities', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current maturities', 40), ('current maturities of long-term debt', 31), ('current maturities of longterm debt', 31), ('other current liabilities', 25), ('other financial liabilities', 19)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('current maturities', 75), ('other current liabilities', 58), ('current maturities of long-term debt', 53), ('current maturities of longterm debt', 53), ('other financial liabilities', 19)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other financial liabilities', 75), ('other current liabilities', 75), ('current maturities of long-term debt', 31), ('current maturities of longterm debt', 31), ('current maturities', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 19], 'score': 100, 'value': 150004.0, 'line_item_label': ['Current liabilities', 'Other financial liabilities'], 'note_numbers': [nan, '22'], 'line_item_value': [0.0, 150004.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other financial liabilities', 'other current liabilities', 'current maturities', 'current maturities of long-term debt', 'current maturities of longterm debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('current maturities', 67), ('current maturities of long-term debt', 49), ('current maturities of longterm debt', 49), ('other financial liabilities', 47)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current maturities of long-term debt', 45), ('current maturities of longterm debt', 45), ('other financial liabilities', 43), ('other current liabilities', 43), ('current maturities', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('other financial liabilities', 34), ('other current liabilities', 28), ('current maturities of long-term debt', 28), ('current maturities of longterm debt', 28), ('current maturities', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('current maturities of long-term debt', 24), ('current maturities of longterm debt', 24), ('other current liabilities', 22), ('current maturities', 20), ('other financial liabilities', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other financial liabilities', 52), ('other current liabilities', 52), ('current maturities', 25), ('current maturities of long-term debt', 21), ('current maturities of longterm debt', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('other financial liabilities', 100), ('other current liabilities', 70), ('current maturities of long-term debt', 34), ('current maturities of longterm debt', 34), ('current maturities', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current maturities', 40), ('current maturities of long-term debt', 31), ('current maturities of longterm debt', 31), ('other current liabilities', 25), ('other financial liabilities', 19)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('current maturities', 75), ('other current liabilities', 58), ('current maturities of long-term debt', 53), ('current maturities of longterm debt', 53), ('other financial liabilities', 19)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('current maturities of long-term debt', 12), ('current maturities of longterm debt', 12), ('current maturities', 11), ('other financial liabilities', 8)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other financial liabilities', 75), ('other current liabilities', 75), ('current maturities of long-term debt', 31), ('current maturities of longterm debt', 31), ('current maturities', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 19], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities', 'Other financial liabilities'], 'note_numbers': [nan, '22'], 'line_item_value': [0.0, 0.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current maturities'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('current maturities', 38)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('current maturities', 38)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current maturities', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['note payable(debt)']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_note_payable_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('note payable(debt)', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('note payable(debt)', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('note payable(debt)', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('note payable(debt)', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('note payable(debt)', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('note payable(debt)', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['note payable(debt)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('note payable(debt)', 40)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('note payable(debt)', 68)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('note payable(debt)', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('note payable(debt)', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('note payable(debt)', 37)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('note payable(debt)', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('note payable(debt)', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('note payable(debt)', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('note payable(debt)', 9)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('note payable(debt)', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accounts_payable
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('accounts payable', 35), ('trade and other payables', 32), ('trade payable', 29), ('other than micro and small enterprises', 27), ('micro enterprises', 25), ('small enterprises', 25), ('outstanding dues of creditors other than', 24), ('micro enterprises and small enterprises', 23), ('other trade payables', 22), ('outstanding dues of micro enterprises and small enterprises', 21), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 16)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('micro enterprises', 36), ('trade and other payables', 28), ('other than micro and small enterprises', 28), ('small enterprises', 27), ('outstanding dues of creditors other than', 26), ('micro enterprises and small enterprises', 24), ('other trade payables', 24), ('outstanding dues of micro enterprises and small enterprises', 22), ('trade payable', 21), ('accounts payable', 19), ('outstanding dues of creditors other than micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('trade payable', 44), ('trade and other payables', 43), ('other than micro and small enterprises', 39), ('other trade payables', 37), ('accounts payable', 35), ('outstanding dues of creditors other than', 35), ('outstanding dues of creditors other than micro enterprises and small enterprises', 30), ('total outstanding due of other creditors other than micro and small', 30), ('micro enterprises and small enterprises', 29), ('micro enterprises', 29), ('small enterprises', 29), ('outstanding dues of micro enterprises and small enterprises', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('micro enterprises', 37), ('trade and other payables', 35), ('other trade payables', 33), ('other than micro and small enterprises', 33), ('micro enterprises and small enterprises', 30), ('small enterprises', 30), ('outstanding dues of micro enterprises and small enterprises', 27), ('outstanding dues of creditors other than', 27), ('trade payable', 25), ('total outstanding due of other creditors other than micro and small', 22), ('outstanding dues of creditors other than micro enterprises and small enterprises', 20), ('accounts payable', 8)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('accounts payable', 48), ('small enterprises', 38), ('outstanding dues of creditors other than', 37), ('outstanding dues of micro enterprises and small enterprises', 31), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 30), ('other trade payables', 28), ('total outstanding due of other creditors other than micro and small', 28), ('trade payable', 26), ('other than micro and small enterprises', 26), ('outstanding dues of creditors other than micro enterprises and small enterprises', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade payable', 50), ('trade and other payables', 41), ('other trade payables', 40), ('other than micro and small enterprises', 33), ('outstanding dues of creditors other than', 32), ('micro enterprises and small enterprises', 26), ('accounts payable', 23), ('micro enterprises', 22), ('small enterprises', 22), ('total outstanding due of other creditors other than micro and small', 22), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 55367844.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['18'], 'line_item_value': [55367844.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'accounts payable', 'trade payable', 'micro enterprises and small enterprises', 'outstanding dues of micro enterprises and small enterprises', 'outstanding dues of creditors other than micro enterprises and small enterprises', 'other trade payables', 'micro enterprises', 'small enterprises', 'outstanding dues of creditors other than', 'total outstanding due of other creditors other than micro and small', 'other than micro and small enterprises'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('accounts payable', 57), ('small enterprises', 41), ('micro enterprises and small enterprises', 37), ('micro enterprises', 34), ('trade and other payables', 33), ('outstanding dues of micro enterprises and small enterprises', 32), ('other trade payables', 31), ('outstanding dues of creditors other than', 30), ('other than micro and small enterprises', 28), ('outstanding dues of creditors other than micro enterprises and small enterprises', 27), ('total outstanding due of other creditors other than micro and small', 27), ('trade payable', 23)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other trade payables', 90), ('trade payable', 71), ('accounts payable', 56), ('other than micro and small enterprises', 52), ('outstanding dues of creditors other than', 44), ('micro enterprises and small enterprises', 42), ('total outstanding due of other creditors other than micro and small', 39), ('micro enterprises', 38), ('small enterprises', 38), ('outstanding dues of micro enterprises and small enterprises', 37), ('outstanding dues of creditors other than micro enterprises and small enterprises', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('accounts payable', 35), ('trade and other payables', 32), ('trade payable', 29), ('other than micro and small enterprises', 27), ('micro enterprises', 25), ('small enterprises', 25), ('outstanding dues of creditors other than', 24), ('micro enterprises and small enterprises', 23), ('other trade payables', 22), ('outstanding dues of micro enterprises and small enterprises', 21), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 16)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('micro enterprises', 36), ('trade and other payables', 28), ('other than micro and small enterprises', 28), ('small enterprises', 27), ('outstanding dues of creditors other than', 26), ('micro enterprises and small enterprises', 24), ('other trade payables', 24), ('outstanding dues of micro enterprises and small enterprises', 22), ('trade payable', 21), ('accounts payable', 19), ('outstanding dues of creditors other than micro enterprises and small enterprises', 16), ('total outstanding due of other creditors other than micro and small', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('accounts payable', 40), ('small enterprises', 38), ('trade payable', 35), ('other trade payables', 34), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 26), ('other than micro and small enterprises', 26), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than', 19), ('total outstanding due of other creditors other than micro and small', 17), ('outstanding dues of creditors other than micro enterprises and small enterprises', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('trade payable', 44), ('trade and other payables', 43), ('other than micro and small enterprises', 39), ('other trade payables', 37), ('accounts payable', 35), ('outstanding dues of creditors other than', 35), ('outstanding dues of creditors other than micro enterprises and small enterprises', 30), ('total outstanding due of other creditors other than micro and small', 30), ('micro enterprises and small enterprises', 29), ('micro enterprises', 29), ('small enterprises', 29), ('outstanding dues of micro enterprises and small enterprises', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('micro enterprises', 37), ('trade and other payables', 35), ('other trade payables', 33), ('other than micro and small enterprises', 33), ('micro enterprises and small enterprises', 30), ('small enterprises', 30), ('outstanding dues of micro enterprises and small enterprises', 27), ('outstanding dues of creditors other than', 27), ('trade payable', 25), ('total outstanding due of other creditors other than micro and small', 22), ('outstanding dues of creditors other than micro enterprises and small enterprises', 20), ('accounts payable', 8)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('accounts payable', 48), ('small enterprises', 38), ('outstanding dues of creditors other than', 37), ('outstanding dues of micro enterprises and small enterprises', 31), ('micro enterprises', 31), ('trade and other payables', 30), ('micro enterprises and small enterprises', 30), ('other trade payables', 28), ('total outstanding due of other creditors other than micro and small', 28), ('trade payable', 26), ('other than micro and small enterprises', 26), ('outstanding dues of creditors other than micro enterprises and small enterprises', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('micro enterprises', 38), ('small enterprises', 38), ('trade payable', 22), ('micro enterprises and small enterprises', 20), ('other than micro and small enterprises', 19), ('other trade payables', 17), ('outstanding dues of creditors other than', 16), ('outstanding dues of micro enterprises and small enterprises', 15), ('trade and other payables', 14), ('total outstanding due of other creditors other than micro and small', 12), ('outstanding dues of creditors other than micro enterprises and small enterprises', 11), ('accounts payable', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('trade payable', 50), ('trade and other payables', 41), ('other trade payables', 40), ('other than micro and small enterprises', 33), ('outstanding dues of creditors other than', 32), ('micro enterprises and small enterprises', 26), ('accounts payable', 23), ('micro enterprises', 22), ('small enterprises', 22), ('total outstanding due of other creditors other than micro and small', 22), ('outstanding dues of micro enterprises and small enterprises', 20), ('outstanding dues of creditors other than micro enterprises and small enterprises', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': 42899673.0, 'line_item_label': ['Trade and other payables'], 'note_numbers': ['18'], 'line_item_value': [42899673.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 67), (' related party payables', 63), (' amounts payable to controlling entity', 60), (' trade and other payables', 55), ('trade creditors', 50), ('current', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [(' trade payables', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' trade payables - related parties', 78), (' trade and other payables', 72), (' amounts payable to controlling entity', 67), (' other trade payables', 67), ('trade creditors', 50), (' related party payables', 50), ('current', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('current', 43), (' amounts payable to controlling entity', 42), ('trade creditors', 33), (' related party payables', 33), (' trade payables - related parties', 33), (' other trade payables', 33), (' trade and other payables', 25), (' trade payables', 25), (' trade payables - other parties', 25), (' trade payables', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 67), (' related party payables', 63), (' amounts payable to controlling entity', 60), (' trade and other payables', 55), ('trade creditors', 50), ('current', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [(' trade payables', 100), (' trade payables - other parties', 100), (' trade payables', 100), (' trade payables - related parties', 78), (' trade and other payables', 72), (' amounts payable to controlling entity', 67), (' other trade payables', 67), ('trade creditors', 50), (' related party payables', 50), ('current', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('current', 43), (' amounts payable to controlling entity', 42), ('trade creditors', 33), (' related party payables', 33), (' trade payables - related parties', 33), (' other trade payables', 33), (' trade and other payables', 25), (' trade payables', 25), (' trade payables - other parties', 25), (' trade payables', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 5], 'score': [100, 100, 100, 100], 'value': [41304444.0, 693692.0, 53934092.0, 410079.0], 'label': [' Trade payables related parties', ' Trade payables - others', ' Trade payables related parties', ' Trade payables - others'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current', 'trade creditors', ' trade and other payables', ' related party payables', ' trade payables', ' trade payables - related parties', ' trade payables - other parties', ' trade payables', ' amounts payable to controlling entity', ' other trade payables'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 67), (' related party payables', 63), (' amounts payable to controlling entity', 60), (' trade and other payables', 55), ('trade creditors', 50), ('current', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables', 100), (' trade payables - related parties', 100), (' trade payables', 100), (' trade payables - other parties', 83), (' other trade payables', 67), (' related party payables', 63), (' amounts payable to controlling entity', 60), (' trade and other payables', 55), ('trade creditors', 50), ('current', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade creditors', 0), (' trade and other payables', 0), (' related party payables', 0), (' trade payables', 0), (' trade payables - related parties', 0), (' trade payables - other parties', 0), (' trade payables', 0), (' amounts payable to controlling entity', 0), (' other trade payables', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [100, 100], 'value': [0.0, 5439086.0], 'label': [' Trade payables related parties', ' Trade payables related parties'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['accrued expenses', 'interest accrued']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_accrued_expenses
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('other financial liabilities', 34), ('trade and other payables', 32), ('other liabilities', 29), ('other current liabilities', 28), ('other current financial liabilities', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('trade and other payables', 28), ('other current liabilities', 22), ('other liabilities', 21), ('other current financial liabilities', 17), ('other financial liabilities', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('other financial liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other current liabilities', 70), ('trade and other payables', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('trade and other payables', 35), ('other current liabilities', 25), ('other current financial liabilities', 20), ('other financial liabilities', 19), ('other liabilities', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('other current liabilities', 58), ('other current financial liabilities', 46), ('trade and other payables', 30), ('other financial liabilities', 19), ('other liabilities', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other liabilities', 100), ('other current liabilities', 75), ('other financial liabilities', 75), ('other current financial liabilities', 60), ('trade and other payables', 41)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 19, 23], 'score': 100, 'value': 56172781.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Other financial liabilities', 'Other liabilities'], 'note_numbers': [nan, '18', '22', '25'], 'line_item_value': [0.0, 55367844.0, 150004.0, 654933.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['trade and other payables', 'other current liabilities', 'other financial liabilities', 'other current financial liabilities', 'other liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), ('other current financial liabilities', 67), ('other financial liabilities', 47), ('other liabilities', 46), ('trade and other payables', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other current liabilities', 43), ('other financial liabilities', 43), ('other liabilities', 41), ('other current financial liabilities', 40)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('other financial liabilities', 34), ('trade and other payables', 32), ('other liabilities', 29), ('other current liabilities', 28), ('other current financial liabilities', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('trade and other payables', 28), ('other current liabilities', 22), ('other liabilities', 21), ('other current financial liabilities', 17), ('other financial liabilities', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('other current liabilities', 52), ('other financial liabilities', 52), ('other liabilities', 52), ('other current financial liabilities', 46), ('trade and other payables', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('other financial liabilities', 100), ('other current financial liabilities', 83), ('other liabilities', 75), ('other current liabilities', 70), ('trade and other payables', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('trade and other payables', 35), ('other current liabilities', 25), ('other current financial liabilities', 20), ('other financial liabilities', 19), ('other liabilities', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('other current liabilities', 58), ('other current financial liabilities', 46), ('trade and other payables', 30), ('other financial liabilities', 19), ('other liabilities', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('other current liabilities', 15), ('trade and other payables', 14), ('other current financial liabilities', 12), ('other liabilities', 11), ('other financial liabilities', 8)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other liabilities', 100), ('other current liabilities', 75), ('other financial liabilities', 75), ('other current financial liabilities', 60), ('trade and other payables', 41)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 19, 23], 'score': 100, 'value': 43413841.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Other financial liabilities', 'Other liabilities'], 'note_numbers': [nan, '18', '22', '25'], 'line_item_value': [0.0, 42899673.0, 0.0, 514168.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [('interest accrued', 29), ('accrued expenses', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 42)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [('interest accrued', 29), ('accrued expenses', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [('accrued expenses', 100), ('interest accrued', 42)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 6], 'score': [100, 100], 'value': [901537.0, 1023673.0], 'label': [' Accrued expenses', ' Accrued expenses'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [('interest accrued', 43), ('accrued expenses', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('accrued expenses', 42), ('interest accrued', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [('accrued expenses', 42), ('interest accrued', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('accrued expenses', 0), ('interest accrued', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['accrued expenses', 'interest accrued'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['current tax liabilities', ' income tax payable', 'tax']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['income tax (refundable)/payable']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_tax_payable
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('current tax liabilities', 44), (' income tax payable', 33), ('tax', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('tax', 33), ('current tax liabilities', 29), (' income tax payable', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('current tax liabilities', 56), (' income tax payable', 44), ('tax', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current tax liabilities', 25), (' income tax payable', 8), ('tax', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 45)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 43), ('tax', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 1613535.0, 'line_item_label': ['Current tax'], 'note_numbers': ['10'], 'line_item_value': [1613535.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current tax liabilities', ' income tax payable', 'tax'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current tax liabilities', 71), (' income tax payable', 43), ('tax', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('tax', 67), (' income tax payable', 62), ('current tax liabilities', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('current tax liabilities', 44), (' income tax payable', 33), ('tax', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('tax', 33), ('current tax liabilities', 29), (' income tax payable', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current tax liabilities', 73), (' income tax payable', 48), ('tax', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('current tax liabilities', 56), (' income tax payable', 44), ('tax', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current tax liabilities', 25), (' income tax payable', 8), ('tax', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('current tax liabilities', 100), ('tax', 100), (' income tax payable', 45)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current tax liabilities', 17), (' income tax payable', 17), ('tax', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current tax liabilities', 67), (' income tax payable', 43), ('tax', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [21], 'score': 100, 'value': 2155291.0, 'line_item_label': ['Current tax'], 'note_numbers': ['10'], 'line_item_value': [2155291.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) current year , res_fuzz_match = [('income tax (refundable)/payable', 57)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) prior year's adjustment , res_fuzz_match = [('income tax (refundable)/payable', 57)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - current year , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - prior year's adjustment , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) , res_fuzz_match = [('income tax (refundable)/payable', 40)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) income tax expense , res_fuzz_match = [('income tax (refundable)/payable', 52)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('income tax (refundable)/payable', 52)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('income tax (refundable)/payable', 61)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('income tax (refundable)/payable', 61)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [('income tax (refundable)/payable', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('income tax (refundable)/payable', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('income tax (refundable)/payable', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.3current tax assets and liabilities , res_fuzz_match = [('income tax (refundable)/payable', 57)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): income tax receivable/(payable) , res_fuzz_match = [('income tax (refundable)/payable', 83)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): , res_fuzz_match = [('income tax (refundable)/payable', 49)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) current year , res_fuzz_match = [('income tax (refundable)/payable', 57)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) prior year's adjustment , res_fuzz_match = [('income tax (refundable)/payable', 57)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - current year , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - prior year's adjustment , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) , res_fuzz_match = [('income tax (refundable)/payable', 40)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) income tax expense , res_fuzz_match = [('income tax (refundable)/payable', 52)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('income tax (refundable)/payable', 52)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('income tax (refundable)/payable', 61)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('income tax (refundable)/payable', 61)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [('income tax (refundable)/payable', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [('income tax (refundable)/payable', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('income tax (refundable)/payable', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 10.3current tax assets and liabilities , res_fuzz_match = [('income tax (refundable)/payable', 57)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): income tax receivable/(payable) , res_fuzz_match = [('income tax (refundable)/payable', 83)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): , res_fuzz_match = [('income tax (refundable)/payable', 49)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [15, 32], 'score': [83, 83], 'value': [-2155291.0, -1613535.0], 'label': ['Current tax assets/(liabilities): Income tax receivable/(payable)', 'Current tax assets/(liabilities): Income tax receivable/(payable)'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['income tax (refundable)/payable'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('income tax (refundable)/payable', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('income tax (refundable)/payable', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [('income tax (refundable)/payable', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [('income tax (refundable)/payable', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [('income tax (refundable)/payable', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [('income tax (refundable)/payable', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax (refundable)/payable', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_other_current_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [(' financial liabilities', 43), (' employee benefits', 42), (' other financial liabilities', 34), (' trade and other payables', 32), ('other current liabilities', 28), (' other current liabilities', 28), (' foreign exchange contract liability', 25), (' deferred revenue', 19), (' customer deposits', 17), ('provisions', 13)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [(' customer deposits', 67), ('provisions', 46), (' trade and other payables', 28), (' employee benefits', 27), ('other current liabilities', 22), (' other current liabilities', 22), (' deferred revenue', 21), (' foreign exchange contract liability', 16), (' other financial liabilities', 15), (' financial liabilities', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [(' other financial liabilities', 100), (' financial liabilities', 82), ('other current liabilities', 70), (' other current liabilities', 70), (' trade and other payables', 43), (' foreign exchange contract liability', 43), (' employee benefits', 34), (' customer deposits', 24), (' deferred revenue', 19), ('provisions', 8)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [(' deferred revenue', 100), (' employee benefits', 37), (' trade and other payables', 35), ('other current liabilities', 25), (' other current liabilities', 25), (' foreign exchange contract liability', 23), ('provisions', 22), (' other financial liabilities', 19), (' financial liabilities', 15), (' customer deposits', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('other current liabilities', 58), (' other current liabilities', 58), (' customer deposits', 40), (' deferred revenue', 35), (' foreign exchange contract liability', 33), (' employee benefits', 31), (' trade and other payables', 30), (' financial liabilities', 24), (' other financial liabilities', 19), ('provisions', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other current liabilities', 75), (' other current liabilities', 75), (' other financial liabilities', 75), (' financial liabilities', 46), (' trade and other payables', 41), (' employee benefits', 37), (' foreign exchange contract liability', 28), (' customer deposits', 23), (' deferred revenue', 17), ('provisions', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 19, 20, 22], 'score': 100, 'value': 56896113.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Other financial liabilities', 'Deferred revenue', 'Provisions'], 'note_numbers': [nan, '18', '22', '23', '24'], 'line_item_value': [0.0, 55367844.0, 150004.0, 197643.0, 1180622.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other current liabilities', 'provisions', ' financial liabilities', ' trade and other payables', ' employee benefits', ' other current liabilities', ' other financial liabilities', ' deferred revenue', ' customer deposits', ' foreign exchange contract liability'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('other current liabilities', 82), (' other current liabilities', 82), (' financial liabilities', 57), (' foreign exchange contract liability', 53), (' other financial liabilities', 47), (' customer deposits', 36), (' employee benefits', 34), (' trade and other payables', 33), (' deferred revenue', 31), ('provisions', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' trade and other payables', 100), ('other current liabilities', 43), (' other current liabilities', 43), (' other financial liabilities', 43), (' deferred revenue', 35), (' foreign exchange contract liability', 34), (' financial liabilities', 33), (' employee benefits', 32), (' customer deposits', 22), ('provisions', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [(' financial liabilities', 43), (' employee benefits', 42), (' other financial liabilities', 34), (' trade and other payables', 32), ('other current liabilities', 28), (' other current liabilities', 28), (' foreign exchange contract liability', 25), (' deferred revenue', 19), (' customer deposits', 17), ('provisions', 13)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [(' customer deposits', 67), ('provisions', 46), (' trade and other payables', 28), (' employee benefits', 27), ('other current liabilities', 22), (' other current liabilities', 22), (' deferred revenue', 21), (' foreign exchange contract liability', 16), (' other financial liabilities', 15), (' financial liabilities', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), ('other current liabilities', 52), (' other current liabilities', 52), (' other financial liabilities', 52), (' foreign exchange contract liability', 43), (' trade and other payables', 30), (' customer deposits', 24), (' employee benefits', 23), (' deferred revenue', 17), ('provisions', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [(' other financial liabilities', 100), (' financial liabilities', 82), ('other current liabilities', 70), (' other current liabilities', 70), (' trade and other payables', 43), (' foreign exchange contract liability', 43), (' employee benefits', 34), (' customer deposits', 24), (' deferred revenue', 19), ('provisions', 8)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [(' deferred revenue', 100), (' employee benefits', 37), (' trade and other payables', 35), ('other current liabilities', 25), (' other current liabilities', 25), (' foreign exchange contract liability', 23), ('provisions', 22), (' other financial liabilities', 19), (' financial liabilities', 15), (' customer deposits', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('other current liabilities', 58), (' other current liabilities', 58), (' customer deposits', 40), (' deferred revenue', 35), (' foreign exchange contract liability', 33), (' employee benefits', 31), (' trade and other payables', 30), (' financial liabilities', 24), (' other financial liabilities', 19), ('provisions', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('provisions', 100), (' customer deposits', 30), (' deferred revenue', 22), (' employee benefits', 19), (' foreign exchange contract liability', 16), ('other current liabilities', 15), (' other current liabilities', 15), (' trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('other current liabilities', 75), (' other current liabilities', 75), (' other financial liabilities', 75), (' financial liabilities', 46), (' trade and other payables', 41), (' employee benefits', 37), (' foreign exchange contract liability', 28), (' customer deposits', 23), (' deferred revenue', 17), ('provisions', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14, 15, 19, 20, 22], 'score': 100, 'value': 44055365.0, 'line_item_label': ['Current liabilities', 'Trade and other payables', 'Other financial liabilities', 'Deferred revenue', 'Provisions'], 'note_numbers': [nan, '18', '22', '23', '24'], 'line_item_value': [0.0, 42899673.0, 0.0, 146859.0, 1008833.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' rebates', 80), (' loan payable to relayed party under tax funding agreement', 79), (' other related parties', 71), (' gst payables', 70), (' loans from related party', 62), (' gst payable and accruals', 55), (' warranty', 50), (' contract liabilites - current', 48), (' employee benefits - payroll', 48), (' ultimate parent entity', 47), ('current', 43), (' employee benefits - current', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 40), (' restructuring', 40), (' make good provisions', 39), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' share of joint venture payables', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 33), (' gst', 33), (' secured long-term bank loans', 29), (' arising from service contracts', 29), (' provision for associate funding', 27), (' other', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 56), (' gst payable and accruals', 56), (' contract liabilites - current', 50), (' share of joint venture payables', 50), ('other creditors and accruals', 44), (' current - liability for annual and long service leave', 44), (' forward exchange contracts', 44), (' other related parties', 41), (' gst liabilities', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' total current employee benefits', 39), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' loans from related party', 34), (' ultimate parent entity', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 31), ('current', 29), (' employee benefits - current', 28), (' warranty', 25), (' provision for associate funding', 22), (' provisions - current', 21), (' restructuring', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [(' forward exchange contracts', 50), ('current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' gst payable and accruals', 42), (' total current employee benefits', 42), (' rebates', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' contract liabilites - current', 33), (' share of joint venture payables', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 25), (' other creditors', 25), (' employee benefits - payroll', 25), (' make good provisions', 25), (' other creditors', 25), (' gst payables', 20), (' other', 20), (' warranty', 12), (' gst liabilities', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' rebates', 80), (' loan payable to relayed party under tax funding agreement', 79), (' other related parties', 71), (' gst payables', 70), (' loans from related party', 62), (' gst payable and accruals', 55), (' warranty', 50), (' contract liabilites - current', 48), (' employee benefits - payroll', 48), (' ultimate parent entity', 47), ('current', 43), (' employee benefits - current', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 40), (' restructuring', 40), (' make good provisions', 39), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' share of joint venture payables', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 33), (' gst', 33), (' secured long-term bank loans', 29), (' arising from service contracts', 29), (' provision for associate funding', 27), (' other', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [(' other', 100), (' gst payables', 70), (' loan payable to relayed party under tax funding agreement', 56), (' gst payable and accruals', 56), (' contract liabilites - current', 50), (' share of joint venture payables', 50), ('other creditors and accruals', 44), (' current - liability for annual and long service leave', 44), (' forward exchange contracts', 44), (' other related parties', 41), (' gst liabilities', 40), (' rebates', 40), (' derivative contracts - at fair value', 39), (' secured long-term bank loans', 39), (' total current employee benefits', 39), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' loans from related party', 34), (' ultimate parent entity', 33), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' arising from service contracts', 33), (' gst', 33), (' make good provisions', 31), ('current', 29), (' employee benefits - current', 28), (' warranty', 25), (' provision for associate funding', 22), (' provisions - current', 21), (' restructuring', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [(' forward exchange contracts', 50), ('current', 43), ('other creditors and accruals', 42), (' ultimate parent entity', 42), (' loan payable to relayed party under tax funding agreement', 42), (' gst payable and accruals', 42), (' total current employee benefits', 42), (' rebates', 40), (' other related parties', 33), (' derivative contracts - at fair value', 33), (' secured long-term bank loans', 33), (' loans from related party', 33), (' employee benefits - current', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' contract liabilites - current', 33), (' share of joint venture payables', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' gst', 33), (' restructuring', 30), (' other creditors', 25), (' other creditors', 25), (' employee benefits - payroll', 25), (' make good provisions', 25), (' other creditors', 25), (' gst payables', 20), (' other', 20), (' warranty', 12), (' gst liabilities', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 4, 5], 'score': [80, 100, 80, 100], 'value': [41304444.0, 693692.0, 53934092.0, 410079.0], 'label': [' Trade payables related parties', ' Trade payables - others', ' Trade payables related parties', ' Trade payables - others'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' rebates', 80), (' loan payable to relayed party under tax funding agreement', 79), (' other related parties', 71), (' gst payables', 70), (' loans from related party', 62), (' gst payable and accruals', 55), (' warranty', 50), (' contract liabilites - current', 48), (' employee benefits - payroll', 48), (' ultimate parent entity', 47), ('current', 43), (' employee benefits - current', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 40), (' restructuring', 40), (' make good provisions', 39), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' share of joint venture payables', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 33), (' gst', 33), (' secured long-term bank loans', 29), (' arising from service contracts', 29), (' provision for associate funding', 27), (' other', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' rebates', 80), (' loan payable to relayed party under tax funding agreement', 79), (' other related parties', 71), (' gst payables', 70), (' loans from related party', 62), (' gst payable and accruals', 55), (' warranty', 50), (' contract liabilites - current', 48), (' employee benefits - payroll', 48), (' ultimate parent entity', 47), ('current', 43), (' employee benefits - current', 42), (' current - liability for annual and long service leave', 42), (' gst liabilities', 40), (' restructuring', 40), (' make good provisions', 39), ('other creditors and accruals', 38), (' derivative contracts - at fair value', 38), (' share of joint venture payables', 38), (' forward exchange contracts', 38), (' total current employee benefits', 38), (' other creditors', 36), (' other creditors', 36), (' provisions - current', 36), (' other creditors', 36), (' abandonment and decommissioning costs', 33), (' gst', 33), (' secured long-term bank loans', 29), (' arising from service contracts', 29), (' provision for associate funding', 27), (' other', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [80, 80], 'value': [0.0, 5439086.0], 'label': [' Trade payables related parties', ' Trade payables related parties'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [(' forward exchange contracts', 67), (' rebates', 60), (' arising from service contracts', 56), (' warranty', 50), (' loans from related party', 48), (' derivative contracts - at fair value', 46), (' current - liability for annual and long service leave', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' restructuring', 40), (' other', 40), ('other creditors and accruals', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' ultimate parent entity', 37), (' gst payable and accruals', 36), (' provisions - current', 36), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' provision for associate funding', 36), (' other related parties', 35), (' total current employee benefits', 34), (' gst', 33), (' employee benefits - payroll', 32), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = foreign exchange forward contracts , res_fuzz_match = [(' forward exchange contracts', 67), (' rebates', 60), (' arising from service contracts', 56), (' warranty', 50), (' loans from related party', 48), (' derivative contracts - at fair value', 46), (' current - liability for annual and long service leave', 44), ('current', 43), (' other creditors', 43), (' other creditors', 43), (' other creditors', 43), (' restructuring', 40), (' other', 40), ('other creditors and accruals', 38), (' loan payable to relayed party under tax funding agreement', 38), (' secured long-term bank loans', 38), (' abandonment and decommissioning costs', 38), (' make good provisions', 38), (' ultimate parent entity', 37), (' gst payable and accruals', 36), (' provisions - current', 36), (' contract liabilites - current', 36), (' share of joint venture payables', 36), (' provision for associate funding', 36), (' other related parties', 35), (' total current employee benefits', 34), (' gst', 33), (' employee benefits - payroll', 32), (' employee benefits - current', 30), (' gst payables', 30), (' gst liabilities', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' current - liability for annual and long service leave', 44), (' arising from service contracts', 44), (' provisions - current', 43), (' other', 40), (' other related parties', 39), (' loans from related party', 39), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' ultimate parent entity', 31), (' derivative contracts - at fair value', 31), (' loan payable to relayed party under tax funding agreement', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' provision for associate funding', 31), (' forward exchange contracts', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), ('other creditors and accruals', 25), (' employee benefits - current', 25), (' warranty', 25), (' total current employee benefits', 25), (' rebates', 20), (' restructuring', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' current - liability for annual and long service leave', 44), (' arising from service contracts', 44), (' provisions - current', 43), (' other', 40), (' other related parties', 39), (' loans from related party', 39), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' ultimate parent entity', 31), (' derivative contracts - at fair value', 31), (' loan payable to relayed party under tax funding agreement', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' provision for associate funding', 31), (' forward exchange contracts', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), ('other creditors and accruals', 25), (' employee benefits - current', 25), (' warranty', 25), (' total current employee benefits', 25), (' rebates', 20), (' restructuring', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' current - liability for annual and long service leave', 44), (' arising from service contracts', 44), (' provisions - current', 43), (' other', 40), (' other related parties', 39), (' loans from related party', 39), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' ultimate parent entity', 31), (' derivative contracts - at fair value', 31), (' loan payable to relayed party under tax funding agreement', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' provision for associate funding', 31), (' forward exchange contracts', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), ('other creditors and accruals', 25), (' employee benefits - current', 25), (' warranty', 25), (' total current employee benefits', 25), (' rebates', 20), (' restructuring', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' current - liability for annual and long service leave', 44), (' arising from service contracts', 44), (' provisions - current', 43), (' other', 40), (' other related parties', 39), (' loans from related party', 39), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' ultimate parent entity', 31), (' derivative contracts - at fair value', 31), (' loan payable to relayed party under tax funding agreement', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' provision for associate funding', 31), (' forward exchange contracts', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), ('other creditors and accruals', 25), (' employee benefits - current', 25), (' warranty', 25), (' total current employee benefits', 25), (' rebates', 20), (' restructuring', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('current', 0), ('other creditors and accruals', 0), (' ultimate parent entity', 0), (' other related parties', 0), (' other creditors', 0), (' derivative contracts - at fair value', 0), (' loan payable to relayed party under tax funding agreement', 0), (' secured long-term bank loans', 0), (' loans from related party', 0), (' other creditors', 0), (' gst payable and accruals', 0), (' employee benefits - current', 0), (' current - liability for annual and long service leave', 0), (' provisions - current', 0), (' contract liabilites - current', 0), (' share of joint venture payables', 0), (' gst payables', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' arising from service contracts', 0), (' make good provisions', 0), (' gst liabilities', 0), (' gst', 0), (' rebates', 0), (' forward exchange contracts', 0), (' other creditors', 0), (' restructuring', 0), (' warranty', 0), (' other', 0), (' total current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4, 6, 7, 9, 10], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [971917.0, 36916.0, 86717.0, 409716.0, 1033607.0, 147015.0, 55638.0, 196972.0], 'label': ['  Employee benefits', '  Make good provision', '  Employee benefits', '  Make good provision', '  Employee benefits', '  Make good provision', '  Employee benefits', '  Make good provision'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current', 'other creditors and accruals', ' ultimate parent entity', ' other related parties', ' other creditors', ' derivative contracts - at fair value', ' loan payable to relayed party under tax funding agreement', ' secured long-term bank loans', ' loans from related party', ' other creditors', ' gst payable and accruals', ' employee benefits - current', ' current - liability for annual and long service leave', ' provisions - current', ' contract liabilites - current', ' share of joint venture payables', ' gst payables', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' arising from service contracts', ' make good provisions', ' gst liabilities', ' gst', ' rebates', ' forward exchange contracts', ' other creditors', ' restructuring', ' warranty', ' other', ' total current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 1 january 2022 , res_fuzz_match = [('other creditors and accruals', 50), (' share of joint venture payables', 50), (' warranty', 50), (' other related parties', 47), (' derivative contracts - at fair value', 45), (' loan payable to relayed party under tax funding agreement', 45), (' secured long-term bank loans', 45), (' loans from related party', 45), (' current - liability for annual and long service leave', 45), ('current', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' gst liabilities', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), (' forward exchange contracts', 40), (' restructuring', 40), (' other', 40), (' total current employee benefits', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 35), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 35), (' gst', 33), (' employee benefits - payroll', 31), (' make good provisions', 31), (' employee benefits - current', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('other creditors and accruals', 60), (' other creditors', 60), (' other creditors', 60), (' abandonment and decommissioning costs', 60), (' other creditors', 60), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' loans from related party', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' rebates', 40), (' forward exchange contracts', 40), (' warranty', 40), (' total current employee benefits', 40), (' gst', 33), ('current', 20), (' loan payable to relayed party under tax funding agreement', 20), (' secured long-term bank loans', 20), (' gst payable and accruals', 20), (' provisions - current', 20), (' gst payables', 20), (' provision for associate funding', 20), (' make good provisions', 20), (' restructuring', 20), (' other', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = amount charged , res_fuzz_match = [(' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' forward exchange contracts', 50), ('current', 43), ('other creditors and accruals', 42), (' other related parties', 42), (' other creditors', 42), (' secured long-term bank loans', 42), (' loans from related party', 42), (' other creditors', 42), (' gst payable and accruals', 42), (' employee benefits - current', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' other creditors', 42), (' total current employee benefits', 42), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst', 33), (' gst payables', 32), (' gst liabilities', 32), (' restructuring', 30), (' rebates', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 31 december 2022 , res_fuzz_match = [(' warranty', 50), (' loan payable to relayed party under tax funding agreement', 47), (' secured long-term bank loans', 47), (' abandonment and decommissioning costs', 47), (' total current employee benefits', 47), ('current', 43), (' provisions - current', 43), ('other creditors and accruals', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' arising from service contracts', 42), (' rebates', 40), (' restructuring', 40), (' other', 40), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 37), (' contract liabilites - current', 37), (' provision for associate funding', 37), (' forward exchange contracts', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' gst', 33), (' loans from related party', 32), (' gst payable and accruals', 32), (' employee benefits - current', 32), (' gst payables', 30), (' gst liabilities', 30), (' other related parties', 29), (' make good provisions', 25), (' employee benefits - payroll', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - current', 100), (' employee benefits - payroll', 100), (' total current employee benefits', 100), (' ultimate parent entity', 53), (' other creditors', 46), (' other creditors', 46), (' other creditors', 46), (' provisions - current', 44), ('current', 43), (' secured long-term bank loans', 40), (' share of joint venture payables', 40), (' rebates', 40), (' other', 40), (' loan payable to relayed party under tax funding agreement', 33), (' current - liability for annual and long service leave', 33), (' contract liabilites - current', 33), (' abandonment and decommissioning costs', 33), (' gst', 33), (' gst liabilities', 30), (' make good provisions', 28), ('other creditors and accruals', 27), (' other related parties', 27), (' derivative contracts - at fair value', 27), (' loans from related party', 27), (' gst payable and accruals', 27), (' arising from service contracts', 27), (' forward exchange contracts', 27), (' warranty', 25), (' gst payables', 20), (' provision for associate funding', 20), (' restructuring', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 1 january 2022 , res_fuzz_match = [('other creditors and accruals', 50), (' share of joint venture payables', 50), (' warranty', 50), (' other related parties', 47), (' derivative contracts - at fair value', 45), (' loan payable to relayed party under tax funding agreement', 45), (' secured long-term bank loans', 45), (' loans from related party', 45), (' current - liability for annual and long service leave', 45), ('current', 43), (' provisions - current', 43), (' ultimate parent entity', 42), (' gst liabilities', 42), (' gst payable and accruals', 41), (' gst payables', 40), (' arising from service contracts', 40), (' rebates', 40), (' forward exchange contracts', 40), (' restructuring', 40), (' other', 40), (' total current employee benefits', 40), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' contract liabilites - current', 35), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 35), (' gst', 33), (' employee benefits - payroll', 31), (' make good provisions', 31), (' employee benefits - current', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' current - liability for annual and long service leave', 44), (' arising from service contracts', 44), (' provisions - current', 43), (' other', 40), (' other related parties', 39), (' loans from related party', 39), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' ultimate parent entity', 31), (' derivative contracts - at fair value', 31), (' loan payable to relayed party under tax funding agreement', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' provision for associate funding', 31), (' forward exchange contracts', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), ('other creditors and accruals', 25), (' employee benefits - current', 25), (' warranty', 25), (' total current employee benefits', 25), (' rebates', 20), (' restructuring', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [('other creditors and accruals', 60), (' other creditors', 60), (' other creditors', 60), (' abandonment and decommissioning costs', 60), (' other creditors', 60), (' ultimate parent entity', 40), (' other related parties', 40), (' derivative contracts - at fair value', 40), (' loans from related party', 40), (' employee benefits - current', 40), (' current - liability for annual and long service leave', 40), (' contract liabilites - current', 40), (' share of joint venture payables', 40), (' employee benefits - payroll', 40), (' arising from service contracts', 40), (' gst liabilities', 40), (' rebates', 40), (' forward exchange contracts', 40), (' warranty', 40), (' total current employee benefits', 40), (' gst', 33), ('current', 20), (' loan payable to relayed party under tax funding agreement', 20), (' secured long-term bank loans', 20), (' gst payable and accruals', 20), (' provisions - current', 20), (' gst payables', 20), (' provision for associate funding', 20), (' make good provisions', 20), (' restructuring', 20), (' other', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' current - liability for annual and long service leave', 44), (' arising from service contracts', 44), (' provisions - current', 43), (' other', 40), (' other related parties', 39), (' loans from related party', 39), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' ultimate parent entity', 31), (' derivative contracts - at fair value', 31), (' loan payable to relayed party under tax funding agreement', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' provision for associate funding', 31), (' forward exchange contracts', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), ('other creditors and accruals', 25), (' employee benefits - current', 25), (' warranty', 25), (' total current employee benefits', 25), (' rebates', 20), (' restructuring', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = amount charged , res_fuzz_match = [(' derivative contracts - at fair value', 50), (' loan payable to relayed party under tax funding agreement', 50), (' forward exchange contracts', 50), ('current', 43), ('other creditors and accruals', 42), (' other related parties', 42), (' other creditors', 42), (' secured long-term bank loans', 42), (' loans from related party', 42), (' other creditors', 42), (' gst payable and accruals', 42), (' employee benefits - current', 42), (' contract liabilites - current', 42), (' share of joint venture payables', 42), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' other creditors', 42), (' total current employee benefits', 42), (' other', 40), (' warranty', 38), (' ultimate parent entity', 33), (' current - liability for annual and long service leave', 33), (' provisions - current', 33), (' provision for associate funding', 33), (' arising from service contracts', 33), (' make good provisions', 33), (' gst', 33), (' gst payables', 32), (' gst liabilities', 32), (' restructuring', 30), (' rebates', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' current - liability for annual and long service leave', 44), (' arising from service contracts', 44), (' provisions - current', 43), (' other', 40), (' other related parties', 39), (' loans from related party', 39), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' ultimate parent entity', 31), (' derivative contracts - at fair value', 31), (' loan payable to relayed party under tax funding agreement', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' provision for associate funding', 31), (' forward exchange contracts', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), ('other creditors and accruals', 25), (' employee benefits - current', 25), (' warranty', 25), (' total current employee benefits', 25), (' rebates', 20), (' restructuring', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 31 december 2022 , res_fuzz_match = [(' warranty', 50), (' loan payable to relayed party under tax funding agreement', 47), (' secured long-term bank loans', 47), (' abandonment and decommissioning costs', 47), (' total current employee benefits', 47), ('current', 43), (' provisions - current', 43), ('other creditors and accruals', 42), (' current - liability for annual and long service leave', 42), (' share of joint venture payables', 42), (' arising from service contracts', 42), (' rebates', 40), (' restructuring', 40), (' other', 40), (' ultimate parent entity', 37), (' derivative contracts - at fair value', 37), (' contract liabilites - current', 37), (' provision for associate funding', 37), (' forward exchange contracts', 37), (' other creditors', 36), (' other creditors', 36), (' other creditors', 36), (' gst', 33), (' loans from related party', 32), (' gst payable and accruals', 32), (' employee benefits - current', 32), (' gst payables', 30), (' gst liabilities', 30), (' other related parties', 29), (' make good provisions', 25), (' employee benefits - payroll', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' current - liability for annual and long service leave', 44), (' arising from service contracts', 44), (' provisions - current', 43), (' other', 40), (' other related parties', 39), (' loans from related party', 39), (' share of joint venture payables', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' gst', 33), (' ultimate parent entity', 31), (' derivative contracts - at fair value', 31), (' loan payable to relayed party under tax funding agreement', 31), (' secured long-term bank loans', 31), (' gst payable and accruals', 31), (' provision for associate funding', 31), (' forward exchange contracts', 31), (' gst payables', 30), (' gst liabilities', 30), (' other creditors', 29), (' other creditors', 29), (' other creditors', 29), ('other creditors and accruals', 25), (' employee benefits - current', 25), (' warranty', 25), (' total current employee benefits', 25), (' rebates', 20), (' restructuring', 20), (' contract liabilites - current', 19), ('current', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [1089245.0, 1196504.0, -1227115.0, 1058634.0, 343987.0, 212744.0, -110099.0, 446632.0], 'label': ['Employee Benefits $', 'Employee Benefits $', 'Employee Benefits $', 'Employee Benefits $', 'Make good provisions $', 'Make good provisions $', 'Make good provisions $', 'Make good provisions $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['current liabilities']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = cl_total_current_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('current liabilities', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('current liabilities', 19)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('current liabilities', 47)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current liabilities', 31)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('current liabilities', 72)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current liabilities', 46)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['current liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current liabilities , res_fuzz_match = [('current liabilities', 100)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('current liabilities', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = bank loan , res_fuzz_match = [('current liabilities', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deposits , res_fuzz_match = [('current liabilities', 19)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('current liabilities', 64)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other financial liabilities , res_fuzz_match = [('current liabilities', 47)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred revenue , res_fuzz_match = [('current liabilities', 31)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current tax , res_fuzz_match = [('current liabilities', 72)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('current liabilities', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = other liabilities , res_fuzz_match = [('current liabilities', 46)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [14], 'score': 100, 'value': 0.0, 'line_item_label': ['Current liabilities'], 'note_numbers': [nan], 'line_item_value': [0.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['long term debt']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['long term debt'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term debt', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term debt', 39)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term debt', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term debt', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term debt', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['leases', ' secured finance debt', ' bank loan', ' lease liabilities', ' lease liability', ' lease liabilities - non-current', ' non current', 'later than 1 year', 'not later than 5 years']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_borrowing
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), ('interest bearing loans and borrowings', 45), (' lease liabilities', 45), (' lease liability', 45), (' borrowings', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 4371653.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [4371653.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['interest bearing loans and borrowings', ' borrowings', ' lease liabilities', ' loans and borrowings', ' lease liability'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' lease liabilities', 64), (' lease liability', 64), ('interest bearing loans and borrowings', 36), (' loans and borrowings', 36), (' borrowings', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [(' loans and borrowings', 53), ('interest bearing loans and borrowings', 45), (' lease liabilities', 45), (' lease liability', 45), (' borrowings', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), (' borrowings', 33), (' loans and borrowings', 33), (' lease liabilities', 17), (' lease liability', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' lease liabilities', 100), (' lease liability', 100), ('interest bearing loans and borrowings', 45), (' loans and borrowings', 45), (' borrowings', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), (' lease liabilities', 33), (' loans and borrowings', 33), (' lease liability', 33), (' borrowings', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 7666439.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [7666439.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['(bond)', 'interest bearing loans and borrowings']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_bond
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('(bond)', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['(bond)', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('(bond)', 33), ('interest bearing loans and borrowings', 28)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('(bond)', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('(bond)', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('interest bearing loans and borrowings', 30), ('(bond)', 13)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('(bond)', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_suboardinate_debt
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('lease liabilities', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 4371653.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [4371653.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 48), ('interest bearing loans and borrowings', 28)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('interest bearing loans and borrowings', 47), ('lease liabilities', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 23), ('lease liabilities', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 32), ('lease liabilities', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 7666439.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [7666439.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['lease liabilities', 'interest bearing loans and borrowings']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['deferred tax liabilities', 'total deferred tax (assets) / liabilities']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_deferred_taxes
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 45), ('interest bearing loans and borrowings', 45)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 4371653.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [4371653.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['lease liabilities', 'interest bearing loans and borrowings'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('lease liabilities', 64), ('interest bearing loans and borrowings', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('lease liabilities', 45), ('interest bearing loans and borrowings', 45)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('interest bearing loans and borrowings', 33), ('lease liabilities', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('lease liabilities', 100), ('interest bearing loans and borrowings', 45)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('interest bearing loans and borrowings', 44), ('lease liabilities', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [28], 'score': 100, 'value': 7666439.0, 'line_item_label': ['Lease liabilities'], 'note_numbers': ['21'], 'line_item_value': [7666439.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_other_long_term_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other long term liabilities', 50), (' other financial liabilities', 43), (' other non-current liabilities', 38), (' financial liabilities', 33), (' employee benefits', 32), (' provision for associate funding', 32), (' provisions', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [25, 26, 27], 'score': 100, 'value': 5691696.0, 'line_item_label': ['Non-current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, '20', '24'], 'line_item_value': [0.0, 5439086.0, 252610.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other long term liabilities', 'trade and other payables', ' financial liabilities', ' employee benefits', ' provisions', ' other financial liabilities', ' other non-current liabilities', ' provision for associate funding'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [(' other non-current liabilities', 82), ('other long term liabilities', 61), (' other financial liabilities', 53), (' financial liabilities', 43), (' provision for associate funding', 33), ('trade and other payables', 28), (' employee benefits', 28), (' provisions', 10)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('trade and other payables', 100), ('other long term liabilities', 50), (' other financial liabilities', 43), (' other non-current liabilities', 38), (' financial liabilities', 33), (' employee benefits', 32), (' provision for associate funding', 32), (' provisions', 14)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [(' provisions', 100), (' provision for associate funding', 43), (' employee benefits', 19), (' other non-current liabilities', 15), ('trade and other payables', 14), (' financial liabilities', 10), (' other financial liabilities', 8), ('other long term liabilities', 7)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [(' financial liabilities', 64), (' other financial liabilities', 52), (' other non-current liabilities', 39), ('other long term liabilities', 36), ('trade and other payables', 30), (' provision for associate funding', 24), (' employee benefits', 23), (' provisions', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [(' employee benefits', 33), ('other long term liabilities', 32), (' provision for associate funding', 32), (' other non-current liabilities', 28), ('trade and other payables', 26), (' other financial liabilities', 21), (' financial liabilities', 17), (' provisions', 13)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [25, 26, 27], 'score': 100, 'value': 496433.0, 'line_item_label': ['Non-current liabilities', 'Trade and other payables', 'Provisions'], 'note_numbers': [nan, '20', '24'], 'line_item_value': [0.0, 0.0, 496433.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables - related parties', 100), ('non-current trade and other payables', 52), (' employee benefits - payroll', 48), (' electricity derivatives at fair value through oci', 46), (' contract liabilites - non-current', 43), (' non-current - liability for long-service leave', 42), (' make good provisions', 39), (' derivative contracts - at fair value', 38), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 33), (' total non-current employee benefits', 33), (' provision for associate funding', 27), (' provisions - non-current', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [(' trade payables - related parties', 78), ('non-current trade and other payables', 72), (' electricity derivatives at fair value through oci', 50), (' contract liabilites - non-current', 50), (' non-current - liability for long-service leave', 44), (' derivative contracts - at fair value', 39), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' total non-current employee benefits', 33), (' make good provisions', 31), (' provisions - non-current', 29), (' employee benefits - non current', 28), (' provision for associate funding', 22)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [(' total non-current employee benefits', 42), ('non-current trade and other payables', 33), (' electricity derivatives at fair value through oci', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' non-current - liability for long-service leave', 25), (' provisions - non-current', 25), (' contract liabilites - non-current', 25), (' employee benefits - payroll', 25), (' make good provisions', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables - related parties', 100), ('non-current trade and other payables', 52), (' employee benefits - payroll', 48), (' electricity derivatives at fair value through oci', 46), (' contract liabilites - non-current', 43), (' non-current - liability for long-service leave', 42), (' make good provisions', 39), (' derivative contracts - at fair value', 38), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 33), (' total non-current employee benefits', 33), (' provision for associate funding', 27), (' provisions - non-current', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables - others , res_fuzz_match = [(' trade payables - related parties', 78), ('non-current trade and other payables', 72), (' electricity derivatives at fair value through oci', 50), (' contract liabilites - non-current', 50), (' non-current - liability for long-service leave', 44), (' derivative contracts - at fair value', 39), (' employee benefits - payroll', 33), (' abandonment and decommissioning costs', 33), (' total non-current employee benefits', 33), (' make good provisions', 31), (' provisions - non-current', 29), (' employee benefits - non current', 28), (' provision for associate funding', 22)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = accrued expenses , res_fuzz_match = [(' total non-current employee benefits', 42), ('non-current trade and other payables', 33), (' electricity derivatives at fair value through oci', 33), (' derivative contracts - at fair value', 33), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 33), (' provision for associate funding', 33), (' trade payables - related parties', 33), (' non-current - liability for long-service leave', 25), (' provisions - non-current', 25), (' contract liabilites - non-current', 25), (' employee benefits - payroll', 25), (' make good provisions', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 4], 'score': [100, 100], 'value': [41304444.0, 53934092.0], 'label': [' Trade payables related parties', ' Trade payables related parties'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables - related parties', 100), ('non-current trade and other payables', 52), (' employee benefits - payroll', 48), (' electricity derivatives at fair value through oci', 46), (' contract liabilites - non-current', 43), (' non-current - liability for long-service leave', 42), (' make good provisions', 39), (' derivative contracts - at fair value', 38), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 33), (' total non-current employee benefits', 33), (' provision for associate funding', 27), (' provisions - non-current', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = trade payables related parties , res_fuzz_match = [(' trade payables - related parties', 100), ('non-current trade and other payables', 52), (' employee benefits - payroll', 48), (' electricity derivatives at fair value through oci', 46), (' contract liabilites - non-current', 43), (' non-current - liability for long-service leave', 42), (' make good provisions', 39), (' derivative contracts - at fair value', 38), (' employee benefits - non current', 33), (' abandonment and decommissioning costs', 33), (' total non-current employee benefits', 33), (' provision for associate funding', 27), (' provisions - non-current', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 2], 'score': [100, 100], 'value': [0.0, 5439086.0], 'label': [' Trade payables related parties', ' Trade payables related parties'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' provisions - non-current', 43), (' trade payables - related parties', 39), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' derivative contracts - at fair value', 31), (' employee benefits - non current', 31), (' provision for associate funding', 31), (' total non-current employee benefits', 31), (' contract liabilites - non-current', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' provisions - non-current', 43), (' trade payables - related parties', 39), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' derivative contracts - at fair value', 31), (' employee benefits - non current', 31), (' provision for associate funding', 31), (' total non-current employee benefits', 31), (' contract liabilites - non-current', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' provisions - non-current', 43), (' trade payables - related parties', 39), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' derivative contracts - at fair value', 31), (' employee benefits - non current', 31), (' provision for associate funding', 31), (' total non-current employee benefits', 31), (' contract liabilites - non-current', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provision , res_fuzz_match = [(' make good provisions', 100), (' provisions - non-current', 43), (' trade payables - related parties', 39), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' derivative contracts - at fair value', 31), (' employee benefits - non current', 31), (' provision for associate funding', 31), (' total non-current employee benefits', 31), (' contract liabilites - non-current', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('non-current trade and other payables', 0), (' electricity derivatives at fair value through oci', 0), (' derivative contracts - at fair value', 0), (' employee benefits - non current', 0), (' non-current - liability for long-service leave', 0), (' provisions - non-current', 0), (' contract liabilites - non-current', 0), (' employee benefits - payroll', 0), (' abandonment and decommissioning costs', 0), (' provision for associate funding', 0), (' make good provisions', 0), (' trade payables - related parties', 0), (' total non-current employee benefits', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 3, 4, 6, 7, 9, 10], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [971917.0, 36916.0, 86717.0, 409716.0, 1033607.0, 147015.0, 55638.0, 196972.0], 'label': ['  Employee benefits', '  Make good provision', '  Employee benefits', '  Make good provision', '  Employee benefits', '  Make good provision', '  Employee benefits', '  Make good provision'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['non-current trade and other payables', ' electricity derivatives at fair value through oci', ' derivative contracts - at fair value', ' employee benefits - non current', ' non-current - liability for long-service leave', ' provisions - non-current', ' contract liabilites - non-current', ' employee benefits - payroll', ' abandonment and decommissioning costs', ' provision for associate funding', ' make good provisions', ' trade payables - related parties', ' total non-current employee benefits'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 1 january 2022 , res_fuzz_match = [('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' derivative contracts - at fair value', 45), (' total non-current employee benefits', 45), (' non-current - liability for long-service leave', 40), (' contract liabilites - non-current', 40), (' trade payables - related parties', 40), (' provisions - non-current', 36), (' employee benefits - non current', 35), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 35), (' employee benefits - payroll', 31), (' make good provisions', 31)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [(' abandonment and decommissioning costs', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' derivative contracts - at fair value', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' contract liabilites - non-current', 40), (' employee benefits - payroll', 40), (' trade payables - related parties', 40), (' total non-current employee benefits', 40), (' provisions - non-current', 20), (' provision for associate funding', 20), (' make good provisions', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = amount charged , res_fuzz_match = [(' electricity derivatives at fair value through oci', 50), (' derivative contracts - at fair value', 50), ('non-current trade and other payables', 42), (' employee benefits - non current', 42), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' trade payables - related parties', 42), (' total non-current employee benefits', 42), (' non-current - liability for long-service leave', 33), (' provisions - non-current', 33), (' contract liabilites - non-current', 33), (' provision for associate funding', 33), (' make good provisions', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 31 december 2022 , res_fuzz_match = [(' abandonment and decommissioning costs', 47), (' total non-current employee benefits', 47), ('non-current trade and other payables', 42), (' electricity derivatives at fair value through oci', 37), (' derivative contracts - at fair value', 37), (' employee benefits - non current', 37), (' non-current - liability for long-service leave', 37), (' contract liabilites - non-current', 37), (' provision for associate funding', 37), (' provisions - non-current', 36), (' trade payables - related parties', 27), (' make good provisions', 25), (' employee benefits - payroll', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = employee benefits $ , res_fuzz_match = [(' employee benefits - non current', 100), (' employee benefits - payroll', 100), (' total non-current employee benefits', 100), (' electricity derivatives at fair value through oci', 40), (' non-current - liability for long-service leave', 40), (' trade payables - related parties', 40), (' abandonment and decommissioning costs', 33), (' provisions - non-current', 30), (' make good provisions', 28), ('non-current trade and other payables', 27), (' derivative contracts - at fair value', 27), (' contract liabilites - non-current', 27), (' provision for associate funding', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 1 january 2022 , res_fuzz_match = [('non-current trade and other payables', 45), (' electricity derivatives at fair value through oci', 45), (' derivative contracts - at fair value', 45), (' total non-current employee benefits', 45), (' non-current - liability for long-service leave', 40), (' contract liabilites - non-current', 40), (' trade payables - related parties', 40), (' provisions - non-current', 36), (' employee benefits - non current', 35), (' abandonment and decommissioning costs', 35), (' provision for associate funding', 35), (' employee benefits - payroll', 31), (' make good provisions', 31)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' provisions - non-current', 43), (' trade payables - related parties', 39), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' derivative contracts - at fair value', 31), (' employee benefits - non current', 31), (' provision for associate funding', 31), (' total non-current employee benefits', 31), (' contract liabilites - non-current', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = additions , res_fuzz_match = [(' abandonment and decommissioning costs', 60), ('non-current trade and other payables', 40), (' electricity derivatives at fair value through oci', 40), (' derivative contracts - at fair value', 40), (' employee benefits - non current', 40), (' non-current - liability for long-service leave', 40), (' contract liabilites - non-current', 40), (' employee benefits - payroll', 40), (' trade payables - related parties', 40), (' total non-current employee benefits', 40), (' provisions - non-current', 20), (' provision for associate funding', 20), (' make good provisions', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' provisions - non-current', 43), (' trade payables - related parties', 39), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' derivative contracts - at fair value', 31), (' employee benefits - non current', 31), (' provision for associate funding', 31), (' total non-current employee benefits', 31), (' contract liabilites - non-current', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = amount charged , res_fuzz_match = [(' electricity derivatives at fair value through oci', 50), (' derivative contracts - at fair value', 50), ('non-current trade and other payables', 42), (' employee benefits - non current', 42), (' employee benefits - payroll', 42), (' abandonment and decommissioning costs', 42), (' trade payables - related parties', 42), (' total non-current employee benefits', 42), (' non-current - liability for long-service leave', 33), (' provisions - non-current', 33), (' contract liabilites - non-current', 33), (' provision for associate funding', 33), (' make good provisions', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' provisions - non-current', 43), (' trade payables - related parties', 39), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' derivative contracts - at fair value', 31), (' employee benefits - non current', 31), (' provision for associate funding', 31), (' total non-current employee benefits', 31), (' contract liabilites - non-current', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = carrying amount as at 31 december 2022 , res_fuzz_match = [(' abandonment and decommissioning costs', 47), (' total non-current employee benefits', 47), ('non-current trade and other payables', 42), (' electricity derivatives at fair value through oci', 37), (' derivative contracts - at fair value', 37), (' employee benefits - non current', 37), (' non-current - liability for long-service leave', 37), (' contract liabilites - non-current', 37), (' provision for associate funding', 37), (' provisions - non-current', 36), (' trade payables - related parties', 27), (' make good provisions', 25), (' employee benefits - payroll', 21)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = make good provisions $ , res_fuzz_match = [(' make good provisions', 100), (' provisions - non-current', 43), (' trade payables - related parties', 39), ('non-current trade and other payables', 38), (' electricity derivatives at fair value through oci', 38), (' non-current - liability for long-service leave', 38), (' employee benefits - payroll', 38), (' abandonment and decommissioning costs', 38), (' derivative contracts - at fair value', 31), (' employee benefits - non current', 31), (' provision for associate funding', 31), (' total non-current employee benefits', 31), (' contract liabilites - non-current', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 2, 3, 4, 5, 6, 7], 'score': [100, 100, 100, 100, 100, 100, 100, 100], 'value': [1089245.0, 1196504.0, -1227115.0, 1058634.0, 343987.0, 212744.0, -110099.0, 446632.0], 'label': ['Employee Benefits $', 'Employee Benefits $', 'Employee Benefits $', 'Employee Benefits $', 'Make good provisions $', 'Make good provisions $', 'Make good provisions $', 'Make good provisions $'], 'year': [], 'colname_found': ['columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns', 'columns']}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['minority interest']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_minority_interest
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['minority interest'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('minority interest', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('minority interest', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('minority interest', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('minority interest', 32)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('minority interest', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['long term liabilities']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ncl_long_term_liabilities
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['long term liabilities'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current liabilities , res_fuzz_match = [('long term liabilities', 67)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other payables , res_fuzz_match = [('long term liabilities', 32)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = provisions , res_fuzz_match = [('long term liabilities', 9)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = lease liabilities , res_fuzz_match = [('long term liabilities', 44)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = net assets , res_fuzz_match = [('long term liabilities', 32)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_common_stock
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('share capital', 36), ('equity share capital', 34), ('common stock', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['common stock', 'share capital', 'equity share capital', 'perpetual equity instrument'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('equity share capital', 50), ('perpetual equity instrument', 39), ('share capital', 24), ('common stock', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('share capital', 67), ('equity share capital', 57), ('perpetual equity instrument', 34), ('common stock', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('perpetual equity instrument', 39), ('share capital', 36), ('equity share capital', 34), ('common stock', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['share premium', 'securities premium']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_additional_paid_in_capital
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other equity', 'other reserves', 'additional paid in capital', 'additional paid up capital', 'reserves and surplus'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('additional paid in capital', 27), ('additional paid up capital', 27), ('reserves and surplus', 17), ('other reserves', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('additional paid in capital', 54), ('additional paid up capital', 54), ('reserves and surplus', 37), ('other equity', 27), ('other reserves', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('additional paid in capital', 37), ('additional paid up capital', 37), ('reserves and surplus', 36), ('other equity', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['foreign currency translation reserve', ' cash flow hedge reserve', ' reserve in joint venture', ' other reserve', ' total other reserves']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_other_reserves
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other reserves', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_retained_earnings
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [34], 'score': 100, 'value': 22431844.0, 'line_item_label': ['Retained earnings'], 'note_numbers': ['27'], 'line_item_value': [22431844.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other equity', 'reserves surplus', 'retained earnings', ' accumulated losses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('other equity', 67), ('retained earnings', 35), ('reserves surplus', 21), (' accumulated losses', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [(' accumulated losses', 36), ('retained earnings', 29), ('other equity', 27), ('reserves surplus', 26)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('retained earnings', 100), ('reserves surplus', 33), ('other equity', 26), (' accumulated losses', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [34], 'score': 100, 'value': 10849194.0, 'line_item_label': ['Retained earnings'], 'note_numbers': ['27'], 'line_item_value': [10849194.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['retained earnings', 'general reserves', 'accumulated losses', 'retained earnings and dividends on equity instruments'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = balance at beginning of year , res_fuzz_match = [('retained earnings', 67), ('general reserves', 42), ('retained earnings and dividends on equity instruments', 41), ('accumulated losses', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = paid , res_fuzz_match = [('retained earnings', 50), ('retained earnings and dividends on equity instruments', 50), ('general reserves', 0), ('accumulated losses', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = profit/(loss) for the year , res_fuzz_match = [('retained earnings', 57), ('general reserves', 42), ('accumulated losses', 42), ('retained earnings and dividends on equity instruments', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = balance at end of year , res_fuzz_match = [('retained earnings', 57), ('retained earnings and dividends on equity instruments', 47), ('general reserves', 45), ('accumulated losses', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = inr respect of the current year ended 31 december 2022, a dividend of $20,000,000 paid. (2021: nil proposed) , res_fuzz_match = [('retained earnings and dividends on equity instruments', 57), ('general reserves', 50), ('retained earnings', 45), ('accumulated losses', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = franking account balance , res_fuzz_match = [('retained earnings', 55), ('accumulated losses', 50), ('retained earnings and dividends on equity instruments', 35), ('general reserves', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = payment of dividends provided for at the reporting date , res_fuzz_match = [('retained earnings', 45), ('retained earnings and dividends on equity instruments', 45), ('general reserves', 42), ('accumulated losses', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = payg instalments paid and income tax payments/ refunds , res_fuzz_match = [('retained earnings and dividends on equity instruments', 46), ('retained earnings', 45), ('general reserves', 42), ('accumulated losses', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = adjusted franking account balance , res_fuzz_match = [('accumulated losses', 50), ('retained earnings', 45), ('retained earnings and dividends on equity instruments', 33), ('general reserves', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = balance at beginning of year , res_fuzz_match = [('retained earnings', 67), ('general reserves', 42), ('retained earnings and dividends on equity instruments', 41), ('accumulated losses', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = paid , res_fuzz_match = [('retained earnings', 50), ('retained earnings and dividends on equity instruments', 50), ('general reserves', 0), ('accumulated losses', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = profit/(loss) for the year , res_fuzz_match = [('retained earnings', 57), ('general reserves', 42), ('accumulated losses', 42), ('retained earnings and dividends on equity instruments', 29)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = balance at end of year , res_fuzz_match = [('retained earnings', 57), ('retained earnings and dividends on equity instruments', 47), ('general reserves', 45), ('accumulated losses', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = inr respect of the current year ended 31 december 2022, a dividend of $20,000,000 paid. (2021: nil proposed) , res_fuzz_match = [('retained earnings and dividends on equity instruments', 57), ('general reserves', 50), ('retained earnings', 45), ('accumulated losses', 33)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = franking account balance , res_fuzz_match = [('retained earnings', 55), ('accumulated losses', 50), ('retained earnings and dividends on equity instruments', 35), ('general reserves', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = payment of dividends provided for at the reporting date , res_fuzz_match = [('retained earnings', 45), ('retained earnings and dividends on equity instruments', 45), ('general reserves', 42), ('accumulated losses', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = payg instalments paid and income tax payments/ refunds , res_fuzz_match = [('retained earnings and dividends on equity instruments', 46), ('retained earnings', 45), ('general reserves', 42), ('accumulated losses', 25)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows = adjusted franking account balance , res_fuzz_match = [('accumulated losses', 50), ('retained earnings', 45), ('retained earnings and dividends on equity instruments', 33), ('general reserves', 17)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('retained earnings', 0), ('general reserves', 0), ('accumulated losses', 0), ('retained earnings and dividends on equity instruments', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['other reserves', 'reserves']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_others
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['other reserves', 'reserves'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('reserves', 17), ('other reserves', 11)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('other reserves', 27), ('reserves', 12)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('other reserves', 43), ('reserves', 24)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['shareholders equity(a)']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = eqt_shareholder_equity
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['shareholders equity(a)'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = equity , res_fuzz_match = [('shareholders equity(a)', 43)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = issued capital , res_fuzz_match = [('shareholders equity(a)', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = retained earnings , res_fuzz_match = [('shareholders equity(a)', 36)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['total liabilities & equity']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = total_liability_equity
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['total liabilities & equity'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = lbt_total_liability
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ast_total_assets
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['plant property equipment', 'property plant equipment']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['cost', 'gross']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = nca_gross_ppe
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['depreciatio', 'accumulated depreciation', 'net value']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3228260.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3228260.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['plant property equipment', 'property plant equipment'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = non-current assets , res_fuzz_match = [('plant property equipment', 30), ('property plant equipment', 30)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = property, plant and equipment , res_fuzz_match = [('plant property equipment', 91), ('property plant equipment', 91)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = right of use assets and other intangibles , res_fuzz_match = [('plant property equipment', 35), ('property plant equipment', 35)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = goodwill , res_fuzz_match = [('plant property equipment', 15), ('property plant equipment', 15)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = deferred tax assets , res_fuzz_match = [('plant property equipment', 34), ('property plant equipment', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 91, 'value': 3871674.0, 'line_item_label': ['Property, plant and equipment'], 'note_numbers': ['15'], 'line_item_value': [3871674.0]}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['cost', 'gross'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['depreciatio', 'accumulated depreciation', 'net value'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:40+0530 - sLogger - DEBUG - df_meta_keyword = ca_account_receivables
2023-05-09 11:12:40+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:40+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:40+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-09 11:12:40+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('trade receivables', 42), ('government subsidies receivable', 42), ('trade and other receivables', 42), ('unbilled', 40), ('receivable', 33), ('account receivables', 30), ('billed', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 33385710.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['12'], 'line_item_value': [33385710.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['account receivables', 'trade receivables', 'government subsidies receivable', 'receivable', 'billed', 'unbilled', 'trade and other receivables'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = current assets , res_fuzz_match = [('account receivables', 46), ('unbilled', 40), ('government subsidies receivable', 38), ('trade and other receivables', 38), ('trade receivables', 35), ('receivable', 33), ('billed', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cash and cash equivalents , res_fuzz_match = [('unbilled', 60), ('trade and other receivables', 54), ('account receivables', 50), ('trade receivables', 50), ('receivable', 50), ('billed', 50), ('government subsidies receivable', 34)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = trade and other receivables , res_fuzz_match = [('receivable', 100), ('trade and other receivables', 100), ('trade receivables', 75), ('account receivables', 64), ('government subsidies receivable', 48), ('billed', 25), ('unbilled', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = inventories , res_fuzz_match = [('account receivables', 44), ('unbilled', 40), ('trade receivables', 33), ('government subsidies receivable', 33), ('receivable', 33), ('trade and other receivables', 33), ('billed', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other financial assets , res_fuzz_match = [('trade receivables', 42), ('government subsidies receivable', 42), ('trade and other receivables', 42), ('unbilled', 40), ('receivable', 33), ('account receivables', 30), ('billed', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other assets , res_fuzz_match = [('trade and other receivables', 64), ('government subsidies receivable', 55), ('account receivables', 36), ('trade receivables', 36), ('receivable', 33), ('billed', 0), ('unbilled', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [2], 'score': 100, 'value': 25122689.0, 'line_item_label': ['Trade and other receivables'], 'note_numbers': ['12'], 'line_item_value': [25122689.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['current', 'trade receivables', ' related party receivables', ' other debtors', ' share of joint venture receivables', ' net trade debtors'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = related parties others accrued revenue , res_fuzz_match = [(' related party receivables', 72), (' other debtors', 58), ('current', 57), ('trade receivables', 50), (' share of joint venture receivables', 44), (' net trade debtors', 38)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('current', 0), ('trade receivables', 0), (' related party receivables', 0), (' other debtors', 0), (' share of joint venture receivables', 0), (' net trade debtors', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = related parties others accrued revenue , res_fuzz_match = [(' related party receivables', 72), (' other debtors', 58), ('current', 57), ('trade receivables', 50), (' share of joint venture receivables', 44), (' net trade debtors', 38)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - CBS fetch_report completed
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_sales
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), ('net sales', 40), (' Sale of coal', 38), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), ('sale of products', 33), ('transmission and distribution business', 30), ('from trading business', 30), (' Revenue', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('net sales', 38), ('from trading business', 35), (' Sales revenue', 32), (' Revenue', 29), ('revenue from operations', 25), ('revenue from contracts with customers', 25), ('Revenue from contract with customers', 25), ('transmission and distribution business', 22), ('sale of products', 20), (' Sale of coal', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('transmission and distribution business', 43), ('net sales', 37), (' Sale of coal', 36), ('from trading business', 35), (' Sales revenue', 33), ('sale of products', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('revenue from operations', 29), (' Revenue', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('transmission and distribution business', 55), (' Sales revenue', 37), ('sale of products', 36), (' Revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('revenue from operations', 31), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 16)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue', 50), ('net sales', 38), ('from trading business', 36), ('revenue from operations', 34), ('sale of products', 32), (' Revenue', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), (' Sale of coal', 27), ('transmission and distribution business', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('revenue from operations', 29), ('sale of products', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('from trading business', 22), ('net sales', 20), ('transmission and distribution business', 20), (' Sale of coal', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Sales revenue', 55), ('net sales', 42), ('sale of products', 35), (' Revenue', 35), ('revenue from operations', 30), (' Sale of coal', 30), ('from trading business', 23), ('transmission and distribution business', 21), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('net sales', 48), (' Sales revenue', 44), ('revenue from operations', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 33), (' Sale of coal', 33), ('sale of products', 30), (' Revenue', 30), ('transmission and distribution business', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 38), ('net sales', 34), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('from trading business', 33), (' Sale of coal', 33), ('sale of products', 30), ('revenue from operations', 27), (' Revenue', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('revenue from operations', 38), ('transmission and distribution business', 36), ('net sales', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sale of coal', 24), (' Sales revenue', 22), (' Revenue', 9)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('from trading business', 40), ('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('sale of products', 38), (' Sales revenue', 35), ('revenue from operations', 31), ('transmission and distribution business', 29), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 160803224.0, 'line_item_label': ['Revenue'], 'note_numbers': ['5'], 'line_item_value': [160803224.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['revenue from operations', 'sale of products', 'net sales', 'revenue from contracts with customers', 'transmission and distribution business', 'from trading business', 'Revenue from contract with customers', ' Sale of coal', ' Sales revenue', ' Revenue'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('revenue from operations', 43), ('net sales', 40), (' Sale of coal', 38), ('revenue from contracts with customers', 36), ('Revenue from contract with customers', 36), (' Sales revenue', 35), ('sale of products', 33), ('transmission and distribution business', 30), ('from trading business', 30), (' Revenue', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Revenue', 100), (' Sales revenue', 71), ('revenue from operations', 55), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('net sales', 29), ('sale of products', 22), ('from trading business', 19), (' Sale of coal', 13), ('transmission and distribution business', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sale of coal', 78), ('net sales', 71), ('sale of products', 67), (' Sales revenue', 50), ('from trading business', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), ('revenue from operations', 24), ('transmission and distribution business', 22), (' Revenue', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('from trading business', 37), ('revenue from operations', 36), ('sale of products', 33), ('revenue from contracts with customers', 32), ('Revenue from contract with customers', 32), ('transmission and distribution business', 25), (' Sale of coal', 19), (' Sales revenue', 17), (' Revenue', 11), ('net sales', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('net sales', 38), ('from trading business', 35), (' Sales revenue', 32), (' Revenue', 29), ('revenue from operations', 25), ('revenue from contracts with customers', 25), ('Revenue from contract with customers', 25), ('transmission and distribution business', 22), ('sale of products', 20), (' Sale of coal', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('transmission and distribution business', 43), ('net sales', 37), (' Sale of coal', 36), ('from trading business', 35), (' Sales revenue', 33), ('sale of products', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('revenue from operations', 29), (' Revenue', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('transmission and distribution business', 55), (' Sales revenue', 37), ('sale of products', 36), (' Revenue', 36), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('revenue from operations', 31), ('from trading business', 26), ('net sales', 25), (' Sale of coal', 16)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Sales revenue', 50), ('net sales', 38), ('from trading business', 36), ('revenue from operations', 34), ('sale of products', 32), (' Revenue', 32), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), (' Sale of coal', 27), ('transmission and distribution business', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Revenue', 44), (' Sales revenue', 35), ('revenue from operations', 29), ('sale of products', 25), ('revenue from contracts with customers', 23), ('Revenue from contract with customers', 23), ('from trading business', 22), ('net sales', 20), ('transmission and distribution business', 20), (' Sale of coal', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Revenue', 50), (' Sales revenue', 47), ('net sales', 29), ('revenue from operations', 27), ('sale of products', 22), ('revenue from contracts with customers', 16), ('Revenue from contract with customers', 16), (' Sale of coal', 13), ('transmission and distribution business', 12), ('from trading business', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Sale of coal', 40), ('sale of products', 35), ('revenue from contracts with customers', 33), ('Revenue from contract with customers', 33), ('net sales', 32), ('from trading business', 31), ('transmission and distribution business', 26), ('revenue from operations', 22), (' Sales revenue', 18), (' Revenue', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Sales revenue', 55), ('net sales', 42), ('sale of products', 35), (' Revenue', 35), ('revenue from operations', 30), (' Sale of coal', 30), ('from trading business', 23), ('transmission and distribution business', 21), ('revenue from contracts with customers', 19), ('Revenue from contract with customers', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('net sales', 48), (' Sales revenue', 44), ('revenue from operations', 43), ('revenue from contracts with customers', 38), ('Revenue from contract with customers', 38), ('from trading business', 33), (' Sale of coal', 33), ('sale of products', 30), (' Revenue', 30), ('transmission and distribution business', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('transmission and distribution business', 41), (' Sales revenue', 38), ('net sales', 34), ('revenue from contracts with customers', 34), ('Revenue from contract with customers', 34), ('from trading business', 33), (' Sale of coal', 33), ('sale of products', 30), ('revenue from operations', 27), (' Revenue', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('from trading business', 45), ('sale of products', 43), ('revenue from operations', 38), ('transmission and distribution business', 36), ('net sales', 33), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Sale of coal', 24), (' Sales revenue', 22), (' Revenue', 9)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('from trading business', 45), (' Sales revenue', 37), ('transmission and distribution business', 32), (' Sale of coal', 32), ('sale of products', 29), ('revenue from contracts with customers', 29), ('Revenue from contract with customers', 29), (' Revenue', 27), ('revenue from operations', 25), ('net sales', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('revenue from operations', 46), ('sale of products', 39), ('from trading business', 35), ('revenue from contracts with customers', 31), ('Revenue from contract with customers', 31), ('transmission and distribution business', 30), (' Sales revenue', 27), (' Revenue', 24), ('net sales', 22), (' Sale of coal', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('revenue from contracts with customers', 41), ('Revenue from contract with customers', 41), ('from trading business', 38), ('revenue from operations', 37), (' Sales revenue', 36), ('sale of products', 29), (' Revenue', 29), ('transmission and distribution business', 28), (' Sale of coal', 26), ('net sales', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('from trading business', 40), ('revenue from contracts with customers', 39), ('Revenue from contract with customers', 39), ('sale of products', 38), (' Sales revenue', 35), ('revenue from operations', 31), ('transmission and distribution business', 29), ('net sales', 28), (' Sale of coal', 27), (' Revenue', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [1], 'score': 100, 'value': 144417994.0, 'line_item_label': ['Revenue'], 'note_numbers': ['5'], 'line_item_value': [144417994.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['Sale of goods', ' LNG', ' Condensate', ' Domgas', ' Feed gas income', ' Gas transportation income', ' Sale of goods - Cars', ' Sale of goods - Motorcycles', ' Sale of goods - Marine', ' Sale of goods - Spareparts', ' Total Revenue', ' Goods sold to customer from warehouse', ' Goods sold to customer direct from supplier'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = crane sales , res_fuzz_match = [(' Condensate', 57), ('Sale of goods', 44), (' Gas transportation income', 40), (' Sale of goods - Cars', 40), (' Sale of goods - Motorcycles', 40), (' Sale of goods - Marine', 40), (' Sale of goods - Spareparts', 40), (' Goods sold to customer from warehouse', 40), (' Goods sold to customer direct from supplier', 40), (' LNG', 33), (' Feed gas income', 30), (' Total Revenue', 30), (' Domgas', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = after service and parts sales , res_fuzz_match = [(' Sale of goods - Spareparts', 47), (' Sale of goods - Cars', 46), ('Sale of goods', 44), (' Condensate', 43), (' Domgas', 40), (' Gas transportation income', 40), (' Sale of goods - Marine', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), (' Sale of goods - Motorcycles', 37), (' LNG', 33), (' Total Revenue', 33), (' Goods sold to customer from warehouse', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = total revenue , res_fuzz_match = [(' Total Revenue', 100), (' Goods sold to customer from warehouse', 42), (' Goods sold to customer direct from supplier', 42), (' Domgas', 40), ('Sale of goods', 33), (' LNG', 33), (' Gas transportation income', 33), (' Sale of goods - Cars', 33), (' Sale of goods - Marine', 33), (' Sale of goods - Spareparts', 33), (' Condensate', 29), (' Feed gas income', 25), (' Sale of goods - Motorcycles', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 2022 $ , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = crane sales , res_fuzz_match = [(' Condensate', 57), ('Sale of goods', 44), (' Gas transportation income', 40), (' Sale of goods - Cars', 40), (' Sale of goods - Motorcycles', 40), (' Sale of goods - Marine', 40), (' Sale of goods - Spareparts', 40), (' Goods sold to customer from warehouse', 40), (' Goods sold to customer direct from supplier', 40), (' LNG', 33), (' Feed gas income', 30), (' Total Revenue', 30), (' Domgas', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = after service and parts sales , res_fuzz_match = [(' Sale of goods - Spareparts', 47), (' Sale of goods - Cars', 46), ('Sale of goods', 44), (' Condensate', 43), (' Domgas', 40), (' Gas transportation income', 40), (' Sale of goods - Marine', 40), (' Feed gas income', 38), (' Goods sold to customer direct from supplier', 38), (' Sale of goods - Motorcycles', 37), (' LNG', 33), (' Total Revenue', 33), (' Goods sold to customer from warehouse', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = total revenue , res_fuzz_match = [(' Total Revenue', 100), (' Goods sold to customer from warehouse', 42), (' Goods sold to customer direct from supplier', 42), (' Domgas', 40), ('Sale of goods', 33), (' LNG', 33), (' Gas transportation income', 33), (' Sale of goods - Cars', 33), (' Sale of goods - Marine', 33), (' Sale of goods - Spareparts', 33), (' Condensate', 29), (' Feed gas income', 25), (' Sale of goods - Motorcycles', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 2021 $ , res_fuzz_match = [('Sale of goods', 0), (' LNG', 0), (' Condensate', 0), (' Domgas', 0), (' Feed gas income', 0), (' Gas transportation income', 0), (' Sale of goods - Cars', 0), (' Sale of goods - Motorcycles', 0), (' Sale of goods - Marine', 0), (' Sale of goods - Spareparts', 0), (' Total Revenue', 0), (' Goods sold to customer from warehouse', 0), (' Goods sold to customer direct from supplier', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 5], 'score': [100, 100], 'value': [144417994.0, 160803224.0], 'label': [' Total Revenue', ' Total Revenue'], 'year': [], 'colname_found': ['rows', 'rows']}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['Included in cost of sales']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = cost_of_sales
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' cost of coal sold', 38), (' Cost of goods and services sold', 38), ('expenditure', 36), ('total expenditure', 36), ('purchase of stock-in-trade', 32), ('total expenses', 25), ('expense', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('expense', 43), ('total expenses', 40), (' Cost of inventory sold', 37), (' Personnel costs', 36), ('expenditure', 33), ('total expenditure', 33), ('purchase of stock-in-trade', 30), (' Cost of goods and services sold', 30), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of product sold', 24), (' cost of coal sold', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Cost of goods and services sold', 45), (' cost of coal sold', 36), ('expenditure', 34), ('total expenditure', 34), ('purchase of stock-in-trade', 32), ('total expenses', 32), (' Cost of inventory sold', 32), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), ('expense', 16)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Cost of product sold', 42), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' cost of coal sold', 27), ('purchase of stock-in-trade', 23)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' Cost of product sold', 27), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), ('cost of sales', 19), ('Cost of sales', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('expense', 71), ('total expenses', 70), ('total expenditure', 52), ('expenditure', 48), ('cost of sales', 40), ('Cost of sales', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Cost of inventory sold', 60), ('total expenditure', 43), ('total expenses', 36), (' Cost of goods and services sold', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 26), (' Cost of product sold', 26), ('purchase of stock-in-trade', 25), ('expense', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('total expenses', 55), ('expenditure', 52), ('total expenditure', 49), ('expense', 44), (' Cost of goods and services sold', 43), ('purchase of stock-in-trade', 35), (' Personnel costs', 34), (' Cost of inventory sold', 30), (' cost of coal sold', 29), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of product sold', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), ('expense', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 9], 'score': 100, 'value': -149586733.0, 'line_item_label': ['Cost of sales', 'expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-136649031.0, -12937702.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['purchase of stock-in-trade', 'expense', 'expenditure', 'total expenses', 'total expenditure', 'cost of sales', 'Cost of sales', ' Cost of product sold', ' cost of coal sold', ' Cost of goods and services sold', ' Cost of inventory sold', ' Personnel costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Personnel costs', 54), ('cost of sales', 48), ('Cost of sales', 48), (' Cost of inventory sold', 45), (' Cost of product sold', 41), (' cost of coal sold', 38), (' Cost of goods and services sold', 38), ('expenditure', 36), ('total expenditure', 36), ('purchase of stock-in-trade', 32), ('total expenses', 25), ('expense', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('expense', 50), ('expenditure', 50), ('total expenditure', 36), ('total expenses', 33), (' Cost of inventory sold', 24), (' Personnel costs', 20), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('cost of sales', 100), ('Cost of sales', 100), (' cost of coal sold', 61), (' Personnel costs', 61), (' Cost of product sold', 54), (' Cost of inventory sold', 50), (' Cost of goods and services sold', 41), ('total expenses', 38), ('purchase of stock-in-trade', 36), ('total expenditure', 32), ('expense', 13), ('expenditure', 11)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Cost of product sold', 48), (' Personnel costs', 46), ('purchase of stock-in-trade', 39), ('total expenses', 33), (' Cost of inventory sold', 32), (' cost of coal sold', 31), ('total expenditure', 29), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 27), (' Cost of goods and services sold', 27), ('expense', 11)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('expense', 43), ('total expenses', 40), (' Cost of inventory sold', 37), (' Personnel costs', 36), ('expenditure', 33), ('total expenditure', 33), ('purchase of stock-in-trade', 30), (' Cost of goods and services sold', 30), ('cost of sales', 24), ('Cost of sales', 24), (' Cost of product sold', 24), (' cost of coal sold', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Cost of goods and services sold', 45), (' cost of coal sold', 36), ('expenditure', 34), ('total expenditure', 34), ('purchase of stock-in-trade', 32), ('total expenses', 32), (' Cost of inventory sold', 32), (' Personnel costs', 30), ('cost of sales', 29), ('Cost of sales', 29), (' Cost of product sold', 28), ('expense', 16)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('expense', 55), ('total expenses', 43), (' Cost of product sold', 42), (' Personnel costs', 40), ('expenditure', 38), (' Cost of goods and services sold', 34), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('total expenditure', 31), (' cost of coal sold', 27), ('purchase of stock-in-trade', 23)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('total expenses', 64), ('expense', 63), ('expenditure', 52), ('total expenditure', 48), ('cost of sales', 36), ('Cost of sales', 36), ('purchase of stock-in-trade', 31), (' Personnel costs', 30), (' Cost of product sold', 27), (' Cost of inventory sold', 25), (' Cost of goods and services sold', 21), (' cost of coal sold', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('expense', 67), ('total expenses', 67), ('expenditure', 55), ('total expenditure', 50), ('purchase of stock-in-trade', 32), (' Personnel costs', 31), (' Cost of product sold', 28), (' Cost of goods and services sold', 27), (' Cost of inventory sold', 26), (' cost of coal sold', 23), ('cost of sales', 19), ('Cost of sales', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('expense', 100), ('total expenses', 67), ('expenditure', 62), ('total expenditure', 45), (' Personnel costs', 30), (' Cost of inventory sold', 24), (' Cost of product sold', 17), ('purchase of stock-in-trade', 16), ('cost of sales', 13), ('Cost of sales', 13), (' Cost of goods and services sold', 13), (' cost of coal sold', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('cost of sales', 60), ('Cost of sales', 60), (' Personnel costs', 56), (' Cost of inventory sold', 53), (' Cost of product sold', 43), ('purchase of stock-in-trade', 40), (' cost of coal sold', 40), (' Cost of goods and services sold', 39), ('total expenses', 26), ('total expenditure', 22), ('expense', 12), ('expenditure', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('expense', 71), ('total expenses', 70), ('total expenditure', 52), ('expenditure', 48), ('cost of sales', 40), ('Cost of sales', 40), (' Personnel costs', 40), (' Cost of goods and services sold', 33), (' Cost of inventory sold', 33), (' cost of coal sold', 32), (' Cost of product sold', 29), ('purchase of stock-in-trade', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Cost of inventory sold', 60), ('total expenditure', 43), ('total expenses', 36), (' Cost of goods and services sold', 35), (' cost of coal sold', 34), (' Personnel costs', 34), ('cost of sales', 33), ('Cost of sales', 33), ('expenditure', 26), (' Cost of product sold', 26), ('purchase of stock-in-trade', 25), ('expense', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('total expenses', 55), ('expenditure', 52), ('total expenditure', 49), ('expense', 44), (' Cost of goods and services sold', 43), ('purchase of stock-in-trade', 35), (' Personnel costs', 34), (' Cost of inventory sold', 30), (' cost of coal sold', 29), ('cost of sales', 27), ('Cost of sales', 27), (' Cost of product sold', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('total expenditure', 44), (' Cost of product sold', 42), ('total expenses', 36), ('purchase of stock-in-trade', 34), (' cost of coal sold', 33), (' Personnel costs', 33), ('cost of sales', 32), ('Cost of sales', 32), ('expenditure', 31), (' Cost of inventory sold', 29), (' Cost of goods and services sold', 24), ('expense', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('total expenses', 71), ('total expenditure', 56), ('expense', 55), ('expenditure', 54), ('purchase of stock-in-trade', 40), (' Cost of inventory sold', 34), ('cost of sales', 32), ('Cost of sales', 32), (' Cost of goods and services sold', 29), (' cost of coal sold', 27), (' Personnel costs', 27), (' Cost of product sold', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Cost of product sold', 39), (' Personnel costs', 36), ('total expenditure', 34), ('purchase of stock-in-trade', 32), (' Cost of goods and services sold', 32), (' cost of coal sold', 30), ('cost of sales', 29), ('Cost of sales', 29), ('expenditure', 28), ('total expenses', 26), (' Cost of inventory sold', 26), ('expense', 16)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('purchase of stock-in-trade', 44), (' Cost of inventory sold', 44), ('total expenses', 41), (' cost of coal sold', 39), (' Personnel costs', 39), ('expenditure', 38), ('total expenditure', 37), (' Cost of product sold', 36), (' Cost of goods and services sold', 34), ('cost of sales', 32), ('Cost of sales', 32), ('expense', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('total expenses', 43), ('total expenditure', 43), (' Cost of product sold', 38), ('purchase of stock-in-trade', 37), (' cost of coal sold', 37), (' Cost of goods and services sold', 37), (' Cost of inventory sold', 37), (' Personnel costs', 37), ('cost of sales', 36), ('Cost of sales', 36), ('expenditure', 27), ('expense', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [2, 9], 'score': 100, 'value': -128535133.0, 'line_item_label': ['Cost of sales', 'expenses'], 'note_numbers': [nan, nan], 'line_item_value': [-114042844.0, -14492289.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['consum', 'power', 'machinery', 'charges', 'research', 'analytical', 'equipment', 'exchange', 'loss on', 'donation', 'csr', 'social', 'miscellaneous', 'loss allowance', 'Included in administrative expenses', ' Depreciation – property', ' plant and equipment', ' Depreciation – right-of-use assets', ' Administrative expenses', ' Wages and salaries', ' Compulsory superannuation contributions', ' Payroll on-costs (excluding employee benefit provision)', ' Staff welfare']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = sga_total_sga_expenses
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), ('Distribution expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Logistics and distribution', 38), (' Administrative and other expenses', 37), (' Advertising expenses', 37), (' Administrative expenses', 36), (' Selling & distribution expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Occupancy expenses', 33), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Marketing expenses', 24), (' depreciation', 21), (' Management expenses', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' Administrative expenses', 50), (' Administration expenses', 50), ('Distribution expenses', 42), (' Administrative and other expenses', 41), ('other expenses', 40), (' depreciation', 40), (' Other expenses', 40), (' Other expenses', 40), (' Marketing expenses', 38), (' Depreciation expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Logistics and distribution', 36), (' Advertising expenses', 35), (' Sales and marketing', 35), (' Selling & distribution expenses', 34), (' Lease expenses', 32), (' Selling Expenses', 32), (' Occupancy expenses', 30), (' Management expenses', 30), (' Occupancy ', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Administrative and other expenses', 58), ('other expenses', 52), (' Other expenses', 52), (' Other expenses', 52), (' Logistics and distribution', 51), (' Sales and marketing', 47), (' Administrative expenses', 40), (' Administration expenses', 40), (' Advertising expenses', 35), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Management expenses', 26), (' Marketing expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 23), (' Occupancy ', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Distribution expenses', 100), (' Selling & distribution expenses', 86), (' Administrative expenses', 75), (' Administration expenses', 75), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Advertising expenses', 65), (' Logistics and distribution', 61), (' Amortisation expenses', 60), (' Administrative and other expenses', 57), (' Lease expenses', 44), (' Selling Expenses', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses', 100), (' Management expenses', 72), (' Lease expenses', 67), (' Selling Expenses', 67), ('other expenses', 64), (' Other expenses', 64), (' Other expenses', 64), (' Sales and marketing', 57), (' Occupancy expenses', 56), (' Selling & distribution expenses', 47), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Administrative and other expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Logistics and distribution', 24), (' Occupancy ', 11)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 25), (' Sales and marketing', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Selling Expenses', 100), (' Lease expenses', 73), ('other expenses', 70), (' Other expenses', 70), (' Other expenses', 70), (' Selling & distribution expenses', 69), (' Marketing expenses', 67), (' Occupancy expenses', 61), (' Management expenses', 61), (' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Amortisation expenses', 48), (' Advertising expenses', 46), ('Distribution expenses', 44), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 43), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 26), (' Occupancy ', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Selling & distribution expenses', 43), (' Advertising expenses', 39), (' Logistics and distribution', 39), (' Sales and marketing', 39), (' Lease expenses', 38), (' Selling Expenses', 38), (' Marketing expenses', 35), (' Administrative and other expenses', 34), (' Amortisation expenses', 34), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 30), (' Occupancy expenses', 30), (' Other expenses', 30), (' Management expenses', 30), (' Other expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' depreciation', 21), (' Occupancy ', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other expenses', 73), (' Other expenses', 73), (' Other expenses', 73), (' Administrative and other expenses', 68), (' Management expenses', 55), (' Marketing expenses', 53), (' Lease expenses', 50), (' Advertising expenses', 50), (' Selling Expenses', 50), (' Administrative expenses', 49), (' Administration expenses', 49), (' Occupancy expenses', 48), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Logistics and distribution', 44), (' Sales and marketing', 44), ('Distribution expenses', 43), (' depreciation', 36), (' Occupancy ', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 27), (' Administrative expenses', 25), (' Administration expenses', 25), (' Administrative and other expenses', 24), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Occupancy ', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 43), (' Other expenses', 43), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Sales and marketing', 32), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Depreciation expenses', 29), (' Selling & distribution expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Administrative expenses', 27), (' Administration expenses', 27), ('Distribution expenses', 24), (' Advertising expenses', 24), (' depreciation', 19), (' Occupancy ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7, 8, 11], 'score': 100, 'value': -1839829.0, 'line_item_label': ['Distribution expenses', 'Marketing expenses', 'Occupancy expenses', 'Selling expenses'], 'note_numbers': [nan, nan, nan, nan], 'line_item_value': [-214431.0, -262432.0, -709992.0, -652974.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['other expenses', ' depreciation', 'Distribution expenses', ' Marketing expenses', ' Occupancy expenses', ' Administrative expenses', ' Other expenses', ' Depreciation expenses', ' Selling & distribution expenses', ' Administrative and other expenses', ' Lease expenses', ' Occupancy ', ' Administration expenses', ' Advertising expenses', ' Selling Expenses', ' Depreciation expenses', ' Amortisation expenses', ' Management expenses', ' Logistics and distribution', ' Sales and marketing', ' Other expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Amortisation expenses', 46), ('Distribution expenses', 43), ('other expenses', 42), (' Other expenses', 42), (' Other expenses', 42), (' Depreciation expenses', 38), (' Depreciation expenses', 38), (' Logistics and distribution', 38), (' Administrative and other expenses', 37), (' Advertising expenses', 37), (' Administrative expenses', 36), (' Selling & distribution expenses', 36), (' Administration expenses', 36), (' Occupancy ', 35), (' Occupancy expenses', 33), (' Sales and marketing', 30), (' Lease expenses', 26), (' Selling Expenses', 26), (' Marketing expenses', 24), (' depreciation', 21), (' Management expenses', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Occupancy expenses', 44), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 38), ('Distribution expenses', 36), (' Administrative expenses', 36), (' Administration expenses', 36), (' Lease expenses', 35), (' Selling Expenses', 35), ('other expenses', 33), (' Other expenses', 33), (' Management expenses', 33), (' Other expenses', 33), (' Marketing expenses', 32), (' depreciation', 31), (' Selling & distribution expenses', 30), (' Sales and marketing', 29), (' Administrative and other expenses', 25), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Sales and marketing', 50), (' Lease expenses', 40), (' Selling Expenses', 40), (' Marketing expenses', 36), (' Amortisation expenses', 35), (' Selling & distribution expenses', 33), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 29), (' Other expenses', 29), (' Administrative and other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Logistics and distribution', 28), (' Depreciation expenses', 26), (' Depreciation expenses', 26), (' Advertising expenses', 25), (' Occupancy expenses', 19), (' Occupancy ', 14), (' depreciation', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other expenses', 33), (' Other expenses', 33), (' Other expenses', 33), (' depreciation', 32), (' Marketing expenses', 32), (' Amortisation expenses', 31), (' Logistics and distribution', 31), (' Advertising expenses', 30), ('Distribution expenses', 29), (' Administrative and other expenses', 26), (' Occupancy expenses', 25), (' Selling & distribution expenses', 24), (' Occupancy ', 24), (' Depreciation expenses', 23), (' Depreciation expenses', 23), (' Sales and marketing', 22), (' Administrative expenses', 21), (' Administration expenses', 21), (' Lease expenses', 17), (' Selling Expenses', 17), (' Management expenses', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' Administrative expenses', 50), (' Administration expenses', 50), ('Distribution expenses', 42), (' Administrative and other expenses', 41), ('other expenses', 40), (' depreciation', 40), (' Other expenses', 40), (' Other expenses', 40), (' Marketing expenses', 38), (' Depreciation expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Logistics and distribution', 36), (' Advertising expenses', 35), (' Sales and marketing', 35), (' Selling & distribution expenses', 34), (' Lease expenses', 32), (' Selling Expenses', 32), (' Occupancy expenses', 30), (' Management expenses', 30), (' Occupancy ', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Administrative and other expenses', 58), ('other expenses', 52), (' Other expenses', 52), (' Other expenses', 52), (' Logistics and distribution', 51), (' Sales and marketing', 47), (' Administrative expenses', 40), (' Administration expenses', 40), (' Advertising expenses', 35), (' Selling & distribution expenses', 30), (' Amortisation expenses', 30), ('Distribution expenses', 29), (' Lease expenses', 27), (' Selling Expenses', 27), (' Occupancy expenses', 26), (' Management expenses', 26), (' Marketing expenses', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' depreciation', 23), (' Occupancy ', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Distribution expenses', 100), (' Selling & distribution expenses', 86), (' Administrative expenses', 75), (' Administration expenses', 75), (' Depreciation expenses', 67), (' Depreciation expenses', 67), (' Advertising expenses', 65), (' Logistics and distribution', 61), (' Amortisation expenses', 60), (' Administrative and other expenses', 57), (' Lease expenses', 44), (' Selling Expenses', 44), ('other expenses', 43), (' Occupancy expenses', 43), (' Other expenses', 43), (' Management expenses', 43), (' Other expenses', 43), (' Marketing expenses', 41), (' depreciation', 35), (' Sales and marketing', 32), (' Occupancy ', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Marketing expenses', 100), (' Management expenses', 72), (' Lease expenses', 67), (' Selling Expenses', 67), ('other expenses', 64), (' Other expenses', 64), (' Other expenses', 64), (' Sales and marketing', 57), (' Occupancy expenses', 56), (' Selling & distribution expenses', 47), (' Depreciation expenses', 44), (' Depreciation expenses', 44), (' Amortisation expenses', 44), (' Advertising expenses', 43), ('Distribution expenses', 41), (' Administrative expenses', 41), (' Administrative and other expenses', 41), (' Administration expenses', 41), (' depreciation', 40), (' Logistics and distribution', 24), (' Occupancy ', 11)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), ('other expenses', 67), (' Other expenses', 67), (' Other expenses', 67), (' Lease expenses', 61), (' Selling Expenses', 61), (' Occupancy ', 59), (' Management expenses', 58), (' Marketing expenses', 56), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Advertising expenses', 44), ('Distribution expenses', 43), (' Administrative expenses', 43), (' Administration expenses', 43), (' depreciation', 42), (' Selling & distribution expenses', 42), (' Administrative and other expenses', 42), (' Logistics and distribution', 25), (' Sales and marketing', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Lease expenses', 71), (' Selling Expenses', 71), ('other expenses', 67), (' Occupancy expenses', 67), (' Other expenses', 67), (' Management expenses', 67), (' Other expenses', 67), (' Marketing expenses', 63), (' Depreciation expenses', 60), (' Depreciation expenses', 60), (' Amortisation expenses', 60), (' Advertising expenses', 57), ('Distribution expenses', 55), (' Administrative expenses', 55), (' Administration expenses', 55), (' depreciation', 46), (' Selling & distribution expenses', 44), (' Administrative and other expenses', 38), (' Sales and marketing', 19), (' Occupancy ', 18), (' Logistics and distribution', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Management expenses', 35), (' Amortisation expenses', 32), ('Distribution expenses', 30), (' Administrative expenses', 30), (' Administration expenses', 30), (' Administrative and other expenses', 27), (' Lease expenses', 27), (' Occupancy expenses', 26), (' Logistics and distribution', 26), (' Marketing expenses', 25), (' Selling & distribution expenses', 25), (' Occupancy ', 25), (' Depreciation expenses', 24), (' Depreciation expenses', 24), (' Advertising expenses', 23), (' Sales and marketing', 23), (' depreciation', 22), (' Selling Expenses', 18), ('other expenses', 17), (' Other expenses', 17), (' Other expenses', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Selling Expenses', 100), (' Lease expenses', 73), ('other expenses', 70), (' Other expenses', 70), (' Other expenses', 70), (' Selling & distribution expenses', 69), (' Marketing expenses', 67), (' Occupancy expenses', 61), (' Management expenses', 61), (' Depreciation expenses', 48), (' Depreciation expenses', 48), (' Amortisation expenses', 48), (' Advertising expenses', 46), ('Distribution expenses', 44), (' Administrative expenses', 44), (' Administration expenses', 44), (' Administrative and other expenses', 43), (' depreciation', 33), (' Sales and marketing', 31), (' Logistics and distribution', 26), (' Occupancy ', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Selling & distribution expenses', 43), (' Advertising expenses', 39), (' Logistics and distribution', 39), (' Sales and marketing', 39), (' Lease expenses', 38), (' Selling Expenses', 38), (' Marketing expenses', 35), (' Administrative and other expenses', 34), (' Amortisation expenses', 34), ('Distribution expenses', 32), (' Administrative expenses', 32), (' Administration expenses', 32), ('other expenses', 30), (' Occupancy expenses', 30), (' Other expenses', 30), (' Management expenses', 30), (' Other expenses', 30), (' Depreciation expenses', 29), (' Depreciation expenses', 29), (' depreciation', 21), (' Occupancy ', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other expenses', 73), (' Other expenses', 73), (' Other expenses', 73), (' Administrative and other expenses', 68), (' Management expenses', 55), (' Marketing expenses', 53), (' Lease expenses', 50), (' Advertising expenses', 50), (' Selling Expenses', 50), (' Administrative expenses', 49), (' Administration expenses', 49), (' Occupancy expenses', 48), (' Selling & distribution expenses', 48), (' Depreciation expenses', 46), (' Depreciation expenses', 46), (' Amortisation expenses', 46), (' Logistics and distribution', 44), (' Sales and marketing', 44), ('Distribution expenses', 43), (' depreciation', 36), (' Occupancy ', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Depreciation expenses', 40), (' Depreciation expenses', 40), (' depreciation', 35), (' Amortisation expenses', 33), (' Logistics and distribution', 33), (' Advertising expenses', 32), (' Sales and marketing', 32), ('Distribution expenses', 31), (' Lease expenses', 30), ('other expenses', 29), (' Other expenses', 29), (' Management expenses', 29), (' Other expenses', 29), (' Marketing expenses', 28), (' Selling & distribution expenses', 27), (' Administrative expenses', 25), (' Administration expenses', 25), (' Administrative and other expenses', 24), (' Selling Expenses', 22), (' Occupancy expenses', 21), (' Occupancy ', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other expenses', 64), (' Other expenses', 64), (' Management expenses', 64), (' Other expenses', 64), (' Marketing expenses', 62), (' Lease expenses', 59), (' Occupancy expenses', 57), (' Selling Expenses', 52), (' Administrative and other expenses', 43), (' Depreciation expenses', 40), (' Depreciation expenses', 40), (' Amortisation expenses', 40), (' Advertising expenses', 39), ('Distribution expenses', 38), (' Administrative expenses', 38), (' Selling & distribution expenses', 38), (' Administration expenses', 38), (' depreciation', 35), (' Sales and marketing', 32), (' Logistics and distribution', 28), (' Occupancy ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other expenses', 39), (' Other expenses', 39), (' Other expenses', 39), (' Depreciation expenses', 36), (' Administrative and other expenses', 36), (' Depreciation expenses', 36), (' Amortisation expenses', 36), (' Selling & distribution expenses', 35), ('Distribution expenses', 34), (' Lease expenses', 33), (' Marketing expenses', 31), (' Logistics and distribution', 31), (' Administrative expenses', 29), (' Administration expenses', 29), (' Advertising expenses', 29), (' Sales and marketing', 29), (' Selling Expenses', 27), (' Management expenses', 26), (' depreciation', 23), (' Occupancy expenses', 19), (' Occupancy ', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other expenses', 59), (' Other expenses', 59), (' Other expenses', 59), (' Administrative and other expenses', 50), (' Marketing expenses', 40), (' Lease expenses', 36), (' Selling Expenses', 36), (' Occupancy expenses', 35), (' Management expenses', 35), (' Depreciation expenses', 33), (' Selling & distribution expenses', 33), (' Depreciation expenses', 33), (' Amortisation expenses', 33), (' Administrative expenses', 32), (' Administration expenses', 32), (' Logistics and distribution', 29), (' depreciation', 28), (' Advertising expenses', 27), (' Sales and marketing', 27), ('Distribution expenses', 26), (' Occupancy ', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other expenses', 43), (' Other expenses', 43), (' Administrative and other expenses', 43), (' Other expenses', 43), (' Lease expenses', 35), (' Management expenses', 34), (' Marketing expenses', 33), (' Sales and marketing', 32), (' Occupancy expenses', 30), (' Selling Expenses', 30), (' Depreciation expenses', 29), (' Selling & distribution expenses', 29), (' Depreciation expenses', 29), (' Amortisation expenses', 29), (' Logistics and distribution', 29), (' Administrative expenses', 27), (' Administration expenses', 27), ('Distribution expenses', 24), (' Advertising expenses', 24), (' depreciation', 19), (' Occupancy ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [6, 7, 8, 11], 'score': 100, 'value': -3002058.0, 'line_item_label': ['Distribution expenses', 'Marketing expenses', 'Occupancy expenses', 'Selling expenses'], 'note_numbers': [nan, nan, nan, nan], 'line_item_value': [-240245.0, -885245.0, -839567.0, -1037001.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['Rent']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_rent
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), (' Occupancy expenses', 33), ('Rent', 25), (' Rental expenses', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('Rent', 50), (' Administration expenses', 50), (' Rental expenses', 38), (' Occupancy expenses', 30), (' Occupancy', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Administration expenses', 40), (' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Administration expenses', 75), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses', 77), (' Occupancy expenses', 56), (' Administration expenses', 41), ('Rent', 35), (' Occupancy', 11)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Rental expenses', 75), (' Occupancy expenses', 61), (' Administration expenses', 44), ('Rent', 27), (' Occupancy', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Rental expenses', 47), (' Administration expenses', 32), (' Occupancy expenses', 30), ('Rent', 24), (' Occupancy', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' Rental expenses', 53), (' Administration expenses', 49), (' Occupancy expenses', 48), ('Rent', 24), (' Occupancy', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 25), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 21), (' Occupancy', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': -709992.0, 'line_item_label': ['Occupancy expenses'], 'note_numbers': [nan], 'line_item_value': [-709992.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['Rent', ' Rental expenses', ' Administration expenses', ' Occupancy', ' Occupancy expenses'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Administration expenses', 36), (' Occupancy', 35), (' Occupancy expenses', 33), ('Rent', 25), (' Rental expenses', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Rent', 60), (' Occupancy expenses', 44), (' Administration expenses', 36), (' Rental expenses', 32), (' Occupancy', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Rental expenses', 36), (' Administration expenses', 32), (' Occupancy expenses', 19), ('Rent', 15), (' Occupancy', 14)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Rental expenses', 32), ('Rent', 25), (' Occupancy expenses', 25), (' Occupancy', 24), (' Administration expenses', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('Rent', 50), (' Administration expenses', 50), (' Rental expenses', 38), (' Occupancy expenses', 30), (' Occupancy', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Administration expenses', 40), (' Occupancy expenses', 26), (' Rental expenses', 25), ('Rent', 17), (' Occupancy', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Administration expenses', 75), (' Occupancy expenses', 43), (' Rental expenses', 41), ('Rent', 30), (' Occupancy', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Rental expenses', 77), (' Occupancy expenses', 56), (' Administration expenses', 41), ('Rent', 35), (' Occupancy', 11)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Occupancy expenses', 100), (' Occupancy', 59), (' Rental expenses', 56), (' Administration expenses', 43), ('Rent', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Occupancy expenses', 67), (' Rental expenses', 63), (' Administration expenses', 55), ('Rent', 40), (' Occupancy', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Rental expenses', 33), (' Administration expenses', 30), (' Occupancy expenses', 26), (' Occupancy', 25), ('Rent', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Rental expenses', 75), (' Occupancy expenses', 61), (' Administration expenses', 44), ('Rent', 27), (' Occupancy', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Rental expenses', 47), (' Administration expenses', 32), (' Occupancy expenses', 30), ('Rent', 24), (' Occupancy', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' Rental expenses', 53), (' Administration expenses', 49), (' Occupancy expenses', 48), ('Rent', 24), (' Occupancy', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Rental expenses', 34), (' Administration expenses', 25), (' Occupancy expenses', 21), ('Rent', 20), (' Occupancy', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Rental expenses', 69), (' Occupancy expenses', 57), (' Administration expenses', 38), ('Rent', 30), (' Occupancy', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' Rental expenses', 31), (' Administration expenses', 29), (' Occupancy expenses', 19), ('Rent', 17), (' Occupancy', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Rental expenses', 40), (' Occupancy expenses', 35), (' Administration expenses', 32), ('Rent', 31), (' Occupancy', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Rental expenses', 42), (' Occupancy expenses', 30), (' Administration expenses', 27), ('Rent', 21), (' Occupancy', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [8], 'score': 100, 'value': -839567.0, 'line_item_label': ['Occupancy expenses'], 'note_numbers': [nan], 'line_item_value': [-839567.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['other operating', 'Other revenue', ' Other income']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['Other income', ' Commission revenue', ' Rent']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_others_opr_income
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 45), ('Other revenue', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' Other income', 53), ('Other revenue', 40), ('other operating', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Other income', 60), ('other operating', 48), ('Other revenue', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Other revenue', 43), ('other operating', 23), (' Other income', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('other operating', 38), (' Other income', 27), ('Other revenue', 26)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('Other revenue', 42), (' Other income', 38), ('other operating', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other operating', 52), (' Other income', 50), ('Other revenue', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['other operating', 'Other revenue', ' Other income'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' Other income', 52), ('other operating', 45), ('Other revenue', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('Other revenue', 67), ('other operating', 25), (' Other income', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Other income', 40), ('Other revenue', 38), ('other operating', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('other operating', 45), (' Other income', 35), ('Other revenue', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' Other income', 53), ('Other revenue', 40), ('other operating', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' Other income', 60), ('other operating', 48), ('Other revenue', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('Other revenue', 43), ('other operating', 23), (' Other income', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('other operating', 35), ('Other revenue', 32), (' Other income', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('other operating', 36), ('Other revenue', 33), (' Other income', 26)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('Other revenue', 33), ('other operating', 25), (' Other income', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('Other revenue', 35), (' Other income', 27), ('other operating', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('other operating', 38), (' Other income', 27), ('Other revenue', 26)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('Other revenue', 42), (' Other income', 38), ('other operating', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other operating', 52), (' Other income', 50), ('Other revenue', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('other operating', 38), (' Other income', 30), ('Other revenue', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' Other income', 52), ('other operating', 38), ('Other revenue', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other operating', 55), (' Other income', 47), ('Other revenue', 39)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' Other income', 67), ('other operating', 56), ('Other revenue', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('other operating', 44), (' Other income', 43), ('Other revenue', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_income
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' Interest revenue', 70), ('other income', 53), (' Net finance costs', 35), (' Finance income and costs', 21), ('finance income', 20), ('Finance income', 20), (' Finance income and finance costs', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('other income', 60), (' Finance income and costs', 40), ('finance income', 39), ('Finance income', 39), (' Finance income and finance costs', 38), (' Interest revenue', 29), (' Net finance costs', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Net finance costs', 32), (' Finance income and finance costs', 27), ('other income', 22), ('finance income', 21), ('Finance income', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs', 36), ('other income', 25), ('finance income', 24), ('Finance income', 24), (' Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Interest revenue', 38), ('other income', 27), (' Net finance costs', 23), (' Finance income and costs', 19), ('finance income', 17), ('Finance income', 17), (' Finance income and finance costs', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Interest revenue', 56), ('other income', 38), ('finance income', 30), ('Finance income', 30), (' Finance income and costs', 29), (' Net finance costs', 28), (' Finance income and finance costs', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other income', 50), (' Finance income and costs', 48), (' Finance income and finance costs', 45), ('finance income', 36), ('Finance income', 36), (' Interest revenue', 33), (' Net finance costs', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21), ('Finance income', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs', 44), ('other income', 43), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 28)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 85, 'value': -131545.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-131545.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['other income', 'finance income', 'Finance income', ' Finance income and costs', ' Interest revenue', ' Finance income and finance costs', ' Net finance costs'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('other income', 52), (' Net finance costs', 52), (' Finance income and costs', 42), (' Finance income and finance costs', 35), ('finance income', 33), ('Finance income', 33), (' Interest revenue', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' Interest revenue', 57), ('other income', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10), (' Finance income and costs', 7), (' Finance income and finance costs', 6)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' Net finance costs', 58), ('other income', 40), (' Finance income and costs', 40), (' Interest revenue', 33), (' Finance income and finance costs', 32), ('finance income', 19), ('Finance income', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' Net finance costs', 44), ('other income', 35), (' Finance income and costs', 30), (' Interest revenue', 30), (' Finance income and finance costs', 25), ('finance income', 17), ('Finance income', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' Interest revenue', 70), ('other income', 53), (' Net finance costs', 35), (' Finance income and costs', 21), ('finance income', 20), ('Finance income', 20), (' Finance income and finance costs', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('other income', 60), (' Finance income and costs', 40), ('finance income', 39), ('Finance income', 39), (' Finance income and finance costs', 38), (' Interest revenue', 29), (' Net finance costs', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' Interest revenue', 52), (' Finance income and costs', 32), (' Net finance costs', 32), (' Finance income and finance costs', 27), ('other income', 22), ('finance income', 21), ('Finance income', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' Interest revenue', 43), (' Net finance costs', 36), ('other income', 25), ('finance income', 24), ('Finance income', 24), (' Finance income and costs', 24), (' Finance income and finance costs', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' Interest revenue', 37), (' Finance income and costs', 30), ('other income', 26), ('finance income', 25), ('Finance income', 25), (' Finance income and finance costs', 25), (' Net finance costs', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' Interest revenue', 29), (' Finance income and costs', 15), ('other income', 12), (' Finance income and finance costs', 12), ('finance income', 11), ('Finance income', 11), (' Net finance costs', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' Net finance costs', 85), (' Finance income and costs', 69), (' Finance income and finance costs', 56), ('finance income', 52), ('Finance income', 52), (' Interest revenue', 31), ('other income', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' Interest revenue', 38), ('other income', 27), (' Net finance costs', 23), (' Finance income and costs', 19), ('finance income', 17), ('Finance income', 17), (' Finance income and finance costs', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' Interest revenue', 56), ('other income', 38), ('finance income', 30), ('Finance income', 30), (' Finance income and costs', 29), (' Net finance costs', 28), (' Finance income and finance costs', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('other income', 50), (' Finance income and costs', 48), (' Finance income and finance costs', 45), ('finance income', 36), ('Finance income', 36), (' Interest revenue', 33), (' Net finance costs', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' Net finance costs', 39), ('other income', 30), (' Finance income and costs', 27), (' Finance income and finance costs', 27), (' Interest revenue', 26), ('finance income', 21), ('Finance income', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('other income', 52), ('finance income', 50), ('Finance income', 50), (' Net finance costs', 45), (' Finance income and costs', 43), (' Finance income and finance costs', 36), (' Interest revenue', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('other income', 47), (' Net finance costs', 35), (' Interest revenue', 29), (' Finance income and finance costs', 26), (' Finance income and costs', 25), ('finance income', 19), ('Finance income', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('other income', 67), (' Net finance costs', 49), (' Finance income and costs', 42), ('finance income', 41), ('Finance income', 41), (' Finance income and finance costs', 36), (' Interest revenue', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' Net finance costs', 44), ('other income', 43), (' Finance income and costs', 39), (' Finance income and finance costs', 35), ('finance income', 30), ('Finance income', 30), (' Interest revenue', 28)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 85, 'value': -424637.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-424637.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['interest', 'Bank interest', ' Interest income', ' Interest received - Bank', ' Interest received - Loan', ' Sublease interest income', ' Share of JV interest received/(paid)', ' Bank Deposits - cash and cash equivalents', ' Finance income under the effective interest method on financial assets not measured at FVTPL', ' Interest income'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_interest_expense
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' net finance costs ', 35), (' finance expenses', 29), ('finance cost', 21), ('finance costs', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' net finance costs ', 29), (' finance expenses', 25), ('finance cost', 20), ('finance costs', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' finance expenses', 62), (' net finance costs ', 36), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' finance expenses', 29), (' net finance costs ', 28), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' finance expenses', 53), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -131545.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-131545.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' net finance costs ', 35), (' finance expenses', 29), ('finance cost', 21), ('finance costs', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' net finance costs ', 29), (' finance expenses', 25), ('finance cost', 20), ('finance costs', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' finance expenses', 62), (' net finance costs ', 36), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' finance expenses', 29), (' net finance costs ', 28), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' finance expenses', 53), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -424637.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-424637.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['loan', 'debt', 'debenture', 'cash credit', 'borrowings', 'bank facilities', 'bonds', 'interest', 'Interest expenses', ' Discount unwind on the provision for asset retirement obligation', '  Other interest expense', ' Interest on leases', ' Interest on bank overdrafts and loans (other than those from related parties)', ' Interest accrued on loans', ' Interest accrued on lease liabilities', ' Lease interest expense', ' Interest expense on financial liabilities using the effective interest rate method - other', ' Interest expense using the effective interest rate method - AASB 16 application lease liabilities', ' Interest income', ' Lease liabilities interest expense'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs ']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = noie_oi_or_exp
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' net finance costs ', 35), (' finance expenses', 29), ('finance cost', 21), ('finance costs', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' net finance costs ', 29), (' finance expenses', 25), ('finance cost', 20), ('finance costs', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' finance expenses', 62), (' net finance costs ', 36), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' finance expenses', 29), (' net finance costs ', 28), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' finance expenses', 53), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -131545.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-131545.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['finance cost', 'finance costs', ' finance expenses', ' net finance costs '] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [(' net finance costs ', 52), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [(' finance expenses', 32), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('finance cost', 60), ('finance costs', 60), (' net finance costs ', 58), (' finance expenses', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [(' net finance costs ', 44), ('finance cost', 43), ('finance costs', 43), (' finance expenses', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' net finance costs ', 35), (' finance expenses', 29), ('finance cost', 21), ('finance costs', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [(' net finance costs ', 29), (' finance expenses', 25), ('finance cost', 20), ('finance costs', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' finance expenses', 41), (' net finance costs ', 32), ('finance cost', 30), ('finance costs', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' finance expenses', 62), (' net finance costs ', 36), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' finance expenses', 64), ('finance cost', 26), ('finance costs', 26), (' net finance costs ', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' finance expenses', 63), ('finance cost', 12), ('finance costs', 12), (' net finance costs ', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('finance cost', 100), ('finance costs', 100), (' net finance costs ', 85), (' finance expenses', 67)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' finance expenses', 58), (' net finance costs ', 23), ('finance cost', 18), ('finance costs', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [(' finance expenses', 29), (' net finance costs ', 28), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' finance expenses', 53), (' net finance costs ', 33), ('finance cost', 25), ('finance costs', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [(' net finance costs ', 39), ('finance cost', 37), ('finance costs', 37), (' finance expenses', 34)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' finance expenses', 69), (' net finance costs ', 45), ('finance cost', 37), ('finance costs', 37)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [(' net finance costs ', 35), ('finance cost', 33), ('finance costs', 33), (' finance expenses', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' net finance costs ', 49), (' finance expenses', 46), ('finance cost', 42), ('finance costs', 42)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' net finance costs ', 44), (' finance expenses', 38), ('finance cost', 35), ('finance costs', 35)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [10], 'score': 100, 'value': -424637.0, 'line_item_label': ['Finance costs'], 'note_numbers': ['8'], 'line_item_value': [-424637.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['other revenue', ' commission revenue', '  government grants', ' insurance proceeds', ' foreign exchange gain', ' other', ' dividend from other parties', ' other income', ' net foreign exchange gain', ' effective portion of changes in fair value of cash flow', ' profit from discontinued operation', ' net of tax', ' share of jv income', ' secondment income (tw recovery)', ' japan recoveries', ' margin charge income', ' net foreign exchange gains/(losses)', ' paid by customers - at amortised cost', ' net foreign exchange (loss)/gain', ' net ppe disposal (loss)/gain', ' other miscellaneous - net (loss)/gain', ' quota lease income', ' sundry income', ' net (loss)/profit on disposal of non-current assets', ' net other foreign exchange (losses)/gains'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = oie_oi
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('NULL', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('NULL', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('NULL', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('NULL', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('NULL', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('NULL', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_taxes
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), (' income tax expense', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('deferred tax', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' tax (expense)/benefit', 46), ('earlier year', 40), (' income tax benefit/(expense)', 38), ('deferred tax', 35), (' income tax', 35), ('amount transferred to retained earnings', 34), ('prior year ', 33), (' income tax expense', 33), ('current tax', 32), ('minimum alternate tax credit entitlement', 25), (' income tax benefit', 24), ('provision for taxation previous year', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('amount transferred to retained earnings', 43), (' income tax expense', 40), (' income tax benefit', 39), ('provision for taxation previous year', 38), (' income tax', 36), ('prior year ', 34), (' income tax benefit/(expense)', 33), ('earlier year', 32), (' tax (expense)/benefit', 32), ('minimum alternate tax credit entitlement', 31), ('deferred tax', 21), ('current tax', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 45), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('deferred tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('minimum alternate tax credit entitlement', 29), ('earlier year', 29), ('provision for taxation previous year', 27), (' income tax', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' income tax expense', 52), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 40), ('earlier year', 35), ('amount transferred to retained earnings', 32), ('deferred tax', 30), ('prior year ', 29), (' income tax benefit', 29), ('current tax', 27), ('provision for taxation previous year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('prior year ', 39), (' income tax benefit', 37), ('provision for taxation previous year', 36), ('earlier year', 36), (' tax (expense)/benefit', 36), ('amount transferred to retained earnings', 33), (' income tax', 33), (' income tax expense', 32), ('current tax', 31), (' income tax benefit/(expense)', 31), ('minimum alternate tax credit entitlement', 30), ('deferred tax', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' income tax expense', 59), (' income tax benefit/(expense)', 58), ('amount transferred to retained earnings', 54), (' tax (expense)/benefit', 51), ('minimum alternate tax credit entitlement', 42), (' income tax benefit', 37), ('provision for taxation previous year', 36), ('earlier year', 36), ('deferred tax', 33), ('prior year ', 32), (' income tax', 27), ('current tax', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': -2475839.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['10'], 'line_item_value': [-2475839.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['current tax', 'deferred tax', 'minimum alternate tax credit entitlement', 'amount transferred to retained earnings', 'provision for taxation previous year', 'earlier year', 'prior year ', ' income tax expense', ' income tax', ' income tax benefit', ' income tax benefit/(expense)', ' tax (expense)/benefit'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('amount transferred to retained earnings', 41), ('prior year ', 36), ('current tax', 35), ('provision for taxation previous year', 34), (' income tax benefit', 34), ('earlier year', 33), (' tax (expense)/benefit', 33), ('minimum alternate tax credit entitlement', 32), (' income tax expense', 29), (' income tax', 29), (' income tax benefit/(expense)', 28), ('deferred tax', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('current tax', 35), ('earlier year', 33), ('deferred tax', 27), (' income tax expense', 27), ('minimum alternate tax credit entitlement', 26), (' income tax benefit', 26), ('prior year ', 25), (' tax (expense)/benefit', 25), ('provision for taxation previous year', 23), (' income tax benefit/(expense)', 20), ('amount transferred to retained earnings', 18), (' income tax', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [(' income tax', 44), ('current tax', 40), ('prior year ', 32), (' income tax expense', 32), (' income tax benefit', 31), (' tax (expense)/benefit', 30), ('earlier year', 29), ('amount transferred to retained earnings', 28), ('provision for taxation previous year', 26), (' income tax benefit/(expense)', 24), ('deferred tax', 22), ('minimum alternate tax credit entitlement', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('provision for taxation previous year', 39), ('prior year ', 36), ('deferred tax', 29), (' income tax expense', 29), (' income tax', 29), ('current tax', 26), ('amount transferred to retained earnings', 26), ('earlier year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax benefit/(expense)', 22), (' income tax benefit', 21), (' tax (expense)/benefit', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [(' tax (expense)/benefit', 46), ('earlier year', 40), (' income tax benefit/(expense)', 38), ('deferred tax', 35), (' income tax', 35), ('amount transferred to retained earnings', 34), ('prior year ', 33), (' income tax expense', 33), ('current tax', 32), ('minimum alternate tax credit entitlement', 25), (' income tax benefit', 24), ('provision for taxation previous year', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('amount transferred to retained earnings', 43), (' income tax expense', 40), (' income tax benefit', 39), ('provision for taxation previous year', 38), (' income tax', 36), ('prior year ', 34), (' income tax benefit/(expense)', 33), ('earlier year', 32), (' tax (expense)/benefit', 32), ('minimum alternate tax credit entitlement', 31), ('deferred tax', 21), ('current tax', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [(' tax (expense)/benefit', 53), (' income tax benefit/(expense)', 45), (' income tax expense', 38), ('amount transferred to retained earnings', 33), ('deferred tax', 32), ('prior year ', 31), ('current tax', 30), (' income tax benefit', 30), ('minimum alternate tax credit entitlement', 29), ('earlier year', 29), ('provision for taxation previous year', 27), (' income tax', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [(' income tax expense', 62), (' tax (expense)/benefit', 52), (' income tax benefit/(expense)', 49), ('earlier year', 40), ('deferred tax', 36), ('prior year ', 35), ('current tax', 33), (' income tax benefit', 33), ('amount transferred to retained earnings', 30), ('provision for taxation previous year', 29), ('minimum alternate tax credit entitlement', 27), (' income tax', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [(' income tax expense', 57), (' tax (expense)/benefit', 47), (' income tax benefit/(expense)', 44), ('deferred tax', 29), (' income tax benefit', 28), ('current tax', 26), ('earlier year', 25), ('provision for taxation previous year', 24), ('minimum alternate tax credit entitlement', 23), ('amount transferred to retained earnings', 21), (' income tax', 19), ('prior year ', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [(' income tax expense', 55), (' tax (expense)/benefit', 50), (' income tax benefit/(expense)', 40), ('deferred tax', 27), (' income tax benefit', 26), ('prior year ', 25), ('current tax', 24), ('amount transferred to retained earnings', 24), ('earlier year', 22), ('provision for taxation previous year', 17), ('minimum alternate tax credit entitlement', 16), (' income tax', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [(' income tax', 40), ('amount transferred to retained earnings', 37), (' income tax expense', 37), ('current tax', 36), (' income tax benefit', 36), ('prior year ', 29), (' income tax benefit/(expense)', 29), ('minimum alternate tax credit entitlement', 28), (' tax (expense)/benefit', 28), ('provision for taxation previous year', 25), ('deferred tax', 20), ('earlier year', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [(' income tax expense', 52), (' tax (expense)/benefit', 48), (' income tax benefit/(expense)', 40), ('earlier year', 35), ('amount transferred to retained earnings', 32), ('deferred tax', 30), ('prior year ', 29), (' income tax benefit', 29), ('current tax', 27), ('provision for taxation previous year', 25), ('minimum alternate tax credit entitlement', 23), (' income tax', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('prior year ', 39), (' income tax benefit', 37), ('provision for taxation previous year', 36), ('earlier year', 36), (' tax (expense)/benefit', 36), ('amount transferred to retained earnings', 33), (' income tax', 33), (' income tax expense', 32), ('current tax', 31), (' income tax benefit/(expense)', 31), ('minimum alternate tax credit entitlement', 30), ('deferred tax', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [(' income tax expense', 59), (' income tax benefit/(expense)', 58), ('amount transferred to retained earnings', 54), (' tax (expense)/benefit', 51), ('minimum alternate tax credit entitlement', 42), (' income tax benefit', 37), ('provision for taxation previous year', 36), ('earlier year', 36), ('deferred tax', 33), ('prior year ', 32), (' income tax', 27), ('current tax', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('deferred tax', 56), (' income tax benefit', 55), ('provision for taxation previous year', 53), (' tax (expense)/benefit', 53), ('current tax', 52), (' income tax benefit/(expense)', 50), (' income tax expense', 44), ('minimum alternate tax credit entitlement', 42), (' income tax', 40), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('earlier year', 36)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [(' income tax expense', 100), (' income tax benefit/(expense)', 80), (' income tax benefit', 73), (' income tax', 72), (' tax (expense)/benefit', 59), ('deferred tax', 48), ('minimum alternate tax credit entitlement', 46), ('current tax', 44), ('prior year ', 38), ('amount transferred to retained earnings', 37), ('provision for taxation previous year', 36), ('earlier year', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('provision for taxation previous year', 62), ('prior year ', 55), ('earlier year', 52), ('current tax', 40), ('amount transferred to retained earnings', 39), (' tax (expense)/benefit', 38), ('deferred tax', 36), ('minimum alternate tax credit entitlement', 35), (' income tax benefit', 33), (' income tax benefit/(expense)', 33), (' income tax expense', 29), (' income tax', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [(' income tax expense', 63), (' income tax benefit/(expense)', 52), (' income tax benefit', 51), (' income tax', 45), ('prior year ', 44), ('provision for taxation previous year', 43), ('minimum alternate tax credit entitlement', 41), ('amount transferred to retained earnings', 41), ('current tax', 36), (' tax (expense)/benefit', 30), ('earlier year', 29), ('deferred tax', 26)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [(' income tax expense', 51), ('provision for taxation previous year', 47), (' income tax benefit', 46), (' income tax benefit/(expense)', 44), ('prior year ', 40), ('amount transferred to retained earnings', 39), ('earlier year', 38), ('minimum alternate tax credit entitlement', 36), (' income tax', 36), ('current tax', 35), (' tax (expense)/benefit', 34), ('deferred tax', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [15], 'score': 100, 'value': -3655385.0, 'line_item_label': ['Income tax expense'], 'note_numbers': ['10'], 'line_item_value': [-3655385.0]}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) current year , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 78), (' total income tax expense / (benefit)', 77), (' income tax expense on continuing operations', 69), (' total tax (expense)/benefit in income statement', 62), (' current income tax', 53), (' deferred income tax', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) prior year's adjustment , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 77), (' income tax expense on continuing operations', 72), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 71), (' total tax (expense)/benefit in income statement', 62), (' current income tax', 47), (' deferred income tax', 47)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - current year , res_fuzz_match = [('income tax expense', 69), (' total income tax expense / (benefit)', 67), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' total tax (expense)/benefit in income statement', 61), (' deferred income tax', 60), (' current income tax', 53), (' income tax expense on continuing operations', 52)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - prior year's adjustment , res_fuzz_match = [('income tax expense', 69), (' total income tax expense / (benefit)', 67), (' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 56), (' income tax expense on continuing operations', 55), (' current income tax', 47)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 94), (' total income tax expense / (benefit)', 94), (' total tax (expense)/benefit in income statement', 94), (' income tax expense on continuing operations', 67), ('income tax expense', 62), (' deferred income tax', 27), (' current income tax', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) income tax expense , res_fuzz_match = [('income tax expense', 100), (' total tax (expense)/benefit in income statement', 84), (' deferred income tax', 80), (' current income tax', 76), (' total income tax expense / (benefit)', 69), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 66), (' income tax expense on continuing operations', 55)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' current income tax', 65), (' total income tax expense / (benefit)', 65), (' income tax expense on continuing operations', 55), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' total income tax expense / (benefit)', 70), (' income tax expense on continuing operations', 69), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 69), (' total income tax expense / (benefit)', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('income tax expense', 62), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' current income tax', 41)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [(' current income tax', 65), ('income tax expense', 56), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 45)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 56), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total tax (expense)/benefit in income statement', 45), (' current income tax', 41)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('income tax expense', 75), (' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 51), (' current income tax', 47), (' deferred income tax', 47)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 10.3current tax assets and liabilities , res_fuzz_match = [(' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), ('income tax expense', 50), (' total income tax expense / (benefit)', 41), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 39), (' income tax expense on continuing operations', 36)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): income tax receivable/(payable) , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 67), (' current income tax', 65), (' total income tax expense / (benefit)', 58), (' income tax expense on continuing operations', 52), (' total tax (expense)/benefit in income statement', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): , res_fuzz_match = [(' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' total tax (expense)/benefit in income statement', 46), ('income tax expense', 44), (' total income tax expense / (benefit)', 42), (' deferred income tax', 40), (' income tax expense on continuing operations', 38)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) current year , res_fuzz_match = [('income tax expense', 100), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 78), (' total income tax expense / (benefit)', 77), (' income tax expense on continuing operations', 69), (' total tax (expense)/benefit in income statement', 62), (' current income tax', 53), (' deferred income tax', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = income tax expense(benefit) prior year's adjustment , res_fuzz_match = [('income tax expense', 100), (' total income tax expense / (benefit)', 77), (' income tax expense on continuing operations', 72), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 71), (' total tax (expense)/benefit in income statement', 62), (' current income tax', 47), (' deferred income tax', 47)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - current year , res_fuzz_match = [('income tax expense', 69), (' total income tax expense / (benefit)', 67), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 64), (' total tax (expense)/benefit in income statement', 61), (' deferred income tax', 60), (' current income tax', 53), (' income tax expense on continuing operations', 52)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) deferred tax expense(benefit) - prior year's adjustment , res_fuzz_match = [('income tax expense', 69), (' total income tax expense / (benefit)', 67), (' deferred income tax', 60), (' total tax (expense)/benefit in income statement', 60), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 56), (' income tax expense on continuing operations', 55), (' current income tax', 47)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) , res_fuzz_match = [(' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 94), (' total income tax expense / (benefit)', 94), (' total tax (expense)/benefit in income statement', 94), (' income tax expense on continuing operations', 67), ('income tax expense', 62), (' deferred income tax', 27), (' current income tax', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax expense(benefit) income tax expense , res_fuzz_match = [('income tax expense', 100), (' total tax (expense)/benefit in income statement', 84), (' deferred income tax', 80), (' current income tax', 76), (' total income tax expense / (benefit)', 69), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 66), (' income tax expense on continuing operations', 55)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' current income tax', 65), (' total income tax expense / (benefit)', 65), (' income tax expense on continuing operations', 55), (' total tax (expense)/benefit in income statement', 48), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense profit before tax , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' total income tax expense / (benefit)', 70), (' income tax expense on continuing operations', 69), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 62), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 10.2 reconciliation of prima-facie income tax to tax expense tax at the rate of 30% (2021: 30%) , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 73), (' income tax expense on continuing operations', 69), (' total income tax expense / (benefit)', 67), (' current income tax', 65), (' total tax (expense)/benefit in income statement', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 49)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense non-deductible entertainment , res_fuzz_match = [('income tax expense', 62), (' income tax expense on continuing operations', 55), (' total income tax expense / (benefit)', 50), (' total tax (expense)/benefit in income statement', 48), (' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 47), (' current income tax', 41)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of current tax liability in prior year , res_fuzz_match = [(' current income tax', 65), ('income tax expense', 56), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 50), (' deferred income tax', 47), (' total tax (expense)/benefit in income statement', 45)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense over/under provisions of deferred tax in prior year , res_fuzz_match = [(' deferred income tax', 60), ('income tax expense', 56), (' income tax expense on continuing operations', 52), (' total income tax expense / (benefit)', 50), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 46), (' total tax (expense)/benefit in income statement', 45), (' current income tax', 41)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = tax effect of share of non-deductible expense tax expense for the year , res_fuzz_match = [('income tax expense', 75), (' income tax expense on continuing operations', 62), (' total income tax expense / (benefit)', 57), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 51), (' total tax (expense)/benefit in income statement', 51), (' current income tax', 47), (' deferred income tax', 47)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = 10.3current tax assets and liabilities , res_fuzz_match = [(' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 54), ('income tax expense', 50), (' total income tax expense / (benefit)', 41), (' deferred income tax', 40), (' total tax (expense)/benefit in income statement', 39), (' income tax expense on continuing operations', 36)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): income tax receivable/(payable) , res_fuzz_match = [('income tax expense', 75), (' deferred income tax', 67), (' current income tax', 65), (' total income tax expense / (benefit)', 58), (' income tax expense on continuing operations', 52), (' total tax (expense)/benefit in income statement', 52), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = current tax assets/(liabilities): , res_fuzz_match = [(' current income tax', 65), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 58), (' total tax (expense)/benefit in income statement', 46), ('income tax expense', 44), (' total income tax expense / (benefit)', 42), (' deferred income tax', 40), (' income tax expense on continuing operations', 38)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [0, 1, 5, 6, 17, 18, 22, 23], 'score': [100, 100, 94, 100, 100, 100, 94, 100], 'value': [3876839.0, 4173.0, -225627.0, 3655385.0, 2808004.0, 188467.0, -520632.0, 2475839.0], 'label': [' Income tax expense(benefit) current year', " income tax expense(benefit) prior year's adjustment", 'tax expense(benefit) ', 'tax expense(benefit) Income tax expense', ' Income tax expense(benefit) current year', " income tax expense(benefit) prior year's adjustment", 'tax expense(benefit) ', 'tax expense(benefit) Income tax expense'], 'year': [], 'colname_found': ['rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows', 'rows']}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['income tax expense', ' current income tax', ' deferred income tax', ' total income tax expense/(benefit) recognised in the current year relating to continuing operations', ' income tax expense on continuing operations', ' total income tax expense / (benefit)', ' total tax (expense)/benefit in income statement'] , match_type = partial , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total tax (expense)/benefit in income statement', 34), ('income tax expense', 31), (' income tax expense on continuing operations', 31), (' total income tax expense / (benefit)', 28)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred income tax', 73), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 34), (' total income tax expense / (benefit)', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), ('income tax expense', 38), (' current income tax', 35), (' income tax expense on continuing operations', 34), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), ('income tax expense', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), (' total income tax expense / (benefit)', 34), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31), (' income tax expense on continuing operations', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 31), (' total tax (expense)/benefit in income statement', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 36), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 32), (' total income tax expense / (benefit)', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 37), (' current income tax', 35), (' total income tax expense / (benefit)', 33), ('income tax expense', 31), (' total tax (expense)/benefit in income statement', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' income tax expense on continuing operations', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), ('income tax expense', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' income tax expense on continuing operations', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' current income tax', 41), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 37), (' total income tax expense / (benefit)', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 33), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31), (' current income tax', 29), (' total income tax expense / (benefit)', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total tax (expense)/benefit in income statement', 34), ('income tax expense', 31), (' income tax expense on continuing operations', 31), (' total income tax expense / (benefit)', 28)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred income tax', 73), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 34), (' total income tax expense / (benefit)', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), ('income tax expense', 38), (' current income tax', 35), (' income tax expense on continuing operations', 34), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), ('income tax expense', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), (' total income tax expense / (benefit)', 34), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31), (' income tax expense on continuing operations', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 31), (' total tax (expense)/benefit in income statement', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 36), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 32), (' total income tax expense / (benefit)', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 37), (' current income tax', 35), (' total income tax expense / (benefit)', 33), ('income tax expense', 31), (' total tax (expense)/benefit in income statement', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' income tax expense on continuing operations', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), ('income tax expense', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' income tax expense on continuing operations', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' current income tax', 41), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 37), (' total income tax expense / (benefit)', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 33), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31), (' current income tax', 29), (' total income tax expense / (benefit)', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: accruals , res_fuzz_match = [(' deferred income tax', 60), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' total tax (expense)/benefit in income statement', 34), ('income tax expense', 31), (' income tax expense on continuing operations', 31), (' total income tax expense / (benefit)', 28)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: deferred income , res_fuzz_match = [(' deferred income tax', 73), (' current income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' total tax (expense)/benefit in income statement', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 34), (' total income tax expense / (benefit)', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: employee provisions , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), ('income tax expense', 38), (' current income tax', 35), (' income tax expense on continuing operations', 34), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: intangible asset , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), ('income tax expense', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 42), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 38), (' total income tax expense / (benefit)', 37)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: lease liability , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), (' total income tax expense / (benefit)', 34), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31), (' income tax expense on continuing operations', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: make good provisions , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 31), (' total tax (expense)/benefit in income statement', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: open derivative contracts , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 47), (' income tax expense on continuing operations', 45), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' total income tax expense / (benefit)', 40), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 38)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: prepayments , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 36), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 32), (' total income tax expense / (benefit)', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: property, plant and equipment , res_fuzz_match = [(' deferred income tax', 53), (' current income tax', 41), (' income tax expense on continuing operations', 41), (' total income tax expense / (benefit)', 40), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' total tax (expense)/benefit in income statement', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: provision for doubtful debts , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 37), (' current income tax', 35), (' total income tax expense / (benefit)', 33), ('income tax expense', 31), (' total tax (expense)/benefit in income statement', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: right of use assets , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 41), ('income tax expense', 38), (' total income tax expense / (benefit)', 37), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 35), (' income tax expense on continuing operations', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision cranes , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 39), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total income tax expense / (benefit)', 38), (' current income tax', 35), (' total tax (expense)/benefit in income statement', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: slow moving provision parts , res_fuzz_match = [(' deferred income tax', 53), (' income tax expense on continuing operations', 41), ('income tax expense', 38), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: unrealised fx , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 40), ('income tax expense', 38), (' current income tax', 35), (' total income tax expense / (benefit)', 33), (' total tax (expense)/benefit in income statement', 33), (' income tax expense on continuing operations', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: others , res_fuzz_match = [(' deferred income tax', 53), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 44), (' current income tax', 41), ('income tax expense', 38), (' income tax expense on continuing operations', 38), (' total tax (expense)/benefit in income statement', 37), (' total income tax expense / (benefit)', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows = timing difference arising from: , res_fuzz_match = [(' deferred income tax', 47), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 43), (' income tax expense on continuing operations', 33), (' total tax (expense)/benefit in income statement', 33), ('income tax expense', 31), (' current income tax', 29), (' total income tax expense / (benefit)', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_rows =  , res_fuzz_match = [('income tax expense', 0), (' current income tax', 0), (' deferred income tax', 0), (' total income tax expense/(benefit) recognised in the current year relating to continuing operations', 0), (' income tax expense on continuing operations', 0), (' total income tax expense / (benefit)', 0), (' total tax (expense)/benefit in income statement', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': [], 'value': [], 'label': [], 'year': [], 'colname_found': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['share of', 'share in']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_minority_interest
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('share of', 31), ('share in', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['share of', 'share in'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('share of', 36), ('share in', 36)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('share of', 43), ('share in', 43)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('share of', 24), ('share in', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('share of', 31), ('share in', 31)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('share of', 29), ('share in', 29)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('share of', 44), ('share in', 44)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('share of', 12), ('share in', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('share of', 18), ('share in', 18)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('share of', 23), ('share in', 23)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('share of', 10), ('share in', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('share of', 19), ('share in', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('share of', 25), ('share in', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('share of', 22), ('share in', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('share of', 20), ('share in', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['exceptional', 'prior period']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_extraordinary_gain_loss
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('exceptional', 43), ('prior period', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('prior period', 32), ('exceptional', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('prior period', 29), ('exceptional', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional', 42), ('prior period', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('exceptional', 35), ('prior period', 26)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('prior period', 36), ('exceptional', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('prior period', 36), ('exceptional', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 34), ('exceptional', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['exceptional', 'prior period'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('prior period', 33), ('exceptional', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('exceptional', 33), ('prior period', 11)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('exceptional', 27), ('prior period', 19)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('prior period', 50), ('exceptional', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('exceptional', 43), ('prior period', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('prior period', 32), ('exceptional', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('prior period', 29), ('exceptional', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('exceptional', 42), ('prior period', 32)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('exceptional', 44), ('prior period', 33)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('exceptional', 50), ('prior period', 22)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('prior period', 26), ('exceptional', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('exceptional', 35), ('prior period', 26)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('prior period', 36), ('exceptional', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('prior period', 36), ('exceptional', 30)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('prior period', 43), ('exceptional', 27)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('exceptional', 36), ('prior period', 36)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('prior period', 39), ('exceptional', 16)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('prior period', 41), ('exceptional', 21)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('prior period', 34), ('exceptional', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_keywords
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_notes_pages_exclude_keyowrds
2023-05-09 11:12:41+0530 - sLogger - DEBUG - df_meta_keyword = smr_other
2023-05-09 11:12:41+0530 - sLogger - DEBUG - list_target_keywords = ['NULL']
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('NULL', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('NULL', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('NULL', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
2023-05-09 11:12:41+0530 - sLogger - DEBUG - module: Keyword Mapping , File:DatabucketingUtils.py,  function: get_main_page_line_items
2023-05-09 11:12:41+0530 - sLogger - DEBUG - keywords = ['NULL'] , match_type = NULL , conf_score_thresh =80
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = continuing operations , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = revenue , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = cost of sales , res_fuzz_match = [('NULL', 15)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = gross profit , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = interest , res_fuzz_match = [('NULL', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other gains and losses , res_fuzz_match = [('NULL', 17)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = distribution expenses , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = marketing expenses , res_fuzz_match = [('NULL', 12)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = occupancy expenses , res_fuzz_match = [('NULL', 25)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = expenses , res_fuzz_match = [('NULL', 20)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = finance costs , res_fuzz_match = [('NULL', 13)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = selling expenses , res_fuzz_match = [('NULL', 40)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = loss on revaluation of inventories , res_fuzz_match = [('NULL', 24)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other expenses and gains , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit before tax , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = income tax expense , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = profit for the year , res_fuzz_match = [('NULL', 0)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = other comprehensive income , res_fuzz_match = [('NULL', 8)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - txt_particular = total comprehensive income for the year , res_fuzz_match = [('NULL', 10)]
2023-05-09 11:12:41+0530 - sLogger - DEBUG - best_match = {'data_index': [], 'score': 0, 'value': 0, 'line_item_label': [], 'note_numbers': [], 'line_item_value': []}
